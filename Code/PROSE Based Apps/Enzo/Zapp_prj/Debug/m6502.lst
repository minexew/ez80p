Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.3
                           A     2    ; -nomodsect -optspeed -noreduceopt -peephole -globalopt
                           A     3    ; -localcse -const=ROM 
                           A     4    	FILE	"..\M6502.C"
                           A     5    	.assume ADL=1
                           A     6    	SEGMENT BSS
000000                     A     7    _accumulator:
000000                     A     8    	DS	1
000001                     A     9    _xRegister:
000001                     A    10    	DS	1
000002                     A    11    _yRegister:
000002                     A    12    	DS	1
                           A    13    	SEGMENT DATA
000000                     A    14    _statusRegister:
000000 24                  A    15    	DB	36
                           A    16    	SEGMENT BSS
000003                     A    17    _stackPointer:
000003                     A    18    	DS	1
                           A    19    	SEGMENT DATA
000001                     A    20    _IRQ:
000001 0000                A    21    	DW	0
000003 00                  A    22    	DB	0
000004                     A    23    _NMI:
000004 0000                A    24    	DW	0
000006 00                  A    25    	DB	0
                           A    26    	SEGMENT BSS
000004                     A    27    _programCounter:
000004                     A    28    	DS	3
000007                     A    29    _btmp:
000007                     A    30    	DS	1
000008                     A    31    _op:
000008                     A    32    	DS	3
00000B                     A    33    _opH:
00000B                     A    34    	DS	3
00000E                     A    35    _opL:
00000E                     A    36    	DS	3
000011                     A    37    _ptr:
000011                     A    38    	DS	3
000014                     A    39    _ptrH:
000014                     A    40    	DS	3
000017                     A    41    _ptrL:
000017                     A    42    	DS	3
00001A                     A    43    _tmp:
00001A                     A    44    	DS	3
00001D                     A    45    _Cpu_Opcode:
00001D                     A    46    	DS	762
                           A    47    ;    1	#ifndef M6502_C
                           A    48    ;    2	#define M6502_C
                           A    49    ;    3	
                           A    50    ;    4	#define N 0x80
                           A    51    ;    5	#define V 0x40
                           A    52    ;    6	#define M 0x20
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   2


PC     Object              I  Line    Source m6502.src
                           A    53    ;    7	#define B 0x10
                           A    54    ;    8	#define D 0x08
                           A    55    ;    9	#define I 0x04
                           A    56    ;   10	#define Z 0x02
                           A    57    ;   11	#define C 0x01
                           A    58    ;   12	
                           A    59    ;   13	static unsigned char accumulator, xRegister, yRegister, statusRegister = 0x24, stackPointer
                           A    60    ;   14	static int IRQ = 0, NMI = 0;
                           A    61    ;   15	int programCounter;
                           A    62    ;   16	static unsigned char btmp;
                           A    63    ;   17	int op, opH, opL, ptr, ptrH, ptrL, tmp;
                           A    64    ;   18	//static long lastTime = 0;
                           A    65    ;   19	//static int //cycles = 0, //cyclesBeforeSynchro, _synchroMillis;
                           A    66    ;   20	
                           A    67    ;   21	void (*Cpu_Opcode[0xFE])(void);
                           A    68    	SEGMENT CODE
                           A    69    ;   22	
                           A    70    ;   23	/*-------------------------------------------------------------------------------------*/
                           A    71    ;   24	
                           A    72    ;   25	static unsigned short Mem_Read_Absolute(int adr)
                           A    73    ;   26	{
000000                     A    74    _Mem_Read_Absolute:
000000 21FCFFFF            A    75    	LD	HL,-4
000004 CD 00 00 00         A    76    	CALL	__frameset
                           A    77    ;   27		return (Mem_Read(adr) | Mem_Read(adr + 1) << 8);
000008 DD0706              A    78    	LD	BC,(IX+6)
00000B 03                  A    79    	INC	BC
00000C C5                  A    80    	PUSH	BC
00000D CD 00 00 00         A    81    	CALL	_Mem_Read
000011 C1                  A    82    	POP	BC
000012 DD0706              A    83    	LD	BC,(IX+6)
000015 C5                  A    84    	PUSH	BC
000016 3E08                A    85    	LD	A,8
000018 CD 00 00 00         A    86    	CALL	__ishl_b
00001C E5D1                A    87    	LD	DE,HL
00001E DD1FFD              A    88    	LD	(IX+-3),DE
000021 DD72FC              A    89    	LD	(IX+-4),D
000024 CD 00 00 00         A    90    	CALL	_Mem_Read
000028 DD17FD              A    91    	LD	DE,(IX+-3)
00002B DD56FC              A    92    	LD	D,(IX+-4)
00002E C1                  A    93    	POP	BC
00002F E5C1                A    94    	LD	BC,HL
000031 D5E1                A    95    	LD	HL,DE
000033 CD 00 00 00         A    96    	CALL	__ior
                           A    97    ;   28	}
000037 DDF9                A    98    	LD	SP,IX
000039 DDE1                A    99    	POP	IX
00003B C9                  A   100    	RET	
                           A   101    
                           A   102    
                           A   103    ;**************************** _Mem_Read_Absolute ***************************
                           A   104    ;Name                         Addr/Register   Size   Type
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   3


PC     Object              I  Line    Source m6502.src
                           A   105    ;_Mem_Read                           IMPORT  -----   function
                           A   106    ;adr                                   IX+6      3   parameter
                           A   107    
                           A   108    
                           A   109    ; Stack Frame Size: 13 (bytes)
                           A   110    ;       Spill Code: 0 (instruction)
                           A   111    
                           A   112    
                           A   113    ;   29	
                           A   114    ;   30	/*static void Synchronize(void)
                           A   115    ;   31	{
                           A   116    ;   32		long currentTime = Read_MSec_Counter();
                           A   117    ;   33		int realTimeMillis = (int)(currentTime - lastTime);
                           A   118    ;   34		int sleepMillis = _synchroMillis - realTimeMillis;
                           A   119    ;   35		
                           A   120    ;   36		if (sleepMillis < 0)
                           A   121    ;   37			sleepMillis = 5;
                           A   122    ;   38		
                           A   123    ;   39		mDelay(sleepMillis);
                           A   124    ;   40		
                           A   125    ;   41		lastTime = currentTime;
                           A   126    ;   42	}*/
                           A   127    ;   43	
                           A   128    ;   44	static void pushProgramCounter(void)
                           A   129    ;   45	{
00003C                     A   130    _pushProgramCounter:
                           A   131    ;   46		Mem_Write((unsigned short)(stackPointer + 0x100), (unsigned char)(programCounter >> 8))
00003C 2A 04 00 00         A   132    	LD	HL,(_programCounter)
000040 3E08                A   133    	LD	A,8
000042 CD 00 00 00         A   134    	CALL	__ishrs_b
000046 7D                  A   135    	LD	A,L
000047 B7ED62              A   136    	UEXT	HL
00004A 6F                  A   137    	LD	L,A
00004B E5                  A   138    	PUSH	HL
00004C 3A 03 00 00         A   139    	LD	A,(_stackPointer)
000050 B7ED62              A   140    	UEXT	HL
000053 6F                  A   141    	LD	L,A
000054 01000100            A   142    	LD	BC,256
000058 09                  A   143    	ADD	HL,BC
000059 E5C1                A   144    	LD	BC,HL
00005B CD 00 00 00         A   145    	CALL	__stoiu
00005F E5                  A   146    	PUSH	HL
000060 CD 00 00 00         A   147    	CALL	_Mem_Write
000064 C1                  A   148    	POP	BC
000065 C1                  A   149    	POP	BC
                           A   150    ;   47		Mem_Write((unsigned short)(stackPointer + 0xFF), (unsigned char)programCounter);	
000066 3A 04 00 00         A   151    	LD	A,(_programCounter)
00006A B7ED62              A   152    	UEXT	HL
00006D 6F                  A   153    	LD	L,A
00006E E5                  A   154    	PUSH	HL
00006F 3A 03 00 00         A   155    	LD	A,(_stackPointer)
000073 B7ED62              A   156    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   4


PC     Object              I  Line    Source m6502.src
000076 6F                  A   157    	LD	L,A
000077 01FF0000            A   158    	LD	BC,255
00007B 09                  A   159    	ADD	HL,BC
00007C E5C1                A   160    	LD	BC,HL
00007E CD 00 00 00         A   161    	CALL	__stoiu
000082 E5                  A   162    	PUSH	HL
000083 CD 00 00 00         A   163    	CALL	_Mem_Write
000087 C1                  A   164    	POP	BC
000088 C1                  A   165    	POP	BC
                           A   166    ;   48		
                           A   167    ;   49		stackPointer -= 2;
000089 3A 03 00 00         A   168    	LD	A,(_stackPointer)
00008D 3D                  A   169    	DEC	A
00008E 3D                  A   170    	DEC	A
00008F 32 03 00 00         A   171    	LD	(_stackPointer),A
                           A   172    ;   50		
                           A   173    ;   51		//cycles += 2;
                           A   174    ;   52	}
000093 C9                  A   175    	RET	
                           A   176    
                           A   177    
                           A   178    ;**************************** _pushProgramCounter ***************************
                           A   179    ;Name                         Addr/Register   Size   Type
                           A   180    ;_stackPointer                       STATIC      1   variable
                           A   181    ;_programCounter                     STATIC      3   variable
                           A   182    ;_Mem_Write                          IMPORT  -----   function
                           A   183    
                           A   184    
                           A   185    ; Stack Frame Size: 6 (bytes)
                           A   186    ;       Spill Code: 0 (instruction)
                           A   187    
                           A   188    
                           A   189    ;   53	
                           A   190    ;   54	static void popProgramCounter(void)
                           A   191    ;   55	{
000094                     A   192    _popProgramCounter:
                           A   193    ;   56		stackPointer++;
000094 3A 03 00 00         A   194    	LD	A,(_stackPointer)
000098 3C                  A   195    	INC	A
                           A   196    ;   57		
                           A   197    ;   58		programCounter = Mem_Read((unsigned short)(stackPointer + 0x100));
000099 B7ED62              A   198    	UEXT	HL
00009C 6F                  A   199    	LD	L,A
00009D 01000100            A   200    	LD	BC,256
0000A1 09                  A   201    	ADD	HL,BC
0000A2 E5C1                A   202    	LD	BC,HL
0000A4 CD 00 00 00         A   203    	CALL	__stoiu
0000A8 E5                  A   204    	PUSH	HL
0000A9 32 03 00 00         A   205    	LD	(_stackPointer),A
0000AD CD 00 00 00         A   206    	CALL	_Mem_Read
0000B1 C1                  A   207    	POP	BC
0000B2 22 04 00 00         A   208    	LD	(_programCounter),HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   5


PC     Object              I  Line    Source m6502.src
                           A   209    ;   59		
                           A   210    ;   60		stackPointer++;
0000B6 3A 03 00 00         A   211    	LD	A,(_stackPointer)
0000BA 3C                  A   212    	INC	A
                           A   213    ;   61		
                           A   214    ;   62		programCounter += Mem_Read((unsigned short)(stackPointer + 0x100)) << 8;
0000BB B7ED62              A   215    	UEXT	HL
0000BE 6F                  A   216    	LD	L,A
0000BF 01000100            A   217    	LD	BC,256
0000C3 09                  A   218    	ADD	HL,BC
0000C4 E5C1                A   219    	LD	BC,HL
0000C6 CD 00 00 00         A   220    	CALL	__stoiu
0000CA E5                  A   221    	PUSH	HL
0000CB 32 03 00 00         A   222    	LD	(_stackPointer),A
0000CF CD 00 00 00         A   223    	CALL	_Mem_Read
0000D3 C1                  A   224    	POP	BC
0000D4 ED4B 04 00 00       A   225    	LD	BC,(_programCounter)
0000D9 3E08                A   226    	LD	A,8
0000DB CD 00 00 00         A   227    	CALL	__ishl_b
0000DF 09                  A   228    	ADD	HL,BC
0000E0 22 04 00 00         A   229    	LD	(_programCounter),HL
                           A   230    ;   63		
                           A   231    ;   64		//cycles += 2;
                           A   232    ;   65	}
0000E4 C9                  A   233    	RET	
                           A   234    
                           A   235    
                           A   236    ;**************************** _popProgramCounter ***************************
                           A   237    ;Name                         Addr/Register   Size   Type
                           A   238    ;_programCounter                     STATIC      3   variable
                           A   239    ;_Mem_Read                           IMPORT  -----   function
                           A   240    ;_stackPointer                       STATIC      1   variable
                           A   241    
                           A   242    
                           A   243    ; Stack Frame Size: 6 (bytes)
                           A   244    ;       Spill Code: 0 (instruction)
                           A   245    
                           A   246    
                           A   247    ;   66	
                           A   248    ;   67	static void handleIRQ(void)
                           A   249    ;   68	{
0000E5                     A   250    _handleIRQ:
                           A   251    ;   69		pushProgramCounter();
0000E5 CD 3C 00 00         A   252    	CALL	_pushProgramCounter
                           A   253    ;   70		
                           A   254    ;   71		Mem_Write((unsigned short)(0x100 + stackPointer), (unsigned char)(statusRegister & ~0x1
0000E9 3A 00 00 00         A   255    	LD	A,(_statusRegister)
0000ED CBA7                A   256    	RES	4,A
0000EF B7ED62              A   257    	UEXT	HL
0000F2 6F                  A   258    	LD	L,A
0000F3 E5                  A   259    	PUSH	HL
0000F4 3A 03 00 00         A   260    	LD	A,(_stackPointer)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   6


PC     Object              I  Line    Source m6502.src
0000F8 B7ED62              A   261    	UEXT	HL
0000FB 6F                  A   262    	LD	L,A
0000FC 01000100            A   263    	LD	BC,256
000100 09                  A   264    	ADD	HL,BC
000101 E5C1                A   265    	LD	BC,HL
000103 CD 00 00 00         A   266    	CALL	__stoiu
000107 E5                  A   267    	PUSH	HL
000108 CD 00 00 00         A   268    	CALL	_Mem_Write
00010C C1                  A   269    	POP	BC
00010D C1                  A   270    	POP	BC
                           A   271    ;   72		
                           A   272    ;   73		stackPointer--;
00010E 3A 03 00 00         A   273    	LD	A,(_stackPointer)
                           A   274    ;   74		
                           A   275    ;   75		statusRegister |= I;
                           A   276    ;   76		
                           A   277    ;   77		programCounter = Mem_Read_Absolute(0xFFFE);
000112 01FEFF00            A   278    	LD	BC,65534
000116 C5                  A   279    	PUSH	BC
000117 3D                  A   280    	DEC	A
000118 32 03 00 00         A   281    	LD	(_stackPointer),A
00011C 3A 00 00 00         A   282    	LD	A,(_statusRegister)
000120 CBD7                A   283    	SET	2,A
000122 32 00 00 00         A   284    	LD	(_statusRegister),A
000126 CD 00 00 00         A   285    	CALL	_Mem_Read_Absolute
00012A C1                  A   286    	POP	BC
00012B E5C1                A   287    	LD	BC,HL
00012D CD 00 00 00         A   288    	CALL	__stoiu
000131 22 04 00 00         A   289    	LD	(_programCounter),HL
                           A   290    ;   78		
                           A   291    ;   79		//cycles += 8;
                           A   292    ;   80	}
000135 C9                  A   293    	RET	
                           A   294    
                           A   295    
                           A   296    ;**************************** _handleIRQ ***************************
                           A   297    ;Name                         Addr/Register   Size   Type
                           A   298    ;_programCounter                     STATIC      3   variable
                           A   299    ;_stackPointer                       STATIC      1   variable
                           A   300    ;_statusRegister                     STATIC      1   variable
                           A   301    ;_Mem_Write                          IMPORT  -----   function
                           A   302    
                           A   303    
                           A   304    ; Stack Frame Size: 6 (bytes)
                           A   305    ;       Spill Code: 0 (instruction)
                           A   306    
                           A   307    
                           A   308    ;   81	
                           A   309    ;   82	static void handleNMI(void)
                           A   310    ;   83	{
000136                     A   311    _handleNMI:
                           A   312    ;   84		pushProgramCounter();
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   7


PC     Object              I  Line    Source m6502.src
000136 CD 3C 00 00         A   313    	CALL	_pushProgramCounter
                           A   314    ;   85		
                           A   315    ;   86		Mem_Write((unsigned short)(0x100 + stackPointer), (unsigned char)(statusRegister & ~0x1
00013A 3A 00 00 00         A   316    	LD	A,(_statusRegister)
00013E CBA7                A   317    	RES	4,A
000140 B7ED62              A   318    	UEXT	HL
000143 6F                  A   319    	LD	L,A
000144 E5                  A   320    	PUSH	HL
000145 3A 03 00 00         A   321    	LD	A,(_stackPointer)
000149 B7ED62              A   322    	UEXT	HL
00014C 6F                  A   323    	LD	L,A
00014D 01000100            A   324    	LD	BC,256
000151 09                  A   325    	ADD	HL,BC
000152 E5C1                A   326    	LD	BC,HL
000154 CD 00 00 00         A   327    	CALL	__stoiu
000158 E5                  A   328    	PUSH	HL
000159 CD 00 00 00         A   329    	CALL	_Mem_Write
00015D C1                  A   330    	POP	BC
00015E C1                  A   331    	POP	BC
                           A   332    ;   87		
                           A   333    ;   88		stackPointer--;
00015F 3A 03 00 00         A   334    	LD	A,(_stackPointer)
000163 3D                  A   335    	DEC	A
000164 32 03 00 00         A   336    	LD	(_stackPointer),A
                           A   337    ;   89		
                           A   338    ;   90		statusRegister |= I;
                           A   339    ;   91		
                           A   340    ;   92		NMI = 0;
                           A   341    ;   93		
                           A   342    ;   94		programCounter = Mem_Read_Absolute(0xFFFA);
000168 01FAFF00            A   343    	LD	BC,65530
00016C C5                  A   344    	PUSH	BC
00016D 3A 00 00 00         A   345    	LD	A,(_statusRegister)
000171 CBD7                A   346    	SET	2,A
000173 32 00 00 00         A   347    	LD	(_statusRegister),A
000177 01000000            A   348    	LD	BC,0
00017B ED43 04 00 00       A   349    	LD	(_NMI),BC
000180 CD 00 00 00         A   350    	CALL	_Mem_Read_Absolute
000184 C1                  A   351    	POP	BC
000185 E5C1                A   352    	LD	BC,HL
000187 CD 00 00 00         A   353    	CALL	__stoiu
00018B 22 04 00 00         A   354    	LD	(_programCounter),HL
                           A   355    ;   95		
                           A   356    ;   96		//cycles += 8;
                           A   357    ;   97	}
00018F C9                  A   358    	RET	
                           A   359    
                           A   360    
                           A   361    ;**************************** _handleNMI ***************************
                           A   362    ;Name                         Addr/Register   Size   Type
                           A   363    ;_programCounter                     STATIC      3   variable
                           A   364    ;_NMI                                STATIC      3   variable
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   8


PC     Object              I  Line    Source m6502.src
                           A   365    ;_stackPointer                       STATIC      1   variable
                           A   366    ;_statusRegister                     STATIC      1   variable
                           A   367    ;_Mem_Write                          IMPORT  -----   function
                           A   368    
                           A   369    
                           A   370    ; Stack Frame Size: 6 (bytes)
                           A   371    ;       Spill Code: 0 (instruction)
                           A   372    
                           A   373    
                           A   374    ;   98	
                           A   375    ;   99	static void Imm(void)
                           A   376    ;  100	{
000190                     A   377    _Imm:
                           A   378    ;  101		op = programCounter++;
000190 ED4B 04 00 00       A   379    	LD	BC,(_programCounter)
000195 ED43 08 00 00       A   380    	LD	(_op),BC
00019A ED4B 04 00 00       A   381    	LD	BC,(_programCounter)
00019F 03                  A   382    	INC	BC
0001A0 ED43 04 00 00       A   383    	LD	(_programCounter),BC
                           A   384    ;  102	}
0001A5 C9                  A   385    	RET	
                           A   386    
                           A   387    
                           A   388    ;**************************** _Imm ***************************
                           A   389    ;Name                         Addr/Register   Size   Type
                           A   390    ;_op                                 STATIC      3   variable
                           A   391    ;_programCounter                     STATIC      3   variable
                           A   392    
                           A   393    
                           A   394    ; Stack Frame Size: 6 (bytes)
                           A   395    ;       Spill Code: 0 (instruction)
                           A   396    
                           A   397    
                           A   398    ;  103	
                           A   399    ;  104	static void Zero(void)
                           A   400    ;  105	{
0001A6                     A   401    _Zero:
                           A   402    ;  106		op = Mem_Read(programCounter++);
0001A6 ED4B 04 00 00       A   403    	LD	BC,(_programCounter)
0001AB C5                  A   404    	PUSH	BC
0001AC ED4B 04 00 00       A   405    	LD	BC,(_programCounter)
0001B1 03                  A   406    	INC	BC
0001B2 ED43 04 00 00       A   407    	LD	(_programCounter),BC
0001B7 CD 00 00 00         A   408    	CALL	_Mem_Read
0001BB C1                  A   409    	POP	BC
0001BC 22 08 00 00         A   410    	LD	(_op),HL
                           A   411    ;  107		
                           A   412    ;  108		//cycles++;
                           A   413    ;  109	}
0001C0 C9                  A   414    	RET	
                           A   415    
                           A   416    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:   9


PC     Object              I  Line    Source m6502.src
                           A   417    ;**************************** _Zero ***************************
                           A   418    ;Name                         Addr/Register   Size   Type
                           A   419    ;_op                                 STATIC      3   variable
                           A   420    ;_Mem_Read                           IMPORT  -----   function
                           A   421    ;_programCounter                     STATIC      3   variable
                           A   422    
                           A   423    
                           A   424    ; Stack Frame Size: 6 (bytes)
                           A   425    ;       Spill Code: 0 (instruction)
                           A   426    
                           A   427    
                           A   428    ;  110	
                           A   429    ;  111	static void ZeroX(void)
                           A   430    ;  112	{
0001C1                     A   431    _ZeroX:
                           A   432    ;  113		op = (Mem_Read(programCounter++) + xRegister) & 0xFF;
0001C1 ED4B 04 00 00       A   433    	LD	BC,(_programCounter)
0001C6 C5                  A   434    	PUSH	BC
0001C7 ED4B 04 00 00       A   435    	LD	BC,(_programCounter)
0001CC 03                  A   436    	INC	BC
0001CD ED43 04 00 00       A   437    	LD	(_programCounter),BC
0001D2 CD 00 00 00         A   438    	CALL	_Mem_Read
0001D6 C1                  A   439    	POP	BC
0001D7 E5C1                A   440    	LD	BC,HL
0001D9 3A 01 00 00         A   441    	LD	A,(_xRegister)
0001DD B7ED62              A   442    	UEXT	HL
0001E0 6F                  A   443    	LD	L,A
0001E1 09                  A   444    	ADD	HL,BC
0001E2 7D                  A   445    	LD	A,L
0001E3 B7ED62              A   446    	UEXT	HL
0001E6 6F                  A   447    	LD	L,A
0001E7 22 08 00 00         A   448    	LD	(_op),HL
                           A   449    ;  114		
                           A   450    ;  115		//cycles++;
                           A   451    ;  116	}
0001EB C9                  A   452    	RET	
                           A   453    
                           A   454    
                           A   455    ;**************************** _ZeroX ***************************
                           A   456    ;Name                         Addr/Register   Size   Type
                           A   457    ;_op                                 STATIC      3   variable
                           A   458    ;_xRegister                          STATIC      1   variable
                           A   459    ;_Mem_Read                           IMPORT  -----   function
                           A   460    ;_programCounter                     STATIC      3   variable
                           A   461    
                           A   462    
                           A   463    ; Stack Frame Size: 6 (bytes)
                           A   464    ;       Spill Code: 0 (instruction)
                           A   465    
                           A   466    
                           A   467    ;  117	
                           A   468    ;  118	static void ZeroY(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  10


PC     Object              I  Line    Source m6502.src
                           A   469    ;  119	{
0001EC                     A   470    _ZeroY:
                           A   471    ;  120		op = (Mem_Read(programCounter++) + yRegister) & 0xFF;
0001EC ED4B 04 00 00       A   472    	LD	BC,(_programCounter)
0001F1 C5                  A   473    	PUSH	BC
0001F2 ED4B 04 00 00       A   474    	LD	BC,(_programCounter)
0001F7 03                  A   475    	INC	BC
0001F8 ED43 04 00 00       A   476    	LD	(_programCounter),BC
0001FD CD 00 00 00         A   477    	CALL	_Mem_Read
000201 C1                  A   478    	POP	BC
000202 E5C1                A   479    	LD	BC,HL
000204 3A 02 00 00         A   480    	LD	A,(_yRegister)
000208 B7ED62              A   481    	UEXT	HL
00020B 6F                  A   482    	LD	L,A
00020C 09                  A   483    	ADD	HL,BC
00020D 7D                  A   484    	LD	A,L
00020E B7ED62              A   485    	UEXT	HL
000211 6F                  A   486    	LD	L,A
000212 22 08 00 00         A   487    	LD	(_op),HL
                           A   488    ;  121		
                           A   489    ;  122		//cycles++;
                           A   490    ;  123	}
000216 C9                  A   491    	RET	
                           A   492    
                           A   493    
                           A   494    ;**************************** _ZeroY ***************************
                           A   495    ;Name                         Addr/Register   Size   Type
                           A   496    ;_op                                 STATIC      3   variable
                           A   497    ;_yRegister                          STATIC      1   variable
                           A   498    ;_Mem_Read                           IMPORT  -----   function
                           A   499    ;_programCounter                     STATIC      3   variable
                           A   500    
                           A   501    
                           A   502    ; Stack Frame Size: 6 (bytes)
                           A   503    ;       Spill Code: 0 (instruction)
                           A   504    
                           A   505    
                           A   506    ;  124	
                           A   507    ;  125	static void Abs(void)
                           A   508    ;  126	{
000217                     A   509    _Abs:
                           A   510    ;  127		op = Mem_Read_Absolute(programCounter);
000217 ED4B 04 00 00       A   511    	LD	BC,(_programCounter)
00021C C5                  A   512    	PUSH	BC
00021D CD 00 00 00         A   513    	CALL	_Mem_Read_Absolute
000221 C1                  A   514    	POP	BC
000222 E5C1                A   515    	LD	BC,HL
000224 CD 00 00 00         A   516    	CALL	__stoiu
000228 22 08 00 00         A   517    	LD	(_op),HL
                           A   518    ;  128		
                           A   519    ;  129		programCounter += 2;
00022C FD2A 04 00 00       A   520    	LD	IY,(_programCounter)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  11


PC     Object              I  Line    Source m6502.src
000231 ED0302              A   521    	LEA	BC,IY+2
000234 ED43 04 00 00       A   522    	LD	(_programCounter),BC
                           A   523    ;  130		//cycles += 2;
                           A   524    ;  131	}
000239 C9                  A   525    	RET	
                           A   526    
                           A   527    
                           A   528    ;**************************** _Abs ***************************
                           A   529    ;Name                         Addr/Register   Size   Type
                           A   530    ;_op                                 STATIC      3   variable
                           A   531    ;_programCounter                     STATIC      3   variable
                           A   532    
                           A   533    
                           A   534    ; Stack Frame Size: 6 (bytes)
                           A   535    ;       Spill Code: 0 (instruction)
                           A   536    
                           A   537    
                           A   538    ;  132	
                           A   539    ;  133	static void AbsX(void)
                           A   540    ;  134	{
00023A                     A   541    _AbsX:
                           A   542    ;  135		opL = Mem_Read(programCounter++) + xRegister;
00023A ED4B 04 00 00       A   543    	LD	BC,(_programCounter)
00023F C5                  A   544    	PUSH	BC
000240 ED4B 04 00 00       A   545    	LD	BC,(_programCounter)
000245 03                  A   546    	INC	BC
000246 ED43 04 00 00       A   547    	LD	(_programCounter),BC
00024B CD 00 00 00         A   548    	CALL	_Mem_Read
00024F C1                  A   549    	POP	BC
000250 E5C1                A   550    	LD	BC,HL
000252 3A 01 00 00         A   551    	LD	A,(_xRegister)
000256 B7ED62              A   552    	UEXT	HL
000259 6F                  A   553    	LD	L,A
00025A 09                  A   554    	ADD	HL,BC
00025B 22 0E 00 00         A   555    	LD	(_opL),HL
                           A   556    ;  136		opH = Mem_Read(programCounter++) << 8;
00025F ED4B 04 00 00       A   557    	LD	BC,(_programCounter)
000264 C5                  A   558    	PUSH	BC
000265 ED4B 04 00 00       A   559    	LD	BC,(_programCounter)
00026A 03                  A   560    	INC	BC
00026B ED43 04 00 00       A   561    	LD	(_programCounter),BC
000270 CD 00 00 00         A   562    	CALL	_Mem_Read
000274 C1                  A   563    	POP	BC
000275 3E08                A   564    	LD	A,8
000277 CD 00 00 00         A   565    	CALL	__ishl_b
00027B 22 0B 00 00         A   566    	LD	(_opH),HL
                           A   567    ;  137		
                           A   568    ;  138		//cycles += 2;
                           A   569    ;  139		
                           A   570    ;  140		//if (opL >= 0x100)
                           A   571    ;  141			//cycles++;
                           A   572    ;  142		
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  12


PC     Object              I  Line    Source m6502.src
                           A   573    ;  143		op = opH + opL;
00027F ED4B 0E 00 00       A   574    	LD	BC,(_opL)
000284 09                  A   575    	ADD	HL,BC
000285 22 08 00 00         A   576    	LD	(_op),HL
                           A   577    ;  144	}
000289 C9                  A   578    	RET	
                           A   579    
                           A   580    
                           A   581    ;**************************** _AbsX ***************************
                           A   582    ;Name                         Addr/Register   Size   Type
                           A   583    ;_op                                 STATIC      3   variable
                           A   584    ;_opH                                STATIC      3   variable
                           A   585    ;_opL                                STATIC      3   variable
                           A   586    ;_xRegister                          STATIC      1   variable
                           A   587    ;_Mem_Read                           IMPORT  -----   function
                           A   588    ;_programCounter                     STATIC      3   variable
                           A   589    
                           A   590    
                           A   591    ; Stack Frame Size: 6 (bytes)
                           A   592    ;       Spill Code: 0 (instruction)
                           A   593    
                           A   594    
                           A   595    ;  145	
                           A   596    ;  146	static void AbsY(void)
                           A   597    ;  147	{
00028A                     A   598    _AbsY:
                           A   599    ;  148		opL = Mem_Read(programCounter++) + yRegister;
00028A ED4B 04 00 00       A   600    	LD	BC,(_programCounter)
00028F C5                  A   601    	PUSH	BC
000290 ED4B 04 00 00       A   602    	LD	BC,(_programCounter)
000295 03                  A   603    	INC	BC
000296 ED43 04 00 00       A   604    	LD	(_programCounter),BC
00029B CD 00 00 00         A   605    	CALL	_Mem_Read
00029F C1                  A   606    	POP	BC
0002A0 E5C1                A   607    	LD	BC,HL
0002A2 3A 02 00 00         A   608    	LD	A,(_yRegister)
0002A6 B7ED62              A   609    	UEXT	HL
0002A9 6F                  A   610    	LD	L,A
0002AA 09                  A   611    	ADD	HL,BC
0002AB 22 0E 00 00         A   612    	LD	(_opL),HL
                           A   613    ;  149		opH = Mem_Read(programCounter++) << 8;
0002AF ED4B 04 00 00       A   614    	LD	BC,(_programCounter)
0002B4 C5                  A   615    	PUSH	BC
0002B5 ED4B 04 00 00       A   616    	LD	BC,(_programCounter)
0002BA 03                  A   617    	INC	BC
0002BB ED43 04 00 00       A   618    	LD	(_programCounter),BC
0002C0 CD 00 00 00         A   619    	CALL	_Mem_Read
0002C4 C1                  A   620    	POP	BC
0002C5 3E08                A   621    	LD	A,8
0002C7 CD 00 00 00         A   622    	CALL	__ishl_b
0002CB 22 0B 00 00         A   623    	LD	(_opH),HL
                           A   624    ;  150		
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  13


PC     Object              I  Line    Source m6502.src
                           A   625    ;  151		//cycles += 2;
                           A   626    ;  152		
                           A   627    ;  153		//if (opL >= 0x100)
                           A   628    ;  154			//cycles++;
                           A   629    ;  155		
                           A   630    ;  156		op = opH + opL;
0002CF ED4B 0E 00 00       A   631    	LD	BC,(_opL)
0002D4 09                  A   632    	ADD	HL,BC
0002D5 22 08 00 00         A   633    	LD	(_op),HL
                           A   634    ;  157	}
0002D9 C9                  A   635    	RET	
                           A   636    
                           A   637    
                           A   638    ;**************************** _AbsY ***************************
                           A   639    ;Name                         Addr/Register   Size   Type
                           A   640    ;_op                                 STATIC      3   variable
                           A   641    ;_opH                                STATIC      3   variable
                           A   642    ;_opL                                STATIC      3   variable
                           A   643    ;_yRegister                          STATIC      1   variable
                           A   644    ;_Mem_Read                           IMPORT  -----   function
                           A   645    ;_programCounter                     STATIC      3   variable
                           A   646    
                           A   647    
                           A   648    ; Stack Frame Size: 6 (bytes)
                           A   649    ;       Spill Code: 0 (instruction)
                           A   650    
                           A   651    
                           A   652    ;  158	
                           A   653    ;  159	static void Ind(void)
                           A   654    ;  160	{
0002DA                     A   655    _Ind:
                           A   656    ;  161		ptrL = Mem_Read(programCounter++); 
0002DA ED4B 04 00 00       A   657    	LD	BC,(_programCounter)
0002DF C5                  A   658    	PUSH	BC
0002E0 ED4B 04 00 00       A   659    	LD	BC,(_programCounter)
0002E5 03                  A   660    	INC	BC
0002E6 ED43 04 00 00       A   661    	LD	(_programCounter),BC
0002EB CD 00 00 00         A   662    	CALL	_Mem_Read
0002EF C1                  A   663    	POP	BC
0002F0 22 17 00 00         A   664    	LD	(_ptrL),HL
                           A   665    ;  162		ptrH = Mem_Read(programCounter++) << 8;
0002F4 ED4B 04 00 00       A   666    	LD	BC,(_programCounter)
0002F9 C5                  A   667    	PUSH	BC
0002FA ED4B 04 00 00       A   668    	LD	BC,(_programCounter)
0002FF 03                  A   669    	INC	BC
000300 ED43 04 00 00       A   670    	LD	(_programCounter),BC
000305 CD 00 00 00         A   671    	CALL	_Mem_Read
000309 C1                  A   672    	POP	BC
00030A 3E08                A   673    	LD	A,8
00030C CD 00 00 00         A   674    	CALL	__ishl_b
000310 22 14 00 00         A   675    	LD	(_ptrH),HL
                           A   676    ;  163		op = Mem_Read((unsigned short)(ptrH + ptrL));
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  14


PC     Object              I  Line    Source m6502.src
000314 ED4B 17 00 00       A   677    	LD	BC,(_ptrL)
000319 09                  A   678    	ADD	HL,BC
00031A E5C1                A   679    	LD	BC,HL
00031C CD 00 00 00         A   680    	CALL	__stoiu
000320 E5                  A   681    	PUSH	HL
000321 CD 00 00 00         A   682    	CALL	_Mem_Read
000325 C1                  A   683    	POP	BC
000326 22 08 00 00         A   684    	LD	(_op),HL
                           A   685    ;  164		
                           A   686    ;  165		ptrL = (ptrL + 1) & 0xFF;
00032A 2A 17 00 00         A   687    	LD	HL,(_ptrL)
00032E 23                  A   688    	INC	HL
00032F 7D                  A   689    	LD	A,L
000330 B7ED62              A   690    	UEXT	HL
000333 6F                  A   691    	LD	L,A
000334 22 17 00 00         A   692    	LD	(_ptrL),HL
                           A   693    ;  166		
                           A   694    ;  167		op += Mem_Read((unsigned short)(ptrH + ptrL)) << 8;
000338 ED4B 17 00 00       A   695    	LD	BC,(_ptrL)
00033D 2A 14 00 00         A   696    	LD	HL,(_ptrH)
000341 09                  A   697    	ADD	HL,BC
000342 E5C1                A   698    	LD	BC,HL
000344 CD 00 00 00         A   699    	CALL	__stoiu
000348 E5                  A   700    	PUSH	HL
000349 CD 00 00 00         A   701    	CALL	_Mem_Read
00034D C1                  A   702    	POP	BC
00034E ED4B 08 00 00       A   703    	LD	BC,(_op)
000353 3E08                A   704    	LD	A,8
000355 CD 00 00 00         A   705    	CALL	__ishl_b
000359 09                  A   706    	ADD	HL,BC
00035A 22 08 00 00         A   707    	LD	(_op),HL
                           A   708    ;  168		
                           A   709    ;  169		//cycles += 4;
                           A   710    ;  170	}
00035E C9                  A   711    	RET	
                           A   712    
                           A   713    
                           A   714    ;**************************** _Ind ***************************
                           A   715    ;Name                         Addr/Register   Size   Type
                           A   716    ;_op                                 STATIC      3   variable
                           A   717    ;_ptrH                               STATIC      3   variable
                           A   718    ;_ptrL                               STATIC      3   variable
                           A   719    ;_Mem_Read                           IMPORT  -----   function
                           A   720    ;_programCounter                     STATIC      3   variable
                           A   721    
                           A   722    
                           A   723    ; Stack Frame Size: 6 (bytes)
                           A   724    ;       Spill Code: 0 (instruction)
                           A   725    
                           A   726    
                           A   727    ;  171	
                           A   728    ;  172	static void IndZeroX(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  15


PC     Object              I  Line    Source m6502.src
                           A   729    ;  173	{
00035F                     A   730    _IndZeroX:
00035F 21FDFFFF            A   731    	LD	HL,-3
000363 CD 00 00 00         A   732    	CALL	__frameset
                           A   733    ;  174		ptr = xRegister + Mem_Read(programCounter++);
000367 ED4B 04 00 00       A   734    	LD	BC,(_programCounter)
00036C C5                  A   735    	PUSH	BC
00036D ED4B 04 00 00       A   736    	LD	BC,(_programCounter)
000372 03                  A   737    	INC	BC
000373 ED43 04 00 00       A   738    	LD	(_programCounter),BC
000378 3A 01 00 00         A   739    	LD	A,(_xRegister)
00037C B7ED62              A   740    	UEXT	HL
00037F 6F                  A   741    	LD	L,A
000380 E5C1                A   742    	LD	BC,HL
000382 DD0FFD              A   743    	LD	(IX+-3),BC
000385 CD 00 00 00         A   744    	CALL	_Mem_Read
000389 DD07FD              A   745    	LD	BC,(IX+-3)
00038C D1                  A   746    	POP	DE
00038D 09                  A   747    	ADD	HL,BC
00038E 22 11 00 00         A   748    	LD	(_ptr),HL
                           A   749    ;  175		
                           A   750    ;  176		op = Mem_Read(ptr);	
000392 ED4B 11 00 00       A   751    	LD	BC,(_ptr)
000397 C5                  A   752    	PUSH	BC
000398 CD 00 00 00         A   753    	CALL	_Mem_Read
00039C C1                  A   754    	POP	BC
00039D 22 08 00 00         A   755    	LD	(_op),HL
                           A   756    ;  177		
                           A   757    ;  178		op += Mem_Read((unsigned short)((ptr + 1) & 0xFF)) << 8;
0003A1 2A 11 00 00         A   758    	LD	HL,(_ptr)
0003A5 23                  A   759    	INC	HL
0003A6 7D                  A   760    	LD	A,L
0003A7 B7ED62              A   761    	UEXT	HL
0003AA 6F                  A   762    	LD	L,A
0003AB E5C1                A   763    	LD	BC,HL
0003AD CD 00 00 00         A   764    	CALL	__stoiu
0003B1 E5                  A   765    	PUSH	HL
0003B2 CD 00 00 00         A   766    	CALL	_Mem_Read
0003B6 C1                  A   767    	POP	BC
0003B7 ED4B 08 00 00       A   768    	LD	BC,(_op)
0003BC 3E08                A   769    	LD	A,8
0003BE CD 00 00 00         A   770    	CALL	__ishl_b
0003C2 09                  A   771    	ADD	HL,BC
0003C3 22 08 00 00         A   772    	LD	(_op),HL
                           A   773    ;  179		
                           A   774    ;  180		//cycles += 3;
                           A   775    ;  181	}
0003C7 DDF9                A   776    	LD	SP,IX
0003C9 DDE1                A   777    	POP	IX
0003CB C9                  A   778    	RET	
                           A   779    
                           A   780    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  16


PC     Object              I  Line    Source m6502.src
                           A   781    ;**************************** _IndZeroX ***************************
                           A   782    ;Name                         Addr/Register   Size   Type
                           A   783    ;_op                                 STATIC      3   variable
                           A   784    ;_ptr                                STATIC      3   variable
                           A   785    ;_Mem_Read                           IMPORT  -----   function
                           A   786    ;_xRegister                          STATIC      1   variable
                           A   787    ;_programCounter                     STATIC      3   variable
                           A   788    
                           A   789    
                           A   790    ; Stack Frame Size: 9 (bytes)
                           A   791    ;       Spill Code: 0 (instruction)
                           A   792    
                           A   793    
                           A   794    ;  182	
                           A   795    ;  183	static void IndZeroY(void)
                           A   796    ;  184	{
0003CC                     A   797    _IndZeroY:
                           A   798    ;  185		ptr = Mem_Read(programCounter++);
0003CC ED4B 04 00 00       A   799    	LD	BC,(_programCounter)
0003D1 C5                  A   800    	PUSH	BC
0003D2 ED4B 04 00 00       A   801    	LD	BC,(_programCounter)
0003D7 03                  A   802    	INC	BC
0003D8 ED43 04 00 00       A   803    	LD	(_programCounter),BC
0003DD CD 00 00 00         A   804    	CALL	_Mem_Read
0003E1 C1                  A   805    	POP	BC
0003E2 22 11 00 00         A   806    	LD	(_ptr),HL
                           A   807    ;  186		opL = Mem_Read(ptr) + yRegister;
0003E6 ED4B 11 00 00       A   808    	LD	BC,(_ptr)
0003EB C5                  A   809    	PUSH	BC
0003EC CD 00 00 00         A   810    	CALL	_Mem_Read
0003F0 C1                  A   811    	POP	BC
0003F1 E5C1                A   812    	LD	BC,HL
0003F3 3A 02 00 00         A   813    	LD	A,(_yRegister)
0003F7 B7ED62              A   814    	UEXT	HL
0003FA 6F                  A   815    	LD	L,A
0003FB 09                  A   816    	ADD	HL,BC
0003FC 22 0E 00 00         A   817    	LD	(_opL),HL
                           A   818    ;  187		opH = Mem_Read((unsigned short)(ptr + 1)) << 8;
000400 ED4B 11 00 00       A   819    	LD	BC,(_ptr)
000405 03                  A   820    	INC	BC
000406 CD 00 00 00         A   821    	CALL	__stoiu
00040A E5                  A   822    	PUSH	HL
00040B CD 00 00 00         A   823    	CALL	_Mem_Read
00040F C1                  A   824    	POP	BC
000410 3E08                A   825    	LD	A,8
000412 CD 00 00 00         A   826    	CALL	__ishl_b
000416 22 0B 00 00         A   827    	LD	(_opH),HL
                           A   828    ;  188		
                           A   829    ;  189		//cycles += 3;
                           A   830    ;  190		
                           A   831    ;  191		//if (opL >= 0x100)
                           A   832    ;  192			//cycles++;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  17


PC     Object              I  Line    Source m6502.src
                           A   833    ;  193		
                           A   834    ;  194		op = opH + opL;
00041A ED4B 0E 00 00       A   835    	LD	BC,(_opL)
00041F 09                  A   836    	ADD	HL,BC
000420 22 08 00 00         A   837    	LD	(_op),HL
                           A   838    ;  195	}
000424 C9                  A   839    	RET	
                           A   840    
                           A   841    
                           A   842    ;**************************** _IndZeroY ***************************
                           A   843    ;Name                         Addr/Register   Size   Type
                           A   844    ;_op                                 STATIC      3   variable
                           A   845    ;_opH                                STATIC      3   variable
                           A   846    ;_opL                                STATIC      3   variable
                           A   847    ;_yRegister                          STATIC      1   variable
                           A   848    ;_ptr                                STATIC      3   variable
                           A   849    ;_Mem_Read                           IMPORT  -----   function
                           A   850    ;_programCounter                     STATIC      3   variable
                           A   851    
                           A   852    
                           A   853    ; Stack Frame Size: 6 (bytes)
                           A   854    ;       Spill Code: 0 (instruction)
                           A   855    
                           A   856    
                           A   857    ;  196	
                           A   858    ;  197	static void Rel(void)
                           A   859    ;  198	{
000425                     A   860    _Rel:
                           A   861    ;  199		op = Mem_Read(programCounter++);
000425 ED4B 04 00 00       A   862    	LD	BC,(_programCounter)
00042A C5                  A   863    	PUSH	BC
00042B ED4B 04 00 00       A   864    	LD	BC,(_programCounter)
000430 03                  A   865    	INC	BC
000431 ED43 04 00 00       A   866    	LD	(_programCounter),BC
000436 CD 00 00 00         A   867    	CALL	_Mem_Read
00043A C1                  A   868    	POP	BC
00043B 22 08 00 00         A   869    	LD	(_op),HL
                           A   870    ;  200		
                           A   871    ;  201		if (op >= 0x80)
00043F 01800000            A   872    	LD	BC,128
000443 B7                  A   873    	OR	A,A
000444 ED42                A   874    	SBC	HL,BC
000446 FA 50 04 00         A   875    	JP	M,L__16
00044A EA 64 04 00         A   876    	JP	PE,L_33
00044E 18 04               A   877    	JR	L__17
000450                     A   878    L__16:
000450 E2 64 04 00         A   879    	JP	PO,L_33
000454                     A   880    L__17:
                           A   881    ;  202			op |= 0xFF00;
000454 2A 08 00 00         A   882    	LD	HL,(_op)
000458 0100FF00            A   883    	LD	BC,65280
00045C CD 00 00 00         A   884    	CALL	__ior
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  18


PC     Object              I  Line    Source m6502.src
000460 22 08 00 00         A   885    	LD	(_op),HL
000464                     A   886    L_33:
                           A   887    ;  203		
                           A   888    ;  204		op += programCounter;
000464 ED4B 04 00 00       A   889    	LD	BC,(_programCounter)
000469 2A 08 00 00         A   890    	LD	HL,(_op)
00046D 09                  A   891    	ADD	HL,BC
00046E 22 08 00 00         A   892    	LD	(_op),HL
                           A   893    ;  205		//cycles++;
                           A   894    ;  206	}
000472 C9                  A   895    	RET	
                           A   896    
                           A   897    
                           A   898    ;**************************** _Rel ***************************
                           A   899    ;Name                         Addr/Register   Size   Type
                           A   900    ;_op                                 STATIC      3   variable
                           A   901    ;_Mem_Read                           IMPORT  -----   function
                           A   902    ;_programCounter                     STATIC      3   variable
                           A   903    
                           A   904    
                           A   905    ; Stack Frame Size: 6 (bytes)
                           A   906    ;       Spill Code: 0 (instruction)
                           A   907    
                           A   908    
                           A   909    ;  207	
                           A   910    ;  208	static void WAbsX(void)
                           A   911    ;  209	{
000473                     A   912    _WAbsX:
                           A   913    ;  210		opL = Mem_Read(programCounter++) + xRegister;
000473 ED4B 04 00 00       A   914    	LD	BC,(_programCounter)
000478 C5                  A   915    	PUSH	BC
000479 ED4B 04 00 00       A   916    	LD	BC,(_programCounter)
00047E 03                  A   917    	INC	BC
00047F ED43 04 00 00       A   918    	LD	(_programCounter),BC
000484 CD 00 00 00         A   919    	CALL	_Mem_Read
000488 C1                  A   920    	POP	BC
000489 E5C1                A   921    	LD	BC,HL
00048B 3A 01 00 00         A   922    	LD	A,(_xRegister)
00048F B7ED62              A   923    	UEXT	HL
000492 6F                  A   924    	LD	L,A
000493 09                  A   925    	ADD	HL,BC
000494 22 0E 00 00         A   926    	LD	(_opL),HL
                           A   927    ;  211		opH = Mem_Read(programCounter++) << 8;
000498 ED4B 04 00 00       A   928    	LD	BC,(_programCounter)
00049D C5                  A   929    	PUSH	BC
00049E ED4B 04 00 00       A   930    	LD	BC,(_programCounter)
0004A3 03                  A   931    	INC	BC
0004A4 ED43 04 00 00       A   932    	LD	(_programCounter),BC
0004A9 CD 00 00 00         A   933    	CALL	_Mem_Read
0004AD C1                  A   934    	POP	BC
0004AE 3E08                A   935    	LD	A,8
0004B0 CD 00 00 00         A   936    	CALL	__ishl_b
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  19


PC     Object              I  Line    Source m6502.src
0004B4 22 0B 00 00         A   937    	LD	(_opH),HL
                           A   938    ;  212		
                           A   939    ;  213		//cycles += 3;
                           A   940    ;  214		op = opH + opL;
0004B8 ED4B 0E 00 00       A   941    	LD	BC,(_opL)
0004BD 09                  A   942    	ADD	HL,BC
0004BE 22 08 00 00         A   943    	LD	(_op),HL
                           A   944    ;  215	}
0004C2 C9                  A   945    	RET	
                           A   946    
                           A   947    
                           A   948    ;**************************** _WAbsX ***************************
                           A   949    ;Name                         Addr/Register   Size   Type
                           A   950    ;_op                                 STATIC      3   variable
                           A   951    ;_opH                                STATIC      3   variable
                           A   952    ;_opL                                STATIC      3   variable
                           A   953    ;_xRegister                          STATIC      1   variable
                           A   954    ;_Mem_Read                           IMPORT  -----   function
                           A   955    ;_programCounter                     STATIC      3   variable
                           A   956    
                           A   957    
                           A   958    ; Stack Frame Size: 6 (bytes)
                           A   959    ;       Spill Code: 0 (instruction)
                           A   960    
                           A   961    
                           A   962    ;  216	
                           A   963    ;  217	static void WAbsY(void)
                           A   964    ;  218	{
0004C3                     A   965    _WAbsY:
                           A   966    ;  219		opL = Mem_Read(programCounter++) + yRegister;
0004C3 ED4B 04 00 00       A   967    	LD	BC,(_programCounter)
0004C8 C5                  A   968    	PUSH	BC
0004C9 ED4B 04 00 00       A   969    	LD	BC,(_programCounter)
0004CE 03                  A   970    	INC	BC
0004CF ED43 04 00 00       A   971    	LD	(_programCounter),BC
0004D4 CD 00 00 00         A   972    	CALL	_Mem_Read
0004D8 C1                  A   973    	POP	BC
0004D9 E5C1                A   974    	LD	BC,HL
0004DB 3A 02 00 00         A   975    	LD	A,(_yRegister)
0004DF B7ED62              A   976    	UEXT	HL
0004E2 6F                  A   977    	LD	L,A
0004E3 09                  A   978    	ADD	HL,BC
0004E4 22 0E 00 00         A   979    	LD	(_opL),HL
                           A   980    ;  220		opH = Mem_Read(programCounter++) << 8;
0004E8 ED4B 04 00 00       A   981    	LD	BC,(_programCounter)
0004ED C5                  A   982    	PUSH	BC
0004EE ED4B 04 00 00       A   983    	LD	BC,(_programCounter)
0004F3 03                  A   984    	INC	BC
0004F4 ED43 04 00 00       A   985    	LD	(_programCounter),BC
0004F9 CD 00 00 00         A   986    	CALL	_Mem_Read
0004FD C1                  A   987    	POP	BC
0004FE 3E08                A   988    	LD	A,8
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  20


PC     Object              I  Line    Source m6502.src
000500 CD 00 00 00         A   989    	CALL	__ishl_b
000504 22 0B 00 00         A   990    	LD	(_opH),HL
                           A   991    ;  221		
                           A   992    ;  222		//cycles += 3;
                           A   993    ;  223		op = opH + opL;
000508 ED4B 0E 00 00       A   994    	LD	BC,(_opL)
00050D 09                  A   995    	ADD	HL,BC
00050E 22 08 00 00         A   996    	LD	(_op),HL
                           A   997    ;  224	}
000512 C9                  A   998    	RET	
                           A   999    
                           A  1000    
                           A  1001    ;**************************** _WAbsY ***************************
                           A  1002    ;Name                         Addr/Register   Size   Type
                           A  1003    ;_op                                 STATIC      3   variable
                           A  1004    ;_opH                                STATIC      3   variable
                           A  1005    ;_opL                                STATIC      3   variable
                           A  1006    ;_yRegister                          STATIC      1   variable
                           A  1007    ;_Mem_Read                           IMPORT  -----   function
                           A  1008    ;_programCounter                     STATIC      3   variable
                           A  1009    
                           A  1010    
                           A  1011    ; Stack Frame Size: 6 (bytes)
                           A  1012    ;       Spill Code: 0 (instruction)
                           A  1013    
                           A  1014    
                           A  1015    ;  225	
                           A  1016    ;  226	static void WIndZeroY(void)
                           A  1017    ;  227	{
000513                     A  1018    _WIndZeroY:
                           A  1019    ;  228		ptr = Mem_Read(programCounter++);
000513 ED4B 04 00 00       A  1020    	LD	BC,(_programCounter)
000518 C5                  A  1021    	PUSH	BC
000519 ED4B 04 00 00       A  1022    	LD	BC,(_programCounter)
00051E 03                  A  1023    	INC	BC
00051F ED43 04 00 00       A  1024    	LD	(_programCounter),BC
000524 CD 00 00 00         A  1025    	CALL	_Mem_Read
000528 C1                  A  1026    	POP	BC
000529 22 11 00 00         A  1027    	LD	(_ptr),HL
                           A  1028    ;  229		opL = Mem_Read(ptr) + yRegister;
00052D ED4B 11 00 00       A  1029    	LD	BC,(_ptr)
000532 C5                  A  1030    	PUSH	BC
000533 CD 00 00 00         A  1031    	CALL	_Mem_Read
000537 E5C1                A  1032    	LD	BC,HL
000539 D1                  A  1033    	POP	DE
00053A 3A 02 00 00         A  1034    	LD	A,(_yRegister)
00053E B7ED62              A  1035    	UEXT	HL
000541 6F                  A  1036    	LD	L,A
000542 09                  A  1037    	ADD	HL,BC
000543 22 0E 00 00         A  1038    	LD	(_opL),HL
                           A  1039    ;  230		opH = Mem_Read((unsigned short)((ptr + 1) & 0xFF)) << 8;
000547 2A 11 00 00         A  1040    	LD	HL,(_ptr)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  21


PC     Object              I  Line    Source m6502.src
00054B 23                  A  1041    	INC	HL
00054C 7D                  A  1042    	LD	A,L
00054D B7ED62              A  1043    	UEXT	HL
000550 6F                  A  1044    	LD	L,A
000551 E5C1                A  1045    	LD	BC,HL
000553 CD 00 00 00         A  1046    	CALL	__stoiu
000557 E5                  A  1047    	PUSH	HL
000558 CD 00 00 00         A  1048    	CALL	_Mem_Read
00055C C1                  A  1049    	POP	BC
00055D 3E08                A  1050    	LD	A,8
00055F CD 00 00 00         A  1051    	CALL	__ishl_b
000563 22 0B 00 00         A  1052    	LD	(_opH),HL
                           A  1053    ;  231		
                           A  1054    ;  232		//cycles += 4;
                           A  1055    ;  233		op = opH + opL;
000567 ED4B 0E 00 00       A  1056    	LD	BC,(_opL)
00056C 09                  A  1057    	ADD	HL,BC
00056D 22 08 00 00         A  1058    	LD	(_op),HL
                           A  1059    ;  234	}
000571 C9                  A  1060    	RET	
                           A  1061    
                           A  1062    
                           A  1063    ;**************************** _WIndZeroY ***************************
                           A  1064    ;Name                         Addr/Register   Size   Type
                           A  1065    ;_op                                 STATIC      3   variable
                           A  1066    ;_opH                                STATIC      3   variable
                           A  1067    ;_opL                                STATIC      3   variable
                           A  1068    ;_yRegister                          STATIC      1   variable
                           A  1069    ;_ptr                                STATIC      3   variable
                           A  1070    ;_Mem_Read                           IMPORT  -----   function
                           A  1071    ;_programCounter                     STATIC      3   variable
                           A  1072    
                           A  1073    
                           A  1074    ; Stack Frame Size: 6 (bytes)
                           A  1075    ;       Spill Code: 0 (instruction)
                           A  1076    
                           A  1077    
                           A  1078    ;  235	
                           A  1079    ;  236	static void setStatusRegisterNZ(unsigned char val)
                           A  1080    ;  237	{
000572                     A  1081    _setStatusRegisterNZ:
000572 CD 00 00 00         A  1082    	CALL	__frameset0
                           A  1083    ;  238		if (val & 0x80)
000576 DD7E06              A  1084    	LD	A,(IX+6)
000579 E680                A  1085    	AND	A,128
00057B 28 0C               A  1086    	JR	Z,L_44
                           A  1087    ;  239			statusRegister |= N;
00057D 3A 00 00 00         A  1088    	LD	A,(_statusRegister)
000581 CBFF                A  1089    	SET	7,A
000583 32 00 00 00         A  1090    	LD	(_statusRegister),A
                           A  1091    ;  240		else
000587 18 0A               A  1092    	JR	L_47
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  22


PC     Object              I  Line    Source m6502.src
000589                     A  1093    L_44:
                           A  1094    ;  241			statusRegister &= ~N;
000589 3A 00 00 00         A  1095    	LD	A,(_statusRegister)
00058D CBBF                A  1096    	RES	7,A
00058F 32 00 00 00         A  1097    	LD	(_statusRegister),A
000593                     A  1098    L_47:
                           A  1099    ;  242		
                           A  1100    ;  243		if (!val)
000593 DD7E06              A  1101    	LD	A,(IX+6)
000596 B7                  A  1102    	OR	A,A
000597 20 0C               A  1103    	JR	NZ,L_46
                           A  1104    ;  244			statusRegister |= Z;
000599 3A 00 00 00         A  1105    	LD	A,(_statusRegister)
00059D CBCF                A  1106    	SET	1,A
00059F 32 00 00 00         A  1107    	LD	(_statusRegister),A
                           A  1108    ;  245		else
0005A3 18 0A               A  1109    	JR	L_48
0005A5                     A  1110    L_46:
                           A  1111    ;  246			statusRegister &= ~Z;
0005A5 3A 00 00 00         A  1112    	LD	A,(_statusRegister)
0005A9 CB8F                A  1113    	RES	1,A
0005AB 32 00 00 00         A  1114    	LD	(_statusRegister),A
                           A  1115    ;  247	}
0005AF                     A  1116    L_48:
0005AF DDF9                A  1117    	LD	SP,IX
0005B1 DDE1                A  1118    	POP	IX
0005B3 C9                  A  1119    	RET	
                           A  1120    
                           A  1121    
                           A  1122    ;**************************** _setStatusRegisterNZ ***************************
                           A  1123    ;Name                         Addr/Register   Size   Type
                           A  1124    ;_statusRegister                     STATIC      1   variable
                           A  1125    ;val                                   IX+6      1   parameter
                           A  1126    
                           A  1127    
                           A  1128    ; Stack Frame Size: 9 (bytes)
                           A  1129    ;       Spill Code: 0 (instruction)
                           A  1130    
                           A  1131    
                           A  1132    ;  248	
                           A  1133    ;  249	static void LDA(void)
                           A  1134    ;  250	{
0005B4                     A  1135    _LDA:
                           A  1136    ;  251		accumulator = Mem_Read(op);
0005B4 ED4B 08 00 00       A  1137    	LD	BC,(_op)
0005B9 C5                  A  1138    	PUSH	BC
0005BA CD 00 00 00         A  1139    	CALL	_Mem_Read
0005BE C1                  A  1140    	POP	BC
0005BF 7D                  A  1141    	LD	A,L
                           A  1142    ;  252		
                           A  1143    ;  253		setStatusRegisterNZ(accumulator);
0005C0 4F                  A  1144    	LD	C,A
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  23


PC     Object              I  Line    Source m6502.src
0005C1 0600                A  1145    	LD	B,0
0005C3 C5                  A  1146    	PUSH	BC
0005C4 32 00 00 00         A  1147    	LD	(_accumulator),A
0005C8 CD 72 05 00         A  1148    	CALL	_setStatusRegisterNZ
0005CC C1                  A  1149    	POP	BC
                           A  1150    ;  254		
                           A  1151    ;  255		//cycles++;
                           A  1152    ;  256	}
0005CD C9                  A  1153    	RET	
                           A  1154    
                           A  1155    
                           A  1156    ;**************************** _LDA ***************************
                           A  1157    ;Name                         Addr/Register   Size   Type
                           A  1158    ;_accumulator                        STATIC      1   variable
                           A  1159    ;_op                                 STATIC      3   variable
                           A  1160    ;_Mem_Read                           IMPORT  -----   function
                           A  1161    
                           A  1162    
                           A  1163    ; Stack Frame Size: 6 (bytes)
                           A  1164    ;       Spill Code: 0 (instruction)
                           A  1165    
                           A  1166    
                           A  1167    ;  257	
                           A  1168    ;  258	static void LDX(void)
                           A  1169    ;  259	{
0005CE                     A  1170    _LDX:
                           A  1171    ;  260		xRegister = Mem_Read(op);
0005CE ED4B 08 00 00       A  1172    	LD	BC,(_op)
0005D3 C5                  A  1173    	PUSH	BC
0005D4 CD 00 00 00         A  1174    	CALL	_Mem_Read
0005D8 C1                  A  1175    	POP	BC
0005D9 7D                  A  1176    	LD	A,L
                           A  1177    ;  261		
                           A  1178    ;  262		setStatusRegisterNZ(xRegister);
0005DA 4F                  A  1179    	LD	C,A
0005DB 0600                A  1180    	LD	B,0
0005DD C5                  A  1181    	PUSH	BC
0005DE 32 01 00 00         A  1182    	LD	(_xRegister),A
0005E2 CD 72 05 00         A  1183    	CALL	_setStatusRegisterNZ
0005E6 C1                  A  1184    	POP	BC
                           A  1185    ;  263		
                           A  1186    ;  264		//cycles++;
                           A  1187    ;  265	}
0005E7 C9                  A  1188    	RET	
                           A  1189    
                           A  1190    
                           A  1191    ;**************************** _LDX ***************************
                           A  1192    ;Name                         Addr/Register   Size   Type
                           A  1193    ;_xRegister                          STATIC      1   variable
                           A  1194    ;_op                                 STATIC      3   variable
                           A  1195    ;_Mem_Read                           IMPORT  -----   function
                           A  1196    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  24


PC     Object              I  Line    Source m6502.src
                           A  1197    
                           A  1198    ; Stack Frame Size: 6 (bytes)
                           A  1199    ;       Spill Code: 0 (instruction)
                           A  1200    
                           A  1201    
                           A  1202    ;  266	
                           A  1203    ;  267	static void LDY(void)
                           A  1204    ;  268	{
0005E8                     A  1205    _LDY:
                           A  1206    ;  269		yRegister = Mem_Read(op);
0005E8 ED4B 08 00 00       A  1207    	LD	BC,(_op)
0005ED C5                  A  1208    	PUSH	BC
0005EE CD 00 00 00         A  1209    	CALL	_Mem_Read
0005F2 C1                  A  1210    	POP	BC
0005F3 7D                  A  1211    	LD	A,L
                           A  1212    ;  270		
                           A  1213    ;  271		setStatusRegisterNZ(yRegister);
0005F4 4F                  A  1214    	LD	C,A
0005F5 0600                A  1215    	LD	B,0
0005F7 C5                  A  1216    	PUSH	BC
0005F8 32 02 00 00         A  1217    	LD	(_yRegister),A
0005FC CD 72 05 00         A  1218    	CALL	_setStatusRegisterNZ
000600 C1                  A  1219    	POP	BC
                           A  1220    ;  272		
                           A  1221    ;  273		//cycles++;
                           A  1222    ;  274	}
000601 C9                  A  1223    	RET	
                           A  1224    
                           A  1225    
                           A  1226    ;**************************** _LDY ***************************
                           A  1227    ;Name                         Addr/Register   Size   Type
                           A  1228    ;_yRegister                          STATIC      1   variable
                           A  1229    ;_op                                 STATIC      3   variable
                           A  1230    ;_Mem_Read                           IMPORT  -----   function
                           A  1231    
                           A  1232    
                           A  1233    ; Stack Frame Size: 6 (bytes)
                           A  1234    ;       Spill Code: 0 (instruction)
                           A  1235    
                           A  1236    
                           A  1237    ;  275	
                           A  1238    ;  276	static void STA(void)
                           A  1239    ;  277	{
000602                     A  1240    _STA:
                           A  1241    ;  278		Mem_Write(op, accumulator);
000602 3A 00 00 00         A  1242    	LD	A,(_accumulator)
000606 B7ED62              A  1243    	UEXT	HL
000609 6F                  A  1244    	LD	L,A
00060A E5                  A  1245    	PUSH	HL
00060B ED4B 08 00 00       A  1246    	LD	BC,(_op)
000610 C5                  A  1247    	PUSH	BC
000611 CD 00 00 00         A  1248    	CALL	_Mem_Write
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  25


PC     Object              I  Line    Source m6502.src
000615 C1                  A  1249    	POP	BC
000616 C1                  A  1250    	POP	BC
                           A  1251    ;  279		
                           A  1252    ;  280		//cycles++;
                           A  1253    ;  281	}
000617 C9                  A  1254    	RET	
                           A  1255    
                           A  1256    
                           A  1257    ;**************************** _STA ***************************
                           A  1258    ;Name                         Addr/Register   Size   Type
                           A  1259    ;_op                                 STATIC      3   variable
                           A  1260    ;_accumulator                        STATIC      1   variable
                           A  1261    ;_Mem_Write                          IMPORT  -----   function
                           A  1262    
                           A  1263    
                           A  1264    ; Stack Frame Size: 6 (bytes)
                           A  1265    ;       Spill Code: 0 (instruction)
                           A  1266    
                           A  1267    
                           A  1268    ;  282	
                           A  1269    ;  283	static void STX(void)
                           A  1270    ;  284	{
000618                     A  1271    _STX:
                           A  1272    ;  285		Mem_Write(op, xRegister);
000618 3A 01 00 00         A  1273    	LD	A,(_xRegister)
00061C B7ED62              A  1274    	UEXT	HL
00061F 6F                  A  1275    	LD	L,A
000620 E5                  A  1276    	PUSH	HL
000621 ED4B 08 00 00       A  1277    	LD	BC,(_op)
000626 C5                  A  1278    	PUSH	BC
000627 CD 00 00 00         A  1279    	CALL	_Mem_Write
00062B C1                  A  1280    	POP	BC
00062C C1                  A  1281    	POP	BC
                           A  1282    ;  286		
                           A  1283    ;  287		//cycles++;
                           A  1284    ;  288	}
00062D C9                  A  1285    	RET	
                           A  1286    
                           A  1287    
                           A  1288    ;**************************** _STX ***************************
                           A  1289    ;Name                         Addr/Register   Size   Type
                           A  1290    ;_op                                 STATIC      3   variable
                           A  1291    ;_xRegister                          STATIC      1   variable
                           A  1292    ;_Mem_Write                          IMPORT  -----   function
                           A  1293    
                           A  1294    
                           A  1295    ; Stack Frame Size: 6 (bytes)
                           A  1296    ;       Spill Code: 0 (instruction)
                           A  1297    
                           A  1298    
                           A  1299    ;  289	
                           A  1300    ;  290	static void STY(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  26


PC     Object              I  Line    Source m6502.src
                           A  1301    ;  291	{
00062E                     A  1302    _STY:
                           A  1303    ;  292		Mem_Write(op, yRegister);
00062E 3A 02 00 00         A  1304    	LD	A,(_yRegister)
000632 B7ED62              A  1305    	UEXT	HL
000635 6F                  A  1306    	LD	L,A
000636 E5                  A  1307    	PUSH	HL
000637 ED4B 08 00 00       A  1308    	LD	BC,(_op)
00063C C5                  A  1309    	PUSH	BC
00063D CD 00 00 00         A  1310    	CALL	_Mem_Write
000641 C1                  A  1311    	POP	BC
000642 C1                  A  1312    	POP	BC
                           A  1313    ;  293		
                           A  1314    ;  294		//cycles++;
                           A  1315    ;  295	}
000643 C9                  A  1316    	RET	
                           A  1317    
                           A  1318    
                           A  1319    ;**************************** _STY ***************************
                           A  1320    ;Name                         Addr/Register   Size   Type
                           A  1321    ;_op                                 STATIC      3   variable
                           A  1322    ;_yRegister                          STATIC      1   variable
                           A  1323    ;_Mem_Write                          IMPORT  -----   function
                           A  1324    
                           A  1325    
                           A  1326    ; Stack Frame Size: 6 (bytes)
                           A  1327    ;       Spill Code: 0 (instruction)
                           A  1328    
                           A  1329    
                           A  1330    ;  296	
                           A  1331    ;  297	static void setFlagCarry(int val)
                           A  1332    ;  298	{
000644                     A  1333    _setFlagCarry:
000644 CD 00 00 00         A  1334    	CALL	__frameset0
                           A  1335    ;  299		if (val & 0x100)
000648 01000100            A  1336    	LD	BC,256
00064C DD2706              A  1337    	LD	HL,(IX+6)
00064F CD 00 00 00         A  1338    	CALL	__iand
000653 01000000            A  1339    	LD	BC,0
000657 B7                  A  1340    	OR	A,A
000658 ED42                A  1341    	SBC	HL,BC
00065A 28 0C               A  1342    	JR	Z,L_56
                           A  1343    ;  300			statusRegister |= C;
00065C 3A 00 00 00         A  1344    	LD	A,(_statusRegister)
000660 CBC7                A  1345    	SET	0,A
000662 32 00 00 00         A  1346    	LD	(_statusRegister),A
                           A  1347    ;  301		else
000666 18 0A               A  1348    	JR	L_57
000668                     A  1349    L_56:
                           A  1350    ;  302			statusRegister &= ~C;
000668 3A 00 00 00         A  1351    	LD	A,(_statusRegister)
00066C CB87                A  1352    	RES	0,A
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  27


PC     Object              I  Line    Source m6502.src
00066E 32 00 00 00         A  1353    	LD	(_statusRegister),A
                           A  1354    ;  303	}
000672                     A  1355    L_57:
000672 DDF9                A  1356    	LD	SP,IX
000674 DDE1                A  1357    	POP	IX
000676 C9                  A  1358    	RET	
                           A  1359    
                           A  1360    
                           A  1361    ;**************************** _setFlagCarry ***************************
                           A  1362    ;Name                         Addr/Register   Size   Type
                           A  1363    ;_statusRegister                     STATIC      1   variable
                           A  1364    ;val                                   IX+6      3   parameter
                           A  1365    
                           A  1366    
                           A  1367    ; Stack Frame Size: 9 (bytes)
                           A  1368    ;       Spill Code: 0 (instruction)
                           A  1369    
                           A  1370    
                           A  1371    ;  304	
                           A  1372    ;  305	static void ADC(void)
                           A  1373    ;  306	{
000677                     A  1374    _ADC:
000677 21F0FFFF            A  1375    	LD	HL,-16
00067B CD 00 00 00         A  1376    	CALL	__frameset
                           A  1377    ;  307		int Op1 = accumulator, Op2 = Mem_Read(op);
00067F 3A 00 00 00         A  1378    	LD	A,(_accumulator)
000683 B7ED62              A  1379    	UEXT	HL
000686 6F                  A  1380    	LD	L,A
000687 DD2FFD              A  1381    	LD	(IX+-3),HL
00068A ED4B 08 00 00       A  1382    	LD	BC,(_op)
00068F C5                  A  1383    	PUSH	BC
000690 CD 00 00 00         A  1384    	CALL	_Mem_Read
000694 C1                  A  1385    	POP	BC
000695 DD2FFA              A  1386    	LD	(IX+-6),HL
                           A  1387    ;  308		char srtmp = (statusRegister & C ? 1 : 0);
000698 3A 00 00 00         A  1388    	LD	A,(_statusRegister)
00069C E601                A  1389    	AND	A,1
00069E 28 09               A  1390    	JR	Z,L_60
0006A0 01010000            A  1391    	LD	BC,1
0006A4 DD0FF6              A  1392    	LD	(IX+-10),BC
0006A7 18 07               A  1393    	JR	L_61
0006A9                     A  1394    L_60:
0006A9 01000000            A  1395    	LD	BC,0
0006AD DD0FF6              A  1396    	LD	(IX+-10),BC
0006B0                     A  1397    L_61:
0006B0 DD7EF6              A  1398    	LD	A,(IX+-10)
0006B3 DD77F9              A  1399    	LD	(IX+-7),A
                           A  1400    ;  309		
                           A  1401    ;  310		//cycles++;
                           A  1402    ;  311		
                           A  1403    ;  312		if (statusRegister & D)
0006B6 3A 00 00 00         A  1404    	LD	A,(_statusRegister)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  28


PC     Object              I  Line    Source m6502.src
0006BA E608                A  1405    	AND	A,8
0006BC CA 55 08 00         A  1406    	JR	Z,L_86
                           A  1407    ;  313		{
                           A  1408    ;  314			if (!((Op1 + Op2 + srtmp) & 0xFF))
0006C0 DD07FA              A  1409    	LD	BC,(IX+-6)
0006C3 DD27FD              A  1410    	LD	HL,(IX+-3)
0006C6 09                  A  1411    	ADD	HL,BC
0006C7 E5C1                A  1412    	LD	BC,HL
0006C9 DD7EF9              A  1413    	LD	A,(IX+-7)
0006CC 17ED62              A  1414    	SEXT	HL
0006CF DD6EF9              A  1415    	LD	L,(IX+-7)
0006D2 09                  A  1416    	ADD	HL,BC
0006D3 7D                  A  1417    	LD	A,L
0006D4 B7ED62              A  1418    	UEXT	HL
0006D7 6F                  A  1419    	LD	L,A
0006D8 B7                  A  1420    	OR	A,A
0006D9 01000000            A  1421    	LD	BC,0
0006DD ED42                A  1422    	SBC	HL,BC
0006DF 20 0C               A  1423    	JR	NZ,L_63
                           A  1424    ;  315				statusRegister |= Z;
0006E1 3A 00 00 00         A  1425    	LD	A,(_statusRegister)
0006E5 CBCF                A  1426    	SET	1,A
0006E7 32 00 00 00         A  1427    	LD	(_statusRegister),A
                           A  1428    ;  316			else
0006EB 18 0A               A  1429    	JR	L_64
0006ED                     A  1430    L_63:
                           A  1431    ;  317				statusRegister &= ~Z;
0006ED 3A 00 00 00         A  1432    	LD	A,(_statusRegister)
0006F1 CB8F                A  1433    	RES	1,A
0006F3 32 00 00 00         A  1434    	LD	(_statusRegister),A
0006F7                     A  1435    L_64:
                           A  1436    ;  318			
                           A  1437    ;  319			tmp = (Op1 & 0x0F) + (Op2 & 0x0F) + srtmp;
0006F7 DD7EFD              A  1438    	LD	A,(IX+-3)
0006FA E60F                A  1439    	AND	A,15
0006FC B7ED62              A  1440    	UEXT	HL
0006FF 6F                  A  1441    	LD	L,A
000700 E5C1                A  1442    	LD	BC,HL
000702 DD7EFA              A  1443    	LD	A,(IX+-6)
000705 E60F                A  1444    	AND	A,15
000707 B7ED62              A  1445    	UEXT	HL
00070A 6F                  A  1446    	LD	L,A
00070B DD7EF9              A  1447    	LD	A,(IX+-7)
00070E 09                  A  1448    	ADD	HL,BC
00070F E5C1                A  1449    	LD	BC,HL
000711 17ED62              A  1450    	SEXT	HL
000714 DD6EF9              A  1451    	LD	L,(IX+-7)
000717 09                  A  1452    	ADD	HL,BC
000718 22 1A 00 00         A  1453    	LD	(_tmp),HL
                           A  1454    ;  320			accumulator = tmp < 0x0A ? tmp : tmp + 6;
00071C B7                  A  1455    	OR	A,A
00071D 010A0000            A  1456    	LD	BC,10
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  29


PC     Object              I  Line    Source m6502.src
000721 ED42                A  1457    	SBC	HL,BC
000723 F2 31 07 00         A  1458    	JP	P,L_67
000727 ED4B 1A 00 00       A  1459    	LD	BC,(_tmp)
00072C DD0FF3              A  1460    	LD	(IX+-13),BC
00072F 18 0B               A  1461    	JR	L_68
000731                     A  1462    L_67:
000731 FD2A 1A 00 00       A  1463    	LD	IY,(_tmp)
000736 ED3306              A  1464    	LEA	IY,IY+6
000739 DD3EF3              A  1465    	LD	(IX+-13),IY
00073C                     A  1466    L_68:
00073C DD7EF3              A  1467    	LD	A,(IX+-13)
00073F 32 00 00 00         A  1468    	LD	(_accumulator),A
                           A  1469    ;  321			tmp = (Op1 & 0xF0) + (Op2 & 0xF0) + (tmp & 0xF0);
000743 DD7EFD              A  1470    	LD	A,(IX+-3)
000746 E6F0                A  1471    	AND	A,240
000748 B7ED62              A  1472    	UEXT	HL
00074B 6F                  A  1473    	LD	L,A
00074C DD7EFA              A  1474    	LD	A,(IX+-6)
00074F E6F0                A  1475    	AND	A,240
000751 E5C1                A  1476    	LD	BC,HL
000753 B7ED62              A  1477    	UEXT	HL
000756 6F                  A  1478    	LD	L,A
000757 09                  A  1479    	ADD	HL,BC
000758 3A 1A 00 00         A  1480    	LD	A,(_tmp)
00075C E6F0                A  1481    	AND	A,240
00075E E5C1                A  1482    	LD	BC,HL
000760 B7ED62              A  1483    	UEXT	HL
000763 6F                  A  1484    	LD	L,A
000764 09                  A  1485    	ADD	HL,BC
000765 22 1A 00 00         A  1486    	LD	(_tmp),HL
                           A  1487    ;  322			
                           A  1488    ;  323			if (tmp & 0x80)
000769 3A 1A 00 00         A  1489    	LD	A,(_tmp)
00076D E680                A  1490    	AND	A,128
00076F B7ED62              A  1491    	UEXT	HL
000772 6F                  A  1492    	LD	L,A
000773 B7                  A  1493    	OR	A,A
000774 01000000            A  1494    	LD	BC,0
000778 ED42                A  1495    	SBC	HL,BC
00077A 28 0C               A  1496    	JR	Z,L_70
                           A  1497    ;  324				statusRegister |= N;
00077C 3A 00 00 00         A  1498    	LD	A,(_statusRegister)
000780 CBFF                A  1499    	SET	7,A
000782 32 00 00 00         A  1500    	LD	(_statusRegister),A
                           A  1501    ;  325			else
000786 18 0A               A  1502    	JR	L_73
000788                     A  1503    L_70:
                           A  1504    ;  326				statusRegister &= ~N;
000788 3A 00 00 00         A  1505    	LD	A,(_statusRegister)
00078C CBBF                A  1506    	RES	7,A
00078E 32 00 00 00         A  1507    	LD	(_statusRegister),A
000792                     A  1508    L_73:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  30


PC     Object              I  Line    Source m6502.src
                           A  1509    ;  327			
                           A  1510    ;  328			if ((Op1 ^ tmp) & ~(Op1 ^ Op2) & 0x80)
000792 2A 1A 00 00         A  1511    	LD	HL,(_tmp)
000796 DD07FD              A  1512    	LD	BC,(IX+-3)
000799 CD 00 00 00         A  1513    	CALL	__ixor
00079D E5D1                A  1514    	LD	DE,HL
00079F DD27FD              A  1515    	LD	HL,(IX+-3)
0007A2 DD07FA              A  1516    	LD	BC,(IX+-6)
0007A5 CD 00 00 00         A  1517    	CALL	__ixor
0007A9 CD 00 00 00         A  1518    	CALL	__inot
0007AD E5C1                A  1519    	LD	BC,HL
0007AF D5E1                A  1520    	LD	HL,DE
0007B1 CD 00 00 00         A  1521    	CALL	__iand
0007B5 7D                  A  1522    	LD	A,L
0007B6 E680                A  1523    	AND	A,128
0007B8 B7ED62              A  1524    	UEXT	HL
0007BB 6F                  A  1525    	LD	L,A
0007BC B7                  A  1526    	OR	A,A
0007BD 01000000            A  1527    	LD	BC,0
0007C1 ED42                A  1528    	SBC	HL,BC
0007C3 28 0C               A  1529    	JR	Z,L_72
                           A  1530    ;  329				statusRegister |= V;
0007C5 3A 00 00 00         A  1531    	LD	A,(_statusRegister)
0007C9 CBF7                A  1532    	SET	6,A
0007CB 32 00 00 00         A  1533    	LD	(_statusRegister),A
                           A  1534    ;  330			else
0007CF 18 0A               A  1535    	JR	L_78
0007D1                     A  1536    L_72:
                           A  1537    ;  331				statusRegister &= ~V;
0007D1 3A 00 00 00         A  1538    	LD	A,(_statusRegister)
0007D5 CBB7                A  1539    	RES	6,A
0007D7 32 00 00 00         A  1540    	LD	(_statusRegister),A
0007DB                     A  1541    L_78:
                           A  1542    ;  332			
                           A  1543    ;  333			tmp = (accumulator & 0x0F) | (tmp < 0xA0 ? tmp : tmp + 0x60);
0007DB 01A00000            A  1544    	LD	BC,160
0007DF 2A 1A 00 00         A  1545    	LD	HL,(_tmp)
0007E3 B7                  A  1546    	OR	A,A
0007E4 ED42                A  1547    	SBC	HL,BC
0007E6 F2 F0 07 00         A  1548    	JP	P,L__42
0007EA EA FE 07 00         A  1549    	JP	PE,L_76
0007EE 18 04               A  1550    	JR	L__43
0007F0                     A  1551    L__42:
0007F0 E2 FE 07 00         A  1552    	JP	PO,L_76
0007F4                     A  1553    L__43:
0007F4 ED4B 1A 00 00       A  1554    	LD	BC,(_tmp)
0007F9 DD0FF0              A  1555    	LD	(IX+-16),BC
0007FC 18 0B               A  1556    	JR	L_77
0007FE                     A  1557    L_76:
0007FE FD2A 1A 00 00       A  1558    	LD	IY,(_tmp)
000803 ED3360              A  1559    	LEA	IY,IY+96
000806 DD3EF0              A  1560    	LD	(IX+-16),IY
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  31


PC     Object              I  Line    Source m6502.src
000809                     A  1561    L_77:
000809 3A 00 00 00         A  1562    	LD	A,(_accumulator)
00080D E60F                A  1563    	AND	A,15
00080F B7ED62              A  1564    	UEXT	HL
000812 6F                  A  1565    	LD	L,A
                           A  1566    ;  334			
                           A  1567    ;  335			if (tmp >= 0x100)
000813 B7                  A  1568    	OR	A,A
000814 DD07F0              A  1569    	LD	BC,(IX+-16)
000817 CD 00 00 00         A  1570    	CALL	__ior
00081B 22 1A 00 00         A  1571    	LD	(_tmp),HL
00081F 01000100            A  1572    	LD	BC,256
000823 ED42                A  1573    	SBC	HL,BC
000825 FA 2F 08 00         A  1574    	JP	M,L__44
000829 EA 3F 08 00         A  1575    	JP	PE,L_80
00082D 18 04               A  1576    	JR	L__45
00082F                     A  1577    L__44:
00082F E2 3F 08 00         A  1578    	JP	PO,L_80
000833                     A  1579    L__45:
                           A  1580    ;  336				statusRegister |= C;
000833 3A 00 00 00         A  1581    	LD	A,(_statusRegister)
000837 CBC7                A  1582    	SET	0,A
000839 32 00 00 00         A  1583    	LD	(_statusRegister),A
                           A  1584    ;  337			else
00083D 18 0A               A  1585    	JR	L_81
00083F                     A  1586    L_80:
                           A  1587    ;  338				statusRegister &= ~C;
00083F 3A 00 00 00         A  1588    	LD	A,(_statusRegister)
000843 CB87                A  1589    	RES	0,A
000845 32 00 00 00         A  1590    	LD	(_statusRegister),A
000849                     A  1591    L_81:
                           A  1592    ;  339			
                           A  1593    ;  340			accumulator = tmp & 0xFF;
000849 3A 1A 00 00         A  1594    	LD	A,(_tmp)
00084D 32 00 00 00         A  1595    	LD	(_accumulator),A
                           A  1596    ;  341		}
                           A  1597    ;  342		else
000851 C3 D7 08 00         A  1598    	JR	L_87
000855                     A  1599    L_86:
                           A  1600    ;  343		{
                           A  1601    ;  344			tmp = Op1 + Op2 + srtmp;
000855 DD07FA              A  1602    	LD	BC,(IX+-6)
000858 DD27FD              A  1603    	LD	HL,(IX+-3)
00085B 09                  A  1604    	ADD	HL,BC
00085C E5C1                A  1605    	LD	BC,HL
00085E DD7EF9              A  1606    	LD	A,(IX+-7)
000861 17ED62              A  1607    	SEXT	HL
000864 DD6EF9              A  1608    	LD	L,(IX+-7)
000867 09                  A  1609    	ADD	HL,BC
000868 22 1A 00 00         A  1610    	LD	(_tmp),HL
                           A  1611    ;  345			accumulator = tmp & 0xFF;
00086C 3A 1A 00 00         A  1612    	LD	A,(_tmp)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  32


PC     Object              I  Line    Source m6502.src
000870 32 00 00 00         A  1613    	LD	(_accumulator),A
                           A  1614    ;  346			
                           A  1615    ;  347			if ((Op1 ^ accumulator) & ~(Op1 ^ Op2) & 0x80)
000874 DD27FD              A  1616    	LD	HL,(IX+-3)
000877 DD07FA              A  1617    	LD	BC,(IX+-6)
00087A CD 00 00 00         A  1618    	CALL	__ixor
00087E CD 00 00 00         A  1619    	CALL	__inot
000882 E5D1                A  1620    	LD	DE,HL
000884 B7ED62              A  1621    	UEXT	HL
000887 6F                  A  1622    	LD	L,A
000888 E5C1                A  1623    	LD	BC,HL
00088A DD27FD              A  1624    	LD	HL,(IX+-3)
00088D CD 00 00 00         A  1625    	CALL	__ixor
000891 E5C1                A  1626    	LD	BC,HL
000893 D5E1                A  1627    	LD	HL,DE
000895 CD 00 00 00         A  1628    	CALL	__iand
000899 7D                  A  1629    	LD	A,L
00089A E680                A  1630    	AND	A,128
00089C B7ED62              A  1631    	UEXT	HL
00089F 6F                  A  1632    	LD	L,A
0008A0 B7                  A  1633    	OR	A,A
0008A1 01000000            A  1634    	LD	BC,0
0008A5 ED42                A  1635    	SBC	HL,BC
0008A7 28 0C               A  1636    	JR	Z,L_83
                           A  1637    ;  348				statusRegister |= V;
0008A9 3A 00 00 00         A  1638    	LD	A,(_statusRegister)
0008AD CBF7                A  1639    	SET	6,A
0008AF 32 00 00 00         A  1640    	LD	(_statusRegister),A
                           A  1641    ;  349			else
0008B3 18 0A               A  1642    	JR	L_84
0008B5                     A  1643    L_83:
                           A  1644    ;  350				statusRegister &= ~V;
0008B5 3A 00 00 00         A  1645    	LD	A,(_statusRegister)
0008B9 CBB7                A  1646    	RES	6,A
0008BB 32 00 00 00         A  1647    	LD	(_statusRegister),A
0008BF                     A  1648    L_84:
                           A  1649    ;  351			
                           A  1650    ;  352			setFlagCarry(tmp);
0008BF ED4B 1A 00 00       A  1651    	LD	BC,(_tmp)
0008C4 C5                  A  1652    	PUSH	BC
0008C5 CD 44 06 00         A  1653    	CALL	_setFlagCarry
0008C9 C1                  A  1654    	POP	BC
                           A  1655    ;  353			
                           A  1656    ;  354			setStatusRegisterNZ(accumulator);
0008CA 3A 00 00 00         A  1657    	LD	A,(_accumulator)
0008CE 4F                  A  1658    	LD	C,A
0008CF 0600                A  1659    	LD	B,0
0008D1 C5                  A  1660    	PUSH	BC
0008D2 CD 72 05 00         A  1661    	CALL	_setStatusRegisterNZ
0008D6 C1                  A  1662    	POP	BC
                           A  1663    ;  355		}
                           A  1664    ;  356	}
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  33


PC     Object              I  Line    Source m6502.src
0008D7                     A  1665    L_87:
0008D7 DDF9                A  1666    	LD	SP,IX
0008D9 DDE1                A  1667    	POP	IX
0008DB C9                  A  1668    	RET	
                           A  1669    
                           A  1670    
                           A  1671    ;**************************** _ADC ***************************
                           A  1672    ;Name                         Addr/Register   Size   Type
                           A  1673    ;_tmp                                STATIC      3   variable
                           A  1674    ;_statusRegister                     STATIC      1   variable
                           A  1675    ;_op                                 STATIC      3   variable
                           A  1676    ;_Mem_Read                           IMPORT  -----   function
                           A  1677    ;_accumulator                        STATIC      1   variable
                           A  1678    ;temp74                               IX-16      3   variable
                           A  1679    ;temp65                               IX-13      3   variable
                           A  1680    ;temp58                               IX-10      3   variable
                           A  1681    ;srtmp                                 IX-7      1   variable
                           A  1682    ;Op2                                   IX-6      3   variable
                           A  1683    ;Op1                                   IX-3      3   variable
                           A  1684    
                           A  1685    
                           A  1686    ; Stack Frame Size: 22 (bytes)
                           A  1687    ;       Spill Code: 0 (instruction)
                           A  1688    
                           A  1689    
                           A  1690    ;  357	
                           A  1691    ;  358	static void setFlagBorrow(int val)
                           A  1692    ;  359	{
0008DC                     A  1693    _setFlagBorrow:
0008DC CD 00 00 00         A  1694    	CALL	__frameset0
                           A  1695    ;  360		if (!(val & 0x100))
0008E0 01000100            A  1696    	LD	BC,256
0008E4 DD2706              A  1697    	LD	HL,(IX+6)
0008E7 CD 00 00 00         A  1698    	CALL	__iand
0008EB 01000000            A  1699    	LD	BC,0
0008EF B7                  A  1700    	OR	A,A
0008F0 ED42                A  1701    	SBC	HL,BC
0008F2 20 0C               A  1702    	JR	NZ,L_89
                           A  1703    ;  361			statusRegister |= C;
0008F4 3A 00 00 00         A  1704    	LD	A,(_statusRegister)
0008F8 CBC7                A  1705    	SET	0,A
0008FA 32 00 00 00         A  1706    	LD	(_statusRegister),A
                           A  1707    ;  362		else
0008FE 18 0A               A  1708    	JR	L_90
000900                     A  1709    L_89:
                           A  1710    ;  363			statusRegister &= ~C;
000900 3A 00 00 00         A  1711    	LD	A,(_statusRegister)
000904 CB87                A  1712    	RES	0,A
000906 32 00 00 00         A  1713    	LD	(_statusRegister),A
                           A  1714    ;  364	}
00090A                     A  1715    L_90:
00090A DDF9                A  1716    	LD	SP,IX
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  34


PC     Object              I  Line    Source m6502.src
00090C DDE1                A  1717    	POP	IX
00090E C9                  A  1718    	RET	
                           A  1719    
                           A  1720    
                           A  1721    ;**************************** _setFlagBorrow ***************************
                           A  1722    ;Name                         Addr/Register   Size   Type
                           A  1723    ;_statusRegister                     STATIC      1   variable
                           A  1724    ;val                                   IX+6      3   parameter
                           A  1725    
                           A  1726    
                           A  1727    ; Stack Frame Size: 9 (bytes)
                           A  1728    ;       Spill Code: 0 (instruction)
                           A  1729    
                           A  1730    
                           A  1731    ;  365	
                           A  1732    ;  366	static void SBC(void)
                           A  1733    ;  367	{
00090F                     A  1734    _SBC:
00090F 21F0FFFF            A  1735    	LD	HL,-16
000913 CD 00 00 00         A  1736    	CALL	__frameset
                           A  1737    ;  368		int Op1 = accumulator, Op2 = Mem_Read(op);
000917 3A 00 00 00         A  1738    	LD	A,(_accumulator)
00091B B7ED62              A  1739    	UEXT	HL
00091E 6F                  A  1740    	LD	L,A
00091F DD2FFD              A  1741    	LD	(IX+-3),HL
000922 ED4B 08 00 00       A  1742    	LD	BC,(_op)
000927 C5                  A  1743    	PUSH	BC
000928 CD 00 00 00         A  1744    	CALL	_Mem_Read
00092C C1                  A  1745    	POP	BC
00092D DD2FFA              A  1746    	LD	(IX+-6),HL
                           A  1747    ;  369		char srtmp = (statusRegister & C ? 0 : 1);
000930 3A 00 00 00         A  1748    	LD	A,(_statusRegister)
000934 E601                A  1749    	AND	A,1
000936 28 09               A  1750    	JR	Z,L_93
000938 01000000            A  1751    	LD	BC,0
00093C DD0FF6              A  1752    	LD	(IX+-10),BC
00093F 18 07               A  1753    	JR	L_94
000941                     A  1754    L_93:
000941 01010000            A  1755    	LD	BC,1
000945 DD0FF6              A  1756    	LD	(IX+-10),BC
000948                     A  1757    L_94:
000948 DD7EF6              A  1758    	LD	A,(IX+-10)
00094B DD77F9              A  1759    	LD	(IX+-7),A
                           A  1760    ;  370		
                           A  1761    ;  371		//cycles++;
                           A  1762    ;  372		
                           A  1763    ;  373		if (statusRegister & D)
00094E 3A 00 00 00         A  1764    	LD	A,(_statusRegister)
000952 E608                A  1765    	AND	A,8
000954 CA 47 0A 00         A  1766    	JR	Z,L_107
                           A  1767    ;  374		{
                           A  1768    ;  375			tmp = (Op1 & 0x0F) - (Op2 & 0x0F) - srtmp;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  35


PC     Object              I  Line    Source m6502.src
000958 DD7EFD              A  1769    	LD	A,(IX+-3)
00095B E60F                A  1770    	AND	A,15
00095D B7ED62              A  1771    	UEXT	HL
000960 6F                  A  1772    	LD	L,A
000961 DD7EFA              A  1773    	LD	A,(IX+-6)
000964 E60F                A  1774    	AND	A,15
000966 E5D1                A  1775    	LD	DE,HL
000968 B7ED62              A  1776    	UEXT	HL
00096B 6F                  A  1777    	LD	L,A
00096C E5C1                A  1778    	LD	BC,HL
00096E DD7EF9              A  1779    	LD	A,(IX+-7)
000971 17ED62              A  1780    	SEXT	HL
000974 DD6EF9              A  1781    	LD	L,(IX+-7)
000977 09                  A  1782    	ADD	HL,BC
000978 E5C1                A  1783    	LD	BC,HL
00097A D5E1                A  1784    	LD	HL,DE
00097C B7                  A  1785    	OR	A,A
00097D ED42                A  1786    	SBC	HL,BC
00097F 22 1A 00 00         A  1787    	LD	(_tmp),HL
                           A  1788    ;  376			accumulator = !(tmp & 0x10) ? tmp : tmp - 6;
000983 01000000            A  1789    	LD	BC,0
000987 3A 1A 00 00         A  1790    	LD	A,(_tmp)
00098B E610                A  1791    	AND	A,16
00098D B7ED62              A  1792    	UEXT	HL
000990 6F                  A  1793    	LD	L,A
000991 B7                  A  1794    	OR	A,A
000992 ED42                A  1795    	SBC	HL,BC
000994 20 0A               A  1796    	JR	NZ,L_97
000996 ED4B 1A 00 00       A  1797    	LD	BC,(_tmp)
00099B DD0FF3              A  1798    	LD	(IX+-13),BC
00099E 18 0B               A  1799    	JR	L_98
0009A0                     A  1800    L_97:
0009A0 FD2A 1A 00 00       A  1801    	LD	IY,(_tmp)
0009A5 ED33FA              A  1802    	LEA	IY,IY+-6
0009A8 DD3EF3              A  1803    	LD	(IX+-13),IY
0009AB                     A  1804    L_98:
0009AB DD7EF3              A  1805    	LD	A,(IX+-13)
0009AE 32 00 00 00         A  1806    	LD	(_accumulator),A
                           A  1807    ;  377			tmp = (Op1 & 0xF0) - (Op2 & 0xF0) - (accumulator & 0x10);
0009B2 DD7EFD              A  1808    	LD	A,(IX+-3)
0009B5 E6F0                A  1809    	AND	A,240
0009B7 B7ED62              A  1810    	UEXT	HL
0009BA 6F                  A  1811    	LD	L,A
0009BB E5D1                A  1812    	LD	DE,HL
0009BD DD7EFA              A  1813    	LD	A,(IX+-6)
0009C0 E6F0                A  1814    	AND	A,240
0009C2 B7ED62              A  1815    	UEXT	HL
0009C5 6F                  A  1816    	LD	L,A
0009C6 E5C1                A  1817    	LD	BC,HL
0009C8 3A 00 00 00         A  1818    	LD	A,(_accumulator)
0009CC E610                A  1819    	AND	A,16
0009CE B7ED62              A  1820    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  36


PC     Object              I  Line    Source m6502.src
0009D1 6F                  A  1821    	LD	L,A
0009D2 09                  A  1822    	ADD	HL,BC
0009D3 E5C1                A  1823    	LD	BC,HL
0009D5 D5E1                A  1824    	LD	HL,DE
0009D7 B7                  A  1825    	OR	A,A
0009D8 ED42                A  1826    	SBC	HL,BC
                           A  1827    ;  378			accumulator = (accumulator & 0x0F) | (!(tmp & 0x100) ? tmp : tmp - 0x60);
0009DA B7                  A  1828    	OR	A,A
0009DB 22 1A 00 00         A  1829    	LD	(_tmp),HL
0009DF 01000100            A  1830    	LD	BC,256
0009E3 CD 00 00 00         A  1831    	CALL	__iand
0009E7 01000000            A  1832    	LD	BC,0
0009EB ED42                A  1833    	SBC	HL,BC
0009ED 20 0A               A  1834    	JR	NZ,L_101
0009EF ED4B 1A 00 00       A  1835    	LD	BC,(_tmp)
0009F4 DD0FF0              A  1836    	LD	(IX+-16),BC
0009F7 18 0B               A  1837    	JR	L_102
0009F9                     A  1838    L_101:
0009F9 FD2A 1A 00 00       A  1839    	LD	IY,(_tmp)
0009FE ED33A0              A  1840    	LEA	IY,IY+-96
000A01 DD3EF0              A  1841    	LD	(IX+-16),IY
000A04                     A  1842    L_102:
000A04 3A 00 00 00         A  1843    	LD	A,(_accumulator)
000A08 E60F                A  1844    	AND	A,15
000A0A DD46F0              A  1845    	LD	B,(IX+-16)
000A0D B0                  A  1846    	OR	A,B
000A0E 32 00 00 00         A  1847    	LD	(_accumulator),A
                           A  1848    ;  379			tmp = Op1 - Op2 - srtmp;
000A12 DD7EF9              A  1849    	LD	A,(IX+-7)
000A15 17ED62              A  1850    	SEXT	HL
000A18 DD6EF9              A  1851    	LD	L,(IX+-7)
000A1B DD07FA              A  1852    	LD	BC,(IX+-6)
000A1E 09                  A  1853    	ADD	HL,BC
000A1F E5C1                A  1854    	LD	BC,HL
000A21 DD27FD              A  1855    	LD	HL,(IX+-3)
000A24 B7                  A  1856    	OR	A,A
000A25 ED42                A  1857    	SBC	HL,BC
000A27 22 1A 00 00         A  1858    	LD	(_tmp),HL
                           A  1859    ;  380			
                           A  1860    ;  381			setFlagBorrow(tmp);
000A2B ED4B 1A 00 00       A  1861    	LD	BC,(_tmp)
000A30 C5                  A  1862    	PUSH	BC
000A31 CD DC 08 00         A  1863    	CALL	_setFlagBorrow
000A35 C1                  A  1864    	POP	BC
                           A  1865    ;  382			
                           A  1866    ;  383			setStatusRegisterNZ((unsigned char)tmp);
000A36 3A 1A 00 00         A  1867    	LD	A,(_tmp)
000A3A 4F                  A  1868    	LD	C,A
000A3B 0600                A  1869    	LD	B,0
000A3D C5                  A  1870    	PUSH	BC
000A3E CD 72 05 00         A  1871    	CALL	_setStatusRegisterNZ
000A42 C1                  A  1872    	POP	BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  37


PC     Object              I  Line    Source m6502.src
                           A  1873    ;  384		}
                           A  1874    ;  385		else
000A43 C3 C7 0A 00         A  1875    	JR	L_108
000A47                     A  1876    L_107:
                           A  1877    ;  386		{
                           A  1878    ;  387			tmp = Op1 - Op2 - srtmp;
000A47 DD7EF9              A  1879    	LD	A,(IX+-7)
000A4A 17ED62              A  1880    	SEXT	HL
000A4D DD6EF9              A  1881    	LD	L,(IX+-7)
000A50 DD07FA              A  1882    	LD	BC,(IX+-6)
000A53 09                  A  1883    	ADD	HL,BC
000A54 E5C1                A  1884    	LD	BC,HL
000A56 DD27FD              A  1885    	LD	HL,(IX+-3)
000A59 B7                  A  1886    	OR	A,A
000A5A ED42                A  1887    	SBC	HL,BC
000A5C 22 1A 00 00         A  1888    	LD	(_tmp),HL
                           A  1889    ;  388			accumulator = tmp & 0xFF;
000A60 3A 1A 00 00         A  1890    	LD	A,(_tmp)
000A64 32 00 00 00         A  1891    	LD	(_accumulator),A
                           A  1892    ;  389			
                           A  1893    ;  390			if ((Op1 ^ Op2) & (Op1 ^ accumulator) & 0x80)
000A68 DD27FD              A  1894    	LD	HL,(IX+-3)
000A6B DD07FA              A  1895    	LD	BC,(IX+-6)
000A6E CD 00 00 00         A  1896    	CALL	__ixor
000A72 E5D1                A  1897    	LD	DE,HL
000A74 B7ED62              A  1898    	UEXT	HL
000A77 6F                  A  1899    	LD	L,A
000A78 E5C1                A  1900    	LD	BC,HL
000A7A DD27FD              A  1901    	LD	HL,(IX+-3)
000A7D CD 00 00 00         A  1902    	CALL	__ixor
000A81 E5C1                A  1903    	LD	BC,HL
000A83 D5E1                A  1904    	LD	HL,DE
000A85 CD 00 00 00         A  1905    	CALL	__iand
000A89 7D                  A  1906    	LD	A,L
000A8A E680                A  1907    	AND	A,128
000A8C B7ED62              A  1908    	UEXT	HL
000A8F 6F                  A  1909    	LD	L,A
000A90 B7                  A  1910    	OR	A,A
000A91 01000000            A  1911    	LD	BC,0
000A95 ED42                A  1912    	SBC	HL,BC
000A97 28 0C               A  1913    	JR	Z,L_104
                           A  1914    ;  391				statusRegister |= V;
000A99 3A 00 00 00         A  1915    	LD	A,(_statusRegister)
000A9D CBF7                A  1916    	SET	6,A
000A9F 32 00 00 00         A  1917    	LD	(_statusRegister),A
                           A  1918    ;  392			else
000AA3 18 0A               A  1919    	JR	L_105
000AA5                     A  1920    L_104:
                           A  1921    ;  393				statusRegister &= ~V;
000AA5 3A 00 00 00         A  1922    	LD	A,(_statusRegister)
000AA9 CBB7                A  1923    	RES	6,A
000AAB 32 00 00 00         A  1924    	LD	(_statusRegister),A
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  38


PC     Object              I  Line    Source m6502.src
000AAF                     A  1925    L_105:
                           A  1926    ;  394			
                           A  1927    ;  395			setFlagBorrow(tmp);
000AAF ED4B 1A 00 00       A  1928    	LD	BC,(_tmp)
000AB4 C5                  A  1929    	PUSH	BC
000AB5 CD DC 08 00         A  1930    	CALL	_setFlagBorrow
000AB9 C1                  A  1931    	POP	BC
                           A  1932    ;  396			
                           A  1933    ;  397			setStatusRegisterNZ(accumulator);
000ABA 3A 00 00 00         A  1934    	LD	A,(_accumulator)
000ABE 4F                  A  1935    	LD	C,A
000ABF 0600                A  1936    	LD	B,0
000AC1 C5                  A  1937    	PUSH	BC
000AC2 CD 72 05 00         A  1938    	CALL	_setStatusRegisterNZ
000AC6 C1                  A  1939    	POP	BC
                           A  1940    ;  398		}
                           A  1941    ;  399	}
000AC7                     A  1942    L_108:
000AC7 DDF9                A  1943    	LD	SP,IX
000AC9 DDE1                A  1944    	POP	IX
000ACB C9                  A  1945    	RET	
                           A  1946    
                           A  1947    
                           A  1948    ;**************************** _SBC ***************************
                           A  1949    ;Name                         Addr/Register   Size   Type
                           A  1950    ;_tmp                                STATIC      3   variable
                           A  1951    ;_statusRegister                     STATIC      1   variable
                           A  1952    ;_op                                 STATIC      3   variable
                           A  1953    ;_Mem_Read                           IMPORT  -----   function
                           A  1954    ;_accumulator                        STATIC      1   variable
                           A  1955    ;temp99                               IX-16      3   variable
                           A  1956    ;temp95                               IX-13      3   variable
                           A  1957    ;temp91                               IX-10      3   variable
                           A  1958    ;srtmp                                 IX-7      1   variable
                           A  1959    ;Op2                                   IX-6      3   variable
                           A  1960    ;Op1                                   IX-3      3   variable
                           A  1961    
                           A  1962    
                           A  1963    ; Stack Frame Size: 22 (bytes)
                           A  1964    ;       Spill Code: 0 (instruction)
                           A  1965    
                           A  1966    
                           A  1967    ;  400	
                           A  1968    ;  401	static void CMP(void)
                           A  1969    ;  402	{
000ACC                     A  1970    _CMP:
000ACC 21FDFFFF            A  1971    	LD	HL,-3
000AD0 CD 00 00 00         A  1972    	CALL	__frameset
                           A  1973    ;  403		tmp = accumulator - Mem_Read(op);
000AD4 ED4B 08 00 00       A  1974    	LD	BC,(_op)
000AD9 C5                  A  1975    	PUSH	BC
000ADA 3A 00 00 00         A  1976    	LD	A,(_accumulator)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  39


PC     Object              I  Line    Source m6502.src
000ADE B7ED62              A  1977    	UEXT	HL
000AE1 6F                  A  1978    	LD	L,A
000AE2 E5C1                A  1979    	LD	BC,HL
000AE4 DD0FFD              A  1980    	LD	(IX+-3),BC
000AE7 CD 00 00 00         A  1981    	CALL	_Mem_Read
000AEB DD07FD              A  1982    	LD	BC,(IX+-3)
000AEE D1                  A  1983    	POP	DE
000AEF E5D1                A  1984    	LD	DE,HL
000AF1 C5E1                A  1985    	LD	HL,BC
000AF3 B7                  A  1986    	OR	A,A
000AF4 ED52                A  1987    	SBC	HL,DE
000AF6 22 1A 00 00         A  1988    	LD	(_tmp),HL
                           A  1989    ;  404		
                           A  1990    ;  405		//cycles++;
                           A  1991    ;  406		
                           A  1992    ;  407		setFlagBorrow(tmp);
000AFA ED4B 1A 00 00       A  1993    	LD	BC,(_tmp)
000AFF C5                  A  1994    	PUSH	BC
000B00 CD DC 08 00         A  1995    	CALL	_setFlagBorrow
000B04 C1                  A  1996    	POP	BC
                           A  1997    ;  408		
                           A  1998    ;  409		setStatusRegisterNZ((unsigned char)tmp);
000B05 3A 1A 00 00         A  1999    	LD	A,(_tmp)
000B09 4F                  A  2000    	LD	C,A
000B0A 0600                A  2001    	LD	B,0
000B0C C5                  A  2002    	PUSH	BC
000B0D CD 72 05 00         A  2003    	CALL	_setStatusRegisterNZ
000B11 C1                  A  2004    	POP	BC
                           A  2005    ;  410	}
000B12 DDF9                A  2006    	LD	SP,IX
000B14 DDE1                A  2007    	POP	IX
000B16 C9                  A  2008    	RET	
                           A  2009    
                           A  2010    
                           A  2011    ;**************************** _CMP ***************************
                           A  2012    ;Name                         Addr/Register   Size   Type
                           A  2013    ;_tmp                                STATIC      3   variable
                           A  2014    ;_op                                 STATIC      3   variable
                           A  2015    ;_Mem_Read                           IMPORT  -----   function
                           A  2016    ;_accumulator                        STATIC      1   variable
                           A  2017    
                           A  2018    
                           A  2019    ; Stack Frame Size: 9 (bytes)
                           A  2020    ;       Spill Code: 0 (instruction)
                           A  2021    
                           A  2022    
                           A  2023    ;  411	
                           A  2024    ;  412	static void CPX(void)
                           A  2025    ;  413	{
000B17                     A  2026    _CPX:
000B17 21FDFFFF            A  2027    	LD	HL,-3
000B1B CD 00 00 00         A  2028    	CALL	__frameset
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  40


PC     Object              I  Line    Source m6502.src
                           A  2029    ;  414		tmp = xRegister - Mem_Read(op);
000B1F ED4B 08 00 00       A  2030    	LD	BC,(_op)
000B24 C5                  A  2031    	PUSH	BC
000B25 3A 01 00 00         A  2032    	LD	A,(_xRegister)
000B29 B7ED62              A  2033    	UEXT	HL
000B2C 6F                  A  2034    	LD	L,A
000B2D E5C1                A  2035    	LD	BC,HL
000B2F DD0FFD              A  2036    	LD	(IX+-3),BC
000B32 CD 00 00 00         A  2037    	CALL	_Mem_Read
000B36 DD07FD              A  2038    	LD	BC,(IX+-3)
000B39 D1                  A  2039    	POP	DE
000B3A E5D1                A  2040    	LD	DE,HL
000B3C C5E1                A  2041    	LD	HL,BC
000B3E B7                  A  2042    	OR	A,A
000B3F ED52                A  2043    	SBC	HL,DE
000B41 22 1A 00 00         A  2044    	LD	(_tmp),HL
                           A  2045    ;  415		
                           A  2046    ;  416		//cycles++;
                           A  2047    ;  417		
                           A  2048    ;  418		setFlagBorrow(tmp);
000B45 ED4B 1A 00 00       A  2049    	LD	BC,(_tmp)
000B4A C5                  A  2050    	PUSH	BC
000B4B CD DC 08 00         A  2051    	CALL	_setFlagBorrow
000B4F C1                  A  2052    	POP	BC
                           A  2053    ;  419		
                           A  2054    ;  420		setStatusRegisterNZ((unsigned char)tmp);
000B50 3A 1A 00 00         A  2055    	LD	A,(_tmp)
000B54 4F                  A  2056    	LD	C,A
000B55 0600                A  2057    	LD	B,0
000B57 C5                  A  2058    	PUSH	BC
000B58 CD 72 05 00         A  2059    	CALL	_setStatusRegisterNZ
000B5C C1                  A  2060    	POP	BC
                           A  2061    ;  421	}
000B5D DDF9                A  2062    	LD	SP,IX
000B5F DDE1                A  2063    	POP	IX
000B61 C9                  A  2064    	RET	
                           A  2065    
                           A  2066    
                           A  2067    ;**************************** _CPX ***************************
                           A  2068    ;Name                         Addr/Register   Size   Type
                           A  2069    ;_tmp                                STATIC      3   variable
                           A  2070    ;_op                                 STATIC      3   variable
                           A  2071    ;_Mem_Read                           IMPORT  -----   function
                           A  2072    ;_xRegister                          STATIC      1   variable
                           A  2073    
                           A  2074    
                           A  2075    ; Stack Frame Size: 9 (bytes)
                           A  2076    ;       Spill Code: 0 (instruction)
                           A  2077    
                           A  2078    
                           A  2079    ;  422	
                           A  2080    ;  423	static void CPY(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  41


PC     Object              I  Line    Source m6502.src
                           A  2081    ;  424	{
000B62                     A  2082    _CPY:
000B62 21FDFFFF            A  2083    	LD	HL,-3
000B66 CD 00 00 00         A  2084    	CALL	__frameset
                           A  2085    ;  425		tmp = yRegister - Mem_Read(op);
000B6A ED4B 08 00 00       A  2086    	LD	BC,(_op)
000B6F C5                  A  2087    	PUSH	BC
000B70 3A 02 00 00         A  2088    	LD	A,(_yRegister)
000B74 B7ED62              A  2089    	UEXT	HL
000B77 6F                  A  2090    	LD	L,A
000B78 E5C1                A  2091    	LD	BC,HL
000B7A DD0FFD              A  2092    	LD	(IX+-3),BC
000B7D CD 00 00 00         A  2093    	CALL	_Mem_Read
000B81 DD07FD              A  2094    	LD	BC,(IX+-3)
000B84 D1                  A  2095    	POP	DE
000B85 E5D1                A  2096    	LD	DE,HL
000B87 C5E1                A  2097    	LD	HL,BC
000B89 B7                  A  2098    	OR	A,A
000B8A ED52                A  2099    	SBC	HL,DE
000B8C 22 1A 00 00         A  2100    	LD	(_tmp),HL
                           A  2101    ;  426		
                           A  2102    ;  427		//cycles++;
                           A  2103    ;  428		
                           A  2104    ;  429		setFlagBorrow(tmp);
000B90 ED4B 1A 00 00       A  2105    	LD	BC,(_tmp)
000B95 C5                  A  2106    	PUSH	BC
000B96 CD DC 08 00         A  2107    	CALL	_setFlagBorrow
000B9A C1                  A  2108    	POP	BC
                           A  2109    ;  430		
                           A  2110    ;  431		setStatusRegisterNZ((unsigned char)tmp);
000B9B 3A 1A 00 00         A  2111    	LD	A,(_tmp)
000B9F 4F                  A  2112    	LD	C,A
000BA0 0600                A  2113    	LD	B,0
000BA2 C5                  A  2114    	PUSH	BC
000BA3 CD 72 05 00         A  2115    	CALL	_setStatusRegisterNZ
000BA7 C1                  A  2116    	POP	BC
                           A  2117    ;  432	}
000BA8 DDF9                A  2118    	LD	SP,IX
000BAA DDE1                A  2119    	POP	IX
000BAC C9                  A  2120    	RET	
                           A  2121    
                           A  2122    
                           A  2123    ;**************************** _CPY ***************************
                           A  2124    ;Name                         Addr/Register   Size   Type
                           A  2125    ;_tmp                                STATIC      3   variable
                           A  2126    ;_op                                 STATIC      3   variable
                           A  2127    ;_Mem_Read                           IMPORT  -----   function
                           A  2128    ;_yRegister                          STATIC      1   variable
                           A  2129    
                           A  2130    
                           A  2131    ; Stack Frame Size: 9 (bytes)
                           A  2132    ;       Spill Code: 0 (instruction)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  42


PC     Object              I  Line    Source m6502.src
                           A  2133    
                           A  2134    
                           A  2135    ;  433	
                           A  2136    ;  434	static void AND(void)
                           A  2137    ;  435	{
000BAD                     A  2138    _AND:
                           A  2139    ;  436		accumulator &= Mem_Read(op);
000BAD ED4B 08 00 00       A  2140    	LD	BC,(_op)
000BB2 C5                  A  2141    	PUSH	BC
000BB3 CD 00 00 00         A  2142    	CALL	_Mem_Read
000BB7 C1                  A  2143    	POP	BC
000BB8 ED4B 00 00 00       A  2144    	LD	BC,(_accumulator)
000BBD 7D                  A  2145    	LD	A,L
000BBE A1                  A  2146    	AND	A,C
                           A  2147    ;  437		
                           A  2148    ;  438		//cycles++;
                           A  2149    ;  439		
                           A  2150    ;  440		setStatusRegisterNZ(accumulator);
000BBF 4F                  A  2151    	LD	C,A
000BC0 0600                A  2152    	LD	B,0
000BC2 C5                  A  2153    	PUSH	BC
000BC3 32 00 00 00         A  2154    	LD	(_accumulator),A
000BC7 CD 72 05 00         A  2155    	CALL	_setStatusRegisterNZ
000BCB C1                  A  2156    	POP	BC
                           A  2157    ;  441	}
000BCC C9                  A  2158    	RET	
                           A  2159    
                           A  2160    
                           A  2161    ;**************************** _AND ***************************
                           A  2162    ;Name                         Addr/Register   Size   Type
                           A  2163    ;_accumulator                        STATIC      1   variable
                           A  2164    ;_op                                 STATIC      3   variable
                           A  2165    ;_Mem_Read                           IMPORT  -----   function
                           A  2166    
                           A  2167    
                           A  2168    ; Stack Frame Size: 6 (bytes)
                           A  2169    ;       Spill Code: 0 (instruction)
                           A  2170    
                           A  2171    
                           A  2172    ;  442	
                           A  2173    ;  443	static void ORA(void)
                           A  2174    ;  444	{
000BCD                     A  2175    _ORA:
                           A  2176    ;  445		accumulator |= Mem_Read(op);
000BCD ED4B 08 00 00       A  2177    	LD	BC,(_op)
000BD2 C5                  A  2178    	PUSH	BC
000BD3 CD 00 00 00         A  2179    	CALL	_Mem_Read
000BD7 C1                  A  2180    	POP	BC
000BD8 ED4B 00 00 00       A  2181    	LD	BC,(_accumulator)
000BDD 7D                  A  2182    	LD	A,L
000BDE B1                  A  2183    	OR	A,C
                           A  2184    ;  446		
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  43


PC     Object              I  Line    Source m6502.src
                           A  2185    ;  447		//cycles++;
                           A  2186    ;  448		
                           A  2187    ;  449		setStatusRegisterNZ(accumulator);
000BDF 4F                  A  2188    	LD	C,A
000BE0 0600                A  2189    	LD	B,0
000BE2 C5                  A  2190    	PUSH	BC
000BE3 32 00 00 00         A  2191    	LD	(_accumulator),A
000BE7 CD 72 05 00         A  2192    	CALL	_setStatusRegisterNZ
000BEB C1                  A  2193    	POP	BC
                           A  2194    ;  450	}
000BEC C9                  A  2195    	RET	
                           A  2196    
                           A  2197    
                           A  2198    ;**************************** _ORA ***************************
                           A  2199    ;Name                         Addr/Register   Size   Type
                           A  2200    ;_accumulator                        STATIC      1   variable
                           A  2201    ;_op                                 STATIC      3   variable
                           A  2202    ;_Mem_Read                           IMPORT  -----   function
                           A  2203    
                           A  2204    
                           A  2205    ; Stack Frame Size: 6 (bytes)
                           A  2206    ;       Spill Code: 0 (instruction)
                           A  2207    
                           A  2208    
                           A  2209    ;  451	
                           A  2210    ;  452	static void EOR(void)
                           A  2211    ;  453	{
000BED                     A  2212    _EOR:
                           A  2213    ;  454		accumulator ^= Mem_Read(op);
000BED ED4B 08 00 00       A  2214    	LD	BC,(_op)
000BF2 C5                  A  2215    	PUSH	BC
000BF3 CD 00 00 00         A  2216    	CALL	_Mem_Read
000BF7 C1                  A  2217    	POP	BC
000BF8 ED4B 00 00 00       A  2218    	LD	BC,(_accumulator)
000BFD 7D                  A  2219    	LD	A,L
000BFE A9                  A  2220    	XOR	A,C
                           A  2221    ;  455		
                           A  2222    ;  456		//cycles++;
                           A  2223    ;  457		
                           A  2224    ;  458		setStatusRegisterNZ(accumulator);
000BFF 4F                  A  2225    	LD	C,A
000C00 0600                A  2226    	LD	B,0
000C02 C5                  A  2227    	PUSH	BC
000C03 32 00 00 00         A  2228    	LD	(_accumulator),A
000C07 CD 72 05 00         A  2229    	CALL	_setStatusRegisterNZ
000C0B C1                  A  2230    	POP	BC
                           A  2231    ;  459	}
000C0C C9                  A  2232    	RET	
                           A  2233    
                           A  2234    
                           A  2235    ;**************************** _EOR ***************************
                           A  2236    ;Name                         Addr/Register   Size   Type
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  44


PC     Object              I  Line    Source m6502.src
                           A  2237    ;_accumulator                        STATIC      1   variable
                           A  2238    ;_op                                 STATIC      3   variable
                           A  2239    ;_Mem_Read                           IMPORT  -----   function
                           A  2240    
                           A  2241    
                           A  2242    ; Stack Frame Size: 6 (bytes)
                           A  2243    ;       Spill Code: 0 (instruction)
                           A  2244    
                           A  2245    
                           A  2246    ;  460	
                           A  2247    ;  461	static void ASL(void)
                           A  2248    ;  462	{
000C0D                     A  2249    _ASL:
                           A  2250    ;  463		btmp = Mem_Read(op);
000C0D ED4B 08 00 00       A  2251    	LD	BC,(_op)
000C12 C5                  A  2252    	PUSH	BC
000C13 CD 00 00 00         A  2253    	CALL	_Mem_Read
000C17 C1                  A  2254    	POP	BC
000C18 7D                  A  2255    	LD	A,L
000C19 32 07 00 00         A  2256    	LD	(_btmp),A
                           A  2257    ;  464		
                           A  2258    ;  465		if (btmp & 0x80)
000C1D E680                A  2259    	AND	A,128
000C1F 28 0C               A  2260    	JR	Z,L_116
                           A  2261    ;  466			statusRegister |= C;
000C21 3A 00 00 00         A  2262    	LD	A,(_statusRegister)
000C25 CBC7                A  2263    	SET	0,A
000C27 32 00 00 00         A  2264    	LD	(_statusRegister),A
                           A  2265    ;  467		else
000C2B 18 0A               A  2266    	JR	L_117
000C2D                     A  2267    L_116:
                           A  2268    ;  468			statusRegister &= ~C;
000C2D 3A 00 00 00         A  2269    	LD	A,(_statusRegister)
000C31 CB87                A  2270    	RES	0,A
000C33 32 00 00 00         A  2271    	LD	(_statusRegister),A
000C37                     A  2272    L_117:
                           A  2273    ;  469		
                           A  2274    ;  470		btmp <<= 1;
000C37 3A 07 00 00         A  2275    	LD	A,(_btmp)
000C3B 87                  A  2276    	ADD	A,A
                           A  2277    ;  471		
                           A  2278    ;  472		setStatusRegisterNZ(btmp);
000C3C 4F                  A  2279    	LD	C,A
000C3D 0600                A  2280    	LD	B,0
000C3F C5                  A  2281    	PUSH	BC
000C40 32 07 00 00         A  2282    	LD	(_btmp),A
000C44 CD 72 05 00         A  2283    	CALL	_setStatusRegisterNZ
000C48 C1                  A  2284    	POP	BC
                           A  2285    ;  473		
                           A  2286    ;  474		Mem_Write(op, btmp);
000C49 3A 07 00 00         A  2287    	LD	A,(_btmp)
000C4D B7ED62              A  2288    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  45


PC     Object              I  Line    Source m6502.src
000C50 6F                  A  2289    	LD	L,A
000C51 E5                  A  2290    	PUSH	HL
000C52 ED4B 08 00 00       A  2291    	LD	BC,(_op)
000C57 C5                  A  2292    	PUSH	BC
000C58 CD 00 00 00         A  2293    	CALL	_Mem_Write
000C5C C1                  A  2294    	POP	BC
000C5D C1                  A  2295    	POP	BC
                           A  2296    ;  475		
                           A  2297    ;  476		//cycles += 3;
                           A  2298    ;  477	}
000C5E C9                  A  2299    	RET	
                           A  2300    
                           A  2301    
                           A  2302    ;**************************** _ASL ***************************
                           A  2303    ;Name                         Addr/Register   Size   Type
                           A  2304    ;_Mem_Write                          IMPORT  -----   function
                           A  2305    ;_statusRegister                     STATIC      1   variable
                           A  2306    ;_btmp                               STATIC      1   variable
                           A  2307    ;_op                                 STATIC      3   variable
                           A  2308    ;_Mem_Read                           IMPORT  -----   function
                           A  2309    
                           A  2310    
                           A  2311    ; Stack Frame Size: 6 (bytes)
                           A  2312    ;       Spill Code: 0 (instruction)
                           A  2313    
                           A  2314    
                           A  2315    ;  478	
                           A  2316    ;  479	static void ASL_A(void)
                           A  2317    ;  480	{
000C5F                     A  2318    _ASL_A:
                           A  2319    ;  481		tmp = accumulator << 1;
000C5F 3A 00 00 00         A  2320    	LD	A,(_accumulator)
000C63 B7ED62              A  2321    	UEXT	HL
000C66 6F                  A  2322    	LD	L,A
000C67 29                  A  2323    	ADD	HL,HL
000C68 22 1A 00 00         A  2324    	LD	(_tmp),HL
                           A  2325    ;  482		accumulator = tmp & 0xFF;
000C6C 3A 1A 00 00         A  2326    	LD	A,(_tmp)
000C70 32 00 00 00         A  2327    	LD	(_accumulator),A
                           A  2328    ;  483		
                           A  2329    ;  484		setFlagCarry(tmp);
000C74 ED4B 1A 00 00       A  2330    	LD	BC,(_tmp)
000C79 C5                  A  2331    	PUSH	BC
000C7A CD 44 06 00         A  2332    	CALL	_setFlagCarry
000C7E C1                  A  2333    	POP	BC
                           A  2334    ;  485		
                           A  2335    ;  486		setStatusRegisterNZ(accumulator);
000C7F 3A 00 00 00         A  2336    	LD	A,(_accumulator)
000C83 4F                  A  2337    	LD	C,A
000C84 0600                A  2338    	LD	B,0
000C86 C5                  A  2339    	PUSH	BC
000C87 CD 72 05 00         A  2340    	CALL	_setStatusRegisterNZ
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  46


PC     Object              I  Line    Source m6502.src
000C8B C1                  A  2341    	POP	BC
                           A  2342    ;  487	}
000C8C C9                  A  2343    	RET	
                           A  2344    
                           A  2345    
                           A  2346    ;**************************** _ASL_A ***************************
                           A  2347    ;Name                         Addr/Register   Size   Type
                           A  2348    ;_tmp                                STATIC      3   variable
                           A  2349    ;_accumulator                        STATIC      1   variable
                           A  2350    
                           A  2351    
                           A  2352    ; Stack Frame Size: 6 (bytes)
                           A  2353    ;       Spill Code: 0 (instruction)
                           A  2354    
                           A  2355    
                           A  2356    ;  488	
                           A  2357    ;  489	static void LSR(void)
                           A  2358    ;  490	{
000C8D                     A  2359    _LSR:
                           A  2360    ;  491		btmp = Mem_Read(op);
000C8D ED4B 08 00 00       A  2361    	LD	BC,(_op)
000C92 C5                  A  2362    	PUSH	BC
000C93 CD 00 00 00         A  2363    	CALL	_Mem_Read
000C97 C1                  A  2364    	POP	BC
000C98 7D                  A  2365    	LD	A,L
000C99 32 07 00 00         A  2366    	LD	(_btmp),A
                           A  2367    ;  492		
                           A  2368    ;  493		if (btmp & 1)
000C9D E601                A  2369    	AND	A,1
000C9F 28 0C               A  2370    	JR	Z,L_121
                           A  2371    ;  494			statusRegister |= C;
000CA1 3A 00 00 00         A  2372    	LD	A,(_statusRegister)
000CA5 CBC7                A  2373    	SET	0,A
000CA7 32 00 00 00         A  2374    	LD	(_statusRegister),A
                           A  2375    ;  495		else
000CAB 18 0A               A  2376    	JR	L_122
000CAD                     A  2377    L_121:
                           A  2378    ;  496			statusRegister &= ~C;
000CAD 3A 00 00 00         A  2379    	LD	A,(_statusRegister)
000CB1 CB87                A  2380    	RES	0,A
000CB3 32 00 00 00         A  2381    	LD	(_statusRegister),A
000CB7                     A  2382    L_122:
                           A  2383    ;  497		
                           A  2384    ;  498		btmp >>= 1;
000CB7 3A 07 00 00         A  2385    	LD	A,(_btmp)
000CBB B7ED62              A  2386    	UEXT	HL
000CBE 6F                  A  2387    	LD	L,A
000CBF 3E01                A  2388    	LD	A,1
000CC1 CD 00 00 00         A  2389    	CALL	__ishrs_b
000CC5 7D                  A  2390    	LD	A,L
                           A  2391    ;  499		
                           A  2392    ;  500		setStatusRegisterNZ(btmp);
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  47


PC     Object              I  Line    Source m6502.src
000CC6 4F                  A  2393    	LD	C,A
000CC7 0600                A  2394    	LD	B,0
000CC9 C5                  A  2395    	PUSH	BC
000CCA 32 07 00 00         A  2396    	LD	(_btmp),A
000CCE CD 72 05 00         A  2397    	CALL	_setStatusRegisterNZ
000CD2 C1                  A  2398    	POP	BC
                           A  2399    ;  501		
                           A  2400    ;  502		Mem_Write(op, btmp);
000CD3 3A 07 00 00         A  2401    	LD	A,(_btmp)
000CD7 B7ED62              A  2402    	UEXT	HL
000CDA 6F                  A  2403    	LD	L,A
000CDB E5                  A  2404    	PUSH	HL
000CDC ED4B 08 00 00       A  2405    	LD	BC,(_op)
000CE1 C5                  A  2406    	PUSH	BC
000CE2 CD 00 00 00         A  2407    	CALL	_Mem_Write
000CE6 C1                  A  2408    	POP	BC
000CE7 C1                  A  2409    	POP	BC
                           A  2410    ;  503		
                           A  2411    ;  504		//cycles += 3;
                           A  2412    ;  505	}
000CE8 C9                  A  2413    	RET	
                           A  2414    
                           A  2415    
                           A  2416    ;**************************** _LSR ***************************
                           A  2417    ;Name                         Addr/Register   Size   Type
                           A  2418    ;_Mem_Write                          IMPORT  -----   function
                           A  2419    ;_statusRegister                     STATIC      1   variable
                           A  2420    ;_btmp                               STATIC      1   variable
                           A  2421    ;_op                                 STATIC      3   variable
                           A  2422    ;_Mem_Read                           IMPORT  -----   function
                           A  2423    
                           A  2424    
                           A  2425    ; Stack Frame Size: 6 (bytes)
                           A  2426    ;       Spill Code: 0 (instruction)
                           A  2427    
                           A  2428    
                           A  2429    ;  506	
                           A  2430    ;  507	static void LSR_A(void)
                           A  2431    ;  508	{
000CE9                     A  2432    _LSR_A:
                           A  2433    ;  509		if (accumulator & 1)
000CE9 3A 00 00 00         A  2434    	LD	A,(_accumulator)
000CED E601                A  2435    	AND	A,1
000CEF 28 0C               A  2436    	JR	Z,L_125
                           A  2437    ;  510			statusRegister |= C;
000CF1 3A 00 00 00         A  2438    	LD	A,(_statusRegister)
000CF5 CBC7                A  2439    	SET	0,A
000CF7 32 00 00 00         A  2440    	LD	(_statusRegister),A
                           A  2441    ;  511		else
000CFB 18 0A               A  2442    	JR	L_126
000CFD                     A  2443    L_125:
                           A  2444    ;  512			statusRegister &= ~C;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  48


PC     Object              I  Line    Source m6502.src
000CFD 3A 00 00 00         A  2445    	LD	A,(_statusRegister)
000D01 CB87                A  2446    	RES	0,A
000D03 32 00 00 00         A  2447    	LD	(_statusRegister),A
000D07                     A  2448    L_126:
                           A  2449    ;  513		
                           A  2450    ;  514		accumulator >>= 1;
000D07 3A 00 00 00         A  2451    	LD	A,(_accumulator)
000D0B B7ED62              A  2452    	UEXT	HL
000D0E 6F                  A  2453    	LD	L,A
000D0F 3E01                A  2454    	LD	A,1
000D11 CD 00 00 00         A  2455    	CALL	__ishrs_b
000D15 7D                  A  2456    	LD	A,L
                           A  2457    ;  515		
                           A  2458    ;  516		setStatusRegisterNZ(accumulator);
000D16 4F                  A  2459    	LD	C,A
000D17 0600                A  2460    	LD	B,0
000D19 C5                  A  2461    	PUSH	BC
000D1A 32 00 00 00         A  2462    	LD	(_accumulator),A
000D1E CD 72 05 00         A  2463    	CALL	_setStatusRegisterNZ
000D22 C1                  A  2464    	POP	BC
                           A  2465    ;  517	}
000D23 C9                  A  2466    	RET	
                           A  2467    
                           A  2468    
                           A  2469    ;**************************** _LSR_A ***************************
                           A  2470    ;Name                         Addr/Register   Size   Type
                           A  2471    ;_statusRegister                     STATIC      1   variable
                           A  2472    ;_accumulator                        STATIC      1   variable
                           A  2473    
                           A  2474    
                           A  2475    ; Stack Frame Size: 6 (bytes)
                           A  2476    ;       Spill Code: 0 (instruction)
                           A  2477    
                           A  2478    
                           A  2479    ;  518	
                           A  2480    ;  519	static void ROL(void)
                           A  2481    ;  520	{
000D24                     A  2482    _ROL:
000D24 21FAFFFF            A  2483    	LD	HL,-6
000D28 CD 00 00 00         A  2484    	CALL	__frameset
                           A  2485    ;  521		int newCarry;
                           A  2486    ;  522		
                           A  2487    ;  523		btmp = Mem_Read(op);
000D2C ED4B 08 00 00       A  2488    	LD	BC,(_op)
000D31 C5                  A  2489    	PUSH	BC
000D32 CD 00 00 00         A  2490    	CALL	_Mem_Read
000D36 C1                  A  2491    	POP	BC
000D37 7D                  A  2492    	LD	A,L
000D38 32 07 00 00         A  2493    	LD	(_btmp),A
                           A  2494    ;  524		newCarry = btmp & 0x80;
000D3C E680                A  2495    	AND	A,128
000D3E B7ED62              A  2496    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  49


PC     Object              I  Line    Source m6502.src
000D41 6F                  A  2497    	LD	L,A
000D42 DD2FFA              A  2498    	LD	(IX+-6),HL
                           A  2499    ;  525		btmp = (btmp << 1) | (statusRegister & C ? 1 : 0);
000D45 3A 00 00 00         A  2500    	LD	A,(_statusRegister)
000D49 E601                A  2501    	AND	A,1
000D4B 28 09               A  2502    	JR	Z,L_130
000D4D 01010000            A  2503    	LD	BC,1
000D51 DD0FFD              A  2504    	LD	(IX+-3),BC
000D54 18 07               A  2505    	JR	L_131
000D56                     A  2506    L_130:
000D56 01000000            A  2507    	LD	BC,0
000D5A DD0FFD              A  2508    	LD	(IX+-3),BC
000D5D                     A  2509    L_131:
000D5D 3A 07 00 00         A  2510    	LD	A,(_btmp)
000D61 87                  A  2511    	ADD	A,A
000D62 DD46FD              A  2512    	LD	B,(IX+-3)
000D65 B0                  A  2513    	OR	A,B
000D66 32 07 00 00         A  2514    	LD	(_btmp),A
                           A  2515    ;  526		
                           A  2516    ;  527		if (newCarry)
000D6A DD27FA              A  2517    	LD	HL,(IX+-6)
000D6D B7                  A  2518    	OR	A,A
000D6E 01000000            A  2519    	LD	BC,0
000D72 ED42                A  2520    	SBC	HL,BC
000D74 28 0C               A  2521    	JR	Z,L_133
                           A  2522    ;  528			statusRegister |= C;
000D76 3A 00 00 00         A  2523    	LD	A,(_statusRegister)
000D7A CBC7                A  2524    	SET	0,A
000D7C 32 00 00 00         A  2525    	LD	(_statusRegister),A
                           A  2526    ;  529		else
000D80 18 0A               A  2527    	JR	L_134
000D82                     A  2528    L_133:
                           A  2529    ;  530			statusRegister &= ~C;
000D82 3A 00 00 00         A  2530    	LD	A,(_statusRegister)
000D86 CB87                A  2531    	RES	0,A
000D88 32 00 00 00         A  2532    	LD	(_statusRegister),A
000D8C                     A  2533    L_134:
                           A  2534    ;  531		
                           A  2535    ;  532		setStatusRegisterNZ(btmp);
000D8C 3A 07 00 00         A  2536    	LD	A,(_btmp)
000D90 4F                  A  2537    	LD	C,A
000D91 0600                A  2538    	LD	B,0
000D93 C5                  A  2539    	PUSH	BC
000D94 CD 72 05 00         A  2540    	CALL	_setStatusRegisterNZ
000D98 C1                  A  2541    	POP	BC
                           A  2542    ;  533		
                           A  2543    ;  534		Mem_Write(op, btmp);
000D99 3A 07 00 00         A  2544    	LD	A,(_btmp)
000D9D B7ED62              A  2545    	UEXT	HL
000DA0 6F                  A  2546    	LD	L,A
000DA1 E5                  A  2547    	PUSH	HL
000DA2 ED4B 08 00 00       A  2548    	LD	BC,(_op)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  50


PC     Object              I  Line    Source m6502.src
000DA7 C5                  A  2549    	PUSH	BC
000DA8 CD 00 00 00         A  2550    	CALL	_Mem_Write
000DAC C1                  A  2551    	POP	BC
000DAD C1                  A  2552    	POP	BC
                           A  2553    ;  535		
                           A  2554    ;  536		//cycles += 3;
                           A  2555    ;  537	}
000DAE DDF9                A  2556    	LD	SP,IX
000DB0 DDE1                A  2557    	POP	IX
000DB2 C9                  A  2558    	RET	
                           A  2559    
                           A  2560    
                           A  2561    ;**************************** _ROL ***************************
                           A  2562    ;Name                         Addr/Register   Size   Type
                           A  2563    ;_Mem_Write                          IMPORT  -----   function
                           A  2564    ;_statusRegister                     STATIC      1   variable
                           A  2565    ;_btmp                               STATIC      1   variable
                           A  2566    ;_op                                 STATIC      3   variable
                           A  2567    ;_Mem_Read                           IMPORT  -----   function
                           A  2568    ;newCarry                              IX-6      3   variable
                           A  2569    ;temp128                               IX-3      3   variable
                           A  2570    
                           A  2571    
                           A  2572    ; Stack Frame Size: 12 (bytes)
                           A  2573    ;       Spill Code: 0 (instruction)
                           A  2574    
                           A  2575    
                           A  2576    ;  538	
                           A  2577    ;  539	static void ROL_A(void)
                           A  2578    ;  540	{
000DB3                     A  2579    _ROL_A:
000DB3 21FDFFFF            A  2580    	LD	HL,-3
000DB7 CD 00 00 00         A  2581    	CALL	__frameset
                           A  2582    ;  541		tmp = (accumulator << 1) | (statusRegister & C ? 1 : 0);
000DBB 3A 00 00 00         A  2583    	LD	A,(_statusRegister)
000DBF E601                A  2584    	AND	A,1
000DC1 28 09               A  2585    	JR	Z,L_138
000DC3 01010000            A  2586    	LD	BC,1
000DC7 DD0FFD              A  2587    	LD	(IX+-3),BC
000DCA 18 07               A  2588    	JR	L_139
000DCC                     A  2589    L_138:
000DCC 01000000            A  2590    	LD	BC,0
000DD0 DD0FFD              A  2591    	LD	(IX+-3),BC
000DD3                     A  2592    L_139:
000DD3 3A 00 00 00         A  2593    	LD	A,(_accumulator)
000DD7 B7ED62              A  2594    	UEXT	HL
000DDA 6F                  A  2595    	LD	L,A
000DDB 29                  A  2596    	ADD	HL,HL
000DDC DD07FD              A  2597    	LD	BC,(IX+-3)
000DDF CD 00 00 00         A  2598    	CALL	__ior
000DE3 22 1A 00 00         A  2599    	LD	(_tmp),HL
                           A  2600    ;  542		accumulator = tmp & 0xFF;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  51


PC     Object              I  Line    Source m6502.src
000DE7 3A 1A 00 00         A  2601    	LD	A,(_tmp)
000DEB 32 00 00 00         A  2602    	LD	(_accumulator),A
                           A  2603    ;  543		
                           A  2604    ;  544		setFlagCarry(tmp);
000DEF ED4B 1A 00 00       A  2605    	LD	BC,(_tmp)
000DF4 C5                  A  2606    	PUSH	BC
000DF5 CD 44 06 00         A  2607    	CALL	_setFlagCarry
000DF9 C1                  A  2608    	POP	BC
                           A  2609    ;  545		
                           A  2610    ;  546		setStatusRegisterNZ(accumulator);
000DFA 3A 00 00 00         A  2611    	LD	A,(_accumulator)
000DFE 4F                  A  2612    	LD	C,A
000DFF 0600                A  2613    	LD	B,0
000E01 C5                  A  2614    	PUSH	BC
000E02 CD 72 05 00         A  2615    	CALL	_setStatusRegisterNZ
000E06 C1                  A  2616    	POP	BC
                           A  2617    ;  547	}
000E07 DDF9                A  2618    	LD	SP,IX
000E09 DDE1                A  2619    	POP	IX
000E0B C9                  A  2620    	RET	
                           A  2621    
                           A  2622    
                           A  2623    ;**************************** _ROL_A ***************************
                           A  2624    ;Name                         Addr/Register   Size   Type
                           A  2625    ;_tmp                                STATIC      3   variable
                           A  2626    ;_accumulator                        STATIC      1   variable
                           A  2627    ;_statusRegister                     STATIC      1   variable
                           A  2628    ;temp136                               IX-3      3   variable
                           A  2629    
                           A  2630    
                           A  2631    ; Stack Frame Size: 9 (bytes)
                           A  2632    ;       Spill Code: 0 (instruction)
                           A  2633    
                           A  2634    
                           A  2635    ;  548	
                           A  2636    ;  549	static void ROR(void)
                           A  2637    ;  550	{
000E0C                     A  2638    _ROR:
000E0C 21FAFFFF            A  2639    	LD	HL,-6
000E10 CD 00 00 00         A  2640    	CALL	__frameset
                           A  2641    ;  551		int newCarry;
                           A  2642    ;  552		
                           A  2643    ;  553		btmp = Mem_Read(op);
000E14 ED4B 08 00 00       A  2644    	LD	BC,(_op)
000E19 C5                  A  2645    	PUSH	BC
000E1A CD 00 00 00         A  2646    	CALL	_Mem_Read
000E1E C1                  A  2647    	POP	BC
000E1F 7D                  A  2648    	LD	A,L
000E20 32 07 00 00         A  2649    	LD	(_btmp),A
                           A  2650    ;  554		newCarry = btmp & 1;
000E24 E601                A  2651    	AND	A,1
000E26 B7ED62              A  2652    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  52


PC     Object              I  Line    Source m6502.src
000E29 6F                  A  2653    	LD	L,A
000E2A DD2FFA              A  2654    	LD	(IX+-6),HL
                           A  2655    ;  555		btmp = (btmp >> 1) | (statusRegister & C ? 0x80 : 0);
000E2D 3A 00 00 00         A  2656    	LD	A,(_statusRegister)
000E31 E601                A  2657    	AND	A,1
000E33 28 09               A  2658    	JR	Z,L_143
000E35 01800000            A  2659    	LD	BC,128
000E39 DD0FFD              A  2660    	LD	(IX+-3),BC
000E3C 18 07               A  2661    	JR	L_144
000E3E                     A  2662    L_143:
000E3E 01000000            A  2663    	LD	BC,0
000E42 DD0FFD              A  2664    	LD	(IX+-3),BC
000E45                     A  2665    L_144:
000E45 3A 07 00 00         A  2666    	LD	A,(_btmp)
000E49 B7ED62              A  2667    	UEXT	HL
000E4C 6F                  A  2668    	LD	L,A
000E4D 3E01                A  2669    	LD	A,1
000E4F CD 00 00 00         A  2670    	CALL	__ishrs_b
000E53 7D                  A  2671    	LD	A,L
000E54 DD46FD              A  2672    	LD	B,(IX+-3)
000E57 B0                  A  2673    	OR	A,B
000E58 32 07 00 00         A  2674    	LD	(_btmp),A
                           A  2675    ;  556		
                           A  2676    ;  557		if (newCarry)
000E5C DD27FA              A  2677    	LD	HL,(IX+-6)
000E5F B7                  A  2678    	OR	A,A
000E60 01000000            A  2679    	LD	BC,0
000E64 ED42                A  2680    	SBC	HL,BC
000E66 28 0C               A  2681    	JR	Z,L_146
                           A  2682    ;  558			statusRegister |= C;
000E68 3A 00 00 00         A  2683    	LD	A,(_statusRegister)
000E6C CBC7                A  2684    	SET	0,A
000E6E 32 00 00 00         A  2685    	LD	(_statusRegister),A
                           A  2686    ;  559		else
000E72 18 0A               A  2687    	JR	L_147
000E74                     A  2688    L_146:
                           A  2689    ;  560			statusRegister &= ~C;
000E74 3A 00 00 00         A  2690    	LD	A,(_statusRegister)
000E78 CB87                A  2691    	RES	0,A
000E7A 32 00 00 00         A  2692    	LD	(_statusRegister),A
000E7E                     A  2693    L_147:
                           A  2694    ;  561		
                           A  2695    ;  562		setStatusRegisterNZ(btmp);
000E7E 3A 07 00 00         A  2696    	LD	A,(_btmp)
000E82 4F                  A  2697    	LD	C,A
000E83 0600                A  2698    	LD	B,0
000E85 C5                  A  2699    	PUSH	BC
000E86 CD 72 05 00         A  2700    	CALL	_setStatusRegisterNZ
000E8A C1                  A  2701    	POP	BC
                           A  2702    ;  563		
                           A  2703    ;  564		Mem_Write(op, btmp);
000E8B 3A 07 00 00         A  2704    	LD	A,(_btmp)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  53


PC     Object              I  Line    Source m6502.src
000E8F B7ED62              A  2705    	UEXT	HL
000E92 6F                  A  2706    	LD	L,A
000E93 E5                  A  2707    	PUSH	HL
000E94 ED4B 08 00 00       A  2708    	LD	BC,(_op)
000E99 C5                  A  2709    	PUSH	BC
000E9A CD 00 00 00         A  2710    	CALL	_Mem_Write
000E9E C1                  A  2711    	POP	BC
000E9F C1                  A  2712    	POP	BC
                           A  2713    ;  565		
                           A  2714    ;  566		//cycles += 3;
                           A  2715    ;  567	}
000EA0 DDF9                A  2716    	LD	SP,IX
000EA2 DDE1                A  2717    	POP	IX
000EA4 C9                  A  2718    	RET	
                           A  2719    
                           A  2720    
                           A  2721    ;**************************** _ROR ***************************
                           A  2722    ;Name                         Addr/Register   Size   Type
                           A  2723    ;_Mem_Write                          IMPORT  -----   function
                           A  2724    ;_statusRegister                     STATIC      1   variable
                           A  2725    ;_btmp                               STATIC      1   variable
                           A  2726    ;_op                                 STATIC      3   variable
                           A  2727    ;_Mem_Read                           IMPORT  -----   function
                           A  2728    ;newCarry                              IX-6      3   variable
                           A  2729    ;temp141                               IX-3      3   variable
                           A  2730    
                           A  2731    
                           A  2732    ; Stack Frame Size: 12 (bytes)
                           A  2733    ;       Spill Code: 0 (instruction)
                           A  2734    
                           A  2735    
                           A  2736    ;  568	
                           A  2737    ;  569	static void ROR_A(void)
                           A  2738    ;  570	{
000EA5                     A  2739    _ROR_A:
000EA5 21FDFFFF            A  2740    	LD	HL,-3
000EA9 CD 00 00 00         A  2741    	CALL	__frameset
                           A  2742    ;  571		tmp = accumulator | (statusRegister & C ? 0x100 : 0);
000EAD 3A 00 00 00         A  2743    	LD	A,(_statusRegister)
000EB1 E601                A  2744    	AND	A,1
000EB3 28 09               A  2745    	JR	Z,L_151
000EB5 01000100            A  2746    	LD	BC,256
000EB9 DD0FFD              A  2747    	LD	(IX+-3),BC
000EBC 18 07               A  2748    	JR	L_152
000EBE                     A  2749    L_151:
000EBE 01000000            A  2750    	LD	BC,0
000EC2 DD0FFD              A  2751    	LD	(IX+-3),BC
000EC5                     A  2752    L_152:
000EC5 3A 00 00 00         A  2753    	LD	A,(_accumulator)
000EC9 B7ED62              A  2754    	UEXT	HL
000ECC 6F                  A  2755    	LD	L,A
000ECD DD07FD              A  2756    	LD	BC,(IX+-3)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  54


PC     Object              I  Line    Source m6502.src
000ED0 CD 00 00 00         A  2757    	CALL	__ior
000ED4 22 1A 00 00         A  2758    	LD	(_tmp),HL
                           A  2759    ;  572		
                           A  2760    ;  573		if (accumulator & 1)
000ED8 3A 00 00 00         A  2761    	LD	A,(_accumulator)
000EDC E601                A  2762    	AND	A,1
000EDE 28 0C               A  2763    	JR	Z,L_154
                           A  2764    ;  574			statusRegister |= C;
000EE0 3A 00 00 00         A  2765    	LD	A,(_statusRegister)
000EE4 CBC7                A  2766    	SET	0,A
000EE6 32 00 00 00         A  2767    	LD	(_statusRegister),A
                           A  2768    ;  575		else
000EEA 18 0A               A  2769    	JR	L_155
000EEC                     A  2770    L_154:
                           A  2771    ;  576			statusRegister &= ~C;
000EEC 3A 00 00 00         A  2772    	LD	A,(_statusRegister)
000EF0 CB87                A  2773    	RES	0,A
000EF2 32 00 00 00         A  2774    	LD	(_statusRegister),A
000EF6                     A  2775    L_155:
                           A  2776    ;  577		
                           A  2777    ;  578		accumulator = tmp >> 1;
000EF6 2A 1A 00 00         A  2778    	LD	HL,(_tmp)
000EFA 3E01                A  2779    	LD	A,1
000EFC CD 00 00 00         A  2780    	CALL	__ishrs_b
000F00 7D                  A  2781    	LD	A,L
                           A  2782    ;  579		
                           A  2783    ;  580		setStatusRegisterNZ(accumulator);
000F01 4F                  A  2784    	LD	C,A
000F02 0600                A  2785    	LD	B,0
000F04 C5                  A  2786    	PUSH	BC
000F05 32 00 00 00         A  2787    	LD	(_accumulator),A
000F09 CD 72 05 00         A  2788    	CALL	_setStatusRegisterNZ
000F0D C1                  A  2789    	POP	BC
                           A  2790    ;  581	}
000F0E DDF9                A  2791    	LD	SP,IX
000F10 DDE1                A  2792    	POP	IX
000F12 C9                  A  2793    	RET	
                           A  2794    
                           A  2795    
                           A  2796    ;**************************** _ROR_A ***************************
                           A  2797    ;Name                         Addr/Register   Size   Type
                           A  2798    ;_tmp                                STATIC      3   variable
                           A  2799    ;_accumulator                        STATIC      1   variable
                           A  2800    ;_statusRegister                     STATIC      1   variable
                           A  2801    ;temp149                               IX-3      3   variable
                           A  2802    
                           A  2803    
                           A  2804    ; Stack Frame Size: 9 (bytes)
                           A  2805    ;       Spill Code: 0 (instruction)
                           A  2806    
                           A  2807    
                           A  2808    ;  582	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  55


PC     Object              I  Line    Source m6502.src
                           A  2809    ;  583	static void INC(void)
                           A  2810    ;  584	{
000F13                     A  2811    _INC:
                           A  2812    ;  585		btmp = Mem_Read(op);
000F13 ED4B 08 00 00       A  2813    	LD	BC,(_op)
000F18 C5                  A  2814    	PUSH	BC
000F19 CD 00 00 00         A  2815    	CALL	_Mem_Read
000F1D C1                  A  2816    	POP	BC
000F1E 7D                  A  2817    	LD	A,L
000F1F 32 07 00 00         A  2818    	LD	(_btmp),A
                           A  2819    ;  586		btmp++;
000F23 3C                  A  2820    	INC	A
                           A  2821    ;  587		
                           A  2822    ;  588		setStatusRegisterNZ(btmp);
000F24 4F                  A  2823    	LD	C,A
000F25 0600                A  2824    	LD	B,0
000F27 C5                  A  2825    	PUSH	BC
000F28 32 07 00 00         A  2826    	LD	(_btmp),A
000F2C CD 72 05 00         A  2827    	CALL	_setStatusRegisterNZ
000F30 C1                  A  2828    	POP	BC
                           A  2829    ;  589		
                           A  2830    ;  590		Mem_Write(op, btmp);
000F31 3A 07 00 00         A  2831    	LD	A,(_btmp)
000F35 B7ED62              A  2832    	UEXT	HL
000F38 6F                  A  2833    	LD	L,A
000F39 E5                  A  2834    	PUSH	HL
000F3A ED4B 08 00 00       A  2835    	LD	BC,(_op)
000F3F C5                  A  2836    	PUSH	BC
000F40 CD 00 00 00         A  2837    	CALL	_Mem_Write
000F44 C1                  A  2838    	POP	BC
000F45 C1                  A  2839    	POP	BC
                           A  2840    ;  591		
                           A  2841    ;  592		//cycles += 2;
                           A  2842    ;  593	}
000F46 C9                  A  2843    	RET	
                           A  2844    
                           A  2845    
                           A  2846    ;**************************** _INC ***************************
                           A  2847    ;Name                         Addr/Register   Size   Type
                           A  2848    ;_Mem_Write                          IMPORT  -----   function
                           A  2849    ;_btmp                               STATIC      1   variable
                           A  2850    ;_op                                 STATIC      3   variable
                           A  2851    ;_Mem_Read                           IMPORT  -----   function
                           A  2852    
                           A  2853    
                           A  2854    ; Stack Frame Size: 6 (bytes)
                           A  2855    ;       Spill Code: 0 (instruction)
                           A  2856    
                           A  2857    
                           A  2858    ;  594	
                           A  2859    ;  595	static void DEC(void)
                           A  2860    ;  596	{
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  56


PC     Object              I  Line    Source m6502.src
000F47                     A  2861    _DEC:
                           A  2862    ;  597		btmp = Mem_Read(op);
000F47 ED4B 08 00 00       A  2863    	LD	BC,(_op)
000F4C C5                  A  2864    	PUSH	BC
000F4D CD 00 00 00         A  2865    	CALL	_Mem_Read
000F51 C1                  A  2866    	POP	BC
000F52 7D                  A  2867    	LD	A,L
000F53 32 07 00 00         A  2868    	LD	(_btmp),A
                           A  2869    ;  598		btmp--;
000F57 3D                  A  2870    	DEC	A
                           A  2871    ;  599		
                           A  2872    ;  600		setStatusRegisterNZ(btmp);
000F58 4F                  A  2873    	LD	C,A
000F59 0600                A  2874    	LD	B,0
000F5B C5                  A  2875    	PUSH	BC
000F5C 32 07 00 00         A  2876    	LD	(_btmp),A
000F60 CD 72 05 00         A  2877    	CALL	_setStatusRegisterNZ
000F64 C1                  A  2878    	POP	BC
                           A  2879    ;  601		
                           A  2880    ;  602		Mem_Write(op, btmp);
000F65 3A 07 00 00         A  2881    	LD	A,(_btmp)
000F69 B7ED62              A  2882    	UEXT	HL
000F6C 6F                  A  2883    	LD	L,A
000F6D E5                  A  2884    	PUSH	HL
000F6E ED4B 08 00 00       A  2885    	LD	BC,(_op)
000F73 C5                  A  2886    	PUSH	BC
000F74 CD 00 00 00         A  2887    	CALL	_Mem_Write
000F78 C1                  A  2888    	POP	BC
000F79 C1                  A  2889    	POP	BC
                           A  2890    ;  603		
                           A  2891    ;  604		//cycles += 2;
                           A  2892    ;  605	}
000F7A C9                  A  2893    	RET	
                           A  2894    
                           A  2895    
                           A  2896    ;**************************** _DEC ***************************
                           A  2897    ;Name                         Addr/Register   Size   Type
                           A  2898    ;_Mem_Write                          IMPORT  -----   function
                           A  2899    ;_btmp                               STATIC      1   variable
                           A  2900    ;_op                                 STATIC      3   variable
                           A  2901    ;_Mem_Read                           IMPORT  -----   function
                           A  2902    
                           A  2903    
                           A  2904    ; Stack Frame Size: 6 (bytes)
                           A  2905    ;       Spill Code: 0 (instruction)
                           A  2906    
                           A  2907    
                           A  2908    ;  606	
                           A  2909    ;  607	static void INX(void)
                           A  2910    ;  608	{
000F7B                     A  2911    _INX:
                           A  2912    ;  609		xRegister++;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  57


PC     Object              I  Line    Source m6502.src
000F7B 3A 01 00 00         A  2913    	LD	A,(_xRegister)
000F7F 3C                  A  2914    	INC	A
                           A  2915    ;  610		
                           A  2916    ;  611		setStatusRegisterNZ(xRegister);
000F80 4F                  A  2917    	LD	C,A
000F81 0600                A  2918    	LD	B,0
000F83 C5                  A  2919    	PUSH	BC
000F84 32 01 00 00         A  2920    	LD	(_xRegister),A
000F88 CD 72 05 00         A  2921    	CALL	_setStatusRegisterNZ
000F8C C1                  A  2922    	POP	BC
                           A  2923    ;  612	}
000F8D C9                  A  2924    	RET	
                           A  2925    
                           A  2926    
                           A  2927    ;**************************** _INX ***************************
                           A  2928    ;Name                         Addr/Register   Size   Type
                           A  2929    ;_xRegister                          STATIC      1   variable
                           A  2930    
                           A  2931    
                           A  2932    ; Stack Frame Size: 6 (bytes)
                           A  2933    ;       Spill Code: 0 (instruction)
                           A  2934    
                           A  2935    
                           A  2936    ;  613	
                           A  2937    ;  614	static void INY(void)
                           A  2938    ;  615	{
000F8E                     A  2939    _INY:
                           A  2940    ;  616		yRegister++;
000F8E 3A 02 00 00         A  2941    	LD	A,(_yRegister)
000F92 3C                  A  2942    	INC	A
                           A  2943    ;  617		
                           A  2944    ;  618		setStatusRegisterNZ(yRegister);
000F93 4F                  A  2945    	LD	C,A
000F94 0600                A  2946    	LD	B,0
000F96 C5                  A  2947    	PUSH	BC
000F97 32 02 00 00         A  2948    	LD	(_yRegister),A
000F9B CD 72 05 00         A  2949    	CALL	_setStatusRegisterNZ
000F9F C1                  A  2950    	POP	BC
                           A  2951    ;  619	}
000FA0 C9                  A  2952    	RET	
                           A  2953    
                           A  2954    
                           A  2955    ;**************************** _INY ***************************
                           A  2956    ;Name                         Addr/Register   Size   Type
                           A  2957    ;_yRegister                          STATIC      1   variable
                           A  2958    
                           A  2959    
                           A  2960    ; Stack Frame Size: 6 (bytes)
                           A  2961    ;       Spill Code: 0 (instruction)
                           A  2962    
                           A  2963    
                           A  2964    ;  620	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  58


PC     Object              I  Line    Source m6502.src
                           A  2965    ;  621	static void DEX(void)
                           A  2966    ;  622	{
000FA1                     A  2967    _DEX:
                           A  2968    ;  623		xRegister--;
000FA1 3A 01 00 00         A  2969    	LD	A,(_xRegister)
000FA5 3D                  A  2970    	DEC	A
                           A  2971    ;  624		
                           A  2972    ;  625		setStatusRegisterNZ(xRegister);
000FA6 4F                  A  2973    	LD	C,A
000FA7 0600                A  2974    	LD	B,0
000FA9 C5                  A  2975    	PUSH	BC
000FAA 32 01 00 00         A  2976    	LD	(_xRegister),A
000FAE CD 72 05 00         A  2977    	CALL	_setStatusRegisterNZ
000FB2 C1                  A  2978    	POP	BC
                           A  2979    ;  626	}
000FB3 C9                  A  2980    	RET	
                           A  2981    
                           A  2982    
                           A  2983    ;**************************** _DEX ***************************
                           A  2984    ;Name                         Addr/Register   Size   Type
                           A  2985    ;_xRegister                          STATIC      1   variable
                           A  2986    
                           A  2987    
                           A  2988    ; Stack Frame Size: 6 (bytes)
                           A  2989    ;       Spill Code: 0 (instruction)
                           A  2990    
                           A  2991    
                           A  2992    ;  627	
                           A  2993    ;  628	static void DEY(void)
                           A  2994    ;  629	{
000FB4                     A  2995    _DEY:
                           A  2996    ;  630		yRegister--;
000FB4 3A 02 00 00         A  2997    	LD	A,(_yRegister)
000FB8 3D                  A  2998    	DEC	A
                           A  2999    ;  631		
                           A  3000    ;  632		setStatusRegisterNZ(yRegister);
000FB9 4F                  A  3001    	LD	C,A
000FBA 0600                A  3002    	LD	B,0
000FBC C5                  A  3003    	PUSH	BC
000FBD 32 02 00 00         A  3004    	LD	(_yRegister),A
000FC1 CD 72 05 00         A  3005    	CALL	_setStatusRegisterNZ
000FC5 C1                  A  3006    	POP	BC
                           A  3007    ;  633	}
000FC6 C9                  A  3008    	RET	
                           A  3009    
                           A  3010    
                           A  3011    ;**************************** _DEY ***************************
                           A  3012    ;Name                         Addr/Register   Size   Type
                           A  3013    ;_yRegister                          STATIC      1   variable
                           A  3014    
                           A  3015    
                           A  3016    ; Stack Frame Size: 6 (bytes)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  59


PC     Object              I  Line    Source m6502.src
                           A  3017    ;       Spill Code: 0 (instruction)
                           A  3018    
                           A  3019    
                           A  3020    ;  634	
                           A  3021    ;  635	static void BIT(void)
                           A  3022    ;  636	{
000FC7                     A  3023    _BIT:
                           A  3024    ;  637		btmp = Mem_Read(op);
000FC7 ED4B 08 00 00       A  3025    	LD	BC,(_op)
000FCC C5                  A  3026    	PUSH	BC
000FCD CD 00 00 00         A  3027    	CALL	_Mem_Read
000FD1 C1                  A  3028    	POP	BC
000FD2 7D                  A  3029    	LD	A,L
000FD3 32 07 00 00         A  3030    	LD	(_btmp),A
                           A  3031    ;  638		
                           A  3032    ;  639		if (btmp & 0x40)
000FD7 E640                A  3033    	AND	A,64
000FD9 28 0C               A  3034    	JR	Z,L_170
                           A  3035    ;  640			statusRegister |= V;
000FDB 3A 00 00 00         A  3036    	LD	A,(_statusRegister)
000FDF CBF7                A  3037    	SET	6,A
000FE1 32 00 00 00         A  3038    	LD	(_statusRegister),A
                           A  3039    ;  641		else
000FE5 18 0A               A  3040    	JR	L_173
000FE7                     A  3041    L_170:
                           A  3042    ;  642			statusRegister &= ~V;
000FE7 3A 00 00 00         A  3043    	LD	A,(_statusRegister)
000FEB CBB7                A  3044    	RES	6,A
000FED 32 00 00 00         A  3045    	LD	(_statusRegister),A
000FF1                     A  3046    L_173:
                           A  3047    ;  643		
                           A  3048    ;  644		if (btmp & 0x80)
000FF1 3A 07 00 00         A  3049    	LD	A,(_btmp)
000FF5 E680                A  3050    	AND	A,128
000FF7 28 0C               A  3051    	JR	Z,L_172
                           A  3052    ;  645			statusRegister |= N;
000FF9 3A 00 00 00         A  3053    	LD	A,(_statusRegister)
000FFD CBFF                A  3054    	SET	7,A
000FFF 32 00 00 00         A  3055    	LD	(_statusRegister),A
                           A  3056    ;  646		else
001003 18 0A               A  3057    	JR	L_176
001005                     A  3058    L_172:
                           A  3059    ;  647			statusRegister &= ~N;
001005 3A 00 00 00         A  3060    	LD	A,(_statusRegister)
001009 CBBF                A  3061    	RES	7,A
00100B 32 00 00 00         A  3062    	LD	(_statusRegister),A
00100F                     A  3063    L_176:
                           A  3064    ;  648		
                           A  3065    ;  649		if (!(btmp & accumulator))
00100F ED4B 00 00 00       A  3066    	LD	BC,(_accumulator)
001014 3A 07 00 00         A  3067    	LD	A,(_btmp)
001018 A1                  A  3068    	AND	A,C
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  60


PC     Object              I  Line    Source m6502.src
001019 20 0C               A  3069    	JR	NZ,L_175
                           A  3070    ;  650			statusRegister |= Z;
00101B 3A 00 00 00         A  3071    	LD	A,(_statusRegister)
00101F CBCF                A  3072    	SET	1,A
001021 32 00 00 00         A  3073    	LD	(_statusRegister),A
                           A  3074    ;  651		else
001025 18 0A               A  3075    	JR	L_177
001027                     A  3076    L_175:
                           A  3077    ;  652			statusRegister &= ~Z;
001027 3A 00 00 00         A  3078    	LD	A,(_statusRegister)
00102B CB8F                A  3079    	RES	1,A
00102D 32 00 00 00         A  3080    	LD	(_statusRegister),A
                           A  3081    ;  653		
                           A  3082    ;  654		//cycles++;
                           A  3083    ;  655	}
001031                     A  3084    L_177:
001031 C9                  A  3085    	RET	
                           A  3086    
                           A  3087    
                           A  3088    ;**************************** _BIT ***************************
                           A  3089    ;Name                         Addr/Register   Size   Type
                           A  3090    ;_accumulator                        STATIC      1   variable
                           A  3091    ;_statusRegister                     STATIC      1   variable
                           A  3092    ;_btmp                               STATIC      1   variable
                           A  3093    ;_op                                 STATIC      3   variable
                           A  3094    ;_Mem_Read                           IMPORT  -----   function
                           A  3095    
                           A  3096    
                           A  3097    ; Stack Frame Size: 6 (bytes)
                           A  3098    ;       Spill Code: 0 (instruction)
                           A  3099    
                           A  3100    
                           A  3101    ;  656	
                           A  3102    ;  657	static void PHA(void)
                           A  3103    ;  658	{
001032                     A  3104    _PHA:
                           A  3105    ;  659		Mem_Write((unsigned short)(0x100 + stackPointer), accumulator);
001032 3A 00 00 00         A  3106    	LD	A,(_accumulator)
001036 B7ED62              A  3107    	UEXT	HL
001039 6F                  A  3108    	LD	L,A
00103A E5                  A  3109    	PUSH	HL
00103B 3A 03 00 00         A  3110    	LD	A,(_stackPointer)
00103F B7ED62              A  3111    	UEXT	HL
001042 6F                  A  3112    	LD	L,A
001043 01000100            A  3113    	LD	BC,256
001047 09                  A  3114    	ADD	HL,BC
001048 E5C1                A  3115    	LD	BC,HL
00104A CD 00 00 00         A  3116    	CALL	__stoiu
00104E E5                  A  3117    	PUSH	HL
00104F CD 00 00 00         A  3118    	CALL	_Mem_Write
001053 C1                  A  3119    	POP	BC
001054 C1                  A  3120    	POP	BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  61


PC     Object              I  Line    Source m6502.src
                           A  3121    ;  660		
                           A  3122    ;  661		stackPointer--;
001055 3A 03 00 00         A  3123    	LD	A,(_stackPointer)
001059 3D                  A  3124    	DEC	A
00105A 32 03 00 00         A  3125    	LD	(_stackPointer),A
                           A  3126    ;  662		
                           A  3127    ;  663		//cycles++;
                           A  3128    ;  664	}
00105E C9                  A  3129    	RET	
                           A  3130    
                           A  3131    
                           A  3132    ;**************************** _PHA ***************************
                           A  3133    ;Name                         Addr/Register   Size   Type
                           A  3134    ;_stackPointer                       STATIC      1   variable
                           A  3135    ;_accumulator                        STATIC      1   variable
                           A  3136    ;_Mem_Write                          IMPORT  -----   function
                           A  3137    
                           A  3138    
                           A  3139    ; Stack Frame Size: 6 (bytes)
                           A  3140    ;       Spill Code: 0 (instruction)
                           A  3141    
                           A  3142    
                           A  3143    ;  665	
                           A  3144    ;  666	static void PHP(void)
                           A  3145    ;  667	{
00105F                     A  3146    _PHP:
                           A  3147    ;  668		Mem_Write((unsigned short)(0x100 + stackPointer), statusRegister);
00105F 3A 00 00 00         A  3148    	LD	A,(_statusRegister)
001063 B7ED62              A  3149    	UEXT	HL
001066 6F                  A  3150    	LD	L,A
001067 E5                  A  3151    	PUSH	HL
001068 3A 03 00 00         A  3152    	LD	A,(_stackPointer)
00106C B7ED62              A  3153    	UEXT	HL
00106F 6F                  A  3154    	LD	L,A
001070 01000100            A  3155    	LD	BC,256
001074 09                  A  3156    	ADD	HL,BC
001075 E5C1                A  3157    	LD	BC,HL
001077 CD 00 00 00         A  3158    	CALL	__stoiu
00107B E5                  A  3159    	PUSH	HL
00107C CD 00 00 00         A  3160    	CALL	_Mem_Write
001080 C1                  A  3161    	POP	BC
001081 C1                  A  3162    	POP	BC
                           A  3163    ;  669		
                           A  3164    ;  670		stackPointer--;
001082 3A 03 00 00         A  3165    	LD	A,(_stackPointer)
001086 3D                  A  3166    	DEC	A
001087 32 03 00 00         A  3167    	LD	(_stackPointer),A
                           A  3168    ;  671		
                           A  3169    ;  672		//cycles++;
                           A  3170    ;  673	}
00108B C9                  A  3171    	RET	
                           A  3172    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  62


PC     Object              I  Line    Source m6502.src
                           A  3173    
                           A  3174    ;**************************** _PHP ***************************
                           A  3175    ;Name                         Addr/Register   Size   Type
                           A  3176    ;_stackPointer                       STATIC      1   variable
                           A  3177    ;_statusRegister                     STATIC      1   variable
                           A  3178    ;_Mem_Write                          IMPORT  -----   function
                           A  3179    
                           A  3180    
                           A  3181    ; Stack Frame Size: 6 (bytes)
                           A  3182    ;       Spill Code: 0 (instruction)
                           A  3183    
                           A  3184    
                           A  3185    ;  674	
                           A  3186    ;  675	static void PLA(void)
                           A  3187    ;  676	{
00108C                     A  3188    _PLA:
                           A  3189    ;  677		stackPointer++;
00108C 3A 03 00 00         A  3190    	LD	A,(_stackPointer)
001090 3C                  A  3191    	INC	A
                           A  3192    ;  678		
                           A  3193    ;  679		accumulator = Mem_Read((unsigned short)(stackPointer + 0x100));
001091 B7ED62              A  3194    	UEXT	HL
001094 6F                  A  3195    	LD	L,A
001095 01000100            A  3196    	LD	BC,256
001099 09                  A  3197    	ADD	HL,BC
00109A E5C1                A  3198    	LD	BC,HL
00109C CD 00 00 00         A  3199    	CALL	__stoiu
0010A0 E5                  A  3200    	PUSH	HL
0010A1 32 03 00 00         A  3201    	LD	(_stackPointer),A
0010A5 CD 00 00 00         A  3202    	CALL	_Mem_Read
0010A9 C1                  A  3203    	POP	BC
0010AA 7D                  A  3204    	LD	A,L
                           A  3205    ;  680		
                           A  3206    ;  681		setStatusRegisterNZ(accumulator);
0010AB 4F                  A  3207    	LD	C,A
0010AC 0600                A  3208    	LD	B,0
0010AE C5                  A  3209    	PUSH	BC
0010AF 32 00 00 00         A  3210    	LD	(_accumulator),A
0010B3 CD 72 05 00         A  3211    	CALL	_setStatusRegisterNZ
0010B7 C1                  A  3212    	POP	BC
                           A  3213    ;  682		
                           A  3214    ;  683		//cycles += 2;
                           A  3215    ;  684	}
0010B8 C9                  A  3216    	RET	
                           A  3217    
                           A  3218    
                           A  3219    ;**************************** _PLA ***************************
                           A  3220    ;Name                         Addr/Register   Size   Type
                           A  3221    ;_accumulator                        STATIC      1   variable
                           A  3222    ;_Mem_Read                           IMPORT  -----   function
                           A  3223    ;_stackPointer                       STATIC      1   variable
                           A  3224    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  63


PC     Object              I  Line    Source m6502.src
                           A  3225    
                           A  3226    ; Stack Frame Size: 6 (bytes)
                           A  3227    ;       Spill Code: 0 (instruction)
                           A  3228    
                           A  3229    
                           A  3230    ;  685	
                           A  3231    ;  686	static void PLP(void)
                           A  3232    ;  687	{
0010B9                     A  3233    _PLP:
                           A  3234    ;  688		stackPointer++;
0010B9 3A 03 00 00         A  3235    	LD	A,(_stackPointer)
0010BD 3C                  A  3236    	INC	A
                           A  3237    ;  689		
                           A  3238    ;  690		statusRegister = Mem_Read((unsigned short)(stackPointer + 0x100));
0010BE B7ED62              A  3239    	UEXT	HL
0010C1 6F                  A  3240    	LD	L,A
0010C2 01000100            A  3241    	LD	BC,256
0010C6 09                  A  3242    	ADD	HL,BC
0010C7 E5C1                A  3243    	LD	BC,HL
0010C9 CD 00 00 00         A  3244    	CALL	__stoiu
0010CD E5                  A  3245    	PUSH	HL
0010CE 32 03 00 00         A  3246    	LD	(_stackPointer),A
0010D2 CD 00 00 00         A  3247    	CALL	_Mem_Read
0010D6 C1                  A  3248    	POP	BC
0010D7 7D                  A  3249    	LD	A,L
0010D8 32 00 00 00         A  3250    	LD	(_statusRegister),A
                           A  3251    ;  691		
                           A  3252    ;  692		//cycles += 2;
                           A  3253    ;  693	}
0010DC C9                  A  3254    	RET	
                           A  3255    
                           A  3256    
                           A  3257    ;**************************** _PLP ***************************
                           A  3258    ;Name                         Addr/Register   Size   Type
                           A  3259    ;_statusRegister                     STATIC      1   variable
                           A  3260    ;_Mem_Read                           IMPORT  -----   function
                           A  3261    ;_stackPointer                       STATIC      1   variable
                           A  3262    
                           A  3263    
                           A  3264    ; Stack Frame Size: 6 (bytes)
                           A  3265    ;       Spill Code: 0 (instruction)
                           A  3266    
                           A  3267    
                           A  3268    ;  694	
                           A  3269    ;  695	static void BRK(void)
                           A  3270    ;  696	{
0010DD                     A  3271    _BRK:
                           A  3272    ;  697		pushProgramCounter();
0010DD CD 3C 00 00         A  3273    	CALL	_pushProgramCounter
                           A  3274    ;  698		
                           A  3275    ;  699		PHP();
0010E1 CD 5F 10 00         A  3276    	CALL	_PHP
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  64


PC     Object              I  Line    Source m6502.src
                           A  3277    ;  700		
                           A  3278    ;  701		statusRegister |= B;
                           A  3279    ;  702		
                           A  3280    ;  703		programCounter = Mem_Read_Absolute(0xFFFE);
0010E5 01FEFF00            A  3281    	LD	BC,65534
0010E9 C5                  A  3282    	PUSH	BC
0010EA 3A 00 00 00         A  3283    	LD	A,(_statusRegister)
0010EE CBE7                A  3284    	SET	4,A
0010F0 32 00 00 00         A  3285    	LD	(_statusRegister),A
0010F4 CD 00 00 00         A  3286    	CALL	_Mem_Read_Absolute
0010F8 C1                  A  3287    	POP	BC
0010F9 E5C1                A  3288    	LD	BC,HL
0010FB CD 00 00 00         A  3289    	CALL	__stoiu
0010FF 22 04 00 00         A  3290    	LD	(_programCounter),HL
                           A  3291    ;  704		
                           A  3292    ;  705		//cycles += 3;
                           A  3293    ;  706	}
001103 C9                  A  3294    	RET	
                           A  3295    
                           A  3296    
                           A  3297    ;**************************** _BRK ***************************
                           A  3298    ;Name                         Addr/Register   Size   Type
                           A  3299    ;_programCounter                     STATIC      3   variable
                           A  3300    ;_statusRegister                     STATIC      1   variable
                           A  3301    
                           A  3302    
                           A  3303    ; Stack Frame Size: 6 (bytes)
                           A  3304    ;       Spill Code: 0 (instruction)
                           A  3305    
                           A  3306    
                           A  3307    ;  707	
                           A  3308    ;  708	static void RTI(void)
                           A  3309    ;  709	{
001104                     A  3310    _RTI:
                           A  3311    ;  710		PLP();
001104 CD B9 10 00         A  3312    	CALL	_PLP
                           A  3313    ;  711		
                           A  3314    ;  712		popProgramCounter();
001108 CD 94 00 00         A  3315    	CALL	_popProgramCounter
                           A  3316    ;  713		
                           A  3317    ;  714		//cycles++;
                           A  3318    ;  715	}
00110C C9                  A  3319    	RET	
                           A  3320    
                           A  3321    
                           A  3322    ;**************************** _RTI ***************************
                           A  3323    ;Name                         Addr/Register   Size   Type
                           A  3324    
                           A  3325    
                           A  3326    ; Stack Frame Size: 6 (bytes)
                           A  3327    ;       Spill Code: 0 (instruction)
                           A  3328    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  65


PC     Object              I  Line    Source m6502.src
                           A  3329    
                           A  3330    ;  716	
                           A  3331    ;  717	static void JMP(void)
                           A  3332    ;  718	{
00110D                     A  3333    _JMP:
                           A  3334    ;  719		programCounter = op;
00110D ED4B 08 00 00       A  3335    	LD	BC,(_op)
001112 ED43 04 00 00       A  3336    	LD	(_programCounter),BC
                           A  3337    ;  720	}
001117 C9                  A  3338    	RET	
                           A  3339    
                           A  3340    
                           A  3341    ;**************************** _JMP ***************************
                           A  3342    ;Name                         Addr/Register   Size   Type
                           A  3343    ;_programCounter                     STATIC      3   variable
                           A  3344    ;_op                                 STATIC      3   variable
                           A  3345    
                           A  3346    
                           A  3347    ; Stack Frame Size: 6 (bytes)
                           A  3348    ;       Spill Code: 0 (instruction)
                           A  3349    
                           A  3350    
                           A  3351    ;  721	
                           A  3352    ;  722	static void RTS(void)
                           A  3353    ;  723	{
001118                     A  3354    _RTS:
                           A  3355    ;  724		popProgramCounter();
001118 CD 94 00 00         A  3356    	CALL	_popProgramCounter
                           A  3357    ;  725		
                           A  3358    ;  726		programCounter++;
00111C ED4B 04 00 00       A  3359    	LD	BC,(_programCounter)
001121 03                  A  3360    	INC	BC
001122 ED43 04 00 00       A  3361    	LD	(_programCounter),BC
                           A  3362    ;  727		
                           A  3363    ;  728		//cycles += 2;
                           A  3364    ;  729	}
001127 C9                  A  3365    	RET	
                           A  3366    
                           A  3367    
                           A  3368    ;**************************** _RTS ***************************
                           A  3369    ;Name                         Addr/Register   Size   Type
                           A  3370    ;_programCounter                     STATIC      3   variable
                           A  3371    
                           A  3372    
                           A  3373    ; Stack Frame Size: 6 (bytes)
                           A  3374    ;       Spill Code: 0 (instruction)
                           A  3375    
                           A  3376    
                           A  3377    ;  730	
                           A  3378    ;  731	static void JSR(void)
                           A  3379    ;  732	{
001128                     A  3380    _JSR:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  66


PC     Object              I  Line    Source m6502.src
                           A  3381    ;  733		opL = Mem_Read(programCounter++);
001128 ED4B 04 00 00       A  3382    	LD	BC,(_programCounter)
00112D C5                  A  3383    	PUSH	BC
00112E ED4B 04 00 00       A  3384    	LD	BC,(_programCounter)
001133 03                  A  3385    	INC	BC
001134 ED43 04 00 00       A  3386    	LD	(_programCounter),BC
001139 CD 00 00 00         A  3387    	CALL	_Mem_Read
00113D C1                  A  3388    	POP	BC
00113E 22 0E 00 00         A  3389    	LD	(_opL),HL
                           A  3390    ;  734		
                           A  3391    ;  735		pushProgramCounter();
001142 CD 3C 00 00         A  3392    	CALL	_pushProgramCounter
                           A  3393    ;  736		
                           A  3394    ;  737		programCounter = opL + (Mem_Read(programCounter) << 8);
001146 ED4B 04 00 00       A  3395    	LD	BC,(_programCounter)
00114B C5                  A  3396    	PUSH	BC
00114C CD 00 00 00         A  3397    	CALL	_Mem_Read
001150 C1                  A  3398    	POP	BC
001151 ED4B 0E 00 00       A  3399    	LD	BC,(_opL)
001156 3E08                A  3400    	LD	A,8
001158 CD 00 00 00         A  3401    	CALL	__ishl_b
00115C 09                  A  3402    	ADD	HL,BC
00115D 22 04 00 00         A  3403    	LD	(_programCounter),HL
                           A  3404    ;  738		
                           A  3405    ;  739		//cycles += 3;
                           A  3406    ;  740	}
001161 C9                  A  3407    	RET	
                           A  3408    
                           A  3409    
                           A  3410    ;**************************** _JSR ***************************
                           A  3411    ;Name                         Addr/Register   Size   Type
                           A  3412    ;_opL                                STATIC      3   variable
                           A  3413    ;_Mem_Read                           IMPORT  -----   function
                           A  3414    ;_programCounter                     STATIC      3   variable
                           A  3415    
                           A  3416    
                           A  3417    ; Stack Frame Size: 6 (bytes)
                           A  3418    ;       Spill Code: 0 (instruction)
                           A  3419    
                           A  3420    
                           A  3421    ;  741	
                           A  3422    ;  742	static void branch(void)
                           A  3423    ;  743	{
001162                     A  3424    _branch:
                           A  3425    ;  744		//cycles++;
                           A  3426    ;  745		
                           A  3427    ;  746		/*if ((programCounter & 0xFF00) != (op & 0xFF00))
                           A  3428    ;  747			//cycles++;*/
                           A  3429    ;  748		
                           A  3430    ;  749		programCounter = op;
001162 ED4B 08 00 00       A  3431    	LD	BC,(_op)
001167 ED43 04 00 00       A  3432    	LD	(_programCounter),BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  67


PC     Object              I  Line    Source m6502.src
                           A  3433    ;  750	}
00116C C9                  A  3434    	RET	
                           A  3435    
                           A  3436    
                           A  3437    ;**************************** _branch ***************************
                           A  3438    ;Name                         Addr/Register   Size   Type
                           A  3439    ;_programCounter                     STATIC      3   variable
                           A  3440    ;_op                                 STATIC      3   variable
                           A  3441    
                           A  3442    
                           A  3443    ; Stack Frame Size: 6 (bytes)
                           A  3444    ;       Spill Code: 0 (instruction)
                           A  3445    
                           A  3446    
                           A  3447    ;  751	
                           A  3448    ;  752	static void BNE(void)
                           A  3449    ;  753	{
00116D                     A  3450    _BNE:
                           A  3451    ;  754		if (!(statusRegister & Z))
00116D 3A 00 00 00         A  3452    	LD	A,(_statusRegister)
001171 E602                A  3453    	AND	A,2
001173 20 04               A  3454    	JR	NZ,L_195
                           A  3455    ;  755			branch();
001175 CD 62 11 00         A  3456    	CALL	_branch
                           A  3457    ;  756	}
001179                     A  3458    L_195:
001179 C9                  A  3459    	RET	
                           A  3460    
                           A  3461    
                           A  3462    ;**************************** _BNE ***************************
                           A  3463    ;Name                         Addr/Register   Size   Type
                           A  3464    ;_statusRegister                     STATIC      1   variable
                           A  3465    
                           A  3466    
                           A  3467    ; Stack Frame Size: 6 (bytes)
                           A  3468    ;       Spill Code: 0 (instruction)
                           A  3469    
                           A  3470    
                           A  3471    ;  757	
                           A  3472    ;  758	static void BEQ(void)
                           A  3473    ;  759	{
00117A                     A  3474    _BEQ:
                           A  3475    ;  760		if (statusRegister & Z)
00117A 3A 00 00 00         A  3476    	LD	A,(_statusRegister)
00117E E602                A  3477    	AND	A,2
001180 28 04               A  3478    	JR	Z,L_197
                           A  3479    ;  761			branch();
001182 CD 62 11 00         A  3480    	CALL	_branch
                           A  3481    ;  762	}
001186                     A  3482    L_197:
001186 C9                  A  3483    	RET	
                           A  3484    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  68


PC     Object              I  Line    Source m6502.src
                           A  3485    
                           A  3486    ;**************************** _BEQ ***************************
                           A  3487    ;Name                         Addr/Register   Size   Type
                           A  3488    ;_statusRegister                     STATIC      1   variable
                           A  3489    
                           A  3490    
                           A  3491    ; Stack Frame Size: 6 (bytes)
                           A  3492    ;       Spill Code: 0 (instruction)
                           A  3493    
                           A  3494    
                           A  3495    ;  763	
                           A  3496    ;  764	static void BVC(void)
                           A  3497    ;  765	{
001187                     A  3498    _BVC:
                           A  3499    ;  766		if (!(statusRegister & V))
001187 3A 00 00 00         A  3500    	LD	A,(_statusRegister)
00118B E640                A  3501    	AND	A,64
00118D 20 04               A  3502    	JR	NZ,L_199
                           A  3503    ;  767			branch();
00118F CD 62 11 00         A  3504    	CALL	_branch
                           A  3505    ;  768	}
001193                     A  3506    L_199:
001193 C9                  A  3507    	RET	
                           A  3508    
                           A  3509    
                           A  3510    ;**************************** _BVC ***************************
                           A  3511    ;Name                         Addr/Register   Size   Type
                           A  3512    ;_statusRegister                     STATIC      1   variable
                           A  3513    
                           A  3514    
                           A  3515    ; Stack Frame Size: 6 (bytes)
                           A  3516    ;       Spill Code: 0 (instruction)
                           A  3517    
                           A  3518    
                           A  3519    ;  769	
                           A  3520    ;  770	static void BVS(void)
                           A  3521    ;  771	{
001194                     A  3522    _BVS:
                           A  3523    ;  772		if (statusRegister & V)
001194 3A 00 00 00         A  3524    	LD	A,(_statusRegister)
001198 E640                A  3525    	AND	A,64
00119A 28 04               A  3526    	JR	Z,L_201
                           A  3527    ;  773			branch();
00119C CD 62 11 00         A  3528    	CALL	_branch
                           A  3529    ;  774	}
0011A0                     A  3530    L_201:
0011A0 C9                  A  3531    	RET	
                           A  3532    
                           A  3533    
                           A  3534    ;**************************** _BVS ***************************
                           A  3535    ;Name                         Addr/Register   Size   Type
                           A  3536    ;_statusRegister                     STATIC      1   variable
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  69


PC     Object              I  Line    Source m6502.src
                           A  3537    
                           A  3538    
                           A  3539    ; Stack Frame Size: 6 (bytes)
                           A  3540    ;       Spill Code: 0 (instruction)
                           A  3541    
                           A  3542    
                           A  3543    ;  775	
                           A  3544    ;  776	static void BCC(void)
                           A  3545    ;  777	{
0011A1                     A  3546    _BCC:
                           A  3547    ;  778		if (!(statusRegister & C))
0011A1 3A 00 00 00         A  3548    	LD	A,(_statusRegister)
0011A5 E601                A  3549    	AND	A,1
0011A7 20 04               A  3550    	JR	NZ,L_203
                           A  3551    ;  779			branch();
0011A9 CD 62 11 00         A  3552    	CALL	_branch
                           A  3553    ;  780	}
0011AD                     A  3554    L_203:
0011AD C9                  A  3555    	RET	
                           A  3556    
                           A  3557    
                           A  3558    ;**************************** _BCC ***************************
                           A  3559    ;Name                         Addr/Register   Size   Type
                           A  3560    ;_statusRegister                     STATIC      1   variable
                           A  3561    
                           A  3562    
                           A  3563    ; Stack Frame Size: 6 (bytes)
                           A  3564    ;       Spill Code: 0 (instruction)
                           A  3565    
                           A  3566    
                           A  3567    ;  781	
                           A  3568    ;  782	static void BCS(void)
                           A  3569    ;  783	{
0011AE                     A  3570    _BCS:
                           A  3571    ;  784		if (statusRegister & C)
0011AE 3A 00 00 00         A  3572    	LD	A,(_statusRegister)
0011B2 E601                A  3573    	AND	A,1
0011B4 28 04               A  3574    	JR	Z,L_205
                           A  3575    ;  785			branch();
0011B6 CD 62 11 00         A  3576    	CALL	_branch
                           A  3577    ;  786	}
0011BA                     A  3578    L_205:
0011BA C9                  A  3579    	RET	
                           A  3580    
                           A  3581    
                           A  3582    ;**************************** _BCS ***************************
                           A  3583    ;Name                         Addr/Register   Size   Type
                           A  3584    ;_statusRegister                     STATIC      1   variable
                           A  3585    
                           A  3586    
                           A  3587    ; Stack Frame Size: 6 (bytes)
                           A  3588    ;       Spill Code: 0 (instruction)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  70


PC     Object              I  Line    Source m6502.src
                           A  3589    
                           A  3590    
                           A  3591    ;  787	
                           A  3592    ;  788	static void BPL(void)
                           A  3593    ;  789	{
0011BB                     A  3594    _BPL:
                           A  3595    ;  790		if (!(statusRegister & N))
0011BB 3A 00 00 00         A  3596    	LD	A,(_statusRegister)
0011BF E680                A  3597    	AND	A,128
0011C1 20 04               A  3598    	JR	NZ,L_207
                           A  3599    ;  791			branch();
0011C3 CD 62 11 00         A  3600    	CALL	_branch
                           A  3601    ;  792	}
0011C7                     A  3602    L_207:
0011C7 C9                  A  3603    	RET	
                           A  3604    
                           A  3605    
                           A  3606    ;**************************** _BPL ***************************
                           A  3607    ;Name                         Addr/Register   Size   Type
                           A  3608    ;_statusRegister                     STATIC      1   variable
                           A  3609    
                           A  3610    
                           A  3611    ; Stack Frame Size: 6 (bytes)
                           A  3612    ;       Spill Code: 0 (instruction)
                           A  3613    
                           A  3614    
                           A  3615    ;  793	
                           A  3616    ;  794	static void BMI(void)
                           A  3617    ;  795	{
0011C8                     A  3618    _BMI:
                           A  3619    ;  796		if (statusRegister & N)
0011C8 3A 00 00 00         A  3620    	LD	A,(_statusRegister)
0011CC E680                A  3621    	AND	A,128
0011CE 28 04               A  3622    	JR	Z,L_209
                           A  3623    ;  797			branch();
0011D0 CD 62 11 00         A  3624    	CALL	_branch
                           A  3625    ;  798	}
0011D4                     A  3626    L_209:
0011D4 C9                  A  3627    	RET	
                           A  3628    
                           A  3629    
                           A  3630    ;**************************** _BMI ***************************
                           A  3631    ;Name                         Addr/Register   Size   Type
                           A  3632    ;_statusRegister                     STATIC      1   variable
                           A  3633    
                           A  3634    
                           A  3635    ; Stack Frame Size: 6 (bytes)
                           A  3636    ;       Spill Code: 0 (instruction)
                           A  3637    
                           A  3638    
                           A  3639    ;  799	
                           A  3640    ;  800	static void TAX(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  71


PC     Object              I  Line    Source m6502.src
                           A  3641    ;  801	{
0011D5                     A  3642    _TAX:
                           A  3643    ;  802		xRegister = accumulator;
0011D5 3A 00 00 00         A  3644    	LD	A,(_accumulator)
0011D9 32 01 00 00         A  3645    	LD	(_xRegister),A
                           A  3646    ;  803		
                           A  3647    ;  804		setStatusRegisterNZ(accumulator);
0011DD 3A 00 00 00         A  3648    	LD	A,(_accumulator)
0011E1 4F                  A  3649    	LD	C,A
0011E2 0600                A  3650    	LD	B,0
0011E4 C5                  A  3651    	PUSH	BC
0011E5 CD 72 05 00         A  3652    	CALL	_setStatusRegisterNZ
0011E9 C1                  A  3653    	POP	BC
                           A  3654    ;  805	}
0011EA C9                  A  3655    	RET	
                           A  3656    
                           A  3657    
                           A  3658    ;**************************** _TAX ***************************
                           A  3659    ;Name                         Addr/Register   Size   Type
                           A  3660    ;_xRegister                          STATIC      1   variable
                           A  3661    ;_accumulator                        STATIC      1   variable
                           A  3662    
                           A  3663    
                           A  3664    ; Stack Frame Size: 6 (bytes)
                           A  3665    ;       Spill Code: 0 (instruction)
                           A  3666    
                           A  3667    
                           A  3668    ;  806	
                           A  3669    ;  807	static void TXA(void)
                           A  3670    ;  808	{
0011EB                     A  3671    _TXA:
                           A  3672    ;  809		accumulator = xRegister;
0011EB 3A 01 00 00         A  3673    	LD	A,(_xRegister)
0011EF 32 00 00 00         A  3674    	LD	(_accumulator),A
                           A  3675    ;  810		
                           A  3676    ;  811		setStatusRegisterNZ(accumulator);
0011F3 3A 01 00 00         A  3677    	LD	A,(_xRegister)
0011F7 4F                  A  3678    	LD	C,A
0011F8 0600                A  3679    	LD	B,0
0011FA C5                  A  3680    	PUSH	BC
0011FB CD 72 05 00         A  3681    	CALL	_setStatusRegisterNZ
0011FF C1                  A  3682    	POP	BC
                           A  3683    ;  812	}
001200 C9                  A  3684    	RET	
                           A  3685    
                           A  3686    
                           A  3687    ;**************************** _TXA ***************************
                           A  3688    ;Name                         Addr/Register   Size   Type
                           A  3689    ;_accumulator                        STATIC      1   variable
                           A  3690    ;_xRegister                          STATIC      1   variable
                           A  3691    
                           A  3692    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  72


PC     Object              I  Line    Source m6502.src
                           A  3693    ; Stack Frame Size: 6 (bytes)
                           A  3694    ;       Spill Code: 0 (instruction)
                           A  3695    
                           A  3696    
                           A  3697    ;  813	
                           A  3698    ;  814	static void TAY(void)
                           A  3699    ;  815	{
001201                     A  3700    _TAY:
                           A  3701    ;  816		yRegister = accumulator;
001201 3A 00 00 00         A  3702    	LD	A,(_accumulator)
001205 32 02 00 00         A  3703    	LD	(_yRegister),A
                           A  3704    ;  817		
                           A  3705    ;  818		setStatusRegisterNZ(accumulator);
001209 3A 00 00 00         A  3706    	LD	A,(_accumulator)
00120D 4F                  A  3707    	LD	C,A
00120E 0600                A  3708    	LD	B,0
001210 C5                  A  3709    	PUSH	BC
001211 CD 72 05 00         A  3710    	CALL	_setStatusRegisterNZ
001215 C1                  A  3711    	POP	BC
                           A  3712    ;  819	}
001216 C9                  A  3713    	RET	
                           A  3714    
                           A  3715    
                           A  3716    ;**************************** _TAY ***************************
                           A  3717    ;Name                         Addr/Register   Size   Type
                           A  3718    ;_yRegister                          STATIC      1   variable
                           A  3719    ;_accumulator                        STATIC      1   variable
                           A  3720    
                           A  3721    
                           A  3722    ; Stack Frame Size: 6 (bytes)
                           A  3723    ;       Spill Code: 0 (instruction)
                           A  3724    
                           A  3725    
                           A  3726    ;  820	
                           A  3727    ;  821	static void TYA(void)
                           A  3728    ;  822	{
001217                     A  3729    _TYA:
                           A  3730    ;  823		accumulator = yRegister;
001217 3A 02 00 00         A  3731    	LD	A,(_yRegister)
00121B 32 00 00 00         A  3732    	LD	(_accumulator),A
                           A  3733    ;  824		
                           A  3734    ;  825		setStatusRegisterNZ(accumulator);
00121F 3A 02 00 00         A  3735    	LD	A,(_yRegister)
001223 4F                  A  3736    	LD	C,A
001224 0600                A  3737    	LD	B,0
001226 C5                  A  3738    	PUSH	BC
001227 CD 72 05 00         A  3739    	CALL	_setStatusRegisterNZ
00122B C1                  A  3740    	POP	BC
                           A  3741    ;  826	}
00122C C9                  A  3742    	RET	
                           A  3743    
                           A  3744    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  73


PC     Object              I  Line    Source m6502.src
                           A  3745    ;**************************** _TYA ***************************
                           A  3746    ;Name                         Addr/Register   Size   Type
                           A  3747    ;_accumulator                        STATIC      1   variable
                           A  3748    ;_yRegister                          STATIC      1   variable
                           A  3749    
                           A  3750    
                           A  3751    ; Stack Frame Size: 6 (bytes)
                           A  3752    ;       Spill Code: 0 (instruction)
                           A  3753    
                           A  3754    
                           A  3755    ;  827	
                           A  3756    ;  828	static void TXS(void)
                           A  3757    ;  829	{
00122D                     A  3758    _TXS:
                           A  3759    ;  830		stackPointer = xRegister;
00122D 3A 01 00 00         A  3760    	LD	A,(_xRegister)
001231 32 03 00 00         A  3761    	LD	(_stackPointer),A
                           A  3762    ;  831	}
001235 C9                  A  3763    	RET	
                           A  3764    
                           A  3765    
                           A  3766    ;**************************** _TXS ***************************
                           A  3767    ;Name                         Addr/Register   Size   Type
                           A  3768    ;_stackPointer                       STATIC      1   variable
                           A  3769    ;_xRegister                          STATIC      1   variable
                           A  3770    
                           A  3771    
                           A  3772    ; Stack Frame Size: 6 (bytes)
                           A  3773    ;       Spill Code: 0 (instruction)
                           A  3774    
                           A  3775    
                           A  3776    ;  832	
                           A  3777    ;  833	static void TSX(void)
                           A  3778    ;  834	{
001236                     A  3779    _TSX:
                           A  3780    ;  835		xRegister = stackPointer;
001236 3A 03 00 00         A  3781    	LD	A,(_stackPointer)
00123A 32 01 00 00         A  3782    	LD	(_xRegister),A
                           A  3783    ;  836		
                           A  3784    ;  837		setStatusRegisterNZ(xRegister);
00123E 3A 03 00 00         A  3785    	LD	A,(_stackPointer)
001242 4F                  A  3786    	LD	C,A
001243 0600                A  3787    	LD	B,0
001245 C5                  A  3788    	PUSH	BC
001246 CD 72 05 00         A  3789    	CALL	_setStatusRegisterNZ
00124A C1                  A  3790    	POP	BC
                           A  3791    ;  838	}
00124B C9                  A  3792    	RET	
                           A  3793    
                           A  3794    
                           A  3795    ;**************************** _TSX ***************************
                           A  3796    ;Name                         Addr/Register   Size   Type
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  74


PC     Object              I  Line    Source m6502.src
                           A  3797    ;_xRegister                          STATIC      1   variable
                           A  3798    ;_stackPointer                       STATIC      1   variable
                           A  3799    
                           A  3800    
                           A  3801    ; Stack Frame Size: 6 (bytes)
                           A  3802    ;       Spill Code: 0 (instruction)
                           A  3803    
                           A  3804    
                           A  3805    ;  839	
                           A  3806    ;  840	static void CLC(void)
                           A  3807    ;  841	{
00124C                     A  3808    _CLC:
                           A  3809    ;  842		statusRegister &= ~C;
00124C 3A 00 00 00         A  3810    	LD	A,(_statusRegister)
001250 CB87                A  3811    	RES	0,A
001252 32 00 00 00         A  3812    	LD	(_statusRegister),A
                           A  3813    ;  843	}
001256 C9                  A  3814    	RET	
                           A  3815    
                           A  3816    
                           A  3817    ;**************************** _CLC ***************************
                           A  3818    ;Name                         Addr/Register   Size   Type
                           A  3819    ;_statusRegister                     STATIC      1   variable
                           A  3820    
                           A  3821    
                           A  3822    ; Stack Frame Size: 6 (bytes)
                           A  3823    ;       Spill Code: 0 (instruction)
                           A  3824    
                           A  3825    
                           A  3826    ;  844	
                           A  3827    ;  845	static void SEC(void)
                           A  3828    ;  846	{
001257                     A  3829    _SEC:
                           A  3830    ;  847		statusRegister |= C;
001257 3A 00 00 00         A  3831    	LD	A,(_statusRegister)
00125B CBC7                A  3832    	SET	0,A
00125D 32 00 00 00         A  3833    	LD	(_statusRegister),A
                           A  3834    ;  848	}
001261 C9                  A  3835    	RET	
                           A  3836    
                           A  3837    
                           A  3838    ;**************************** _SEC ***************************
                           A  3839    ;Name                         Addr/Register   Size   Type
                           A  3840    ;_statusRegister                     STATIC      1   variable
                           A  3841    
                           A  3842    
                           A  3843    ; Stack Frame Size: 6 (bytes)
                           A  3844    ;       Spill Code: 0 (instruction)
                           A  3845    
                           A  3846    
                           A  3847    ;  849	
                           A  3848    ;  850	static void CLI(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  75


PC     Object              I  Line    Source m6502.src
                           A  3849    ;  851	{
001262                     A  3850    _CLI:
                           A  3851    ;  852		statusRegister &= ~I;
001262 3A 00 00 00         A  3852    	LD	A,(_statusRegister)
001266 CB97                A  3853    	RES	2,A
001268 32 00 00 00         A  3854    	LD	(_statusRegister),A
                           A  3855    ;  853	}
00126C C9                  A  3856    	RET	
                           A  3857    
                           A  3858    
                           A  3859    ;**************************** _CLI ***************************
                           A  3860    ;Name                         Addr/Register   Size   Type
                           A  3861    ;_statusRegister                     STATIC      1   variable
                           A  3862    
                           A  3863    
                           A  3864    ; Stack Frame Size: 6 (bytes)
                           A  3865    ;       Spill Code: 0 (instruction)
                           A  3866    
                           A  3867    
                           A  3868    ;  854	
                           A  3869    ;  855	static void SEI(void)
                           A  3870    ;  856	{
00126D                     A  3871    _SEI:
                           A  3872    ;  857		statusRegister |= I;
00126D 3A 00 00 00         A  3873    	LD	A,(_statusRegister)
001271 CBD7                A  3874    	SET	2,A
001273 32 00 00 00         A  3875    	LD	(_statusRegister),A
                           A  3876    ;  858	}
001277 C9                  A  3877    	RET	
                           A  3878    
                           A  3879    
                           A  3880    ;**************************** _SEI ***************************
                           A  3881    ;Name                         Addr/Register   Size   Type
                           A  3882    ;_statusRegister                     STATIC      1   variable
                           A  3883    
                           A  3884    
                           A  3885    ; Stack Frame Size: 6 (bytes)
                           A  3886    ;       Spill Code: 0 (instruction)
                           A  3887    
                           A  3888    
                           A  3889    ;  859	
                           A  3890    ;  860	static void CLV(void)
                           A  3891    ;  861	{
001278                     A  3892    _CLV:
                           A  3893    ;  862		statusRegister &= ~V;
001278 3A 00 00 00         A  3894    	LD	A,(_statusRegister)
00127C CBB7                A  3895    	RES	6,A
00127E 32 00 00 00         A  3896    	LD	(_statusRegister),A
                           A  3897    ;  863	}
001282 C9                  A  3898    	RET	
                           A  3899    
                           A  3900    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  76


PC     Object              I  Line    Source m6502.src
                           A  3901    ;**************************** _CLV ***************************
                           A  3902    ;Name                         Addr/Register   Size   Type
                           A  3903    ;_statusRegister                     STATIC      1   variable
                           A  3904    
                           A  3905    
                           A  3906    ; Stack Frame Size: 6 (bytes)
                           A  3907    ;       Spill Code: 0 (instruction)
                           A  3908    
                           A  3909    
                           A  3910    ;  864	
                           A  3911    ;  865	static void CLD(void)
                           A  3912    ;  866	{
001283                     A  3913    _CLD:
                           A  3914    ;  867		statusRegister &= ~D;
001283 3A 00 00 00         A  3915    	LD	A,(_statusRegister)
001287 CB9F                A  3916    	RES	3,A
001289 32 00 00 00         A  3917    	LD	(_statusRegister),A
                           A  3918    ;  868	}
00128D C9                  A  3919    	RET	
                           A  3920    
                           A  3921    
                           A  3922    ;**************************** _CLD ***************************
                           A  3923    ;Name                         Addr/Register   Size   Type
                           A  3924    ;_statusRegister                     STATIC      1   variable
                           A  3925    
                           A  3926    
                           A  3927    ; Stack Frame Size: 6 (bytes)
                           A  3928    ;       Spill Code: 0 (instruction)
                           A  3929    
                           A  3930    
                           A  3931    ;  869	
                           A  3932    ;  870	static void SED(void)
                           A  3933    ;  871	{
00128E                     A  3934    _SED:
                           A  3935    ;  872		statusRegister |= D;
00128E 3A 00 00 00         A  3936    	LD	A,(_statusRegister)
001292 CBDF                A  3937    	SET	3,A
001294 32 00 00 00         A  3938    	LD	(_statusRegister),A
                           A  3939    ;  873	}
001298 C9                  A  3940    	RET	
                           A  3941    
                           A  3942    
                           A  3943    ;**************************** _SED ***************************
                           A  3944    ;Name                         Addr/Register   Size   Type
                           A  3945    ;_statusRegister                     STATIC      1   variable
                           A  3946    
                           A  3947    
                           A  3948    ; Stack Frame Size: 6 (bytes)
                           A  3949    ;       Spill Code: 0 (instruction)
                           A  3950    
                           A  3951    
                           A  3952    ;  874	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  77


PC     Object              I  Line    Source m6502.src
                           A  3953    ;  875	static void Execute_Opcode(void)
                           A  3954    ;  876	{
001299                     A  3955    _Execute_Opcode:
001299 21FFFFFF            A  3956    	LD	HL,-1
00129D CD 00 00 00         A  3957    	CALL	__frameset
                           A  3958    ;  877		unsigned char opcode = Mem_Read(programCounter++);
0012A1 ED4B 04 00 00       A  3959    	LD	BC,(_programCounter)
0012A6 C5                  A  3960    	PUSH	BC
0012A7 ED4B 04 00 00       A  3961    	LD	BC,(_programCounter)
0012AC 03                  A  3962    	INC	BC
0012AD ED43 04 00 00       A  3963    	LD	(_programCounter),BC
0012B2 CD 00 00 00         A  3964    	CALL	_Mem_Read
0012B6 C1                  A  3965    	POP	BC
0012B7 DD75FF              A  3966    	LD	(IX+-1),L
                           A  3967    ;  878		
                           A  3968    ;  879		switch (opcode)
0012BA DD7EFF              A  3969    	LD	A,(IX+-1)
0012BD B7ED62              A  3970    	UEXT	HL
0012C0 6F                  A  3971    	LD	L,A
0012C1 E5C1                A  3972    	LD	BC,HL
0012C3                     A  3973    L__129:
0012C3 21FE0000            A  3974    	LD	HL,254
0012C7 B7                  A  3975    	OR	A,A
0012C8 ED42                A  3976    	SBC	HL,BC
0012CA DA A7 1C 00         A  3977    	JR	C,L_414
0012CE C5E1                A  3978    	LD	HL,BC
0012D0 29                  A  3979    	ADD	HL,HL
0012D1 29                  A  3980    	ADD	HL,HL
0012D2 B7                  A  3981    	OR	A,A
0012D3 ED42                A  3982    	SBC	HL,BC
0012D5 01 DD 12 00         A  3983    	LD	BC,L__128
0012D9 09                  A  3984    	ADD	HL,BC
0012DA ED27                A  3985    	LD	HL,(HL)
0012DC E9                  A  3986    	JP	(HL)
0012DD                     A  3987    L__128:
0012DD DA1500              A  3988    	DW24	L_224	
                           A  3989    
0012E0 E61500              A  3990    	DW24	L_225	
                           A  3991    
0012E3 F21500              A  3992    	DW24	L_226	
                           A  3993    
0012E6 A71C00              A  3994    	DW24	L_414	
                           A  3995    
0012E9 011600              A  3996    	DW24	L_239	
                           A  3997    
0012EC 101600              A  3998    	DW24	L_254	
                           A  3999    
0012EF 1C1600              A  4000    	DW24	L_255	
                           A  4001    
0012F2 A71C00              A  4002    	DW24	L_414	
                           A  4003    
0012F5 281600              A  4004    	DW24	L_256	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  78


PC     Object              I  Line    Source m6502.src
                           A  4005    
0012F8 301600              A  4006    	DW24	L_257	
                           A  4007    
0012FB 3C1600              A  4008    	DW24	L_258	
                           A  4009    
0012FE 441600              A  4010    	DW24	L_259	
                           A  4011    
001301 501600              A  4012    	DW24	L_260	
                           A  4013    
001304 611600              A  4014    	DW24	L_267	
                           A  4015    
001307 6D1600              A  4016    	DW24	L_268	
                           A  4017    
00130A A71C00              A  4018    	DW24	L_414	
                           A  4019    
00130D 791600              A  4020    	DW24	L_269	
                           A  4021    
001310 851600              A  4022    	DW24	L_270	
                           A  4023    
001313 F21500              A  4024    	DW24	L_227	
                           A  4025    
001316 A71C00              A  4026    	DW24	L_414	
                           A  4027    
001319 011600              A  4028    	DW24	L_240	
                           A  4029    
00131C 911600              A  4030    	DW24	L_271	
                           A  4031    
00131F 9D1600              A  4032    	DW24	L_272	
                           A  4033    
001322 A71C00              A  4034    	DW24	L_414	
                           A  4035    
001325 A91600              A  4036    	DW24	L_273	
                           A  4037    
001328 B11600              A  4038    	DW24	L_274	
                           A  4039    
00132B A71C00              A  4040    	DW24	L_414	
                           A  4041    
00132E A71C00              A  4042    	DW24	L_414	
                           A  4043    
001331 501600              A  4044    	DW24	L_261	
                           A  4045    
001334 BD1600              A  4046    	DW24	L_275	
                           A  4047    
001337 C91600              A  4048    	DW24	L_276	
                           A  4049    
00133A A71C00              A  4050    	DW24	L_414	
                           A  4051    
00133D D51600              A  4052    	DW24	L_277	
                           A  4053    
001340 DD1600              A  4054    	DW24	L_278	
                           A  4055    
001343 F21500              A  4056    	DW24	L_228	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  79


PC     Object              I  Line    Source m6502.src
                           A  4057    
001346 A71C00              A  4058    	DW24	L_414	
                           A  4059    
001349 E91600              A  4060    	DW24	L_279	
                           A  4061    
00134C F51600              A  4062    	DW24	L_280	
                           A  4063    
00134F 011700              A  4064    	DW24	L_281	
                           A  4065    
001352 A71C00              A  4066    	DW24	L_414	
                           A  4067    
001355 0D1700              A  4068    	DW24	L_282	
                           A  4069    
001358 151700              A  4070    	DW24	L_283	
                           A  4071    
00135B 211700              A  4072    	DW24	L_284	
                           A  4073    
00135E 291700              A  4074    	DW24	L_285	
                           A  4075    
001361 351700              A  4076    	DW24	L_286	
                           A  4077    
001364 411700              A  4078    	DW24	L_287	
                           A  4079    
001367 4D1700              A  4080    	DW24	L_288	
                           A  4081    
00136A A71C00              A  4082    	DW24	L_414	
                           A  4083    
00136D 591700              A  4084    	DW24	L_289	
                           A  4085    
001370 651700              A  4086    	DW24	L_290	
                           A  4087    
001373 F21500              A  4088    	DW24	L_229	
                           A  4089    
001376 A71C00              A  4090    	DW24	L_414	
                           A  4091    
001379 011600              A  4092    	DW24	L_241	
                           A  4093    
00137C 711700              A  4094    	DW24	L_291	
                           A  4095    
00137F 7D1700              A  4096    	DW24	L_292	
                           A  4097    
001382 A71C00              A  4098    	DW24	L_414	
                           A  4099    
001385 891700              A  4100    	DW24	L_293	
                           A  4101    
001388 911700              A  4102    	DW24	L_294	
                           A  4103    
00138B A71C00              A  4104    	DW24	L_414	
                           A  4105    
00138E A71C00              A  4106    	DW24	L_414	
                           A  4107    
001391 501600              A  4108    	DW24	L_262	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  80


PC     Object              I  Line    Source m6502.src
                           A  4109    
001394 9D1700              A  4110    	DW24	L_295	
                           A  4111    
001397 A91700              A  4112    	DW24	L_296	
                           A  4113    
00139A A71C00              A  4114    	DW24	L_414	
                           A  4115    
00139D B51700              A  4116    	DW24	L_298	
                           A  4117    
0013A0 BD1700              A  4118    	DW24	L_299	
                           A  4119    
0013A3 F21500              A  4120    	DW24	L_230	
                           A  4121    
0013A6 A71C00              A  4122    	DW24	L_414	
                           A  4123    
0013A9 011600              A  4124    	DW24	L_242	
                           A  4125    
0013AC C91700              A  4126    	DW24	L_300	
                           A  4127    
0013AF D51700              A  4128    	DW24	L_301	
                           A  4129    
0013B2 A71C00              A  4130    	DW24	L_414	
                           A  4131    
0013B5 E11700              A  4132    	DW24	L_302	
                           A  4133    
0013B8 E91700              A  4134    	DW24	L_303	
                           A  4135    
0013BB F51700              A  4136    	DW24	L_304	
                           A  4137    
0013BE A71C00              A  4138    	DW24	L_414	
                           A  4139    
0013C1 FD1700              A  4140    	DW24	L_305	
                           A  4141    
0013C4 091800              A  4142    	DW24	L_306	
                           A  4143    
0013C7 151800              A  4144    	DW24	L_307	
                           A  4145    
0013CA A71C00              A  4146    	DW24	L_414	
                           A  4147    
0013CD 211800              A  4148    	DW24	L_308	
                           A  4149    
0013D0 2D1800              A  4150    	DW24	L_309	
                           A  4151    
0013D3 F21500              A  4152    	DW24	L_231	
                           A  4153    
0013D6 A71C00              A  4154    	DW24	L_414	
                           A  4155    
0013D9 011600              A  4156    	DW24	L_243	
                           A  4157    
0013DC 391800              A  4158    	DW24	L_310	
                           A  4159    
0013DF 451800              A  4160    	DW24	L_311	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  81


PC     Object              I  Line    Source m6502.src
                           A  4161    
0013E2 A71C00              A  4162    	DW24	L_414	
                           A  4163    
0013E5 511800              A  4164    	DW24	L_312	
                           A  4165    
0013E8 591800              A  4166    	DW24	L_313	
                           A  4167    
0013EB A71C00              A  4168    	DW24	L_414	
                           A  4169    
0013EE A71C00              A  4170    	DW24	L_414	
                           A  4171    
0013F1 501600              A  4172    	DW24	L_263	
                           A  4173    
0013F4 651800              A  4174    	DW24	L_314	
                           A  4175    
0013F7 711800              A  4176    	DW24	L_315	
                           A  4177    
0013FA A71C00              A  4178    	DW24	L_414	
                           A  4179    
0013FD 7D1800              A  4180    	DW24	L_316	
                           A  4181    
001400 851800              A  4182    	DW24	L_317	
                           A  4183    
001403 F21500              A  4184    	DW24	L_232	
                           A  4185    
001406 A71C00              A  4186    	DW24	L_414	
                           A  4187    
001409 011600              A  4188    	DW24	L_244	
                           A  4189    
00140C 911800              A  4190    	DW24	L_318	
                           A  4191    
00140F 9D1800              A  4192    	DW24	L_319	
                           A  4193    
001412 A71C00              A  4194    	DW24	L_414	
                           A  4195    
001415 A91800              A  4196    	DW24	L_320	
                           A  4197    
001418 B11800              A  4198    	DW24	L_321	
                           A  4199    
00141B BD1800              A  4200    	DW24	L_322	
                           A  4201    
00141E A71C00              A  4202    	DW24	L_414	
                           A  4203    
001421 C51800              A  4204    	DW24	L_323	
                           A  4205    
001424 D11800              A  4206    	DW24	L_324	
                           A  4207    
001427 DD1800              A  4208    	DW24	L_325	
                           A  4209    
00142A A71C00              A  4210    	DW24	L_414	
                           A  4211    
00142D E91800              A  4212    	DW24	L_326	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  82


PC     Object              I  Line    Source m6502.src
                           A  4213    
001430 F51800              A  4214    	DW24	L_327	
                           A  4215    
001433 F21500              A  4216    	DW24	L_233	
                           A  4217    
001436 A71C00              A  4218    	DW24	L_414	
                           A  4219    
001439 011600              A  4220    	DW24	L_245	
                           A  4221    
00143C 011900              A  4222    	DW24	L_328	
                           A  4223    
00143F 0D1900              A  4224    	DW24	L_329	
                           A  4225    
001442 A71C00              A  4226    	DW24	L_414	
                           A  4227    
001445 191900              A  4228    	DW24	L_330	
                           A  4229    
001448 211900              A  4230    	DW24	L_331	
                           A  4231    
00144B A71C00              A  4232    	DW24	L_414	
                           A  4233    
00144E A71C00              A  4234    	DW24	L_414	
                           A  4235    
001451 501600              A  4236    	DW24	L_264	
                           A  4237    
001454 2D1900              A  4238    	DW24	L_332	
                           A  4239    
001457 391900              A  4240    	DW24	L_333	
                           A  4241    
00145A A71C00              A  4242    	DW24	L_414	
                           A  4243    
00145D 011600              A  4244    	DW24	L_246	
                           A  4245    
001460 451900              A  4246    	DW24	L_334	
                           A  4247    
001463 011600              A  4248    	DW24	L_247	
                           A  4249    
001466 A71C00              A  4250    	DW24	L_414	
                           A  4251    
001469 511900              A  4252    	DW24	L_335	
                           A  4253    
00146C 5D1900              A  4254    	DW24	L_336	
                           A  4255    
00146F 691900              A  4256    	DW24	L_337	
                           A  4257    
001472 A71C00              A  4258    	DW24	L_414	
                           A  4259    
001475 751900              A  4260    	DW24	L_338	
                           A  4261    
001478 011600              A  4262    	DW24	L_248	
                           A  4263    
00147B 7D1900              A  4264    	DW24	L_339	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  83


PC     Object              I  Line    Source m6502.src
                           A  4265    
00147E A71C00              A  4266    	DW24	L_414	
                           A  4267    
001481 851900              A  4268    	DW24	L_340	
                           A  4269    
001484 911900              A  4270    	DW24	L_341	
                           A  4271    
001487 9D1900              A  4272    	DW24	L_342	
                           A  4273    
00148A A71C00              A  4274    	DW24	L_414	
                           A  4275    
00148D A91900              A  4276    	DW24	L_343	
                           A  4277    
001490 B51900              A  4278    	DW24	L_344	
                           A  4279    
001493 F21500              A  4280    	DW24	L_234	
                           A  4281    
001496 A71C00              A  4282    	DW24	L_414	
                           A  4283    
001499 C11900              A  4284    	DW24	L_345	
                           A  4285    
00149C CD1900              A  4286    	DW24	L_346	
                           A  4287    
00149F D91900              A  4288    	DW24	L_347	
                           A  4289    
0014A2 A71C00              A  4290    	DW24	L_414	
                           A  4291    
0014A5 E51900              A  4292    	DW24	L_348	
                           A  4293    
0014A8 ED1900              A  4294    	DW24	L_349	
                           A  4295    
0014AB F91900              A  4296    	DW24	L_350	
                           A  4297    
0014AE A71C00              A  4298    	DW24	L_414	
                           A  4299    
0014B1 A71C00              A  4300    	DW24	L_414	
                           A  4301    
0014B4 011A00              A  4302    	DW24	L_351	
                           A  4303    
0014B7 A71C00              A  4304    	DW24	L_414	
                           A  4305    
0014BA A71C00              A  4306    	DW24	L_414	
                           A  4307    
0014BD 0D1A00              A  4308    	DW24	L_352	
                           A  4309    
0014C0 191A00              A  4310    	DW24	L_353	
                           A  4311    
0014C3 251A00              A  4312    	DW24	L_354	
                           A  4313    
0014C6 A71C00              A  4314    	DW24	L_414	
                           A  4315    
0014C9 311A00              A  4316    	DW24	L_355	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  84


PC     Object              I  Line    Source m6502.src
                           A  4317    
0014CC 3D1A00              A  4318    	DW24	L_356	
                           A  4319    
0014CF 491A00              A  4320    	DW24	L_357	
                           A  4321    
0014D2 A71C00              A  4322    	DW24	L_414	
                           A  4323    
0014D5 551A00              A  4324    	DW24	L_358	
                           A  4325    
0014D8 5D1A00              A  4326    	DW24	L_359	
                           A  4327    
0014DB 691A00              A  4328    	DW24	L_360	
                           A  4329    
0014DE A71C00              A  4330    	DW24	L_414	
                           A  4331    
0014E1 711A00              A  4332    	DW24	L_361	
                           A  4333    
0014E4 7D1A00              A  4334    	DW24	L_362	
                           A  4335    
0014E7 891A00              A  4336    	DW24	L_363	
                           A  4337    
0014EA A71C00              A  4338    	DW24	L_414	
                           A  4339    
0014ED 951A00              A  4340    	DW24	L_364	
                           A  4341    
0014F0 A11A00              A  4342    	DW24	L_365	
                           A  4343    
0014F3 F21500              A  4344    	DW24	L_235	
                           A  4345    
0014F6 A71C00              A  4346    	DW24	L_414	
                           A  4347    
0014F9 AD1A00              A  4348    	DW24	L_366	
                           A  4349    
0014FC B91A00              A  4350    	DW24	L_367	
                           A  4351    
0014FF C51A00              A  4352    	DW24	L_368	
                           A  4353    
001502 A71C00              A  4354    	DW24	L_414	
                           A  4355    
001505 D11A00              A  4356    	DW24	L_369	
                           A  4357    
001508 D91A00              A  4358    	DW24	L_370	
                           A  4359    
00150B E51A00              A  4360    	DW24	L_371	
                           A  4361    
00150E A71C00              A  4362    	DW24	L_414	
                           A  4363    
001511 ED1A00              A  4364    	DW24	L_372	
                           A  4365    
001514 F91A00              A  4366    	DW24	L_373	
                           A  4367    
001517 051B00              A  4368    	DW24	L_374	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  85


PC     Object              I  Line    Source m6502.src
                           A  4369    
00151A A71C00              A  4370    	DW24	L_414	
                           A  4371    
00151D 111B00              A  4372    	DW24	L_375	
                           A  4373    
001520 1D1B00              A  4374    	DW24	L_376	
                           A  4375    
001523 011600              A  4376    	DW24	L_249	
                           A  4377    
001526 A71C00              A  4378    	DW24	L_414	
                           A  4379    
001529 291B00              A  4380    	DW24	L_377	
                           A  4381    
00152C 351B00              A  4382    	DW24	L_378	
                           A  4383    
00152F 411B00              A  4384    	DW24	L_379	
                           A  4385    
001532 A71C00              A  4386    	DW24	L_414	
                           A  4387    
001535 4D1B00              A  4388    	DW24	L_380	
                           A  4389    
001538 551B00              A  4390    	DW24	L_381	
                           A  4391    
00153B 611B00              A  4392    	DW24	L_382	
                           A  4393    
00153E A71C00              A  4394    	DW24	L_414	
                           A  4395    
001541 691B00              A  4396    	DW24	L_383	
                           A  4397    
001544 751B00              A  4398    	DW24	L_384	
                           A  4399    
001547 811B00              A  4400    	DW24	L_385	
                           A  4401    
00154A A71C00              A  4402    	DW24	L_414	
                           A  4403    
00154D 8D1B00              A  4404    	DW24	L_386	
                           A  4405    
001550 991B00              A  4406    	DW24	L_387	
                           A  4407    
001553 F21500              A  4408    	DW24	L_236	
                           A  4409    
001556 A71C00              A  4410    	DW24	L_414	
                           A  4411    
001559 011600              A  4412    	DW24	L_250	
                           A  4413    
00155C A51B00              A  4414    	DW24	L_388	
                           A  4415    
00155F B11B00              A  4416    	DW24	L_389	
                           A  4417    
001562 A71C00              A  4418    	DW24	L_414	
                           A  4419    
001565 BD1B00              A  4420    	DW24	L_390	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  86


PC     Object              I  Line    Source m6502.src
                           A  4421    
001568 C51B00              A  4422    	DW24	L_391	
                           A  4423    
00156B A71C00              A  4424    	DW24	L_414	
                           A  4425    
00156E A71C00              A  4426    	DW24	L_414	
                           A  4427    
001571 501600              A  4428    	DW24	L_265	
                           A  4429    
001574 D11B00              A  4430    	DW24	L_392	
                           A  4431    
001577 DD1B00              A  4432    	DW24	L_393	
                           A  4433    
00157A A71C00              A  4434    	DW24	L_414	
                           A  4435    
00157D E91B00              A  4436    	DW24	L_394	
                           A  4437    
001580 F51B00              A  4438    	DW24	L_395	
                           A  4439    
001583 011600              A  4440    	DW24	L_251	
                           A  4441    
001586 A71C00              A  4442    	DW24	L_414	
                           A  4443    
001589 011C00              A  4444    	DW24	L_396	
                           A  4445    
00158C 0D1C00              A  4446    	DW24	L_397	
                           A  4447    
00158F 191C00              A  4448    	DW24	L_398	
                           A  4449    
001592 A71C00              A  4450    	DW24	L_414	
                           A  4451    
001595 251C00              A  4452    	DW24	L_399	
                           A  4453    
001598 2B1C00              A  4454    	DW24	L_400	
                           A  4455    
00159B A71C00              A  4456    	DW24	L_414	
                           A  4457    
00159E 351C00              A  4458    	DW24	L_402	
                           A  4459    
0015A1 3F1C00              A  4460    	DW24	L_403	
                           A  4461    
0015A4 491C00              A  4462    	DW24	L_404	
                           A  4463    
0015A7 531C00              A  4464    	DW24	L_405	
                           A  4465    
0015AA A71C00              A  4466    	DW24	L_414	
                           A  4467    
0015AD 5D1C00              A  4468    	DW24	L_406	
                           A  4469    
0015B0 671C00              A  4470    	DW24	L_407	
                           A  4471    
0015B3 F21500              A  4472    	DW24	L_237	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  87


PC     Object              I  Line    Source m6502.src
                           A  4473    
0015B6 A71C00              A  4474    	DW24	L_414	
                           A  4475    
0015B9 011600              A  4476    	DW24	L_252	
                           A  4477    
0015BC 711C00              A  4478    	DW24	L_408	
                           A  4479    
0015BF 7B1C00              A  4480    	DW24	L_409	
                           A  4481    
0015C2 A71C00              A  4482    	DW24	L_414	
                           A  4483    
0015C5 851C00              A  4484    	DW24	L_410	
                           A  4485    
0015C8 8B1C00              A  4486    	DW24	L_411	
                           A  4487    
0015CB A71C00              A  4488    	DW24	L_414	
                           A  4489    
0015CE A71C00              A  4490    	DW24	L_414	
                           A  4491    
0015D1 501600              A  4492    	DW24	L_266	
                           A  4493    
0015D4 951C00              A  4494    	DW24	L_412	
                           A  4495    
0015D7 9F1C00              A  4496    	DW24	L_413	
                           A  4497    
                           A  4498    ;  880		{
                           A  4499    ;  881		case 0x00:
0015DA                     A  4500    L_224:
                           A  4501    ;  882		    Imm();
0015DA CD 90 01 00         A  4502    	CALL	_Imm
                           A  4503    ;  883		    BRK();
0015DE CD DD 10 00         A  4504    	CALL	_BRK
                           A  4505    ;  884		    break;
0015E2 C3 A7 1C 00         A  4506    	JR	L_414
                           A  4507    ;  885		case 0x01:
0015E6                     A  4508    L_225:
                           A  4509    ;  886		    IndZeroX();
0015E6 CD 5F 03 00         A  4510    	CALL	_IndZeroX
                           A  4511    ;  887		    ORA();
0015EA CD CD 0B 00         A  4512    	CALL	_ORA
                           A  4513    ;  888		    break;
0015EE C3 A7 1C 00         A  4514    	JR	L_414
                           A  4515    ;  889		case 0x02:
0015F2                     A  4516    L_226:
                           A  4517    ;  890		case 0x12:
0015F2                     A  4518    L_227:
                           A  4519    ;  891		case 0x22:
0015F2                     A  4520    L_228:
                           A  4521    ;  892		case 0x32:
0015F2                     A  4522    L_229:
                           A  4523    ;  893		case 0x42:
0015F2                     A  4524    L_230:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  88


PC     Object              I  Line    Source m6502.src
                           A  4525    ;  894		case 0x52:
0015F2                     A  4526    L_231:
                           A  4527    ;  895		case 0x62:
0015F2                     A  4528    L_232:
                           A  4529    ;  896		case 0x72:
0015F2                     A  4530    L_233:
                           A  4531    ;  897		case 0x92:
0015F2                     A  4532    L_234:
                           A  4533    ;  898		case 0xb2:
0015F2                     A  4534    L_235:
                           A  4535    ;  899		case 0xd2:
0015F2                     A  4536    L_236:
                           A  4537    ;  900		case 0xf2:
0015F2                     A  4538    L_237:
                           A  4539    ;  901		    programCounter--;
0015F2 ED4B 04 00 00       A  4540    	LD	BC,(_programCounter)
0015F7 0B                  A  4541    	DEC	BC
0015F8 ED43 04 00 00       A  4542    	LD	(_programCounter),BC
                           A  4543    ;  902		    break;	
0015FD C3 A7 1C 00         A  4544    	JR	L_414
                           A  4545    ;  903		case 0x04:
001601                     A  4546    L_239:
                           A  4547    ;  904		case 0x14:
001601                     A  4548    L_240:
                           A  4549    ;  905		case 0x34:
001601                     A  4550    L_241:
                           A  4551    ;  906		case 0x44:
001601                     A  4552    L_242:
                           A  4553    ;  907		case 0x54:
001601                     A  4554    L_243:
                           A  4555    ;  908		case 0x64:
001601                     A  4556    L_244:
                           A  4557    ;  909		case 0x74:
001601                     A  4558    L_245:
                           A  4559    ;  910		case 0x80:
001601                     A  4560    L_246:
                           A  4561    ;  911		case 0x82:
001601                     A  4562    L_247:
                           A  4563    ;  912		case 0x89:
001601                     A  4564    L_248:
                           A  4565    ;  913		case 0xc2:
001601                     A  4566    L_249:
                           A  4567    ;  914		case 0xd4:
001601                     A  4568    L_250:
                           A  4569    ;  915		case 0xe2:
001601                     A  4570    L_251:
                           A  4571    ;  916		case 0xf4:
001601                     A  4572    L_252:
                           A  4573    ;  917		    programCounter++;
001601 ED4B 04 00 00       A  4574    	LD	BC,(_programCounter)
001606 03                  A  4575    	INC	BC
001607 ED43 04 00 00       A  4576    	LD	(_programCounter),BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  89


PC     Object              I  Line    Source m6502.src
                           A  4577    ;  918		    break;
00160C C3 A7 1C 00         A  4578    	JR	L_414
                           A  4579    ;  919		case 0x05:
001610                     A  4580    L_254:
                           A  4581    ;  920		    Zero();
001610 CD A6 01 00         A  4582    	CALL	_Zero
                           A  4583    ;  921		    ORA();
001614 CD CD 0B 00         A  4584    	CALL	_ORA
                           A  4585    ;  922		    break;
001618 C3 A7 1C 00         A  4586    	JR	L_414
                           A  4587    ;  923		case 0x06:
00161C                     A  4588    L_255:
                           A  4589    ;  924		    Zero();
00161C CD A6 01 00         A  4590    	CALL	_Zero
                           A  4591    ;  925		    ASL();
001620 CD 0D 0C 00         A  4592    	CALL	_ASL
                           A  4593    ;  926		    break;	
001624 C3 A7 1C 00         A  4594    	JR	L_414
                           A  4595    ;  927		case 0x08:
001628                     A  4596    L_256:
                           A  4597    ;  928		    PHP();
001628 CD 5F 10 00         A  4598    	CALL	_PHP
                           A  4599    ;  929		    break;
00162C C3 A7 1C 00         A  4600    	JR	L_414
                           A  4601    ;  930		case 0x09:
001630                     A  4602    L_257:
                           A  4603    ;  931		    Imm();
001630 CD 90 01 00         A  4604    	CALL	_Imm
                           A  4605    ;  932		    ORA();
001634 CD CD 0B 00         A  4606    	CALL	_ORA
                           A  4607    ;  933		    break;
001638 C3 A7 1C 00         A  4608    	JR	L_414
                           A  4609    ;  934		case 0x0a:
00163C                     A  4610    L_258:
                           A  4611    ;  935		    ASL_A();
00163C CD 5F 0C 00         A  4612    	CALL	_ASL_A
                           A  4613    ;  936		    break;
001640 C3 A7 1C 00         A  4614    	JR	L_414
                           A  4615    ;  937		case 0x0b:
001644                     A  4616    L_259:
                           A  4617    ;  938		    Imm();
001644 CD 90 01 00         A  4618    	CALL	_Imm
                           A  4619    ;  939		    AND();
001648 CD AD 0B 00         A  4620    	CALL	_AND
                           A  4621    ;  940		    break;
00164C C3 A7 1C 00         A  4622    	JR	L_414
                           A  4623    ;  941		case 0x0c:
001650                     A  4624    L_260:
                           A  4625    ;  942		case 0x1c:
001650                     A  4626    L_261:
                           A  4627    ;  943		case 0x3c:
001650                     A  4628    L_262:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  90


PC     Object              I  Line    Source m6502.src
                           A  4629    ;  944		case 0x5c:
001650                     A  4630    L_263:
                           A  4631    ;  945		case 0x7c:
001650                     A  4632    L_264:
                           A  4633    ;  946		case 0xdc:
001650                     A  4634    L_265:
                           A  4635    ;  947		case 0xfc:
001650                     A  4636    L_266:
                           A  4637    ;  948		    programCounter += 2;
001650 FD2A 04 00 00       A  4638    	LD	IY,(_programCounter)
001655 ED0302              A  4639    	LEA	BC,IY+2
001658 ED43 04 00 00       A  4640    	LD	(_programCounter),BC
                           A  4641    ;  949		    break;
00165D C3 A7 1C 00         A  4642    	JR	L_414
                           A  4643    ;  950		case 0x0d:
001661                     A  4644    L_267:
                           A  4645    ;  951		    Abs();
001661 CD 17 02 00         A  4646    	CALL	_Abs
                           A  4647    ;  952		    ORA();
001665 CD CD 0B 00         A  4648    	CALL	_ORA
                           A  4649    ;  953		    break;
001669 C3 A7 1C 00         A  4650    	JR	L_414
                           A  4651    ;  954		case 0x0e:
00166D                     A  4652    L_268:
                           A  4653    ;  955		    Abs();
00166D CD 17 02 00         A  4654    	CALL	_Abs
                           A  4655    ;  956		    ASL();
001671 CD 0D 0C 00         A  4656    	CALL	_ASL
                           A  4657    ;  957		    break;	
001675 C3 A7 1C 00         A  4658    	JR	L_414
                           A  4659    ;  958		case 0x10:
001679                     A  4660    L_269:
                           A  4661    ;  959		    Rel();
001679 CD 25 04 00         A  4662    	CALL	_Rel
                           A  4663    ;  960		    BPL();
00167D CD BB 11 00         A  4664    	CALL	_BPL
                           A  4665    ;  961		    break;
001681 C3 A7 1C 00         A  4666    	JR	L_414
                           A  4667    ;  962		case 0x11:
001685                     A  4668    L_270:
                           A  4669    ;  963		    IndZeroY();
001685 CD CC 03 00         A  4670    	CALL	_IndZeroY
                           A  4671    ;  964		    ORA();
001689 CD CD 0B 00         A  4672    	CALL	_ORA
                           A  4673    ;  965		    break;	
00168D C3 A7 1C 00         A  4674    	JR	L_414
                           A  4675    ;  966		case 0x15:
001691                     A  4676    L_271:
                           A  4677    ;  967		    ZeroX();
001691 CD C1 01 00         A  4678    	CALL	_ZeroX
                           A  4679    ;  968		    ORA();
001695 CD CD 0B 00         A  4680    	CALL	_ORA
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  91


PC     Object              I  Line    Source m6502.src
                           A  4681    ;  969		    break;
001699 C3 A7 1C 00         A  4682    	JR	L_414
                           A  4683    ;  970		case 0x16:
00169D                     A  4684    L_272:
                           A  4685    ;  971		    ZeroX();
00169D CD C1 01 00         A  4686    	CALL	_ZeroX
                           A  4687    ;  972		    ASL();
0016A1 CD 0D 0C 00         A  4688    	CALL	_ASL
                           A  4689    ;  973		    break;	
0016A5 C3 A7 1C 00         A  4690    	JR	L_414
                           A  4691    ;  974		case 0x18:
0016A9                     A  4692    L_273:
                           A  4693    ;  975		    CLC();
0016A9 CD 4C 12 00         A  4694    	CALL	_CLC
                           A  4695    ;  976		    break;
0016AD C3 A7 1C 00         A  4696    	JR	L_414
                           A  4697    ;  977		case 0x19:
0016B1                     A  4698    L_274:
                           A  4699    ;  978		    AbsY();
0016B1 CD 8A 02 00         A  4700    	CALL	_AbsY
                           A  4701    ;  979		    ORA();
0016B5 CD CD 0B 00         A  4702    	CALL	_ORA
                           A  4703    ;  980		    break;	
0016B9 C3 A7 1C 00         A  4704    	JR	L_414
                           A  4705    ;  981		case 0x1d:
0016BD                     A  4706    L_275:
                           A  4707    ;  982		    AbsX();
0016BD CD 3A 02 00         A  4708    	CALL	_AbsX
                           A  4709    ;  983		    ORA();
0016C1 CD CD 0B 00         A  4710    	CALL	_ORA
                           A  4711    ;  984		    break;
0016C5 C3 A7 1C 00         A  4712    	JR	L_414
                           A  4713    ;  985		case 0x1e:
0016C9                     A  4714    L_276:
                           A  4715    ;  986		    WAbsX();
0016C9 CD 73 04 00         A  4716    	CALL	_WAbsX
                           A  4717    ;  987		    ASL();
0016CD CD 0D 0C 00         A  4718    	CALL	_ASL
                           A  4719    ;  988		    break;	
0016D1 C3 A7 1C 00         A  4720    	JR	L_414
                           A  4721    ;  989		case 0x20:
0016D5                     A  4722    L_277:
                           A  4723    ;  990		    JSR();
0016D5 CD 28 11 00         A  4724    	CALL	_JSR
                           A  4725    ;  991		    break;
0016D9 C3 A7 1C 00         A  4726    	JR	L_414
                           A  4727    ;  992		case 0x21:
0016DD                     A  4728    L_278:
                           A  4729    ;  993		    IndZeroX();
0016DD CD 5F 03 00         A  4730    	CALL	_IndZeroX
                           A  4731    ;  994		    AND();
0016E1 CD AD 0B 00         A  4732    	CALL	_AND
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  92


PC     Object              I  Line    Source m6502.src
                           A  4733    ;  995		    break;	
0016E5 C3 A7 1C 00         A  4734    	JR	L_414
                           A  4735    ;  996		case 0x24:
0016E9                     A  4736    L_279:
                           A  4737    ;  997		    Zero();
0016E9 CD A6 01 00         A  4738    	CALL	_Zero
                           A  4739    ;  998		    BIT();
0016ED CD C7 0F 00         A  4740    	CALL	_BIT
                           A  4741    ;  999		    break;
0016F1 C3 A7 1C 00         A  4742    	JR	L_414
                           A  4743    ; 1000		case 0x25:
0016F5                     A  4744    L_280:
                           A  4745    ; 1001		    Zero();
0016F5 CD A6 01 00         A  4746    	CALL	_Zero
                           A  4747    ; 1002		    AND();
0016F9 CD AD 0B 00         A  4748    	CALL	_AND
                           A  4749    ; 1003		    break;
0016FD C3 A7 1C 00         A  4750    	JR	L_414
                           A  4751    ; 1004		case 0x26:
001701                     A  4752    L_281:
                           A  4753    ; 1005		    Zero();
001701 CD A6 01 00         A  4754    	CALL	_Zero
                           A  4755    ; 1006		    ROL();
001705 CD 24 0D 00         A  4756    	CALL	_ROL
                           A  4757    ; 1007		    break;	
001709 C3 A7 1C 00         A  4758    	JR	L_414
                           A  4759    ; 1008		case 0x28:
00170D                     A  4760    L_282:
                           A  4761    ; 1009		    PLP();
00170D CD B9 10 00         A  4762    	CALL	_PLP
                           A  4763    ; 1010		    break;
001711 C3 A7 1C 00         A  4764    	JR	L_414
                           A  4765    ; 1011		case 0x29:
001715                     A  4766    L_283:
                           A  4767    ; 1012		    Imm();
001715 CD 90 01 00         A  4768    	CALL	_Imm
                           A  4769    ; 1013		    AND();
001719 CD AD 0B 00         A  4770    	CALL	_AND
                           A  4771    ; 1014		    break;
00171D C3 A7 1C 00         A  4772    	JR	L_414
                           A  4773    ; 1015		case 0x2a:
001721                     A  4774    L_284:
                           A  4775    ; 1016		    ROL_A();
001721 CD B3 0D 00         A  4776    	CALL	_ROL_A
                           A  4777    ; 1017		    break;
001725 C3 A7 1C 00         A  4778    	JR	L_414
                           A  4779    ; 1018		case 0x2b:
001729                     A  4780    L_285:
                           A  4781    ; 1019		    Imm();
001729 CD 90 01 00         A  4782    	CALL	_Imm
                           A  4783    ; 1020		    AND();
00172D CD AD 0B 00         A  4784    	CALL	_AND
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  93


PC     Object              I  Line    Source m6502.src
                           A  4785    ; 1021		    break;
001731 C3 A7 1C 00         A  4786    	JR	L_414
                           A  4787    ; 1022		case 0x2c:
001735                     A  4788    L_286:
                           A  4789    ; 1023		    Abs();
001735 CD 17 02 00         A  4790    	CALL	_Abs
                           A  4791    ; 1024		    BIT();
001739 CD C7 0F 00         A  4792    	CALL	_BIT
                           A  4793    ; 1025		    break;
00173D C3 A7 1C 00         A  4794    	JR	L_414
                           A  4795    ; 1026		case 0x2d:
001741                     A  4796    L_287:
                           A  4797    ; 1027		    Abs();
001741 CD 17 02 00         A  4798    	CALL	_Abs
                           A  4799    ; 1028		    AND();
001745 CD AD 0B 00         A  4800    	CALL	_AND
                           A  4801    ; 1029		    break;
001749 C3 A7 1C 00         A  4802    	JR	L_414
                           A  4803    ; 1030		case 0x2e:
00174D                     A  4804    L_288:
                           A  4805    ; 1031		    Abs();
00174D CD 17 02 00         A  4806    	CALL	_Abs
                           A  4807    ; 1032		    ROL();
001751 CD 24 0D 00         A  4808    	CALL	_ROL
                           A  4809    ; 1033		    break;	
001755 C3 A7 1C 00         A  4810    	JR	L_414
                           A  4811    ; 1034		case 0x30:
001759                     A  4812    L_289:
                           A  4813    ; 1035		    Rel();
001759 CD 25 04 00         A  4814    	CALL	_Rel
                           A  4815    ; 1036		    BMI();
00175D CD C8 11 00         A  4816    	CALL	_BMI
                           A  4817    ; 1037		    break;
001761 C3 A7 1C 00         A  4818    	JR	L_414
                           A  4819    ; 1038		case 0x31:
001765                     A  4820    L_290:
                           A  4821    ; 1039		    IndZeroY();
001765 CD CC 03 00         A  4822    	CALL	_IndZeroY
                           A  4823    ; 1040		    AND();
001769 CD AD 0B 00         A  4824    	CALL	_AND
                           A  4825    ; 1041		    break;	
00176D C3 A7 1C 00         A  4826    	JR	L_414
                           A  4827    ; 1042		case 0x35:
001771                     A  4828    L_291:
                           A  4829    ; 1043		    ZeroX();
001771 CD C1 01 00         A  4830    	CALL	_ZeroX
                           A  4831    ; 1044		    AND();
001775 CD AD 0B 00         A  4832    	CALL	_AND
                           A  4833    ; 1045		    break;
001779 C3 A7 1C 00         A  4834    	JR	L_414
                           A  4835    ; 1046		case 0x36:
00177D                     A  4836    L_292:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  94


PC     Object              I  Line    Source m6502.src
                           A  4837    ; 1047		    ZeroX();
00177D CD C1 01 00         A  4838    	CALL	_ZeroX
                           A  4839    ; 1048		    ROL();
001781 CD 24 0D 00         A  4840    	CALL	_ROL
                           A  4841    ; 1049		    break;	
001785 C3 A7 1C 00         A  4842    	JR	L_414
                           A  4843    ; 1050		case 0x38:
001789                     A  4844    L_293:
                           A  4845    ; 1051		    SEC();
001789 CD 57 12 00         A  4846    	CALL	_SEC
                           A  4847    ; 1052		    break;
00178D C3 A7 1C 00         A  4848    	JR	L_414
                           A  4849    ; 1053		case 0x39:
001791                     A  4850    L_294:
                           A  4851    ; 1054		    AbsY();
001791 CD 8A 02 00         A  4852    	CALL	_AbsY
                           A  4853    ; 1055		    AND();
001795 CD AD 0B 00         A  4854    	CALL	_AND
                           A  4855    ; 1056		    break;		
001799 C3 A7 1C 00         A  4856    	JR	L_414
                           A  4857    ; 1057		case 0x3d:
00179D                     A  4858    L_295:
                           A  4859    ; 1058		    AbsX();
00179D CD 3A 02 00         A  4860    	CALL	_AbsX
                           A  4861    ; 1059		    AND();
0017A1 CD AD 0B 00         A  4862    	CALL	_AND
                           A  4863    ; 1060		    break;
0017A5 C3 A7 1C 00         A  4864    	JR	L_414
                           A  4865    ; 1061		case 0x3e:
0017A9                     A  4866    L_296:
                           A  4867    ; 1062		    WAbsX();
0017A9 CD 73 04 00         A  4868    	CALL	_WAbsX
                           A  4869    ; 1063		    ROL();
0017AD CD 24 0D 00         A  4870    	CALL	_ROL
                           A  4871    ; 1064		    break;
0017B1 C3 A7 1C 00         A  4872    	JR	L_414
                           A  4873    ; 1065		case 0x3f:
                           A  4874    ; 1066		    break;
                           A  4875    ; 1067		case 0x40:
0017B5                     A  4876    L_298:
                           A  4877    ; 1068		    RTI();
0017B5 CD 04 11 00         A  4878    	CALL	_RTI
                           A  4879    ; 1069		    break;
0017B9 C3 A7 1C 00         A  4880    	JR	L_414
                           A  4881    ; 1070		case 0x41:
0017BD                     A  4882    L_299:
                           A  4883    ; 1071		    IndZeroX();
0017BD CD 5F 03 00         A  4884    	CALL	_IndZeroX
                           A  4885    ; 1072		    EOR();
0017C1 CD ED 0B 00         A  4886    	CALL	_EOR
                           A  4887    ; 1073		    break;	
0017C5 C3 A7 1C 00         A  4888    	JR	L_414
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  95


PC     Object              I  Line    Source m6502.src
                           A  4889    ; 1074		case 0x45:
0017C9                     A  4890    L_300:
                           A  4891    ; 1075		    Zero();
0017C9 CD A6 01 00         A  4892    	CALL	_Zero
                           A  4893    ; 1076		    EOR();
0017CD CD ED 0B 00         A  4894    	CALL	_EOR
                           A  4895    ; 1077		    break;
0017D1 C3 A7 1C 00         A  4896    	JR	L_414
                           A  4897    ; 1078		case 0x46:
0017D5                     A  4898    L_301:
                           A  4899    ; 1079		    Zero();
0017D5 CD A6 01 00         A  4900    	CALL	_Zero
                           A  4901    ; 1080		    LSR();
0017D9 CD 8D 0C 00         A  4902    	CALL	_LSR
                           A  4903    ; 1081		    break;	
0017DD C3 A7 1C 00         A  4904    	JR	L_414
                           A  4905    ; 1082		case 0x48:
0017E1                     A  4906    L_302:
                           A  4907    ; 1083		    PHA();
0017E1 CD 32 10 00         A  4908    	CALL	_PHA
                           A  4909    ; 1084		    break;
0017E5 C3 A7 1C 00         A  4910    	JR	L_414
                           A  4911    ; 1085		case 0x49:
0017E9                     A  4912    L_303:
                           A  4913    ; 1086		    Imm();
0017E9 CD 90 01 00         A  4914    	CALL	_Imm
                           A  4915    ; 1087		    EOR();
0017ED CD ED 0B 00         A  4916    	CALL	_EOR
                           A  4917    ; 1088		    break;
0017F1 C3 A7 1C 00         A  4918    	JR	L_414
                           A  4919    ; 1089		case 0x4a:
0017F5                     A  4920    L_304:
                           A  4921    ; 1090		    LSR_A();
0017F5 CD E9 0C 00         A  4922    	CALL	_LSR_A
                           A  4923    ; 1091		    break;
0017F9 C3 A7 1C 00         A  4924    	JR	L_414
                           A  4925    ; 1092		case 0x4c:
0017FD                     A  4926    L_305:
                           A  4927    ; 1093		    Abs();
0017FD CD 17 02 00         A  4928    	CALL	_Abs
                           A  4929    ; 1094		    JMP();
001801 CD 0D 11 00         A  4930    	CALL	_JMP
                           A  4931    ; 1095		    break;
001805 C3 A7 1C 00         A  4932    	JR	L_414
                           A  4933    ; 1096		case 0x4d:
001809                     A  4934    L_306:
                           A  4935    ; 1097		    Abs();
001809 CD 17 02 00         A  4936    	CALL	_Abs
                           A  4937    ; 1098		    EOR();
00180D CD ED 0B 00         A  4938    	CALL	_EOR
                           A  4939    ; 1099		    break;
001811 C3 A7 1C 00         A  4940    	JR	L_414
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  96


PC     Object              I  Line    Source m6502.src
                           A  4941    ; 1100		case 0x4e:
001815                     A  4942    L_307:
                           A  4943    ; 1101		    Abs();
001815 CD 17 02 00         A  4944    	CALL	_Abs
                           A  4945    ; 1102		    LSR();
001819 CD 8D 0C 00         A  4946    	CALL	_LSR
                           A  4947    ; 1103		    break;
00181D C3 A7 1C 00         A  4948    	JR	L_414
                           A  4949    ; 1104		case 0x50:
001821                     A  4950    L_308:
                           A  4951    ; 1105		    Rel();
001821 CD 25 04 00         A  4952    	CALL	_Rel
                           A  4953    ; 1106		    BVC();
001825 CD 87 11 00         A  4954    	CALL	_BVC
                           A  4955    ; 1107		    break;
001829 C3 A7 1C 00         A  4956    	JR	L_414
                           A  4957    ; 1108		case 0x51:
00182D                     A  4958    L_309:
                           A  4959    ; 1109		    IndZeroY();
00182D CD CC 03 00         A  4960    	CALL	_IndZeroY
                           A  4961    ; 1110		    EOR();
001831 CD ED 0B 00         A  4962    	CALL	_EOR
                           A  4963    ; 1111		    break;	
001835 C3 A7 1C 00         A  4964    	JR	L_414
                           A  4965    ; 1112		case 0x55:
001839                     A  4966    L_310:
                           A  4967    ; 1113		    ZeroX();
001839 CD C1 01 00         A  4968    	CALL	_ZeroX
                           A  4969    ; 1114		    EOR();
00183D CD ED 0B 00         A  4970    	CALL	_EOR
                           A  4971    ; 1115		    break;
001841 C3 A7 1C 00         A  4972    	JR	L_414
                           A  4973    ; 1116		case 0x56:
001845                     A  4974    L_311:
                           A  4975    ; 1117		    ZeroX();
001845 CD C1 01 00         A  4976    	CALL	_ZeroX
                           A  4977    ; 1118		    LSR();
001849 CD 8D 0C 00         A  4978    	CALL	_LSR
                           A  4979    ; 1119		    break;
00184D C3 A7 1C 00         A  4980    	JR	L_414
                           A  4981    ; 1120		case 0x58:
001851                     A  4982    L_312:
                           A  4983    ; 1121		    CLI();
001851 CD 62 12 00         A  4984    	CALL	_CLI
                           A  4985    ; 1122		    break;
001855 C3 A7 1C 00         A  4986    	JR	L_414
                           A  4987    ; 1123		case 0x59:
001859                     A  4988    L_313:
                           A  4989    ; 1124		    AbsY();
001859 CD 8A 02 00         A  4990    	CALL	_AbsY
                           A  4991    ; 1125		    EOR();
00185D CD ED 0B 00         A  4992    	CALL	_EOR
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  97


PC     Object              I  Line    Source m6502.src
                           A  4993    ; 1126		    break;	
001861 C3 A7 1C 00         A  4994    	JR	L_414
                           A  4995    ; 1127		case 0x5d:
001865                     A  4996    L_314:
                           A  4997    ; 1128		    AbsX();
001865 CD 3A 02 00         A  4998    	CALL	_AbsX
                           A  4999    ; 1129		    EOR();
001869 CD ED 0B 00         A  5000    	CALL	_EOR
                           A  5001    ; 1130		    break;
00186D C3 A7 1C 00         A  5002    	JR	L_414
                           A  5003    ; 1131		case 0x5e:
001871                     A  5004    L_315:
                           A  5005    ; 1132		    WAbsX();
001871 CD 73 04 00         A  5006    	CALL	_WAbsX
                           A  5007    ; 1133		    LSR();
001875 CD 8D 0C 00         A  5008    	CALL	_LSR
                           A  5009    ; 1134		    break;
001879 C3 A7 1C 00         A  5010    	JR	L_414
                           A  5011    ; 1135		case 0x60:
00187D                     A  5012    L_316:
                           A  5013    ; 1136		    RTS();
00187D CD 18 11 00         A  5014    	CALL	_RTS
                           A  5015    ; 1137		    break;
001881 C3 A7 1C 00         A  5016    	JR	L_414
                           A  5017    ; 1138		case 0x61:
001885                     A  5018    L_317:
                           A  5019    ; 1139		    IndZeroX();
001885 CD 5F 03 00         A  5020    	CALL	_IndZeroX
                           A  5021    ; 1140		    ADC();
001889 CD 77 06 00         A  5022    	CALL	_ADC
                           A  5023    ; 1141		    break;	
00188D C3 A7 1C 00         A  5024    	JR	L_414
                           A  5025    ; 1142		case 0x65:
001891                     A  5026    L_318:
                           A  5027    ; 1143		    Zero();
001891 CD A6 01 00         A  5028    	CALL	_Zero
                           A  5029    ; 1144		    ADC();
001895 CD 77 06 00         A  5030    	CALL	_ADC
                           A  5031    ; 1145		    break;
001899 C3 A7 1C 00         A  5032    	JR	L_414
                           A  5033    ; 1146		case 0x66:
00189D                     A  5034    L_319:
                           A  5035    ; 1147		    Zero();
00189D CD A6 01 00         A  5036    	CALL	_Zero
                           A  5037    ; 1148		    ROR();
0018A1 CD 0C 0E 00         A  5038    	CALL	_ROR
                           A  5039    ; 1149		    break;
0018A5 C3 A7 1C 00         A  5040    	JR	L_414
                           A  5041    ; 1150		case 0x68:
0018A9                     A  5042    L_320:
                           A  5043    ; 1151		    PLA();
0018A9 CD 8C 10 00         A  5044    	CALL	_PLA
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  98


PC     Object              I  Line    Source m6502.src
                           A  5045    ; 1152		    break;
0018AD C3 A7 1C 00         A  5046    	JR	L_414
                           A  5047    ; 1153		case 0x69:
0018B1                     A  5048    L_321:
                           A  5049    ; 1154		    Imm();
0018B1 CD 90 01 00         A  5050    	CALL	_Imm
                           A  5051    ; 1155		    ADC();
0018B5 CD 77 06 00         A  5052    	CALL	_ADC
                           A  5053    ; 1156		    break;
0018B9 C3 A7 1C 00         A  5054    	JR	L_414
                           A  5055    ; 1157		case 0x6a:
0018BD                     A  5056    L_322:
                           A  5057    ; 1158		    ROR_A();
0018BD CD A5 0E 00         A  5058    	CALL	_ROR_A
                           A  5059    ; 1159		    break;
0018C1 C3 A7 1C 00         A  5060    	JR	L_414
                           A  5061    ; 1160		case 0x6c:
0018C5                     A  5062    L_323:
                           A  5063    ; 1161		    Ind();
0018C5 CD DA 02 00         A  5064    	CALL	_Ind
                           A  5065    ; 1162		    JMP();
0018C9 CD 0D 11 00         A  5066    	CALL	_JMP
                           A  5067    ; 1163		    break;
0018CD C3 A7 1C 00         A  5068    	JR	L_414
                           A  5069    ; 1164		case 0x6d:
0018D1                     A  5070    L_324:
                           A  5071    ; 1165		    Abs();
0018D1 CD 17 02 00         A  5072    	CALL	_Abs
                           A  5073    ; 1166		    ADC();
0018D5 CD 77 06 00         A  5074    	CALL	_ADC
                           A  5075    ; 1167		    break;
0018D9 C3 A7 1C 00         A  5076    	JR	L_414
                           A  5077    ; 1168		case 0x6e:
0018DD                     A  5078    L_325:
                           A  5079    ; 1169		    Abs();
0018DD CD 17 02 00         A  5080    	CALL	_Abs
                           A  5081    ; 1170		    ROR();
0018E1 CD 0C 0E 00         A  5082    	CALL	_ROR
                           A  5083    ; 1171		    break;
0018E5 C3 A7 1C 00         A  5084    	JR	L_414
                           A  5085    ; 1172		case 0x70:
0018E9                     A  5086    L_326:
                           A  5087    ; 1173		    Rel();
0018E9 CD 25 04 00         A  5088    	CALL	_Rel
                           A  5089    ; 1174		    BVS();
0018ED CD 94 11 00         A  5090    	CALL	_BVS
                           A  5091    ; 1175		    break;
0018F1 C3 A7 1C 00         A  5092    	JR	L_414
                           A  5093    ; 1176		case 0x71:
0018F5                     A  5094    L_327:
                           A  5095    ; 1177		    IndZeroY();
0018F5 CD CC 03 00         A  5096    	CALL	_IndZeroY
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page:  99


PC     Object              I  Line    Source m6502.src
                           A  5097    ; 1178		    ADC();
0018F9 CD 77 06 00         A  5098    	CALL	_ADC
                           A  5099    ; 1179		    break;	
0018FD C3 A7 1C 00         A  5100    	JR	L_414
                           A  5101    ; 1180		case 0x75:
001901                     A  5102    L_328:
                           A  5103    ; 1181		    ZeroX();
001901 CD C1 01 00         A  5104    	CALL	_ZeroX
                           A  5105    ; 1182		    ADC();
001905 CD 77 06 00         A  5106    	CALL	_ADC
                           A  5107    ; 1183		    break;
001909 C3 A7 1C 00         A  5108    	JR	L_414
                           A  5109    ; 1184		case 0x76:
00190D                     A  5110    L_329:
                           A  5111    ; 1185		    ZeroX();
00190D CD C1 01 00         A  5112    	CALL	_ZeroX
                           A  5113    ; 1186		    ROR();
001911 CD 0C 0E 00         A  5114    	CALL	_ROR
                           A  5115    ; 1187		    break;
001915 C3 A7 1C 00         A  5116    	JR	L_414
                           A  5117    ; 1188		case 0x78:
001919                     A  5118    L_330:
                           A  5119    ; 1189		    SEI();
001919 CD 6D 12 00         A  5120    	CALL	_SEI
                           A  5121    ; 1190		    break;
00191D C3 A7 1C 00         A  5122    	JR	L_414
                           A  5123    ; 1191		case 0x79:
001921                     A  5124    L_331:
                           A  5125    ; 1192		    AbsY();
001921 CD 8A 02 00         A  5126    	CALL	_AbsY
                           A  5127    ; 1193		    ADC();
001925 CD 77 06 00         A  5128    	CALL	_ADC
                           A  5129    ; 1194		    break;	
001929 C3 A7 1C 00         A  5130    	JR	L_414
                           A  5131    ; 1195		case 0x7d:
00192D                     A  5132    L_332:
                           A  5133    ; 1196		    AbsX();
00192D CD 3A 02 00         A  5134    	CALL	_AbsX
                           A  5135    ; 1197		    ADC();
001931 CD 77 06 00         A  5136    	CALL	_ADC
                           A  5137    ; 1198		    break;
001935 C3 A7 1C 00         A  5138    	JR	L_414
                           A  5139    ; 1199		case 0x7e:
001939                     A  5140    L_333:
                           A  5141    ; 1200		    WAbsX();
001939 CD 73 04 00         A  5142    	CALL	_WAbsX
                           A  5143    ; 1201		    ROR();
00193D CD 0C 0E 00         A  5144    	CALL	_ROR
                           A  5145    ; 1202		    break;	
001941 C3 A7 1C 00         A  5146    	JR	L_414
                           A  5147    ; 1203		case 0x81:
001945                     A  5148    L_334:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 100


PC     Object              I  Line    Source m6502.src
                           A  5149    ; 1204		    IndZeroX();
001945 CD 5F 03 00         A  5150    	CALL	_IndZeroX
                           A  5151    ; 1205		    STA();
001949 CD 02 06 00         A  5152    	CALL	_STA
                           A  5153    ; 1206		    break;	
00194D C3 A7 1C 00         A  5154    	JR	L_414
                           A  5155    ; 1207		case 0x84:
001951                     A  5156    L_335:
                           A  5157    ; 1208		    Zero();
001951 CD A6 01 00         A  5158    	CALL	_Zero
                           A  5159    ; 1209		    STY();
001955 CD 2E 06 00         A  5160    	CALL	_STY
                           A  5161    ; 1210		    break;
001959 C3 A7 1C 00         A  5162    	JR	L_414
                           A  5163    ; 1211		case 0x85:
00195D                     A  5164    L_336:
                           A  5165    ; 1212		    Zero();
00195D CD A6 01 00         A  5166    	CALL	_Zero
                           A  5167    ; 1213		    STA();
001961 CD 02 06 00         A  5168    	CALL	_STA
                           A  5169    ; 1214		    break;
001965 C3 A7 1C 00         A  5170    	JR	L_414
                           A  5171    ; 1215		case 0x86:
001969                     A  5172    L_337:
                           A  5173    ; 1216		    Zero();
001969 CD A6 01 00         A  5174    	CALL	_Zero
                           A  5175    ; 1217		    STX();
00196D CD 18 06 00         A  5176    	CALL	_STX
                           A  5177    ; 1218		    break;
001971 C3 A7 1C 00         A  5178    	JR	L_414
                           A  5179    ; 1219		case 0x88:
001975                     A  5180    L_338:
                           A  5181    ; 1220		    DEY();
001975 CD B4 0F 00         A  5182    	CALL	_DEY
                           A  5183    ; 1221		    break;	
001979 C3 A7 1C 00         A  5184    	JR	L_414
                           A  5185    ; 1222		case 0x8a:
00197D                     A  5186    L_339:
                           A  5187    ; 1223		    TXA();
00197D CD EB 11 00         A  5188    	CALL	_TXA
                           A  5189    ; 1224		    break;
001981 C3 A7 1C 00         A  5190    	JR	L_414
                           A  5191    ; 1225		case 0x8c:
001985                     A  5192    L_340:
                           A  5193    ; 1226		    Abs();
001985 CD 17 02 00         A  5194    	CALL	_Abs
                           A  5195    ; 1227		    STY();
001989 CD 2E 06 00         A  5196    	CALL	_STY
                           A  5197    ; 1228		    break;
00198D C3 A7 1C 00         A  5198    	JR	L_414
                           A  5199    ; 1229		case 0x8d:
001991                     A  5200    L_341:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 101


PC     Object              I  Line    Source m6502.src
                           A  5201    ; 1230		    Abs();
001991 CD 17 02 00         A  5202    	CALL	_Abs
                           A  5203    ; 1231		    STA();
001995 CD 02 06 00         A  5204    	CALL	_STA
                           A  5205    ; 1232		    break;
001999 C3 A7 1C 00         A  5206    	JR	L_414
                           A  5207    ; 1233		case 0x8e:
00199D                     A  5208    L_342:
                           A  5209    ; 1234		    Abs();
00199D CD 17 02 00         A  5210    	CALL	_Abs
                           A  5211    ; 1235		    STX();
0019A1 CD 18 06 00         A  5212    	CALL	_STX
                           A  5213    ; 1236		    break;
0019A5 C3 A7 1C 00         A  5214    	JR	L_414
                           A  5215    ; 1237		case 0x90:
0019A9                     A  5216    L_343:
                           A  5217    ; 1238		    Rel();
0019A9 CD 25 04 00         A  5218    	CALL	_Rel
                           A  5219    ; 1239		    BCC();
0019AD CD A1 11 00         A  5220    	CALL	_BCC
                           A  5221    ; 1240		    break;
0019B1 C3 A7 1C 00         A  5222    	JR	L_414
                           A  5223    ; 1241		case 0x91:
0019B5                     A  5224    L_344:
                           A  5225    ; 1242		    WIndZeroY();
0019B5 CD 13 05 00         A  5226    	CALL	_WIndZeroY
                           A  5227    ; 1243		    STA();
0019B9 CD 02 06 00         A  5228    	CALL	_STA
                           A  5229    ; 1244		    break;	
0019BD C3 A7 1C 00         A  5230    	JR	L_414
                           A  5231    ; 1245		case 0x94:
0019C1                     A  5232    L_345:
                           A  5233    ; 1246		    ZeroX();
0019C1 CD C1 01 00         A  5234    	CALL	_ZeroX
                           A  5235    ; 1247		    STY();
0019C5 CD 2E 06 00         A  5236    	CALL	_STY
                           A  5237    ; 1248		    break;
0019C9 C3 A7 1C 00         A  5238    	JR	L_414
                           A  5239    ; 1249		case 0x95:
0019CD                     A  5240    L_346:
                           A  5241    ; 1250		    ZeroX();
0019CD CD C1 01 00         A  5242    	CALL	_ZeroX
                           A  5243    ; 1251		    STA();
0019D1 CD 02 06 00         A  5244    	CALL	_STA
                           A  5245    ; 1252		    break;
0019D5 C3 A7 1C 00         A  5246    	JR	L_414
                           A  5247    ; 1253		case 0x96:
0019D9                     A  5248    L_347:
                           A  5249    ; 1254		    ZeroY();
0019D9 CD EC 01 00         A  5250    	CALL	_ZeroY
                           A  5251    ; 1255		    STX();
0019DD CD 18 06 00         A  5252    	CALL	_STX
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 102


PC     Object              I  Line    Source m6502.src
                           A  5253    ; 1256		    break;
0019E1 C3 A7 1C 00         A  5254    	JR	L_414
                           A  5255    ; 1257		case 0x98:
0019E5                     A  5256    L_348:
                           A  5257    ; 1258		    TYA();
0019E5 CD 17 12 00         A  5258    	CALL	_TYA
                           A  5259    ; 1259		    break;
0019E9 C3 A7 1C 00         A  5260    	JR	L_414
                           A  5261    ; 1260		case 0x99:
0019ED                     A  5262    L_349:
                           A  5263    ; 1261		    WAbsY();
0019ED CD C3 04 00         A  5264    	CALL	_WAbsY
                           A  5265    ; 1262		    STA();
0019F1 CD 02 06 00         A  5266    	CALL	_STA
                           A  5267    ; 1263		    break;
0019F5 C3 A7 1C 00         A  5268    	JR	L_414
                           A  5269    ; 1264		case 0x9a:
0019F9                     A  5270    L_350:
                           A  5271    ; 1265		    TXS();
0019F9 CD 2D 12 00         A  5272    	CALL	_TXS
                           A  5273    ; 1266		    break;
0019FD C3 A7 1C 00         A  5274    	JR	L_414
                           A  5275    ; 1267		case 0x9d:
001A01                     A  5276    L_351:
                           A  5277    ; 1268		    WAbsX();
001A01 CD 73 04 00         A  5278    	CALL	_WAbsX
                           A  5279    ; 1269		    STA();
001A05 CD 02 06 00         A  5280    	CALL	_STA
                           A  5281    ; 1270		    break;
001A09 C3 A7 1C 00         A  5282    	JR	L_414
                           A  5283    ; 1271		case 0xa0:
001A0D                     A  5284    L_352:
                           A  5285    ; 1272		    Imm();
001A0D CD 90 01 00         A  5286    	CALL	_Imm
                           A  5287    ; 1273		    LDY();
001A11 CD E8 05 00         A  5288    	CALL	_LDY
                           A  5289    ; 1274		    break;
001A15 C3 A7 1C 00         A  5290    	JR	L_414
                           A  5291    ; 1275		case 0xa1:
001A19                     A  5292    L_353:
                           A  5293    ; 1276		    IndZeroX();
001A19 CD 5F 03 00         A  5294    	CALL	_IndZeroX
                           A  5295    ; 1277		    LDA();
001A1D CD B4 05 00         A  5296    	CALL	_LDA
                           A  5297    ; 1278		    break;
001A21 C3 A7 1C 00         A  5298    	JR	L_414
                           A  5299    ; 1279		case 0xa2:
001A25                     A  5300    L_354:
                           A  5301    ; 1280		    Imm();
001A25 CD 90 01 00         A  5302    	CALL	_Imm
                           A  5303    ; 1281		    LDX();
001A29 CD CE 05 00         A  5304    	CALL	_LDX
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 103


PC     Object              I  Line    Source m6502.src
                           A  5305    ; 1282		    break;
001A2D C3 A7 1C 00         A  5306    	JR	L_414
                           A  5307    ; 1283		case 0xa4:
001A31                     A  5308    L_355:
                           A  5309    ; 1284		    Zero();
001A31 CD A6 01 00         A  5310    	CALL	_Zero
                           A  5311    ; 1285		    LDY();
001A35 CD E8 05 00         A  5312    	CALL	_LDY
                           A  5313    ; 1286		    break;
001A39 C3 A7 1C 00         A  5314    	JR	L_414
                           A  5315    ; 1287		case 0xa5:
001A3D                     A  5316    L_356:
                           A  5317    ; 1288		    Zero();
001A3D CD A6 01 00         A  5318    	CALL	_Zero
                           A  5319    ; 1289		    LDA();
001A41 CD B4 05 00         A  5320    	CALL	_LDA
                           A  5321    ; 1290		    break;
001A45 C3 A7 1C 00         A  5322    	JR	L_414
                           A  5323    ; 1291		case 0xa6:
001A49                     A  5324    L_357:
                           A  5325    ; 1292		    Zero();
001A49 CD A6 01 00         A  5326    	CALL	_Zero
                           A  5327    ; 1293		    LDX();
001A4D CD CE 05 00         A  5328    	CALL	_LDX
                           A  5329    ; 1294		    break;
001A51 C3 A7 1C 00         A  5330    	JR	L_414
                           A  5331    ; 1295		case 0xa8:
001A55                     A  5332    L_358:
                           A  5333    ; 1296		    TAY();
001A55 CD 01 12 00         A  5334    	CALL	_TAY
                           A  5335    ; 1297		    break;
001A59 C3 A7 1C 00         A  5336    	JR	L_414
                           A  5337    ; 1298		case 0xa9:
001A5D                     A  5338    L_359:
                           A  5339    ; 1299		    Imm();
001A5D CD 90 01 00         A  5340    	CALL	_Imm
                           A  5341    ; 1300		    LDA();
001A61 CD B4 05 00         A  5342    	CALL	_LDA
                           A  5343    ; 1301		    break;
001A65 C3 A7 1C 00         A  5344    	JR	L_414
                           A  5345    ; 1302		case 0xaa:
001A69                     A  5346    L_360:
                           A  5347    ; 1303		    TAX();
001A69 CD D5 11 00         A  5348    	CALL	_TAX
                           A  5349    ; 1304		    break;
001A6D C3 A7 1C 00         A  5350    	JR	L_414
                           A  5351    ; 1305		case 0xac:
001A71                     A  5352    L_361:
                           A  5353    ; 1306		    Abs();
001A71 CD 17 02 00         A  5354    	CALL	_Abs
                           A  5355    ; 1307		    LDY();
001A75 CD E8 05 00         A  5356    	CALL	_LDY
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 104


PC     Object              I  Line    Source m6502.src
                           A  5357    ; 1308		    break;
001A79 C3 A7 1C 00         A  5358    	JR	L_414
                           A  5359    ; 1309		case 0xad:
001A7D                     A  5360    L_362:
                           A  5361    ; 1310		    Abs();
001A7D CD 17 02 00         A  5362    	CALL	_Abs
                           A  5363    ; 1311		    LDA();
001A81 CD B4 05 00         A  5364    	CALL	_LDA
                           A  5365    ; 1312		    break;
001A85 C3 A7 1C 00         A  5366    	JR	L_414
                           A  5367    ; 1313		case 0xae:
001A89                     A  5368    L_363:
                           A  5369    ; 1314		    Abs();
001A89 CD 17 02 00         A  5370    	CALL	_Abs
                           A  5371    ; 1315		    LDX();
001A8D CD CE 05 00         A  5372    	CALL	_LDX
                           A  5373    ; 1316		    break;
001A91 C3 A7 1C 00         A  5374    	JR	L_414
                           A  5375    ; 1317		case 0xb0:
001A95                     A  5376    L_364:
                           A  5377    ; 1318		    Rel();
001A95 CD 25 04 00         A  5378    	CALL	_Rel
                           A  5379    ; 1319		    BCS();
001A99 CD AE 11 00         A  5380    	CALL	_BCS
                           A  5381    ; 1320		    break;
001A9D C3 A7 1C 00         A  5382    	JR	L_414
                           A  5383    ; 1321		case 0xb1:
001AA1                     A  5384    L_365:
                           A  5385    ; 1322		    IndZeroY();
001AA1 CD CC 03 00         A  5386    	CALL	_IndZeroY
                           A  5387    ; 1323		    LDA();
001AA5 CD B4 05 00         A  5388    	CALL	_LDA
                           A  5389    ; 1324		    break;	
001AA9 C3 A7 1C 00         A  5390    	JR	L_414
                           A  5391    ; 1325		case 0xb4:
001AAD                     A  5392    L_366:
                           A  5393    ; 1326		    ZeroX();
001AAD CD C1 01 00         A  5394    	CALL	_ZeroX
                           A  5395    ; 1327		    LDY();
001AB1 CD E8 05 00         A  5396    	CALL	_LDY
                           A  5397    ; 1328		    break;
001AB5 C3 A7 1C 00         A  5398    	JR	L_414
                           A  5399    ; 1329		case 0xb5:
001AB9                     A  5400    L_367:
                           A  5401    ; 1330		    ZeroX();
001AB9 CD C1 01 00         A  5402    	CALL	_ZeroX
                           A  5403    ; 1331		    LDA();
001ABD CD B4 05 00         A  5404    	CALL	_LDA
                           A  5405    ; 1332		    break;
001AC1 C3 A7 1C 00         A  5406    	JR	L_414
                           A  5407    ; 1333		case 0xb6:
001AC5                     A  5408    L_368:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 105


PC     Object              I  Line    Source m6502.src
                           A  5409    ; 1334		    ZeroY();
001AC5 CD EC 01 00         A  5410    	CALL	_ZeroY
                           A  5411    ; 1335		    LDX();
001AC9 CD CE 05 00         A  5412    	CALL	_LDX
                           A  5413    ; 1336		    break;
001ACD C3 A7 1C 00         A  5414    	JR	L_414
                           A  5415    ; 1337		case 0xb8:
001AD1                     A  5416    L_369:
                           A  5417    ; 1338		    CLV();
001AD1 CD 78 12 00         A  5418    	CALL	_CLV
                           A  5419    ; 1339		    break;
001AD5 C3 A7 1C 00         A  5420    	JR	L_414
                           A  5421    ; 1340		case 0xb9:
001AD9                     A  5422    L_370:
                           A  5423    ; 1341		    AbsY();
001AD9 CD 8A 02 00         A  5424    	CALL	_AbsY
                           A  5425    ; 1342		    LDA();
001ADD CD B4 05 00         A  5426    	CALL	_LDA
                           A  5427    ; 1343		    break;
001AE1 C3 A7 1C 00         A  5428    	JR	L_414
                           A  5429    ; 1344		case 0xba:
001AE5                     A  5430    L_371:
                           A  5431    ; 1345		    TSX();
001AE5 CD 36 12 00         A  5432    	CALL	_TSX
                           A  5433    ; 1346		    break;
001AE9 C3 A7 1C 00         A  5434    	JR	L_414
                           A  5435    ; 1347		case 0xbc:
001AED                     A  5436    L_372:
                           A  5437    ; 1348		    AbsX();
001AED CD 3A 02 00         A  5438    	CALL	_AbsX
                           A  5439    ; 1349		    LDY();
001AF1 CD E8 05 00         A  5440    	CALL	_LDY
                           A  5441    ; 1350		    break;
001AF5 C3 A7 1C 00         A  5442    	JR	L_414
                           A  5443    ; 1351		case 0xbd:
001AF9                     A  5444    L_373:
                           A  5445    ; 1352		    AbsX();
001AF9 CD 3A 02 00         A  5446    	CALL	_AbsX
                           A  5447    ; 1353		    LDA();
001AFD CD B4 05 00         A  5448    	CALL	_LDA
                           A  5449    ; 1354		    break;
001B01 C3 A7 1C 00         A  5450    	JR	L_414
                           A  5451    ; 1355		case 0xbe:
001B05                     A  5452    L_374:
                           A  5453    ; 1356		    AbsY();
001B05 CD 8A 02 00         A  5454    	CALL	_AbsY
                           A  5455    ; 1357		    LDX();
001B09 CD CE 05 00         A  5456    	CALL	_LDX
                           A  5457    ; 1358		    break;
001B0D C3 A7 1C 00         A  5458    	JR	L_414
                           A  5459    ; 1359		case 0xc0:
001B11                     A  5460    L_375:
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 106


PC     Object              I  Line    Source m6502.src
                           A  5461    ; 1360		    Imm();
001B11 CD 90 01 00         A  5462    	CALL	_Imm
                           A  5463    ; 1361		    CPY();
001B15 CD 62 0B 00         A  5464    	CALL	_CPY
                           A  5465    ; 1362		    break;
001B19 C3 A7 1C 00         A  5466    	JR	L_414
                           A  5467    ; 1363		case 0xc1:
001B1D                     A  5468    L_376:
                           A  5469    ; 1364		    IndZeroX();
001B1D CD 5F 03 00         A  5470    	CALL	_IndZeroX
                           A  5471    ; 1365		    CMP();
001B21 CD CC 0A 00         A  5472    	CALL	_CMP
                           A  5473    ; 1366		    break;	
001B25 C3 A7 1C 00         A  5474    	JR	L_414
                           A  5475    ; 1367		case 0xc4:
001B29                     A  5476    L_377:
                           A  5477    ; 1368		    Zero();
001B29 CD A6 01 00         A  5478    	CALL	_Zero
                           A  5479    ; 1369		    CPY();
001B2D CD 62 0B 00         A  5480    	CALL	_CPY
                           A  5481    ; 1370		    break;
001B31 C3 A7 1C 00         A  5482    	JR	L_414
                           A  5483    ; 1371		case 0xc5:
001B35                     A  5484    L_378:
                           A  5485    ; 1372		    Zero();
001B35 CD A6 01 00         A  5486    	CALL	_Zero
                           A  5487    ; 1373		    CMP();
001B39 CD CC 0A 00         A  5488    	CALL	_CMP
                           A  5489    ; 1374		    break;
001B3D C3 A7 1C 00         A  5490    	JR	L_414
                           A  5491    ; 1375		case 0xc6:
001B41                     A  5492    L_379:
                           A  5493    ; 1376		    Zero();
001B41 CD A6 01 00         A  5494    	CALL	_Zero
                           A  5495    ; 1377		    DEC();
001B45 CD 47 0F 00         A  5496    	CALL	_DEC
                           A  5497    ; 1378		    break;
001B49 C3 A7 1C 00         A  5498    	JR	L_414
                           A  5499    ; 1379		case 0xc8:
001B4D                     A  5500    L_380:
                           A  5501    ; 1380		    INY();
001B4D CD 8E 0F 00         A  5502    	CALL	_INY
                           A  5503    ; 1381		    break;
001B51 C3 A7 1C 00         A  5504    	JR	L_414
                           A  5505    ; 1382		case 0xc9:
001B55                     A  5506    L_381:
                           A  5507    ; 1383		    Imm();
001B55 CD 90 01 00         A  5508    	CALL	_Imm
                           A  5509    ; 1384		    CMP();
001B59 CD CC 0A 00         A  5510    	CALL	_CMP
                           A  5511    ; 1385		    break;
001B5D C3 A7 1C 00         A  5512    	JR	L_414
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 107


PC     Object              I  Line    Source m6502.src
                           A  5513    ; 1386		case 0xca:
001B61                     A  5514    L_382:
                           A  5515    ; 1387		    DEX();
001B61 CD A1 0F 00         A  5516    	CALL	_DEX
                           A  5517    ; 1388		    break;
001B65 C3 A7 1C 00         A  5518    	JR	L_414
                           A  5519    ; 1389		case 0xcc:
001B69                     A  5520    L_383:
                           A  5521    ; 1390		    Abs();
001B69 CD 17 02 00         A  5522    	CALL	_Abs
                           A  5523    ; 1391		    CPY();
001B6D CD 62 0B 00         A  5524    	CALL	_CPY
                           A  5525    ; 1392		    break;
001B71 C3 A7 1C 00         A  5526    	JR	L_414
                           A  5527    ; 1393		case 0xcd:
001B75                     A  5528    L_384:
                           A  5529    ; 1394		    Abs();
001B75 CD 17 02 00         A  5530    	CALL	_Abs
                           A  5531    ; 1395		    CMP();
001B79 CD CC 0A 00         A  5532    	CALL	_CMP
                           A  5533    ; 1396		    break;
001B7D C3 A7 1C 00         A  5534    	JR	L_414
                           A  5535    ; 1397		case 0xce:
001B81                     A  5536    L_385:
                           A  5537    ; 1398		    Abs();
001B81 CD 17 02 00         A  5538    	CALL	_Abs
                           A  5539    ; 1399		    DEC();
001B85 CD 47 0F 00         A  5540    	CALL	_DEC
                           A  5541    ; 1400		    break;
001B89 C3 A7 1C 00         A  5542    	JR	L_414
                           A  5543    ; 1401		case 0xd0:
001B8D                     A  5544    L_386:
                           A  5545    ; 1402		    Rel();
001B8D CD 25 04 00         A  5546    	CALL	_Rel
                           A  5547    ; 1403		    BNE();
001B91 CD 6D 11 00         A  5548    	CALL	_BNE
                           A  5549    ; 1404		    break;
001B95 C3 A7 1C 00         A  5550    	JR	L_414
                           A  5551    ; 1405		case 0xd1:
001B99                     A  5552    L_387:
                           A  5553    ; 1406		    IndZeroY();
001B99 CD CC 03 00         A  5554    	CALL	_IndZeroY
                           A  5555    ; 1407		    CMP();
001B9D CD CC 0A 00         A  5556    	CALL	_CMP
                           A  5557    ; 1408		    break;	
001BA1 C3 A7 1C 00         A  5558    	JR	L_414
                           A  5559    ; 1409		case 0xd5:
001BA5                     A  5560    L_388:
                           A  5561    ; 1410		    ZeroX();
001BA5 CD C1 01 00         A  5562    	CALL	_ZeroX
                           A  5563    ; 1411		    CMP();
001BA9 CD CC 0A 00         A  5564    	CALL	_CMP
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 108


PC     Object              I  Line    Source m6502.src
                           A  5565    ; 1412		    break;
001BAD C3 A7 1C 00         A  5566    	JR	L_414
                           A  5567    ; 1413		case 0xd6:
001BB1                     A  5568    L_389:
                           A  5569    ; 1414		    ZeroX();
001BB1 CD C1 01 00         A  5570    	CALL	_ZeroX
                           A  5571    ; 1415		    DEC();
001BB5 CD 47 0F 00         A  5572    	CALL	_DEC
                           A  5573    ; 1416		    break;
001BB9 C3 A7 1C 00         A  5574    	JR	L_414
                           A  5575    ; 1417		case 0xd8:
001BBD                     A  5576    L_390:
                           A  5577    ; 1418		    CLD();
001BBD CD 83 12 00         A  5578    	CALL	_CLD
                           A  5579    ; 1419		    break;
001BC1 C3 A7 1C 00         A  5580    	JR	L_414
                           A  5581    ; 1420		case 0xd9:
001BC5                     A  5582    L_391:
                           A  5583    ; 1421		    AbsY();
001BC5 CD 8A 02 00         A  5584    	CALL	_AbsY
                           A  5585    ; 1422		    CMP();
001BC9 CD CC 0A 00         A  5586    	CALL	_CMP
                           A  5587    ; 1423		    break;
001BCD C3 A7 1C 00         A  5588    	JR	L_414
                           A  5589    ; 1424		
                           A  5590    ; 1425		case 0xdd:
001BD1                     A  5591    L_392:
                           A  5592    ; 1426		    AbsX();
001BD1 CD 3A 02 00         A  5593    	CALL	_AbsX
                           A  5594    ; 1427		    CMP();
001BD5 CD CC 0A 00         A  5595    	CALL	_CMP
                           A  5596    ; 1428		    break;
001BD9 C3 A7 1C 00         A  5597    	JR	L_414
                           A  5598    ; 1429		case 0xde:
001BDD                     A  5599    L_393:
                           A  5600    ; 1430		    WAbsX();
001BDD CD 73 04 00         A  5601    	CALL	_WAbsX
                           A  5602    ; 1431		    DEC();
001BE1 CD 47 0F 00         A  5603    	CALL	_DEC
                           A  5604    ; 1432		    break;
001BE5 C3 A7 1C 00         A  5605    	JR	L_414
                           A  5606    ; 1433		case 0xe0:
001BE9                     A  5607    L_394:
                           A  5608    ; 1434		    Imm();
001BE9 CD 90 01 00         A  5609    	CALL	_Imm
                           A  5610    ; 1435		    CPX();
001BED CD 17 0B 00         A  5611    	CALL	_CPX
                           A  5612    ; 1436		    break;
001BF1 C3 A7 1C 00         A  5613    	JR	L_414
                           A  5614    ; 1437		case 0xe1:
001BF5                     A  5615    L_395:
                           A  5616    ; 1438		    IndZeroX();
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 109


PC     Object              I  Line    Source m6502.src
001BF5 CD 5F 03 00         A  5617    	CALL	_IndZeroX
                           A  5618    ; 1439		    SBC();
001BF9 CD 0F 09 00         A  5619    	CALL	_SBC
                           A  5620    ; 1440		    break;	
001BFD C3 A7 1C 00         A  5621    	JR	L_414
                           A  5622    ; 1441		case 0xe4:
001C01                     A  5623    L_396:
                           A  5624    ; 1442		    Zero();
001C01 CD A6 01 00         A  5625    	CALL	_Zero
                           A  5626    ; 1443		    CPX();
001C05 CD 17 0B 00         A  5627    	CALL	_CPX
                           A  5628    ; 1444		    break;
001C09 C3 A7 1C 00         A  5629    	JR	L_414
                           A  5630    ; 1445		case 0xe5:
001C0D                     A  5631    L_397:
                           A  5632    ; 1446		    Zero();
001C0D CD A6 01 00         A  5633    	CALL	_Zero
                           A  5634    ; 1447		    SBC();
001C11 CD 0F 09 00         A  5635    	CALL	_SBC
                           A  5636    ; 1448		    break;
001C15 C3 A7 1C 00         A  5637    	JR	L_414
                           A  5638    ; 1449		case 0xe6:
001C19                     A  5639    L_398:
                           A  5640    ; 1450		    Zero();
001C19 CD A6 01 00         A  5641    	CALL	_Zero
                           A  5642    ; 1451		    INC();
001C1D CD 13 0F 00         A  5643    	CALL	_INC
                           A  5644    ; 1452		    break;
001C21 C3 A7 1C 00         A  5645    	JR	L_414
                           A  5646    ; 1453		case 0xe8:
001C25                     A  5647    L_399:
                           A  5648    ; 1454		    INX();
001C25 CD 7B 0F 00         A  5649    	CALL	_INX
                           A  5650    ; 1455		    break;
001C29 18 7C               A  5651    	JR	L_414
                           A  5652    ; 1456		case 0xe9:
001C2B                     A  5653    L_400:
                           A  5654    ; 1457		    Imm();
001C2B CD 90 01 00         A  5655    	CALL	_Imm
                           A  5656    ; 1458		    SBC();
001C2F CD 0F 09 00         A  5657    	CALL	_SBC
                           A  5658    ; 1459		    break;
001C33 18 72               A  5659    	JR	L_414
                           A  5660    ; 1460		case 0xea:
                           A  5661    ; 1461		    break;
                           A  5662    ; 1462		case 0xeb:
001C35                     A  5663    L_402:
                           A  5664    ; 1463		    Imm();
001C35 CD 90 01 00         A  5665    	CALL	_Imm
                           A  5666    ; 1464		    SBC();
001C39 CD 0F 09 00         A  5667    	CALL	_SBC
                           A  5668    ; 1465		    break;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 110


PC     Object              I  Line    Source m6502.src
001C3D 18 68               A  5669    	JR	L_414
                           A  5670    ; 1466		case 0xec:
001C3F                     A  5671    L_403:
                           A  5672    ; 1467		    Abs();
001C3F CD 17 02 00         A  5673    	CALL	_Abs
                           A  5674    ; 1468		    CPX();
001C43 CD 17 0B 00         A  5675    	CALL	_CPX
                           A  5676    ; 1469		    break;
001C47 18 5E               A  5677    	JR	L_414
                           A  5678    ; 1470		case 0xed:
001C49                     A  5679    L_404:
                           A  5680    ; 1471		    Abs();
001C49 CD 17 02 00         A  5681    	CALL	_Abs
                           A  5682    ; 1472		    SBC();
001C4D CD 0F 09 00         A  5683    	CALL	_SBC
                           A  5684    ; 1473		    break;
001C51 18 54               A  5685    	JR	L_414
                           A  5686    ; 1474		case 0xee:
001C53                     A  5687    L_405:
                           A  5688    ; 1475		    Abs();
001C53 CD 17 02 00         A  5689    	CALL	_Abs
                           A  5690    ; 1476		    INC();
001C57 CD 13 0F 00         A  5691    	CALL	_INC
                           A  5692    ; 1477		    break;
001C5B 18 4A               A  5693    	JR	L_414
                           A  5694    ; 1478		case 0xf0:
001C5D                     A  5695    L_406:
                           A  5696    ; 1479		    Rel();
001C5D CD 25 04 00         A  5697    	CALL	_Rel
                           A  5698    ; 1480		    BEQ();
001C61 CD 7A 11 00         A  5699    	CALL	_BEQ
                           A  5700    ; 1481		    break;
001C65 18 40               A  5701    	JR	L_414
                           A  5702    ; 1482		case 0xf1:
001C67                     A  5703    L_407:
                           A  5704    ; 1483		    IndZeroY();
001C67 CD CC 03 00         A  5705    	CALL	_IndZeroY
                           A  5706    ; 1484		    SBC();
001C6B CD 0F 09 00         A  5707    	CALL	_SBC
                           A  5708    ; 1485		    break;	
001C6F 18 36               A  5709    	JR	L_414
                           A  5710    ; 1486		case 0xf5:
001C71                     A  5711    L_408:
                           A  5712    ; 1487		    ZeroX();
001C71 CD C1 01 00         A  5713    	CALL	_ZeroX
                           A  5714    ; 1488		    SBC();
001C75 CD 0F 09 00         A  5715    	CALL	_SBC
                           A  5716    ; 1489		    break;
001C79 18 2C               A  5717    	JR	L_414
                           A  5718    ; 1490		case 0xf6:
001C7B                     A  5719    L_409:
                           A  5720    ; 1491		    ZeroX();
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 111


PC     Object              I  Line    Source m6502.src
001C7B CD C1 01 00         A  5721    	CALL	_ZeroX
                           A  5722    ; 1492		    INC();
001C7F CD 13 0F 00         A  5723    	CALL	_INC
                           A  5724    ; 1493		    break;
001C83 18 22               A  5725    	JR	L_414
                           A  5726    ; 1494		case 0xf8:
001C85                     A  5727    L_410:
                           A  5728    ; 1495		    SED();
001C85 CD 8E 12 00         A  5729    	CALL	_SED
                           A  5730    ; 1496		    break;
001C89 18 1C               A  5731    	JR	L_414
                           A  5732    ; 1497		case 0xf9:
001C8B                     A  5733    L_411:
                           A  5734    ; 1498		    AbsY();
001C8B CD 8A 02 00         A  5735    	CALL	_AbsY
                           A  5736    ; 1499		    SBC();
001C8F CD 0F 09 00         A  5737    	CALL	_SBC
                           A  5738    ; 1500		    break;	
001C93 18 12               A  5739    	JR	L_414
                           A  5740    ; 1501		case 0xfd:
001C95                     A  5741    L_412:
                           A  5742    ; 1502		    AbsX();
001C95 CD 3A 02 00         A  5743    	CALL	_AbsX
                           A  5744    ; 1503		    SBC();
001C99 CD 0F 09 00         A  5745    	CALL	_SBC
                           A  5746    ; 1504		    break;
001C9D 18 08               A  5747    	JR	L_414
                           A  5748    ; 1505		case 0xfe:
001C9F                     A  5749    L_413:
                           A  5750    ; 1506		    WAbsX();
001C9F CD 73 04 00         A  5751    	CALL	_WAbsX
                           A  5752    ; 1507		    INC();
001CA3 CD 13 0F 00         A  5753    	CALL	_INC
                           A  5754    ; 1508		    break;
                           A  5755    ; 1509		}
                           A  5756    ; 1510	}
001CA7                     A  5757    L_414:
001CA7 DDF9                A  5758    	LD	SP,IX
001CA9 DDE1                A  5759    	POP	IX
001CAB C9                  A  5760    	RET	
                           A  5761    
                           A  5762    
                           A  5763    ;**************************** _Execute_Opcode ***************************
                           A  5764    ;Name                         Addr/Register   Size   Type
                           A  5765    ;_Mem_Read                           IMPORT  -----   function
                           A  5766    ;_programCounter                     STATIC      3   variable
                           A  5767    ;opcode                                IX-1      1   variable
                           A  5768    
                           A  5769    
                           A  5770    ; Stack Frame Size: 7 (bytes)
                           A  5771    ;       Spill Code: 0 (instruction)
                           A  5772    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 112


PC     Object              I  Line    Source m6502.src
                           A  5773    
                           A  5774    ; 1511	
                           A  5775    ; 1512	static void Run_M6502(void)
                           A  5776    ; 1513	{
001CAC                     A  5777    _Run_M6502:
                           A  5778    ; 1514		if (!(statusRegister & I) && IRQ)
001CAC 3A 00 00 00         A  5779    	LD	A,(_statusRegister)
001CB0 E604                A  5780    	AND	A,4
001CB2 20 11               A  5781    	JR	NZ,L_418
001CB4 01000000            A  5782    	LD	BC,0
001CB8 2A 01 00 00         A  5783    	LD	HL,(_IRQ)
001CBC B7                  A  5784    	OR	A,A
001CBD ED42                A  5785    	SBC	HL,BC
001CBF 28 04               A  5786    	JR	Z,L_418
                           A  5787    ; 1515			handleIRQ();
001CC1 CD E5 00 00         A  5788    	CALL	_handleIRQ
001CC5                     A  5789    L_418:
                           A  5790    ; 1516		
                           A  5791    ; 1517		if (NMI)
001CC5 01000000            A  5792    	LD	BC,0
001CC9 2A 04 00 00         A  5793    	LD	HL,(_NMI)
001CCD B7                  A  5794    	OR	A,A
001CCE ED42                A  5795    	SBC	HL,BC
001CD0 28 04               A  5796    	JR	Z,L_419
                           A  5797    ; 1518			handleNMI();
001CD2 CD 36 01 00         A  5798    	CALL	_handleNMI
001CD6                     A  5799    L_419:
                           A  5800    ; 1519		
                           A  5801    ; 1520		Execute_Opcode();
001CD6 CD 99 12 00         A  5802    	CALL	_Execute_Opcode
                           A  5803    ; 1521	}
001CDA C9                  A  5804    	RET	
                           A  5805    
                           A  5806    
                           A  5807    ;**************************** _Run_M6502 ***************************
                           A  5808    ;Name                         Addr/Register   Size   Type
                           A  5809    ;_NMI                                STATIC      3   variable
                           A  5810    ;_IRQ                                STATIC      3   variable
                           A  5811    ;_statusRegister                     STATIC      1   variable
                           A  5812    
                           A  5813    
                           A  5814    ; Stack Frame Size: 6 (bytes)
                           A  5815    ;       Spill Code: 0 (instruction)
                           A  5816    
                           A  5817    
                           A  5818    ; 1522	
                           A  5819    ; 1523	void Reset_M6502(void)
                           A  5820    ; 1524	{
001CDB                     A  5821    _Reset_M6502:
                           A  5822    ; 1525		statusRegister |= I;
001CDB 3A 00 00 00         A  5823    	LD	A,(_statusRegister)
                           A  5824    ; 1526		stackPointer = 0xFF;
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 113


PC     Object              I  Line    Source m6502.src
                           A  5825    ; 1527		programCounter = Mem_Read_Absolute(0xFFFC);
001CDF 01FCFF00            A  5826    	LD	BC,65532
001CE3 C5                  A  5827    	PUSH	BC
001CE4 CBD7                A  5828    	SET	2,A
001CE6 32 00 00 00         A  5829    	LD	(_statusRegister),A
001CEA 3EFF                A  5830    	LD	A,255
001CEC 32 03 00 00         A  5831    	LD	(_stackPointer),A
001CF0 CD 00 00 00         A  5832    	CALL	_Mem_Read_Absolute
001CF4 C1                  A  5833    	POP	BC
001CF5 E5C1                A  5834    	LD	BC,HL
001CF7 CD 00 00 00         A  5835    	CALL	__stoiu
001CFB 22 04 00 00         A  5836    	LD	(_programCounter),HL
                           A  5837    ; 1528	}
001CFF C9                  A  5838    	RET	
                           A  5839    
                           A  5840    
                           A  5841    ;**************************** _Reset_M6502 ***************************
                           A  5842    ;Name                         Addr/Register   Size   Type
                           A  5843    ;_programCounter                     STATIC      3   variable
                           A  5844    ;_stackPointer                       STATIC      1   variable
                           A  5845    ;_statusRegister                     STATIC      1   variable
                           A  5846    
                           A  5847    
                           A  5848    ; Stack Frame Size: 6 (bytes)
                           A  5849    ;       Spill Code: 0 (instruction)
                           A  5850    
                           A  5851    
                           A  5852    ; 1529	
                           A  5853    ; 1530	/*void Set_Speed(int freq, int synchroMillis)
                           A  5854    ; 1531	{
                           A  5855    ; 1532		//cyclesBeforeSynchro = synchroMillis * freq;
                           A  5856    ; 1533		_synchroMillis = synchroMillis;
                           A  5857    ; 1534	}*/
                           A  5858    ; 1535	
                           A  5859    ; 1536	void Set_IRQ(int state)
                           A  5860    ; 1537	{
001D00                     A  5861    _Set_IRQ:
001D00 CD 00 00 00         A  5862    	CALL	__frameset0
                           A  5863    ; 1538		IRQ = state;
001D04 DD0706              A  5864    	LD	BC,(IX+6)
001D07 ED43 01 00 00       A  5865    	LD	(_IRQ),BC
                           A  5866    ; 1539	}
001D0C DDF9                A  5867    	LD	SP,IX
001D0E DDE1                A  5868    	POP	IX
001D10 C9                  A  5869    	RET	
                           A  5870    
                           A  5871    
                           A  5872    ;**************************** _Set_IRQ ***************************
                           A  5873    ;Name                         Addr/Register   Size   Type
                           A  5874    ;_IRQ                                STATIC      3   variable
                           A  5875    ;state                                 IX+6      3   parameter
                           A  5876    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 114


PC     Object              I  Line    Source m6502.src
                           A  5877    
                           A  5878    ; Stack Frame Size: 9 (bytes)
                           A  5879    ;       Spill Code: 0 (instruction)
                           A  5880    
                           A  5881    
                           A  5882    ; 1540	
                           A  5883    ; 1541	void setNMI(void)
                           A  5884    ; 1542	{
001D11                     A  5885    _setNMI:
                           A  5886    ; 1543		NMI = 1;
001D11 01010000            A  5887    	LD	BC,1
001D15 ED43 04 00 00       A  5888    	LD	(_NMI),BC
                           A  5889    ; 1544	}
001D1A C9                  A  5890    	RET	
                           A  5891    
                           A  5892    
                           A  5893    ;**************************** _setNMI ***************************
                           A  5894    ;Name                         Addr/Register   Size   Type
                           A  5895    ;_NMI                                STATIC      3   variable
                           A  5896    
                           A  5897    
                           A  5898    ; Stack Frame Size: 6 (bytes)
                           A  5899    ;       Spill Code: 0 (instruction)
                           A  5900    
                           A  5901    
                           A  5902    	XREF _Mem_Write:ROM
                           A  5903    	XREF _Mem_Read:ROM
                           A  5904    	XREF __inot:ROM
                           A  5905    	XREF __ior:ROM
                           A  5906    	XREF __iand:ROM
                           A  5907    	XREF __ixor:ROM
                           A  5908    	XREF __stoiu:ROM
                           A  5909    	XREF __frameset0:ROM
                           A  5910    	XREF __frameset:ROM
                           A  5911    	XREF __ishl_b:ROM
                           A  5912    	XREF __ishrs_b:ROM
                           A  5913    	XDEF _setNMI
                           A  5914    	XDEF _Set_IRQ
                           A  5915    	XDEF _Reset_M6502
                           A  5916    	XDEF _Cpu_Opcode
                           A  5917    	XDEF _tmp
                           A  5918    	XDEF _ptrL
                           A  5919    	XDEF _ptrH
                           A  5920    	XDEF _ptr
                           A  5921    	XDEF _opL
                           A  5922    	XDEF _opH
                           A  5923    	XDEF _op
                           A  5924    	XDEF _programCounter
                           A  5925    	END
Zilog eZ80 Macro Assembler Version 4.1 (10060805)                                               19-Sep-11     10:00:03     page: 115


PC     Object              I  Line    Source 


Errors: 0
Warnings: 0
Lines Assembled: 5926
