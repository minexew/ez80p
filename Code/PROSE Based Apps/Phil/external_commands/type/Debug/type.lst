Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   1


PC     Object              I  Line    Source 
                           A     1    
                           A     2    ; Command: "Type [filename]" - shows text files
                           A     3    
                           A     4    ;----------------------------------------------
                           A     5    
       00000000            A     6    amoeba_version_req	equ	0				; 0 = d
       0000003B            A     7    prose_version_req	equ 03bh			; 0 = d
       00000001            A     8    ADL_mode			equ 1				; 0 if 
       00010000            A     9    load_location		equ 10000h			; anywh
                           A    10    
                           B     0    			include	'PROSE_header.asm'
                           B     1    
                           B     2    ;----------------------------------------------
                           B     3    
                           C     0    include "ez80_cpu_equates.asm"
                           C     1    ;--- EZ80 Internal Ports ----------------------
                           C     2    
       0000009A            C     3    PB_DR			equ 09ah
       0000009B            C     4    PB_DDR			equ 09bh
       0000009C            C     5    PB_ALT1			equ 09ch
       0000009D            C     6    PB_ALT2			equ 09dh
                           C     7    
       0000009E            C     8    PC_DR			equ 09eh
       0000009F            C     9    PC_DDR			equ 09fh
       000000A0            C    10    PC_ALT1			equ 0a0h
       000000A1            C    11    PC_ALT2			equ 0a1h
                           C    12    
       000000A2            C    13    PD_DR			equ 0a2h
       000000A3            C    14    PD_DDR			equ 0a3h
       000000A4            C    15    PD_ALT1			equ 0a4h
       000000A5            C    16    PD_ALT2			equ 0a5h
                           C    17    
       000000C0            C    18    UART0_RBR		equ 0c0h
       000000C0            C    19    UART0_THR		equ 0c0h
       000000C0            C    20    UART0_BRG_L		equ 0c0h
       000000C1            C    21    UART0_BRG_H		equ 0c1h
       000000C1            C    22    UART0_IER		equ 0c1h
       000000C2            C    23    UART0_FCTL		equ 0c2h
       000000C3            C    24    UART0_LCTL		equ 0c3h
       000000C4            C    25    UART0_MCTL		equ 0c4h
       000000C5            C    26    UART0_LSR		equ 0c5h
       000000C6            C    27    UART0_MSR		equ 0c6h
                           C    28    
       000000A8            C    29    CS0_LBR			equ 0a8h			;eZ80 wait 
       000000A9            C    30    CS0_UBR			equ 0a9h
       000000AA            C    31    CS0_CTL			equ 0aah			
       000000AB            C    32    CS1_LBR			equ 0abh			;eZ80 wait 
       000000AC            C    33    CS1_UBR			equ 0ach
       000000AD            C    34    CS1_CTL			equ 0adh
       000000AE            C    35    CS2_LBR			equ 0aeh			;eZ80 wait 
       000000AF            C    36    CS2_UBR			equ 0afh
       000000B0            C    37    CS2_CTL			equ 0b0h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   2


PC     Object              I  Line    Source ..\..\..\..\..\Includes\ez80_cpu_equates.asm
       000000B1            C    38    CS3_LBR			equ 0b1h			;eZ80 wait 
       000000B2            C    39    CS3_UBR			equ 0b2h
       000000B3            C    40    CS3_CTL			equ 0b3h
                           C    41    
       00000080            C    42    TMR0_CTL		equ 080h			;timer 0 eq
       00000081            C    43    TMR0_DR_L		equ 081h
       00000081            C    44    TMR0_RR_L		equ 081h
       00000082            C    45    TMR0_DR_H		equ 082h
       00000082            C    46    TMR0_RR_H		equ 082h
       00000092            C    47    TMR_ISS			equ 092h
                           C    48    
       00000083            C    49    TMR1_CTL		equ 083h 
       00000084            C    50    TMR1_RR_L		equ 084h
       00000085            C    51    TMR1_RR_H		equ 085h
                           C    52    
       000000ED            C    53    RTC_CTRL		equ 0edh			;RTC equate
       000000EC            C    54    RTC_ACTRL		equ 0ech
       000000E0            C    55    RTC_SEC			equ 0e0h
       000000E1            C    56    RTC_MIN			equ 0e1h
       000000E2            C    57    RTC_HRS			equ 0e2h
       000000E3            C    58    RTC_DOW			equ 0e3h
       000000E4            C    59    RTC_DOM			equ 0e4h
       000000E5            C    60    RTC_MON			equ 0e5h
       000000E6            C    61    RTC_YR			equ 0e6h
       000000E7            C    62    RTC_CEN			equ 0e7h
                           C    63    
                           C    64    ;----------------------------------------------
                           B     5    
                           B     6    
                           C     0    include "amoeba_hardware_equates.asm"
                           C     1    ;-- AMOEBA Hardware equates -------------------
                           C     2    
       00000000            C     3    port_pic_data  			equ 000h
       00000001            C     4    port_pic_ctrl			equ 001h
       00000001            C     5    port_hw_flags			equ 001h
       00000002            C     6    port_sdc_ctrl			equ 002h	; this is a
       00000002            C     7    port_keyboard_data		equ 002h
       00000003            C     8    port_sdc_data		 	equ 003h	
       00000004            C     9    port_memory_paging		equ 004h
       00000005            C    10    port_irq_ctrl			equ 005h
       00000005            C    11    port_irq_flags			equ 005h
       00000006            C    12    port_nmi_ack			equ 006h
       00000007            C    13    port_ps2_ctrl			equ 007h
       00000008            C    14    port_selector			equ 008h
       00000006            C    15    port_mouse_data			equ 006h
       00000009            C    16    port_clear_flags		equ 009h
                           C    17    
       00000000            C    18    sdc_power				equ 0		;(port_sd_c
       00000001            C    19    sdc_cs					equ 1		;(port_sd_c
       00000002            C    20    sdc_speed				equ 2 		;(port_sd_c
                           C    21    
       00000004            C    22    sdc_serializer_busy		equ 4 		;(port_hw_f
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   3


PC     Object              I  Line    Source ..\..\..\..\..\Includes\amoeba_hardware_equates.asm
       00000005            C    23    vrt						equ 5		;(port_hw_f
                           C    24    
                           C    25    
                           C    26    ;-- Memory locations --------------------------
                           C    27    
       00000000            C    28    sysram_addr				equ 0000000h
       00800000            C    29    vram_a_addr				equ 0800000h
       00C00000            C    30    vram_b_addr				equ 0c00000h
                           C    31    
                           C    32    ;-- Hardware registers ------------------------
                           C    33    
       00FF0000            C    34    hw_palette				equ 0ff0000h
       00FF0800            C    35    hw_sprite_registers		equ 0ff0800h
       00FF1000            C    36    hw_video_parameters		equ 0ff1000h
       00FF1400            C    37    hw_audio_registers		equ 0ff1400h
       00FF1800            C    38    hw_video_settings		equ 0ff1800h
                           C    39    
       00FF1000            C    40    tilemap_parameters		equ hw_video_parameters
       00FF1020            C    41    bitmap_parameters		equ hw_video_parameters
                           C    42    
       00FF1800            C    43    video_control			equ hw_video_settings+0
       00FF1801            C    44    sprite_control			equ hw_video_settings+0
       00FF1802            C    45    bgnd_palette_select		equ hw_video_settings+0
       00FF1803            C    46    sprite_palette_select	equ hw_video_settings+0
       00FF1804            C    47    right_border_position	equ hw_video_settings+0
       00FF1805            C    48    irq_line_lo				equ hw_video_settings+0
       00FF1806            C    49    irq_line_hi				equ hw_video_settings+0
                           C    50    
                           C    51    ;----------------------------------------------
                           B     8    
                           B     9    
                           C     0    include "prose_kernal_labels.asm"
                           C     1    ;--------- PROSE Kernal Routine labels --------
                           C     2    		
       00000000            C     3    kr_mount_volumes				equ 00h	
       00000001            C     4    kr_get_device_info				equ 01h	
       00000002            C     5    kr_check_volume_format			equ 02h	
       00000003            C     6    kr_change_volume				equ 03h	
       00000004            C     7    kr_get_volume_info				equ 04h	
       00000005            C     8    kr_format_device				equ 05h	
       00000006            C     9    kr_make_dir						equ 06h
                           C    10    
       00000007            C    11    kr_change_dir					equ 07h	
       00000008            C    12    kr_parent_dir					equ 08h	
       00000009            C    13    kr_root_dir						equ 09h
       0000000A            C    14    kr_delete_dir					equ 0ah
                           C    15    
       0000000B            C    16    kr_find_file					equ 0bh
       0000000B            C    17    kr_open_file					equ 0bh		; p
                           C    18    
       0000000C            C    19    kr_set_file_pointer				equ 0ch
       0000000D            C    20    kr_set_load_length				equ 0dh
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   4


PC     Object              I  Line    Source ..\..\..\..\..\Includes\prose_kernal_labels.asm
       0000000E            C    21    kr_read_file					equ 0eh
                           C    22    
       0000000F            C    23    kr_erase_file					equ 0fh
       00000010            C    24    kr_rename_file					equ 10h
       00000011            C    25    kr_create_file					equ 11h
       00000012            C    26    kr_write_file					equ 12h
       00000013            C    27    kr_get_total_sectors			equ 13h
       00000014            C    28    kr_dir_list_first_entry			equ 14h
       00000015            C    29    kr_dir_list_get_entry			equ 15h
       00000016            C    30    kr_dir_list_next_entry			equ 16h
                           C    31    
       00000017            C    32    kr_read_sector					equ 17h
       00000018            C    33    kr_write_sector					equ 18h
       00000019            C    34    kr_file_sector_list				equ 19h
       0000001A            C    35    kr_get_dir_cluster				equ 1ah
       0000001B            C    36    kr_set_dir_cluster				equ 1bh
       0000001C            C    37    kr_get_dir_name					equ 1ch
       0000001D            C    38    kr_wait_key						equ 1dh
       0000001E            C    39    kr_get_key						equ 1eh
                           C    40    
       0000001F            C    41    kr_get_key_mod_flags			equ 1fh
       00000020            C    42    kr_serial_receive_header		equ 20h
       00000021            C    43    kr_serial_receive_file			equ 21h
       00000022            C    44    kr_serial_send_file				equ 22h
       00000023            C    45    kr_serial_tx_byte				equ 23h
       00000024            C    46    kr_serial_rx_byte				equ 24h
                           C    47    
       00000025            C    48    kr_print_string					equ 25h
       00000026            C    49    kr_clear_screen					equ 26h
       00000027            C    50    kr_wait_vrt						equ 27h
       00000028            C    51    kr_set_cursor_position			equ 28h
       00000029            C    52    kr_plot_char					equ 29h
       0000002A            C    53    kr_set_pen						equ 2ah
       0000002B            C    54    kr_background_colours			equ 2bh
       0000002C            C    55    kr_draw_cursor					equ 2ch
       0000002D            C    56    kr_get_pen						equ 2dh
       0000002E            C    57    kr_scroll_up					equ 2eh
       0000002F            C    58    kr_os_display					equ 2fh
                           C    59    
       00000030            C    60    kr_get_display_size				equ 30h	
       00000030            C    61    kr_get_video_mode				equ 30h		;pr
                           C    62    
       00000031            C    63    kr_get_charmap_addr_xy			equ 31h
       00000032            C    64    kr_get_cursor_position			equ 32h
                           C    65    
       00000033            C    66    kr_set_envar					equ 33h
       00000034            C    67    kr_get_envar					equ 34h
       00000035            C    68    kr_delete_envar					equ 35h
                           C    69    
       00000036            C    70    kr_init_mouse					equ 36h 	; n
                           C    71    
       00000037            C    72    kr_get_mouse_position			equ 37h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   5


PC     Object              I  Line    Source ..\..\..\..\..\Includes\prose_kernal_labels.asm
                           C    73    
       00000038            C    74    kr_get_mouse_motion				equ 38h
       00000038            C    75    kr_get_mouse_counters			equ 38h		;pr
                           C    76    
       00000039            C    77    kr_time_delay					equ 39h
       0000003A            C    78    kr_compare_strings				equ 3ah
       0000003B            C    79    kr_hex_byte_to_ascii			equ 3bh
       0000003C            C    80    kr_ascii_to_hex_word			equ 3ch
       0000003D            C    81    kr_get_string					equ 3dh
                           C    82    
       0000003E            C    83    kr_get_version					equ 3eh
       0000003F            C    84    kr_dont_store_registers			equ 3fh
       00000040            C    85    kr_get_font_info				equ 40h
       00000041            C    86    kr_read_rtc						equ 41h
       00000042            C    87    kr_write_rtc					equ 42h
                           C    88    
       00000043            C    89    kr_get_keymap_location			equ 43h
                           C    90    
       00000044            C    91    kr_get_os_high_mem				equ 44h
       00000044            C    92    kr_get_mem_base					equ 44h		
       00000044            C    93    kr_get_ram_base					equ 44h		;pr
                           C    94    
       00000045            C    95    kr_play_audio					equ 45h
       00000046            C    96    kr_disable_audio				equ 46h
       00000047            C    97    kr_get_joysticks				equ 47h
       00000048            C    98    kr_set_video_mode				equ 48h
       00000049            C    99    kr_set_cursor_image				equ 49h
       0000004A            C   100    kr_remove_cursor				equ 4ah
       0000004B            C   101    kr_char_to_font					equ 4bh
                           C   102    
       0000004C            C   103    kr_get_disk_sector_ptr			equ 4ch
       0000004D            C   104    kr_set_timeout					equ 4dh
       0000004E            C   105    kr_test_timeout					equ 4eh
       0000004F            C   106    kr_set_pointer					equ 4fh
       00000050            C   107    kr_allocate_ram					equ 50h
       00000051            C   108    kr_deallocate_ram				equ 51h
                           C   109    
       00000052            C   110    kr_get_mem_top					equ 52h
       00000052            C   111    kr_get_ram_top					equ 52h		;pr
                           C   112    
       00000053            C   113    kr_init_msec_counter			equ 53h
       00000054            C   114    kr_read_msec_counter			equ 54h
       00000055            C   115    kr_parse_path					equ 55h
                           C   116    
                           C   117    ;----------------------------------------------
                           B    11    
                           B    12    
                           C     0    include "misc_system_equates.asm"
                           C     1    
                           C     2    ;-- System Equates ----------------------------
                           C     3    
       00000A00            C     4    os_location			equ 0a00h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   6


PC     Object              I  Line    Source ..\..\..\..\..\Includes\misc_system_equates.asm
                           C     5    
       00000A14            C     6    prose_return 		equ os_location + 14h
       00000A18            C     7    prose_relativize_hl	equ os_location + 18h
       00000A1C            C     8    prose_relative_call	equ os_location + 1ch
                           C     9    
       00000A20            C    10    prose_kernal 		equ os_location + 20h
                           C    11    
                           C    12    ;----------------------------------------------
                           C    13    
                           C    14    ; Add to sprite locations to position a 0,0 spr
                           C    15    
       0000009A            C    16    x_display_offset	equ 09ah
       00000025            C    17    y_display_offset	equ 025h
                           C    18    
                           C    19    ;----------------------------------------------
                           B    14    
                           B    15    
                           B    16    ;----------------------------------------------
                           B    17    ; Standard PROSE executable header
                           B    18    ;----------------------------------------------
                           B    19    
                           B    20    
                           B    21    	IF ADL_mode = 0
                           B    22    		org load_location&0ffffh	; if Z80 mo
                           B    23    	ELSE
010000                     B    24    		org load_location			; otherwise
                           B    25    	ENDIF
                           B    26    	
                           B    27    		.assume ADL = 1				; All PROSE
                           B    28    
010000 18 0E               B    29    		jr skip_header				; $0 - Jump
010002 50524F              B    30    		db 'PRO'					; $2 - ASCI
010005 000001              B    31    mb_loc	dw24 load_location			; $5 - Desi
010008 000000              B    32    		dw24 0						; $8 - If >
01000B 3B00                B    33    		dw prose_version_req		; $B - If >
01000D 0000                B    34    		dw amoeba_version_req		; $D - If >
01000F 01                  B    35    		db ADL_mode					; $F - Z80 
                           B    36    
010010                     B    37    skip_header
                           B    38    	
                           B    39    	IF ADL_mode = 0 
                           B    40    		
                           B    41    mbase_offset equ load_location & 0ff0000h
                           B    42    
                           B    43    		ld a,load_location/65536	; Additiona
                           B    44    		ld MB,a						; Set MBASE
                           B    45    		jp.sis go_z80_mode			; switches 
                           B    46    
                           B    47    go_z80_mode
                           B    48    
                           B    49    		.assume ADL = 0
                           B    50    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   7


PC     Object              I  Line    Source ..\..\..\..\..\Includes\PROSE_header.asm
                           B    51    	ENDIF
                           B    52    	
                           B    53    ;----------------------------------------------
                           B    54    	
                           A    12    
                           A    13    ;----------------------------------------------
                           A    14    
010010 E5                  A    15    			push hl
010011 3E04                A    16    			ld a,kr_get_volume_info		;store 
010013 5BCD200A 00         A    17    			call.lil prose_kernal
010018 32 4C 00 01         A    18    			ld (orig_volume),a
01001C 3E1A                A    19    			ld a,kr_get_dir_cluster
01001E 5BCD200A 00         A    20    			call.lil prose_kernal
010023 ED53 4D 00 01       A    21    			ld (orig_dir_cluster),de
010028 E1                  A    22     			pop hl
                           A    23    			
010029 CD 50 00 01         A    24    			call my_prog
                           A    25    			
01002D F5                  A    26    			push af						;restor
01002E 3A 4C 00 01         A    27    			ld a,(orig_volume)
010032 5F                  A    28    			ld e,a
010033 3E03                A    29    			ld a,kr_change_volume
010035 5BCD200A 00         A    30    			call.lil prose_kernal
01003A ED5B 4D 00 01       A    31    			ld de,(orig_dir_cluster)
01003F 3E1B                A    32    			ld a,kr_set_dir_cluster
010041 5BCD200A 00         A    33    			call.lil prose_kernal
010046 F1                  A    34    			pop af
010047 5BC3140A 00         A    35    			jp.lil prose_return
                           A    36    
                           A    37    
01004C 00                  A    38    orig_volume			db 0
01004D 000000              A    39    orig_dir_cluster	dw24 0
                           A    40    
                           A    41    ;----------------------------------------------
                           A    42    ; App starts here..
                           A    43    ;----------------------------------------------
                           A    44    
010050                     A    45    my_prog
010050 7E                  A    46    			ld a,(hl)					;if no 
010051 B7                  A    47    			or a
010052 20 0D               A    48    			jr nz,got_args
                           A    49    		
010054 3E25                A    50    			ld a,kr_print_string
010056 21 80 02 01         A    51    			ld hl,usage_txt
01005A 5BCD200A 00         A    52    			call.lil prose_kernal
01005F AF                  A    53    			xor a
010060 C9                  A    54    			ret
                           A    55    			
010061 1E00                A    56    got_args	ld e,0
010063 3E55                A    57    			ld a,kr_parse_path
010065 5BCD200A 00         A    58    			call.lil prose_kernal
01006A C0                  A    59    			ret nz
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   8


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
                           A    60    			
01006B E5                  A    61    			push hl						; copy 
01006C 11 08 03 01         A    62    			ld de,filename
010070 0610                A    63    			ld b,16
010072 7E                  A    64    fnclp		ld a,(hl)
010073 B7                  A    65    			or a
010074 28 09               A    66    			jr z,fncdone
010076 FE20                A    67    			cp ' '
010078 28 05               A    68    			jr z,fncdone
01007A 12                  A    69    			ld (de),a
01007B 23                  A    70    			inc hl
01007C 13                  A    71    			inc de
01007D 10 F3               A    72    			djnz fnclp
01007F AF                  A    73    fncdone		xor a
010080 12                  A    74    			ld (de),a					; null 
010081 E1                  A    75    			pop hl
                           A    76    			
010082 21 08 03 01         A    77    			ld hl,filename				; does 
010086 3E0B                A    78    			ld a,kr_find_file
010088 5BCD200A 00         A    79    			call.lil prose_kernal
01008D C0                  A    80    			ret nz
01008E 79                  A    81    			ld a,c
01008F B7                  A    82    			or a 
010090 28 0D               A    83    			jr z,fs_ok
                           A    84    			
010092 3E25                A    85    			ld a,kr_print_string		;if fil
010094 21 C8 02 01         A    86    			ld hl,too_big_txt			;this, 
010098 5BCD200A 00         A    87    			call.lil prose_kernal
01009D AF                  A    88    			xor a
01009E C9                  A    89    			ret
                           A    90    			
01009F 3E32                A    91    fs_ok		ld a,kr_get_cursor_position
0100A1 5BCD200A 00         A    92    			call.lil prose_kernal
0100A6 ED43 28 03 01       A    93    			ld (cursor_pos),bc
                           A    94    
0100AB 3E30                A    95    			ld a,kr_get_display_size
0100AD 5BCD200A 00         A    96    			call.lil prose_kernal
0100B2 78                  A    97    			ld a,b
0100B3 32 EA 02 01         A    98    			ld (display_columns),a
0100B7 79                  A    99    			ld a,c
0100B8 32 E9 02 01         A   100    			ld (display_rows),a
                           A   101    
0100BC 2100FFFF            A   102    			ld hl,0ffff00h
0100C0 22 2D 03 01         A   103    			ld (textfile_offset),hl
0100C4 3EFF                A   104    			ld a,0ffh
0100C6 32 30 03 01         A   105    			ld (buffer_offset),a
0100CA AF                  A   106    			xor a
0100CB 32 2C 03 01         A   107    			ld (line_count),a
                           A   108    			
0100CF 3E2D                A   109    			ld a,kr_get_pen
0100D1 5BCD200A 00         A   110    			call.lil prose_kernal
0100D6 32 2B 03 01         A   111    			ld (original_pen),a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:   9


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
                           A   112    
0100DA CD 03 01 01         A   113    			call main_loop
                           A   114    
0100DE ED4B 28 03 01       A   115    			ld bc,(cursor_pos)
0100E3 3E28                A   116    			ld a,kr_set_cursor_position
0100E5 5BCD200A 00         A   117    			call.lil prose_kernal
                           A   118    			
0100EA 3A 2B 03 01         A   119    			ld a,(original_pen)
0100EE 5F                  A   120    			ld e,a
0100EF 3E2A                A   121    			ld a,kr_set_pen
0100F1 5BCD200A 00         A   122    			call.lil prose_kernal
                           A   123    			
0100F6 21 31 03 01         A   124    			ld hl,new_line
0100FA 3E25                A   125    			ld a,kr_print_string
0100FC 5BCD200A 00         A   126    			call.lil prose_kernal
010101 AF                  A   127    			xor a
010102 C9                  A   128    			ret
                           A   129    			
                           A   130    ;==============================================
                           A   131    
                           A   132    			
010103 CD BF 01 01         A   133    main_loop	call get_next_char
010107 B7                  A   134    			or a						;if its
010108 C8                  A   135    			ret z
                           A   136    
010109 FE09                A   137    			cp 9
01010B 20 12               A   138    			jr nz,not_tab
01010D 3E20                A   139    tab_spc		ld a,' '					;if tab
01010F CD 4D 01 01         A   140    			call output_char
010113 ED43 28 03 01       A   141    			ld (cursor_pos),bc
010118 78                  A   142    			ld a,b
010119 E607                A   143    			and 7
01011B 20 F0               A   144    			jr nz,tab_spc
01011D 18 E4               A   145    			jr main_loop
                           A   146    			
01011F FE0A                A   147    not_tab		cp 10
010121 20 08               A   148    			jr nz,not_lf
010123 CD 77 01 01         A   149    			call line_feed
010127 28 DA               A   150    			jr z,main_loop				;check 
010129 AF                  A   151    			xor a
01012A C9                  A   152    			ret
                           A   153    			
01012B FE0D                A   154    not_lf		cp 13
01012D 20 06               A   155    			jr nz,not_cr
01012F CD B1 01 01         A   156    			call carriage_return
010133 18 CE               A   157    			jr main_loop
                           A   158    			
010135 FE0B                A   159    not_cr		cp 11
010137 20 0C               A   160    			jr nz,not_crlf
010139 CD B1 01 01         A   161    			call carriage_return
01013D CD 77 01 01         A   162    			call line_feed
010141 28 C0               A   163    			jr z,main_loop				;check 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  10


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
010143 AF                  A   164    			xor a
010144 C9                  A   165    			ret
                           A   166    			
010145 CD 4D 01 01         A   167    not_crlf	call output_char
010149 28 B8               A   168    			jr z,main_loop				;check 
01014B AF                  A   169    			xor a
01014C C9                  A   170    			ret
                           A   171    			
                           A   172    ;==============================================
                           A   173    
01014D                     A   174    output_char
                           A   175    
01014D ED4B 28 03 01       A   176    			ld bc,(cursor_pos)
010152 5F                  A   177    			ld e,a
010153 3E29                A   178    			ld a,kr_plot_char
010155 5BCD200A 00         A   179    			call.lil prose_kernal
                           A   180    			
01015A ED4B 28 03 01       A   181    			ld bc,(cursor_pos)				;mo
01015F 04                  A   182    			inc b
010160 ED43 28 03 01       A   183    			ld (cursor_pos),bc
010165 3A EA 02 01         A   184    			ld a,(display_columns)
010169 B8                  A   185    			cp b							;re
01016A 28 02               A   186    			jr z,last_col
01016C AF                  A   187    			xor a							;ZF
01016D C9                  A   188    			ret
                           A   189    			
01016E CD B1 01 01         A   190    last_col	call carriage_return
010172 CD 77 01 01         A   191    			call line_feed
010176 C9                  A   192    			ret
                           A   193    	
                           A   194    ;----------------------------------------------
                           A   195    
010177 ED4B 28 03 01       A   196    line_feed	ld bc,(cursor_pos)
01017C 0C                  A   197    			inc c
01017D 3A E9 02 01         A   198    			ld a,(display_rows)			
010181 B9                  A   199    			cp c							;re
010182 20 0A               A   200    			jr nz,noscroll
010184 0D                  A   201    			dec c
010185 C5                  A   202    			push bc
010186 3E2E                A   203    			ld a,kr_scroll_up
010188 5BCD200A 00         A   204    			call.lil prose_kernal
01018D C1                  A   205    			pop bc
                           A   206    			
01018E 3A 2C 03 01         A   207    noscroll	ld a,(line_count)
010192 3C                  A   208    			inc a
010193 32 2C 03 01         A   209    			ld (line_count),a
                           A   210    			
010197 5F                  A   211    			ld e,a
010198 3A E9 02 01         A   212    			ld a,(display_rows)
01019C 3D                  A   213    			dec a
01019D BB                  A   214    			cp e
01019E 20 0A               A   215    			jr nz,sameline
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  11


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
0101A0 AF                  A   216    			xor a
0101A1 32 2C 03 01         A   217    			ld (line_count),a
0101A5 CD 27 02 01         A   218    			call more_prompt		
0101A9 C0                  A   219    			ret nz
                           A   220    			
0101AA ED43 28 03 01       A   221    sameline	ld (cursor_pos),bc
0101AF AF                  A   222    			xor a
0101B0 C9                  A   223    			ret
                           A   224    			
                           A   225    ;----------------------------------------------
                           A   226    
0101B1                     A   227    carriage_return
                           A   228    
0101B1 ED4B 28 03 01       A   229    			ld bc,(cursor_pos)
0101B6 0600                A   230    			ld b,0
0101B8 ED43 28 03 01       A   231    			ld (cursor_pos),bc
0101BD AF                  A   232    			xor a
0101BE C9                  A   233    			ret
                           A   234    			
                           A   235    ;----------------------------------------------
                           A   236    
0101BF                     A   237    get_next_char
                           A   238    			
0101BF E5                  A   239    			push hl
0101C0 D5                  A   240    			push de
0101C1 C5                  A   241    			push bc
                           A   242    			
0101C2 3A 30 03 01         A   243    			ld a,(buffer_offset)			;ch
0101C6 3C                  A   244    			inc a
0101C7 32 30 03 01         A   245    			ld (buffer_offset),a
0101CB 20 47               A   246    			jr nz,ltb_ok
                           A   247    			
0101CD 2A 2D 03 01         A   248    			ld hl,(textfile_offset)			;fi
0101D1 11000100            A   249    			ld de,256
0101D5 19                  A   250    			add hl,de
0101D6 22 2D 03 01         A   251    			ld (textfile_offset),hl
                           A   252    			
0101DA 21 33 03 01         A   253    nochhi		ld hl,text_buffer				;ze
0101DE 0600                A   254    			ld b,0
0101E0 3600                A   255    ztblp		ld (hl),0
0101E2 23                  A   256    			inc hl
0101E3 10 FB               A   257    			djnz ztblp
                           A   258    			
0101E5 11000100            A   259    			ld de,256						;on
0101E9 3E0D                A   260    			ld a,kr_set_load_length
0101EB 5BCD200A 00         A   261    			call.lil prose_kernal
                           A   262    			
0101F0 0E00                A   263    			ld c,0
0101F2 ED5B 2D 03 01       A   264    			ld de,(textfile_offset)			;in
0101F7 3E0C                A   265    			ld a,kr_set_file_pointer
0101F9 5BCD200A 00         A   266    			call.lil prose_kernal
                           A   267    			
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  12


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
0101FE 21 33 03 01         A   268    			ld hl,text_buffer				;lo
010202 3E0E                A   269    			ld a,kr_read_file
010204 5BCD200A 00         A   270    			call.lil prose_kernal
010209 28 09               A   271    			jr z,ltb_ok						;fi
01020B FECC                A   272    			cp 0cch			
01020D 28 05               A   273    			jr z,ltb_ok						;Do
01020F C1                  A   274    ltb_fail	pop bc
010210 D1                  A   275    			pop de
010211 E1                  A   276    			pop hl
010212 AF                  A   277    			xor a							;if
010213 C9                  A   278    			ret
                           A   279    				
010214 21 33 03 01         A   280    ltb_ok		ld hl,text_buffer
010218 11000000            A   281    			ld de,0
01021C 3A 30 03 01         A   282    			ld a,(buffer_offset)
010220 5F                  A   283    			ld e,a
010221 19                  A   284    			add hl,de
010222 7E                  A   285    			ld a,(hl)
                           A   286    			
010223 C1                  A   287    			pop bc
010224 D1                  A   288    			pop de
010225 E1                  A   289    			pop hl
010226 C9                  A   290    			ret
                           A   291    			
                           A   292    
                           A   293    ;----------------------------------------------
                           A   294    
010227                     A   295    more_prompt
                           A   296    
010227 C5                  A   297    			push bc
010228 0600                A   298    			ld b,0
01022A 3A E9 02 01         A   299    			ld a,(display_rows)
01022E 3D                  A   300    			dec a
01022F 4F                  A   301    			ld c,a
010230 3E28                A   302    			ld a,kr_set_cursor_position
010232 5BCD200A 00         A   303    			call.lil prose_kernal
010237 3A 2B 03 01         A   304    			ld a,(original_pen)
01023B 0F                  A   305    			rrca
01023C 0F                  A   306    			rrca
01023D 0F                  A   307    			rrca
01023E 0F                  A   308    			rrca
01023F 5F                  A   309    			ld e,a
010240 3E2A                A   310    			ld a,kr_set_pen
010242 5BCD200A 00         A   311    			call.lil prose_kernal
010247 21 EB 02 01         A   312    			ld hl,more_txt
01024B 3E25                A   313    			ld a,kr_print_string
01024D 5BCD200A 00         A   314    			call.lil prose_kernal
                           A   315    
010252 3E1D                A   316    			ld a,kr_wait_key
010254 5BCD200A 00         A   317    			call.lil prose_kernal
010259 78                  A   318    			ld a,b
01025A FE79                A   319    			cp 'y'
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  13


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
                           A   320    
01025C F5                  A   321    			push af
01025D 1E00                A   322    			ld e,0
01025F 3E2A                A   323    			ld a,kr_set_pen
010261 5BCD200A 00         A   324    			call.lil prose_kernal
010266 21 FA 02 01         A   325    			ld hl,more_gone_txt
01026A 3E25                A   326    			ld a,kr_print_string
01026C 5BCD200A 00         A   327    			call.lil prose_kernal
010271 3A 2B 03 01         A   328    			ld a,(original_pen)
010275 5F                  A   329    			ld e,a
010276 3E2A                A   330    			ld a,kr_set_pen
010278 5BCD200A 00         A   331    			call.lil prose_kernal
01027D F1                  A   332    			pop af
                           A   333    
01027E C1                  A   334    			pop bc
01027F C9                  A   335    			ret
                           A   336    	
                           A   337    ;----------------------------------------------
                           A   338    
010280 436F6D6D 616E643A   A   339    usage_txt		db 'Command: TYPE.EZP (v1.02) D
010288 20545950 452E455A 
010290 50202876 312E3032 
010298 29204469 73706C61 
0102A0 79732041 53434949 
0102A8 2066696C 65732E0B 
0102B0 55736167 6520203A   A   340    				db 'Usage  : TYPE filename',11,
0102B8 20545950 45206669 
0102C0 6C656E61 6D650B00 
0102C8 46696C65 206D7573   A   341    too_big_txt		db 'File must be smaller than 1
0102D0 74206265 20736D61 
0102D8 6C6C6572 20746861 
0102E0 6E203136 4D422E0B 
0102E8 00 
                           A   342    
0102E9 00                  A   343    display_rows	db 0
0102EA 00                  A   344    display_columns	db 0
                           A   345    
0102EB 204D6F72 653F2028   A   346    more_txt		db " More? (y/n) ",13,0
0102F3 792F6E29 200D00 
0102FA 20202020 20202020   A   347    more_gone_txt	db "             ",0
010302 20202020 2000 
                           A   348    	
010308 00 00 00 00 00 00   A   349    filename		blkb 32,0
01030E 00 00 00 00 00 00 
010314 00 00 00 00 00 00 
01031A 00 00 00 00 00 00 
010320 00 00 00 00 00 00 
010326 00 00 
                           A   350    			
010328 000000              A   351    cursor_pos		dw24 0
                           A   352    
01032B 00                  A   353    original_pen	db 0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  14


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
01032C 00                  A   354    line_count		db 0
                           A   355    
01032D 000000              A   356    textfile_offset	dw24 0
                           A   357    
010330 00                  A   358    buffer_offset	db 0
                           A   359    
010331 0B00                A   360    new_line		db 11,0
                           A   361    
010333 00 00 00 00 00 00   A   362    text_buffer		blkb 258,0
010339 00 00 00 00 00 00 
01033F 00 00 00 00 00 00 
010345 00 00 00 00 00 00 
01034B 00 00 00 00 00 00 
010351 00 00 00 00 00 00 
010357 00 00 00 00 00 00 
01035D 00 00 00 00 00 00 
010363 00 00 00 00 00 00 
010369 00 00 00 00 00 00 
01036F 00 00 00 00 00 00 
010375 00 00 00 00 00 00 
01037B 00 00 00 00 00 00 
010381 00 00 00 00 00 00 
010387 00 00 00 00 00 00 
01038D 00 00 00 00 00 00 
010393 00 00 00 00 00 00 
010399 00 00 00 00 00 00 
01039F 00 00 00 00 00 00 
0103A5 00 00 00 00 00 00 
0103AB 00 00 00 00 00 00 
0103B1 00 00 00 00 00 00 
0103B7 00 00 00 00 00 00 
0103BD 00 00 00 00 00 00 
0103C3 00 00 00 00 00 00 
0103C9 00 00 00 00 00 00 
0103CF 00 00 00 00 00 00 
0103D5 00 00 00 00 00 00 
0103DB 00 00 00 00 00 00 
0103E1 00 00 00 00 00 00 
0103E7 00 00 00 00 00 00 
0103ED 00 00 00 00 00 00 
0103F3 00 00 00 00 00 00 
0103F9 00 00 00 00 00 00 
0103FF 00 00 00 00 00 00 
010405 00 00 00 00 00 00 
01040B 00 00 00 00 00 00 
010411 00 00 00 00 00 00 
010417 00 00 00 00 00 00 
01041D 00 00 00 00 00 00 
010423 00 00 00 00 00 00 
010429 00 00 00 00 00 00 
01042F 00 00 00 00 00 00 
                           A   363    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)07-Sep-11     15:25:34     page:  15


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\type\src\type.asm
                           A   364    ;----------------------------------------------
                           A   365    


Errors: 0
Warnings: 0
Lines Assembled: 671
