Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   1


PC     Object              I  Line    Source 
                           A     1    ;copy file command v0.01 by Phil
                           A     2    
                           A     3    ;----------------------------------------------
                           A     4    
       00000000            A     5    amoeba_version_req	equ	0				; 0 = d
       0000003B            A     6    prose_version_req	equ 3bh				; 0 = d
       00000001            A     7    ADL_mode			equ 1				; 0 if 
       00010000            A     8    load_location		equ 10000h			; anywh
                           A     9    
                           B     0    			include	'PROSE_header.asm'
                           B     1    
                           B     2    ;----------------------------------------------
                           B     3    
                           C     0    include "ez80_cpu_equates.asm"
                           C     1    ;--- EZ80 Internal Ports ----------------------
                           C     2    
       0000009A            C     3    PB_DR			equ 09ah
       0000009B            C     4    PB_DDR			equ 09bh
       0000009C            C     5    PB_ALT1			equ 09ch
       0000009D            C     6    PB_ALT2			equ 09dh
                           C     7    
       0000009E            C     8    PC_DR			equ 09eh
       0000009F            C     9    PC_DDR			equ 09fh
       000000A0            C    10    PC_ALT1			equ 0a0h
       000000A1            C    11    PC_ALT2			equ 0a1h
                           C    12    
       000000A2            C    13    PD_DR			equ 0a2h
       000000A3            C    14    PD_DDR			equ 0a3h
       000000A4            C    15    PD_ALT1			equ 0a4h
       000000A5            C    16    PD_ALT2			equ 0a5h
                           C    17    
       000000C0            C    18    UART0_RBR		equ 0c0h
       000000C0            C    19    UART0_THR		equ 0c0h
       000000C0            C    20    UART0_BRG_L		equ 0c0h
       000000C1            C    21    UART0_BRG_H		equ 0c1h
       000000C1            C    22    UART0_IER		equ 0c1h
       000000C2            C    23    UART0_FCTL		equ 0c2h
       000000C3            C    24    UART0_LCTL		equ 0c3h
       000000C4            C    25    UART0_MCTL		equ 0c4h
       000000C5            C    26    UART0_LSR		equ 0c5h
       000000C6            C    27    UART0_MSR		equ 0c6h
                           C    28    
       000000A8            C    29    CS0_LBR			equ 0a8h			;eZ80 wait 
       000000A9            C    30    CS0_UBR			equ 0a9h
       000000AA            C    31    CS0_CTL			equ 0aah			
       000000AB            C    32    CS1_LBR			equ 0abh			;eZ80 wait 
       000000AC            C    33    CS1_UBR			equ 0ach
       000000AD            C    34    CS1_CTL			equ 0adh
       000000AE            C    35    CS2_LBR			equ 0aeh			;eZ80 wait 
       000000AF            C    36    CS2_UBR			equ 0afh
       000000B0            C    37    CS2_CTL			equ 0b0h
       000000B1            C    38    CS3_LBR			equ 0b1h			;eZ80 wait 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   2


PC     Object              I  Line    Source ..\..\..\..\..\Includes\ez80_cpu_equates.asm
       000000B2            C    39    CS3_UBR			equ 0b2h
       000000B3            C    40    CS3_CTL			equ 0b3h
                           C    41    
       00000080            C    42    TMR0_CTL		equ 080h			;timer 0 eq
       00000081            C    43    TMR0_DR_L		equ 081h
       00000081            C    44    TMR0_RR_L		equ 081h
       00000082            C    45    TMR0_DR_H		equ 082h
       00000082            C    46    TMR0_RR_H		equ 082h
       00000092            C    47    TMR_ISS			equ 092h
                           C    48    
       00000083            C    49    TMR1_CTL		equ 083h 
       00000084            C    50    TMR1_RR_L		equ 084h
       00000085            C    51    TMR1_RR_H		equ 085h
                           C    52    
       000000ED            C    53    RTC_CTRL		equ 0edh			;RTC equate
       000000EC            C    54    RTC_ACTRL		equ 0ech
       000000E0            C    55    RTC_SEC			equ 0e0h
       000000E1            C    56    RTC_MIN			equ 0e1h
       000000E2            C    57    RTC_HRS			equ 0e2h
       000000E3            C    58    RTC_DOW			equ 0e3h
       000000E4            C    59    RTC_DOM			equ 0e4h
       000000E5            C    60    RTC_MON			equ 0e5h
       000000E6            C    61    RTC_YR			equ 0e6h
       000000E7            C    62    RTC_CEN			equ 0e7h
                           C    63    
                           C    64    ;----------------------------------------------
                           B     5    
                           B     6    
                           C     0    include "amoeba_hardware_equates.asm"
                           C     1    ;-- AMOEBA Hardware equates -------------------
                           C     2    
       00000000            C     3    port_pic_data  			equ 000h
       00000001            C     4    port_pic_ctrl			equ 001h
       00000001            C     5    port_hw_flags			equ 001h
       00000002            C     6    port_sdc_ctrl			equ 002h	; this is a
       00000002            C     7    port_keyboard_data		equ 002h
       00000003            C     8    port_sdc_data		 	equ 003h	
       00000004            C     9    port_memory_paging		equ 004h
       00000005            C    10    port_irq_ctrl			equ 005h
       00000005            C    11    port_irq_flags			equ 005h
       00000006            C    12    port_nmi_ack			equ 006h
       00000007            C    13    port_ps2_ctrl			equ 007h
       00000008            C    14    port_selector			equ 008h
       00000006            C    15    port_mouse_data			equ 006h
       00000009            C    16    port_clear_flags		equ 009h
                           C    17    
       00000000            C    18    sdc_power				equ 0		;(port_sd_c
       00000001            C    19    sdc_cs					equ 1		;(port_sd_c
       00000002            C    20    sdc_speed				equ 2 		;(port_sd_c
                           C    21    
       00000004            C    22    sdc_serializer_busy		equ 4 		;(port_hw_f
       00000005            C    23    vrt						equ 5		;(port_hw_f
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   3


PC     Object              I  Line    Source ..\..\..\..\..\Includes\amoeba_hardware_equates.asm
                           C    24    
                           C    25    
                           C    26    ;-- Memory locations --------------------------
                           C    27    
       00000000            C    28    sysram_addr				equ 0000000h
       00800000            C    29    vram_a_addr				equ 0800000h
       00C00000            C    30    vram_b_addr				equ 0c00000h
                           C    31    
                           C    32    ;-- Hardware registers ------------------------
                           C    33    
       00FF0000            C    34    hw_palette				equ 0ff0000h
       00FF0800            C    35    hw_sprite_registers		equ 0ff0800h
       00FF1000            C    36    hw_video_parameters		equ 0ff1000h
       00FF1400            C    37    hw_audio_registers		equ 0ff1400h
       00FF1800            C    38    hw_video_settings		equ 0ff1800h
                           C    39    
       00FF1000            C    40    tilemap_parameters		equ hw_video_parameters
       00FF1020            C    41    bitmap_parameters		equ hw_video_parameters
                           C    42    
       00FF1800            C    43    video_control			equ hw_video_settings+0
       00FF1801            C    44    sprite_control			equ hw_video_settings+0
       00FF1802            C    45    bgnd_palette_select		equ hw_video_settings+0
       00FF1803            C    46    sprite_palette_select	equ hw_video_settings+0
       00FF1804            C    47    right_border_position	equ hw_video_settings+0
       00FF1805            C    48    irq_line_lo				equ hw_video_settings+0
       00FF1806            C    49    irq_line_hi				equ hw_video_settings+0
                           C    50    
                           C    51    ;----------------------------------------------
                           B     8    
                           B     9    
                           C     0    include "prose_kernal_labels.asm"
                           C     1    ;--------- PROSE Kernal Routine labels --------
                           C     2    		
       00000000            C     3    kr_mount_volumes				equ 00h	
       00000001            C     4    kr_get_device_info				equ 01h	
       00000002            C     5    kr_check_volume_format			equ 02h	
       00000003            C     6    kr_change_volume				equ 03h	
       00000004            C     7    kr_get_volume_info				equ 04h	
       00000005            C     8    kr_format_device				equ 05h	
       00000006            C     9    kr_make_dir						equ 06h
                           C    10    
       00000007            C    11    kr_change_dir					equ 07h	
       00000008            C    12    kr_parent_dir					equ 08h	
       00000009            C    13    kr_root_dir						equ 09h
       0000000A            C    14    kr_delete_dir					equ 0ah
                           C    15    
       0000000B            C    16    kr_find_file					equ 0bh
       0000000B            C    17    kr_open_file					equ 0bh		; p
                           C    18    
       0000000C            C    19    kr_set_file_pointer				equ 0ch
       0000000D            C    20    kr_set_load_length				equ 0dh
       0000000E            C    21    kr_read_file					equ 0eh
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   4


PC     Object              I  Line    Source ..\..\..\..\..\Includes\prose_kernal_labels.asm
                           C    22    
       0000000F            C    23    kr_erase_file					equ 0fh
       00000010            C    24    kr_rename_file					equ 10h
       00000011            C    25    kr_create_file					equ 11h
       00000012            C    26    kr_write_file					equ 12h
       00000013            C    27    kr_get_total_sectors			equ 13h
       00000014            C    28    kr_dir_list_first_entry			equ 14h
       00000015            C    29    kr_dir_list_get_entry			equ 15h
       00000016            C    30    kr_dir_list_next_entry			equ 16h
                           C    31    
       00000017            C    32    kr_read_sector					equ 17h
       00000018            C    33    kr_write_sector					equ 18h
       00000019            C    34    kr_file_sector_list				equ 19h
       0000001A            C    35    kr_get_dir_cluster				equ 1ah
       0000001B            C    36    kr_set_dir_cluster				equ 1bh
       0000001C            C    37    kr_get_dir_name					equ 1ch
       0000001D            C    38    kr_wait_key						equ 1dh
       0000001E            C    39    kr_get_key						equ 1eh
                           C    40    
       0000001F            C    41    kr_get_key_mod_flags			equ 1fh
       00000020            C    42    kr_serial_receive_header		equ 20h
       00000021            C    43    kr_serial_receive_file			equ 21h
       00000022            C    44    kr_serial_send_file				equ 22h
       00000023            C    45    kr_serial_tx_byte				equ 23h
       00000024            C    46    kr_serial_rx_byte				equ 24h
                           C    47    
       00000025            C    48    kr_print_string					equ 25h
       00000026            C    49    kr_clear_screen					equ 26h
       00000027            C    50    kr_wait_vrt						equ 27h
       00000028            C    51    kr_set_cursor_position			equ 28h
       00000029            C    52    kr_plot_char					equ 29h
       0000002A            C    53    kr_set_pen						equ 2ah
       0000002B            C    54    kr_background_colours			equ 2bh
       0000002C            C    55    kr_draw_cursor					equ 2ch
       0000002D            C    56    kr_get_pen						equ 2dh
       0000002E            C    57    kr_scroll_up					equ 2eh
       0000002F            C    58    kr_os_display					equ 2fh
                           C    59    
       00000030            C    60    kr_get_display_size				equ 30h	
       00000030            C    61    kr_get_video_mode				equ 30h		;pr
                           C    62    
       00000031            C    63    kr_get_charmap_addr_xy			equ 31h
       00000032            C    64    kr_get_cursor_position			equ 32h
                           C    65    
       00000033            C    66    kr_set_envar					equ 33h
       00000034            C    67    kr_get_envar					equ 34h
       00000035            C    68    kr_delete_envar					equ 35h
                           C    69    
       00000036            C    70    kr_init_mouse					equ 36h 	; n
                           C    71    
       00000037            C    72    kr_get_mouse_position			equ 37h
                           C    73    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   5


PC     Object              I  Line    Source ..\..\..\..\..\Includes\prose_kernal_labels.asm
       00000038            C    74    kr_get_mouse_motion				equ 38h
       00000038            C    75    kr_get_mouse_counters			equ 38h		;pr
                           C    76    
       00000039            C    77    kr_time_delay					equ 39h
       0000003A            C    78    kr_compare_strings				equ 3ah
       0000003B            C    79    kr_hex_byte_to_ascii			equ 3bh
       0000003C            C    80    kr_ascii_to_hex_word			equ 3ch
       0000003D            C    81    kr_get_string					equ 3dh
                           C    82    
       0000003E            C    83    kr_get_version					equ 3eh
       0000003F            C    84    kr_dont_store_registers			equ 3fh
       00000040            C    85    kr_get_font_info				equ 40h
       00000041            C    86    kr_read_rtc						equ 41h
       00000042            C    87    kr_write_rtc					equ 42h
                           C    88    
       00000043            C    89    kr_get_keymap_location			equ 43h
                           C    90    
       00000044            C    91    kr_get_os_high_mem				equ 44h
       00000044            C    92    kr_get_mem_base					equ 44h		
       00000044            C    93    kr_get_ram_base					equ 44h		;pr
                           C    94    
       00000045            C    95    kr_play_audio					equ 45h
       00000046            C    96    kr_disable_audio				equ 46h
       00000047            C    97    kr_get_joysticks				equ 47h
       00000048            C    98    kr_set_video_mode				equ 48h
       00000049            C    99    kr_set_cursor_image				equ 49h
       0000004A            C   100    kr_remove_cursor				equ 4ah
       0000004B            C   101    kr_char_to_font					equ 4bh
                           C   102    
       0000004C            C   103    kr_get_disk_sector_ptr			equ 4ch
       0000004D            C   104    kr_set_timeout					equ 4dh
       0000004E            C   105    kr_test_timeout					equ 4eh
       0000004F            C   106    kr_set_pointer					equ 4fh
       00000050            C   107    kr_allocate_ram					equ 50h
       00000051            C   108    kr_deallocate_ram				equ 51h
                           C   109    
       00000052            C   110    kr_get_mem_top					equ 52h
       00000052            C   111    kr_get_ram_top					equ 52h		;pr
                           C   112    
       00000053            C   113    kr_init_msec_counter			equ 53h
       00000054            C   114    kr_read_msec_counter			equ 54h
       00000055            C   115    kr_parse_path					equ 55h
                           C   116    
                           C   117    ;----------------------------------------------
                           B    11    
                           B    12    
                           C     0    include "misc_system_equates.asm"
                           C     1    
                           C     2    ;-- System Equates ----------------------------
                           C     3    
       00000A00            C     4    os_location			equ 0a00h
                           C     5    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   6


PC     Object              I  Line    Source ..\..\..\..\..\Includes\misc_system_equates.asm
       00000A14            C     6    prose_return 		equ os_location + 14h
       00000A18            C     7    prose_relativize_hl	equ os_location + 18h
       00000A1C            C     8    prose_relative_call	equ os_location + 1ch
                           C     9    
       00000A20            C    10    prose_kernal 		equ os_location + 20h
                           C    11    
                           C    12    ;----------------------------------------------
                           C    13    
                           C    14    ; Add to sprite locations to position a 0,0 spr
                           C    15    
       0000009A            C    16    x_display_offset	equ 09ah
       00000025            C    17    y_display_offset	equ 025h
                           C    18    
                           C    19    ;----------------------------------------------
                           B    14    
                           B    15    
                           B    16    ;----------------------------------------------
                           B    17    ; Standard PROSE executable header
                           B    18    ;----------------------------------------------
                           B    19    
                           B    20    
                           B    21    	IF ADL_mode = 0
                           B    22    		org load_location&0ffffh	; if Z80 mo
                           B    23    	ELSE
010000                     B    24    		org load_location			; otherwise
                           B    25    	ENDIF
                           B    26    	
                           B    27    		.assume ADL = 1				; All PROSE
                           B    28    
010000 18 0E               B    29    		jr skip_header				; $0 - Jump
010002 50524F              B    30    		db 'PRO'					; $2 - ASCI
010005 000001              B    31    mb_loc	dw24 load_location			; $5 - Desi
010008 000000              B    32    		dw24 0						; $8 - If >
01000B 3B00                B    33    		dw prose_version_req		; $B - If >
01000D 0000                B    34    		dw amoeba_version_req		; $D - If >
01000F 01                  B    35    		db ADL_mode					; $F - Z80 
                           B    36    
010010                     B    37    skip_header
                           B    38    	
                           B    39    	IF ADL_mode = 0 
                           B    40    		
                           B    41    mbase_offset equ load_location & 0ff0000h
                           B    42    
                           B    43    		ld a,load_location/65536	; Additiona
                           B    44    		ld MB,a						; Set MBASE
                           B    45    		jp.sis go_z80_mode			; switches 
                           B    46    
                           B    47    go_z80_mode
                           B    48    
                           B    49    		.assume ADL = 0
                           B    50    
                           B    51    	ENDIF
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   7


PC     Object              I  Line    Source ..\..\..\..\..\Includes\PROSE_header.asm
                           B    52    	
                           B    53    ;----------------------------------------------
                           B    54    	
                           A    11    
                           A    12    ;----------------------------------------------
                           A    13    
       00008000            A    14    buffer_size equ 32768
                           A    15    
010010 AF                  A    16    			xor a
010011 32 27 02 01         A    17    			ld (final_chunk),a
                           A    18    			
010015 E5                  A    19    			push hl
010016 01008000            A    20    			ld bc,buffer_size
01001A 3E50                A    21    			ld a,kr_allocate_ram
01001C 1E00                A    22    			ld e,0
01001E 5BCD200A 00         A    23    			call.lil prose_kernal
010023 22 1C 02 01         A    24    			ld (buffer_loc),hl
                           A    25    			
010027 3E04                A    26    			ld a,kr_get_volume_info
010029 5BCD200A 00         A    27    			call.lil prose_kernal
01002E 32 07 02 01         A    28    			ld (orig_volume),a
010032 3E1A                A    29    			ld a,kr_get_dir_cluster
010034 5BCD200A 00         A    30    			call.lil prose_kernal
010039 ED53 08 02 01       A    31    			ld (orig_dir_cluster),de
01003E E1                  A    32     			pop hl
                           A    33    			
01003F CD 5C 00 01         A    34    			call do_copy
                           A    35    			
010043 F5                  A    36    			push af
010044 CD AB 01 01         A    37    			call set_orig_dir
                           A    38    			
010048 ED4B0080 00         A    39    			ld bc,(buffer_size)
01004D 1E00                A    40    			ld e,0
01004F 3E51                A    41    			ld a,kr_deallocate_ram
010051 5BCD200A 00         A    42    			call.lil prose_kernal
                           A    43    
010056 F1                  A    44    			pop af
010057 5BC3140A 00         A    45    			jp.lil prose_return
                           A    46    
                           A    47    ;----------------------------------------------
                           A    48    
01005C 7E                  A    49    do_copy		ld a,(hl)
01005D B7                  A    50    			or a
01005E 20 0D               A    51    			jr nz,got_args					; i
                           A    52    			
010060 3E25                A    53    			ld a,kr_print_string
010062 21 28 02 01         A    54    			ld hl,use_txt
010066 5BCD200A 00         A    55    			call.lil prose_kernal
01006B AF                  A    56    			xor a
01006C C9                  A    57    			ret
                           A    58    
01006D 22 13 02 01         A    59    got_args	ld (src_string_loc),hl			;sa
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   8


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\copy\src\copy.asm
010071 CD F6 01 01         A    60    			call next_arg
010075 20 04               A    61    			jr nz,arg_ok
010077 3E8D                A    62    			ld a,8dh						;if
010079 B7                  A    63    			or a
01007A C9                  A    64    			ret
01007B 22 16 02 01         A    65    arg_ok		ld (dest_string_loc),hl
                           A    66    			
01007F 2A 13 02 01         A    67    			ld hl,(src_string_loc)
010083 3E55                A    68    			ld a,kr_parse_path
010085 1E00                A    69    			ld e,0
010087 5BCD200A 00         A    70    			call.lil prose_kernal			;mo
01008C C0                  A    71    			ret nz
01008D 22 19 02 01         A    72    			ld (src_filename_loc),hl		;st
010091 3E0B                A    73    			ld a,kr_open_file
010093 5BCD200A 00         A    74    			call.lil prose_kernal			;if
010098 C0                  A    75    			ret nz
010099 ED53 1F 02 01       A    76    			ld (file_length),de				;no
01009E 79                  A    77    			ld a,c
01009F 32 22 02 01         A    78    			ld (file_length+3),a
0100A3 3E04                A    79    			ld a,kr_get_volume_info
0100A5 5BCD200A 00         A    80    			call.lil prose_kernal			;no
0100AA 32 0B 02 01         A    81    			ld (src_volume),a
0100AE 3E1A                A    82    			ld a,kr_get_dir_cluster
0100B0 5BCD200A 00         A    83    			call.lil prose_kernal
0100B5 ED53 0C 02 01       A    84    			ld (src_dir_cluster),de
                           A    85    			
0100BA CD AB 01 01         A    86    			call set_orig_dir				;go
                           A    87    			
0100BE 2A 16 02 01         A    88    			ld hl,(dest_string_loc)
0100C2 3E55                A    89    			ld a,kr_parse_path
0100C4 1E01                A    90    			ld e,1
0100C6 5BCD200A 00         A    91    			call.lil prose_kernal
0100CB C0                  A    92    			ret nz							;qu
0100CC 3E04                A    93    			ld a,kr_get_volume_info
0100CE 5BCD200A 00         A    94    			call.lil prose_kernal
0100D3 32 0F 02 01         A    95    			ld (dest_volume),a
0100D7 3E1A                A    96    			ld a,kr_get_dir_cluster
0100D9 5BCD200A 00         A    97    			call.lil prose_kernal
0100DE ED53 10 02 01       A    98    			ld (dest_dir_cluster),de		;no
0100E3 2A 19 02 01         A    99    			ld hl,(src_filename_loc)
0100E7 3E11                A   100    			ld a,kr_create_file
0100E9 5BCD200A 00         A   101    			call.lil prose_kernal
0100EE C0                  A   102    			ret nz							;cr
                           A   103    
0100EF 11000000            A   104    			ld de,0
0100F3 ED53 23 02 01       A   105    			ld (file_pointer),de
0100F8 AF                  A   106    			xor a
0100F9 32 26 02 01         A   107    			ld (file_pointer+3),a
                           A   108    			
0100FD CD C4 01 01         A   109    copy_loop	call set_source_dir				;re
010101 2A 19 02 01         A   110    			ld hl,(src_filename_loc)
010105 3E0B                A   111    			ld a,kr_open_file
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:   9


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\copy\src\copy.asm
010107 5BCD200A 00         A   112    			call.lil prose_kernal
01010C C0                  A   113    			ret nz
01010D ED5B 23 02 01       A   114    			ld de,(file_pointer)
010112 3A 26 02 01         A   115    			ld a,(file_pointer+3)
010116 4F                  A   116    			ld c,a
010117 3E0C                A   117    			ld a,kr_set_file_pointer
010119 5BCD200A 00         A   118    			call.lil prose_kernal
01011E 11008000            A   119    			ld de,buffer_size
010122 3E0D                A   120    			ld a,kr_set_load_length
010124 5BCD200A 00         A   121    			call.lil prose_kernal
010129 2A 1C 02 01         A   122    			ld hl,(buffer_loc)
01012D 3E0E                A   123    			ld a,kr_read_file
01012F 5BCD200A 00         A   124    			call.lil prose_kernal
010134 C0                  A   125    			ret nz
                           A   126    			
010135 2A 1F 02 01         A   127    			ld hl,(file_length)
010139 3A 22 02 01         A   128    			ld a,(file_length+3)
01013D B7                  A   129    			or a								01013E 11008000            A   130    			ld de,buffer_size
010142 0600                A   131    			ld b,0
010144 ED52                A   132    			sbc hl,de
010146 98                  A   133    			sbc b
010147 22 1F 02 01         A   134    			ld (file_length),hl
01014B 32 22 02 01         A   135    			ld (file_length+3),a
01014F 01008000            A   136    			ld bc,buffer_size					010153 38 13               A   137    			jr c,last_chunk
010155 DD21 1F 02 01       A   138    			ld ix,file_length
01015A DD7E00              A   139    			ld a,(ix)
01015D DDB601              A   140    			or (ix+1)
010160 DDB602              A   141    			or (ix+2)
010163 DDB603              A   142    			or (ix+3)
010166 20 09               A   143    			jr nz,not_last_chunk
                           A   144    
010168 09                  A   145    last_chunk	add hl,bc
010169 E5                  A   146    			push hl
01016A C1                  A   147    			pop bc								01016B 3E01                A   148    			ld a,1
01016D 32 27 02 01         A   149    			ld (final_chunk),a
                           A   150    
010171                     A   151    not_last_chunk
                           A   152    			
010171 C5                  A   153    			push bc								010172 CD DD 01 01         A   154    			call set_destination_dir	
010176 C1                  A   155    			pop bc
010177 2A 19 02 01         A   156    			ld hl,(src_filename_loc)
01017B ED5B 1C 02 01       A   157    			ld de,(buffer_loc)
010180 3E12                A   158    			ld a,kr_write_file
010182 5BCD200A 00         A   159    			call.lil prose_kernal
010187 C0                  A   160    			ret nz
                           A   161    			
010188 2A 23 02 01         A   162    			ld hl,(file_pointer)
01018C 3A 26 02 01         A   163    			ld a,(file_pointer+3)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:  10


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\copy\src\copy.asm
010190 11008000            A   164    			ld de,buffer_size
010194 0600                A   165    			ld b,0
010196 19                  A   166    			add hl,de
010197 88                  A   167    			adc a,b
010198 22 23 02 01         A   168    			ld (file_pointer),hl
01019C 32 26 02 01         A   169    			ld (file_pointer+3),a
                           A   170    
0101A0 3A 27 02 01         A   171    			ld a,(final_chunk)
0101A4 B7                  A   172    			or a
0101A5 CA FD 00 01         A   173    			jr z,copy_loop
0101A9 AF                  A   174    			xor a
0101AA C9                  A   175    			ret
                           A   176    			
0101AB                     A   177    set_orig_dir
                           A   178    			
0101AB 3A 07 02 01         A   179    			ld a,(orig_volume)
0101AF 5F                  A   180    			ld e,a
0101B0 3E03                A   181    			ld a,kr_change_volume
0101B2 5BCD200A 00         A   182    			call.lil prose_kernal
0101B7 ED5B 08 02 01       A   183    			ld de,(orig_dir_cluster)
0101BC 3E1B                A   184    			ld a,kr_set_dir_cluster
0101BE 5BCD200A 00         A   185    			call.lil prose_kernal
0101C3 C9                  A   186    			ret
                           A   187    
                           A   188    
0101C4                     A   189    set_source_dir
                           A   190    			
0101C4 3A 0B 02 01         A   191    			ld a,(src_volume)
0101C8 5F                  A   192    			ld e,a
0101C9 3E03                A   193    			ld a,kr_change_volume
0101CB 5BCD200A 00         A   194    			call.lil prose_kernal
0101D0 ED5B 0C 02 01       A   195    			ld de,(src_dir_cluster)
0101D5 3E1B                A   196    			ld a,kr_set_dir_cluster
0101D7 5BCD200A 00         A   197    			call.lil prose_kernal
0101DC C9                  A   198    			ret
                           A   199    
                           A   200    
0101DD                     A   201    set_destination_dir
                           A   202    			
0101DD 3A 0F 02 01         A   203    			ld a,(dest_volume)
0101E1 5F                  A   204    			ld e,a
0101E2 3E03                A   205    			ld a,kr_change_volume
0101E4 5BCD200A 00         A   206    			call.lil prose_kernal
0101E9 ED5B 10 02 01       A   207    			ld de,(dest_dir_cluster)
0101EE 3E1B                A   208    			ld a,kr_set_dir_cluster
0101F0 5BCD200A 00         A   209    			call.lil prose_kernal
0101F5 C9                  A   210    			ret
                           A   211    						
                           A   212    
                           A   213    ;----------------------------------------------
                           A   214    
                           A   215    ; ZF set if no more args.
Zilog eZ80 Macro Assembler Version 4.1 (10060805)06-Sep-11     21:32:02     page:  11


PC     Object              I  Line    Source E:\MY_OWN~1\Coding\ez80p\Code\PROSEB~1\Phil\EXTERN~1\copy\src\copy.asm
                           A   216    
0101F6 23                  A   217    next_arg	inc hl
0101F7 7E                  A   218    			ld a,(hl)						;fi
0101F8 B7                  A   219    			or a
0101F9 C8                  A   220    			ret z
0101FA FE20                A   221    			cp ' '
0101FC 20 F8               A   222    			jr nz,next_arg
0101FE 23                  A   223    narg2		inc hl
0101FF 7E                  A   224    			ld a,(hl)						;fi
010200 B7                  A   225    			or a
010201 C8                  A   226    			ret z
010202 FE20                A   227    			cp ' '
010204 28 F8               A   228    			jr z,narg2
010206 C9                  A   229    			ret
                           A   230    			
                           A   231    ;----------------------------------------------
                           A   232    			
010207 00                  A   233    orig_volume			db 0
010208 000000              A   234    orig_dir_cluster	dw24 0
01020B 00                  A   235    src_volume			db 0
01020C 000000              A   236    src_dir_cluster		dw24 0
01020F 00                  A   237    dest_volume			db 0
010210 000000              A   238    dest_dir_cluster	dw24 0
                           A   239    
010213 000000              A   240    src_string_loc		dw24 0
010216 000000              A   241    dest_string_loc		dw24 0
010219 000000              A   242    src_filename_loc	dw24 0
01021C 000000              A   243    buffer_loc			dw24 0
                           A   244    
01021F 00000000            A   245    file_length			db 0,0,0,0
010223 00000000            A   246    file_pointer		db 0,0,0,0
                           A   247    
010227 00                  A   248    final_chunk			db 0
                           A   249    
                           A   250    ;----------------------------------------------
                           A   251    
010228 5573653A 20434F50   A   252    use_txt		db 'Use: COPY source_path/filename1
010230 5920736F 75726365 
010238 5F706174 682F6669 
010240 6C656E61 6D653120 
010248 64657374 5F706174 
010250 682F6669 6C656E61 
010258 6D65320B 00 
                           A   253    	
                           A   254    ;----------------------------------------------


Errors: 0
Warnings: 0
Lines Assembled: 560
