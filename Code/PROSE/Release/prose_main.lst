Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   1


PC     Object              I  Line    Source 
                           A     1    
                           A     2    ; PROSE for EZ80P by Phil Ruston 2011
                           A     3    ; Compile with Zilog ZDS II
                           A     4    
                           A     5    ;----------------------------------------------
                           A     6    	.assume ADL = 1
                           A     7    ;----------------------------------------------
                           A     8    
                           B     0    	include	'ez80_cpu_equates.asm'
                           B     1    ;--- EZ80 Internal Ports ----------------------
                           B     2    
       0000009A            B     3    PB_DR			equ 09ah
       0000009B            B     4    PB_DDR			equ 09bh
       0000009C            B     5    PB_ALT1			equ 09ch
       0000009D            B     6    PB_ALT2			equ 09dh
                           B     7    
       0000009E            B     8    PC_DR			equ 09eh
       0000009F            B     9    PC_DDR			equ 09fh
       000000A0            B    10    PC_ALT1			equ 0a0h
       000000A1            B    11    PC_ALT2			equ 0a1h
                           B    12    
       000000A2            B    13    PD_DR			equ 0a2h
       000000A3            B    14    PD_DDR			equ 0a3h
       000000A4            B    15    PD_ALT1			equ 0a4h
       000000A5            B    16    PD_ALT2			equ 0a5h
                           B    17    
       000000C0            B    18    UART0_RBR		equ 0c0h
       000000C0            B    19    UART0_THR		equ 0c0h
       000000C0            B    20    UART0_BRG_L		equ 0c0h
       000000C1            B    21    UART0_BRG_H		equ 0c1h
       000000C1            B    22    UART0_IER		equ 0c1h
       000000C2            B    23    UART0_FCTL		equ 0c2h
       000000C3            B    24    UART0_LCTL		equ 0c3h
       000000C4            B    25    UART0_MCTL		equ 0c4h
       000000C5            B    26    UART0_LSR		equ 0c5h
       000000C6            B    27    UART0_MSR		equ 0c6h
                           B    28    
       000000A8            B    29    CS0_LBR			equ 0a8h			;eZ80 wait 
       000000A9            B    30    CS0_UBR			equ 0a9h
       000000AA            B    31    CS0_CTL			equ 0aah			
       000000AB            B    32    CS1_LBR			equ 0abh			;eZ80 wait 
       000000AC            B    33    CS1_UBR			equ 0ach
       000000AD            B    34    CS1_CTL			equ 0adh
       000000AE            B    35    CS2_LBR			equ 0aeh			;eZ80 wait 
       000000AF            B    36    CS2_UBR			equ 0afh
       000000B0            B    37    CS2_CTL			equ 0b0h
       000000B1            B    38    CS3_LBR			equ 0b1h			;eZ80 wait 
       000000B2            B    39    CS3_UBR			equ 0b2h
       000000B3            B    40    CS3_CTL			equ 0b3h
                           B    41    
       00000080            B    42    TMR0_CTL		equ 080h			;timer 0 eq
       00000081            B    43    TMR0_DR_L		equ 081h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   2


PC     Object              I  Line    Source ..\..\Includes\ez80_cpu_equates.asm
       00000081            B    44    TMR0_RR_L		equ 081h
       00000082            B    45    TMR0_DR_H		equ 082h
       00000082            B    46    TMR0_RR_H		equ 082h
       00000092            B    47    TMR_ISS			equ 092h
                           B    48    
       00000083            B    49    TMR1_CTL		equ 083h 
       00000084            B    50    TMR1_RR_L		equ 084h
       00000085            B    51    TMR1_RR_H		equ 085h
                           B    52    
       000000ED            B    53    RTC_CTRL		equ 0edh			;RTC equate
       000000EC            B    54    RTC_ACTRL		equ 0ech
       000000E0            B    55    RTC_SEC			equ 0e0h
       000000E1            B    56    RTC_MIN			equ 0e1h
       000000E2            B    57    RTC_HRS			equ 0e2h
       000000E3            B    58    RTC_DOW			equ 0e3h
       000000E4            B    59    RTC_DOM			equ 0e4h
       000000E5            B    60    RTC_MON			equ 0e5h
       000000E6            B    61    RTC_YR			equ 0e6h
       000000E7            B    62    RTC_CEN			equ 0e7h
                           B    63    
                           B    64    ;----------------------------------------------
                           B     0    	include	'amoeba_hardware_equates.asm'
                           B     1    ;-- AMOEBA Hardware equates -------------------
                           B     2    
       00000000            B     3    port_pic_data  			equ 000h
       00000001            B     4    port_pic_ctrl			equ 001h
       00000001            B     5    port_hw_flags			equ 001h
       00000002            B     6    port_sdc_ctrl			equ 002h	; this is a
       00000002            B     7    port_keyboard_data		equ 002h
       00000003            B     8    port_sdc_data		 	equ 003h	
       00000004            B     9    port_memory_paging		equ 004h
       00000005            B    10    port_irq_ctrl			equ 005h
       00000005            B    11    port_irq_flags			equ 005h
       00000006            B    12    port_nmi_ack			equ 006h
       00000007            B    13    port_ps2_ctrl			equ 007h
       00000008            B    14    port_selector			equ 008h
       00000006            B    15    port_mouse_data			equ 006h
       00000009            B    16    port_clear_flags			equ 009h
       0000000A            B    17    port_hw_enable			equ 00ah
                           B    18    
       00000000            B    19    sdc_power				equ 0		;(port_sd_c
       00000001            B    20    sdc_cs					equ 1		;(port_sd_c
       00000002            B    21    sdc_speed				equ 2 		;(port_sd_c
                           B    22    
       00000004            B    23    sdc_serializer_busy		equ 4 		;(port_hw_f
       00000005            B    24    vrt						equ 5		;(port_hw_f
                           B    25    
                           B    26    
                           B    27    ;-- Memory locations --------------------------
                           B    28    
       00000000            B    29    sysram_addr				equ 0000000h
       00800000            B    30    vram_a_addr				equ 0800000h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   3


PC     Object              I  Line    Source ..\..\Includes\amoeba_hardware_equates.asm
       00C00000            B    31    vram_b_addr				equ 0c00000h
                           B    32    
                           B    33    ;-- Hardware registers ------------------------
                           B    34    
       00FF0000            B    35    hw_palette				equ 0ff0000h
       00FF0800            B    36    hw_sprite_registers		equ 0ff0800h
       00FF1000            B    37    hw_video_parameters		equ 0ff1000h
       00FF1400            B    38    hw_audio_registers		equ 0ff1400h
       00FF1800            B    39    hw_video_settings		equ 0ff1800h
                           B    40    
       00FF1000            B    41    tilemap_parameters		equ hw_video_parameters
       00FF1020            B    42    bitmap_parameters		equ hw_video_parameters
                           B    43    
       00FF1800            B    44    video_control			equ hw_video_settings+0
       00FF1801            B    45    sprite_control			equ hw_video_settings+0
       00FF1802            B    46    bgnd_palette_select		equ hw_video_settings+0
       00FF1803            B    47    sprite_palette_select	equ hw_video_settings+0
       00FF1804            B    48    right_border_position	equ hw_video_settings+0
       00FF1805            B    49    irq_line_lo				equ hw_video_settings+0
       00FF1806            B    50    irq_line_hi				equ hw_video_settings+0
       00FF1807            B    51    sprite_gen_stop_pos		equ hw_video_settings+0
                           B    52    
                           B    53    ;----------------------------------------------
                           B     0    	include 'misc_system_equates.asm'
                           B     1    
                           B     2    ;-- System Equates ----------------------------
                           B     3    
       00000A00            B     4    os_location			equ 0a00h
                           B     5    
       00000A14            B     6    prose_return 		equ os_location + 14h
       00000A18            B     7    prose_relativize_hl	equ os_location + 18h
       00000A1C            B     8    prose_relative_call	equ os_location + 1ch
                           B     9    
       00000A20            B    10    prose_kernal 		equ os_location + 20h
                           B    11    
                           B    12    ;----------------------------------------------
                           B    13    
                           B    14    ; Add to sprite locations to position a 0,0 spr
                           B    15    
       00000100            B    16    x_display_offset	equ 0100h		;for AMOEBA
       00000200            B    17    y_display_offset	equ 0200h		;for AMOEBA
                           B    18    
                           B    19    ;----------------------------------------------
                           A    12    	
       00000800            A    13    	sector_buffer		equ 800h
       00000700            A    14    	serial_buffer		equ 700h
                           A    15    	
       00000100            A    16    	scratch_pad			equ 100h
                           A    17    
       00000200            A    18    	envar_list			equ 200h
       00000200            A    19    	envar_buffer_size	equ 200h
                           A    20    	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   4


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A    21    ;----------------------------------------------
                           A    22    
       00000040            A    23    prose_version			equ 40h
       0000010B            A    24    amoeba_version_required	equ 10bh
                           A    25    
       00080000            A    26    sysram_size				equ 080000h			;as
       00000200            A    27    stack_size				equ 512
                           A    28    
       00080000            A    29    vram_a_size				equ 080000h
       00080000            A    30    vram_b_size				equ 080000h
                           A    31    
                           A    32    ;----------------------------------------------
                           A    33    ; Assembly options
                           A    34    ;----------------------------------------------
                           A    35    
       00000008            A    36    max_volumes				equ 8
                           A    37    
       00000050            A    38    max_buffer_chars		equ 80		; applies t
                           A    39    
                           A    40    ;----------------------------------------------
                           A    41    			
000A00                     A    42    			org os_location
                           A    43    			
000A00 00 00 00 00 00 00   A    44    				blkb 16,0						000A06 00 00 00 00 00 00 
000A0C 00 00 00 00 
                           A    45    			
                           A    46    ;----------------------------------------------
                           A    47    			
000A10 C3 4E 0A 00         A    48    				jp os_first_run					000A14 C3 EE 0F 00         A    49    				jp extcmd_return				000A18 C3 57 3C 00         A    50    				jp relativize_hl				000A1C C3 6A 3C 00         A    51    				jp relative_call				                           A    52    				
                           A    53    ;----------------------------------------------
                           A    54    
                           A    55    ; External apps can call kernal routines by doi
                           A    56    ; Set A to kernal routine number required (see 
                           A    57    ; (this routine is always located at os_locatio
                           A    58    
000A20 D9                  A    59    				exx
000A21 DD22 AA 6D 00       A    60    				ld (kernal_ix_cache),ix
000A26 DD21 FD 60 00       A    61    				ld ix,kernal_table				000A2B 11030000            A    62    				ld de,3
000A2F 57                  A    63    				ld d,a
000A30 ED5C                A    64    				mlt de
000A32 DD19                A    65    				add ix,de						000A34 DD3700              A    66    				ld ix,(ix)						                           A    67    				
000A37 E3                  A    68    				ex (sp),hl
000A38 7D                  A    69    				ld a,l							000A39 E601                A    70    				and 1							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   5


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000A3B E3                  A    71    				ex (sp),hl
000A3C D9                  A    72    				exx
000A3D FDE5                A    73    				push iy
000A3F CD 4C 0A 00         A    74    				call kr_jump					000A43 FDE1                A    75    				pop iy							000A45 DD2A AA 6D 00       A    76    				ld ix,(kernal_ix_cache)
000A4A 5BC9                A    77    				ret.l							                           A    78    				
000A4C DDE9                A    79    kr_jump			jp (ix)							                           A    80    						
                           A    81    ;----------------------------------------------
                           A    82    
                           A    83    ; *******************
                           A    84    ; *   START UP OS   *
                           A    85    ; *******************
                           A    86    
000A4E                     A    87    os_first_run
                           A    88    	
000A4E B7                  A    89    				or a							000A4F 20 05               A    90    				jr nz,os_cold_start		
000A51 78                  A    91    				ld a,b
000A52 32 2C 6C 00         A    92    				ld (boot_drive),a				                           A    93    
000A56                     A    94    os_cold_start
000A56 ED7D                A    95    				stmix							000A58 F3                  A    96    				di								000A59 ED5E                A    97    				im 2							000A5B AF                  A    98    				xor a
000A5C ED6D                A    99    				ld MB,a							000A5E 4031FFFF            A   100    				ld.sis sp,0ffffh				000A62 31FFFF07            A   101    				ld sp,sysram_addr+sysram_size-1
000A66 21FFFF07            A   102    				ld hl,sysram_addr+sysram_size-1
000A6A 11000200            A   103    				ld de,stack_size
000A6E AF                  A   104    				xor a
000A6F ED52                A   105    				sbc hl,de
000A71 22 6D 6D 00         A   106    				ld (free_sysram_top),hl			000A75 21 30 73 00         A   107    				ld hl,os_max_addr
000A79 22 6A 6D 00         A   108    				ld (free_sysram_base),hl
                           A   109    				
000A7D 21000080            A   110    				ld hl,vram_a_addr
000A81 22 70 6D 00         A   111    				ld (free_vram_a_base),hl
000A85 01FFFF07            A   112    				ld bc,vram_a_size-1
000A89 09                  A   113    				add hl,bc
000A8A 22 73 6D 00         A   114    				ld (free_vram_a_top),hl
                           A   115    				
000A8E 210000C0            A   116    				ld hl,vram_b_addr
000A92 22 76 6D 00         A   117    				ld (free_vram_b_base),hl
000A96 01FFFD07            A   118    				ld bc,vram_b_size-1-512			000A9A 09                  A   119    				add hl,bc
000A9B 22 79 6D 00         A   120    				ld (free_vram_b_top),hl
                           A   121    								
000A9F CD B1 45 00         A   122    				call disable_irqs
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   6


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000AA3 CD D0 47 00         A   123    				call disable_all_nmis
                           A   124    				
000AA7 3A 68 6D 00         A   125    				ld a,(first_run)				000AAB B7                  A   126    				or a
000AAC 28 11               A   127    				jr z,dont_resetkb
000AAE CD 14 4C 00         A   128    				call init_keyboard
000AB2 28 06               A   129    				jr z,kb_ok
000AB4 21 69 6D 00         A   130    				ld hl,devices_connected
000AB8 CB86                A   131    				res 0,(hl)
000ABA AF                  A   132    kb_ok			xor a
000ABB 32 68 6D 00         A   133    				ld (first_run),a
000ABF                     A   134    dont_resetkb
                           A   135    				
000ABF 21 9C 6F 00         A   136    				ld hl,packed_font_start
000AC3 11000080            A   137    				ld de,vram_a_addr
000AC7 01 E2 02 00         A   138    				ld bc,packed_font_end-packed_fo
000ACB CD 5E 17 00         A   139    				call unpack_rle
000ACF CD AB 36 00         A   140    				call convert_font
                           A   141    
000AD3 CD AD 3B 00         A   142    				call test_amoeba_vers
                           A   143    				
000AD7 21 AA 6D 00         A   144    				ld hl,os_variables				000ADB 01 D0 01 00         A   145    				ld bc,last_os_var-os_variables
000ADF AF                  A   146    				xor a
000AE0 CD 13 17 00         A   147    				call os_bchl_memfill
                           A   148    				
000AE4 21000200            A   149    				ld hl,envar_list				000AE8 01000200            A   150    				ld bc,envar_buffer_size
000AEC AF                  A   151    				xor a
000AED CD 13 17 00         A   152    				call os_bchl_memfill
000AF1 21 7B 6F 00         A   153    				ld hl,default_envars
000AF5 11000200            A   154    				ld de,envar_list
000AF9 01 1E 00 00         A   155    				ld bc,envar_top_loc-default_env
000AFD EDB0                A   156    				ldir
000AFF 1B                  A   157    				dec de
000B00 ED53 99 6F 00       A   158    				ld (envar_top_loc),de			                           A   159    	
000B05 CD B7 4A 00         A   160    				call hwsc_default_hw_settings
000B09 CD E9 4E 00         A   161    				call hwsc_disable_audio
                           A   162    				
000B0D 3A A4 6B 00         A   163    				ld a,(video_mode)
000B11 CD EC 16 00         A   164    				call os_set_vmode				                           A   165    				
000B15 21 FF 61 00         A   166    				ld hl,welcome_message			000B19 CD 00 11 00         A   167    				call os_print_string
                           A   168    				
000B1D CD C6 35 00         A   169    				call os_cmd_vers				                           A   170    				
000B21 AF                  A   171    				xor a
000B22 32 2D 6C 00         A   172    				ld (current_volume),a
000B26 CD BA 35 00         A   173    				call os_cmd_remount				                           A   174    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   7


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000B2A CD A6 15 00         A   175    				call os_new_line				                           A   176    
000B2E CD D2 4C 00         A   177    				call purge_keyboard
                           A   178    				
000B32 CD 36 45 00         A   179    				call set_irq_vectors
000B36 CD 8E 45 00         A   180    				call enable_os_irqs
000B3A FB                  A   181    				ei
                           A   182    				
000B3B 21 69 6D 00         A   183    				ld hl,devices_connected			000B3F CB46                A   184    				bit 0,(hl)
000B41 20 08               A   185    				jr nz,kb_present
000B43 21 FB 67 00         A   186    				ld hl,no_keyboard_msg
000B47 CD DD 15 00         A   187    				call os_show_packed_text
000B4B                     A   188    kb_present				
                           A   189    
000B4B 21 2E 62 00         A   190    				ld hl,startup_script_fn
000B4F CD E8 10 00         A   191    				call set_script_fn
000B53 22 D6 6E 00         A   192    				ld (os_args_loc),hl
000B57 CD 2C 3E 00         A   193    				call os_do_script				                           A   194    									
000B5B 3A 67 6D 00         A   195    				ld a,(frozen)					000B5F B7                  A   196    				or a
000B60 28 11               A   197    				jr z,os_main_loop
000B62 AF                  A   198    				xor a
000B63 32 67 6D 00         A   199    				ld (frozen),a
000B67 21 85 62 00         A   200    				ld hl,nmi_freeze_txt
000B6B CD 00 11 00         A   201    				call os_print_string
000B6F CD 26 30 00         A   202    				call os_cmd_r
                           A   203    				
                           A   204    
                           A   205    ;==============================================
                           A   206    
000B73 CD A7 4A 00         A   207    os_main_loop	call hwsc_wait_vrt				                           A   208    
000B77 CD 51 11 00         A   209    				call os_cursor_flash
                           A   210    
000B7B CD 78 4F 00         A   211    				call os_get_key_press
000B7F 20 F2               A   212    				jr nz,os_main_loop
                           A   213    	
000B81 32 54 6F 00         A   214    				ld (current_scancode),a
000B85 78                  A   215    				ld a,b
000B86 32 55 6F 00         A   216    				ld (current_asciicode),a		                           A   217    	
000B8A CD 86 49 00         A   218    				call hwsc_remove_cursor
000B8E 3E18                A   219    				ld a,24							000B90 32 17 6E 00         A   220    				ld (cursorflashtimer),a			000B94 AF                  A   221    				xor a
000B95 32 18 6E 00         A   222    				ld (cursor_status),a
                           A   223    				
000B99 3A 54 6F 00         A   224    				ld a,(current_scancode)			000B9D FE70                A   225    				cp 70h
000B9F 20 0C               A   226    				jr nz,os_notins
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   8


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000BA1 3A CC 6B 00         A   227     				ld a,(overwrite_mode)
000BA5 EE01                A   228    				xor 1
000BA7 32 CC 6B 00         A   229    				ld (overwrite_mode),a
000BAB 18 C6               A   230    				jr os_main_loop
                           A   231    
000BAD FE6C                A   232    os_notins		cp 6ch
000BAF 20 07               A   233    				jr nz,not_homekey
000BB1 AF                  A   234    				xor a
000BB2 32 15 6E 00         A   235    				ld (cursor_x),a
000BB6 18 BB               A   236    				jr os_main_loop
                           A   237    								
000BB8 FE69                A   238    not_homekey		cp 69h
000BBA 20 24               A   239    				jr nz,not_endkey
000BBC 3A 14 6E 00         A   240    				ld a,(cursor_y)					000BC0 4F                  A   241    				ld c,a
000BC1 3A D2 6B 00         A   242    				ld a,(charmap_columns)
000BC5 47                  A   243    				ld b,a
000BC6 05                  A   244    fendloop		dec b
000BC7 CD F4 49 00         A   245    				call hwsc_get_charmap_addr_xy
000BCB 7E                  A   246    				ld a,(hl)
000BCC FE20                A   247    				cp 20h
000BCE 28 F6               A   248    				jr z,fendloop
000BD0 04                  A   249    				inc b
000BD1 3A D2 6B 00         A   250    				ld a,(charmap_columns)
000BD5 B8                  A   251    				cp b
000BD6 20 01               A   252    				jr nz,endxposok
000BD8 05                  A   253    				dec b
000BD9 78                  A   254    endxposok		ld a,b
000BDA 32 15 6E 00         A   255    				ld (cursor_x),a
000BDE 18 93               A   256    				jr os_main_loop
                           A   257    
000BE0 21 15 6E 00         A   258    not_endkey		ld hl,cursor_x					000BE4 FE6B                A   259    				cp 06bh			
000BE6 20 10               A   260    				jr nz,os_ntlft
000BE8 35                  A   261    				dec (hl)
000BE9 7E                  A   262    				ld a,(hl)
000BEA FEFF                A   263    				cp 0ffh	
000BEC 20 85               A   264    				jr nz,os_main_loop
000BEE 3A D2 6B 00         A   265    				ld a,(charmap_columns)
000BF2 3D                  A   266    				dec a
000BF3 77                  A   267    				ld (hl),a						000BF4 C3 73 0B 00         A   268    				jr os_main_loop
                           A   269    
000BF8 FE74                A   270    os_ntlft		cp 074h							000BFA 20 10               A   271    				jr nz,os_ntrig
000BFC 34                  A   272    				inc (hl)
000BFD 3A D2 6B 00         A   273    				ld a,(charmap_columns)
000C01 BE                  A   274    				cp (hl)
000C02 C2 73 0B 00         A   275    				jr nz,os_main_loop
000C06 3600                A   276    				ld (hl),0						000C08 C3 73 0B 00         A   277    				jr os_main_loop
                           A   278    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:   9


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000C0C 21 14 6E 00         A   279    os_ntrig		ld hl,cursor_y			
000C10 FE7D                A   280    				cp 07dh							000C12 20 07               A   281    				jr nz,os_not_pgup
000C14 AF                  A   282    				xor a
000C15 32 15 6E 00         A   283    				ld (cursor_x),a
000C19 18 1F               A   284    				jr os_cyzero
                           A   285    
000C1B FE7A                A   286    os_not_pgup		cp 07ah							000C1D 20 0C               A   287    				jr nz,os_not_pgdwn
000C1F AF                  A   288    				xor a
000C20 32 15 6E 00         A   289    				ld (cursor_x),a
000C24 3A CF 6B 00         A   290    				ld a,(charmap_rows)
000C28 3D                  A   291    				dec a
000C29 18 24               A   292    				jr os_cxzsd
                           A   293    
000C2B 21 14 6E 00         A   294    os_not_pgdwn	ld hl,cursor_y
000C2F FE75                A   295    				cp 075h							000C31 20 0D               A   296    				jr nz,os_ntup
000C33 35                  A   297    				dec (hl)
000C34 CB7E                A   298    				bit 7,(hl)
000C36 CA 73 0B 00         A   299    				jr z,os_main_loop
000C3A 3600                A   300    os_cyzero		ld (hl),0						000C3C C3 73 0B 00         A   301    				jr os_main_loop
                           A   302    
000C40 FE72                A   303    os_ntup			cp 072h
000C42 20 14               A   304    				jr nz,os_ntdwn					000C44 34                  A   305    				inc (hl)
000C45 3A CF 6B 00         A   306    				ld a,(charmap_rows)
000C49 BE                  A   307    				cp (hl)
000C4A C2 73 0B 00         A   308    				jr nz,os_main_loop
000C4E 3D                  A   309    				dec a
000C4F 77                  A   310    os_cxzsd		ld (hl),a						000C50 CD 12 49 00         A   311    				call hwsc_scroll_up
000C54 C3 73 0B 00         A   312    				jr os_main_loop
                           A   313    
000C58 FE71                A   314    os_ntdwn		cp 071h							000C5A 20 08               A   315    				jr nz,os_nodel		
000C5C 3A 15 6E 00         A   316    				ld a,(cursor_x)					000C60 47                  A   317    				ld b,a
000C61 04                  A   318    				inc b
000C62 18 13               A   319    				jr os_chrbk
                           A   320    
000C64 FE66                A   321    os_nodel		cp 066h							000C66 20 17               A   322    				jr nz,os_nbksp
000C68 3A 15 6E 00         A   323    				ld a,(cursor_x)					000C6C B7                  A   324    				or a							000C6D CA 73 0B 00         A   325    				jp z,os_main_loop
000C71 47                  A   326    				ld b,a
000C72 3D                  A   327    				dec a
000C73 32 15 6E 00         A   328    				ld (cursor_x),a					000C77 CD 0C 4A 00         A   329    os_chrbk		call hwsc_chars_left			000C7B C3 73 0B 00         A   330    				jp os_main_loop
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  10


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A   331    
                           A   332    
                           A   333    
000C7F 21 87 6B 00         A   334    os_nbksp		ld hl,function_key_list			000C83 0609                A   335    				ld b,9
000C85 BE                  A   336    tst_fkey		cp (hl)
000C86 20 6C               A   337    				jr nz,nxtfkey
000C88 3E3A                A   338    				ld a,03ah
000C8A 90                  A   339    				sub b
000C8B 32 91 6B 00         A   340    				ld (fkey_filename+1),a
                           A   341    				
000C8F CD 40 10 00         A   342    				call cache_dir_block			000C93 CD 1A 18 00         A   343    				call os_check_volume_format
000C97 20 53               A   344    				jr nz,nofkstr					000C99 21 90 6B 00         A   345    				ld hl,fkey_filename
000C9D CD B2 17 00         A   346    				call os_find_file				000CA1 28 18               A   347    				jr z,fkey_gfn
                           A   348    				
000CA3 CD 6E 18 00         A   349    				call os_root_dir
000CA7 21 97 6B 00         A   350    				ld hl,keymaps_txt				000CAB CD 5E 18 00         A   351    				call os_change_dir
000CAF 20 3B               A   352    				jr nz,nofkstr					000CB1 21 90 6B 00         A   353    				ld hl,fkey_filename
000CB5 CD B2 17 00         A   354    				call os_find_file				000CB9 20 31               A   355    				jr nz,nofkstr	
000CBB AF                  A   356    fkey_gfn		xor a							000CBC 11500000            A   357    				ld de,max_buffer_chars	
000CC0 CD C1 17 00         A   358    				call os_set_load_length			000CC4 21 32 6E 00         A   359    				ld hl,commandstring		
000CC8 E5                  A   360    				push hl
000CC9 01500000            A   361    				ld bc,max_buffer_chars			000CCD 3E20                A   362    				ld a,' '
000CCF CD 13 17 00         A   363    				call os_bchl_memfill
000CD3 E1                  A   364    				pop hl
000CD4 E5                  A   365    				push hl
000CD5 CD DF 17 00         A   366    				call os_read_bytes_from_file	000CD9 E1                  A   367    				pop hl
000CDA 28 04               A   368    				jr z,fkey_ok 
000CDC FECC                A   369    				cp 0cch							000CDE 20 0C               A   370    				jr nz,nofkstr
000CE0 CD 00 11 00         A   371    fkey_ok			call os_print_string			000CE4 CD 4C 10 00         A   372    				call restore_dir_block			000CE8 C3 45 0D 00         A   373    				jp os_got_cmd_str				000CEC CD 4C 10 00         A   374    nofkstr			call restore_dir_block		
000CF0 C3 73 0B 00         A   375    				jp os_main_loop					                           A   376    
000CF4 23                  A   377    nxtfkey			inc hl
000CF5 10 8E               A   378    				djnz tst_fkey
                           A   379    
                           A   380    
                           A   381    
000CF7 FE5A                A   382    not_fkey		cp 05ah							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  11


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000CF9 CA 41 0D 00         A   383    				jp z,os_enter_pressed
                           A   384    	
000CFD 3A 55 6F 00         A   385    				ld a,(current_asciicode)		000D01 FE20                A   386    				cp 32							000D03 38 38               A   387    				jr c,os_nvdun					                           A   388    
000D05 FE7B                A   389    				cp 07bh							000D07 30 12               A   390    				jr nc,os_gtcha					000D09 FE61                A   391    				cp 061h
000D0B 38 04               A   392    				jr c,os_ntupc
000D0D D620                A   393    				sub 020h
000D0F 18 0A               A   394    				jr os_gtcha
000D11 FE5B                A   395    os_ntupc		cp 05bh
000D13 30 06               A   396    				jr nc,os_gtcha
000D15 FE41                A   397    				cp 041h
000D17 38 02               A   398    				jr c,os_gtcha
000D19 C620                A   399    				add a,020h
000D1B 57                  A   400    os_gtcha		ld d,a							000D1C 3A CC 6B 00         A   401    				ld a,(overwrite_mode)			000D20 B7                  A   402    				or a
000D21 CC 45 4A 00         A   403    				call z,hwsc_chars_right
                           A   404    				
000D25 ED4B 14 6E 00       A   405    os_schi			ld bc,(cursor_pos)				000D2A 7A                  A   406    				ld a,d							000D2B CD 4D 49 00         A   407    				call hwsc_plot_char		
000D2F 21 15 6E 00         A   408    				ld hl,cursor_x					000D33 34                  A   409    				inc (hl)
000D34 3A D2 6B 00         A   410    				ld a,(charmap_columns)
000D38 BE                  A   411    				cp (hl)							000D39 20 02               A   412    				jr nz,os_nvdun
000D3B 3600                A   413    				ld (hl),0
                           A   414    
000D3D C3 73 0B 00         A   415    os_nvdun		jp os_main_loop
                           A   416    	
                           A   417    
                           A   418    ;----------------------------------------------
                           A   419    
000D41                     A   420    os_enter_pressed
                           A   421    	
000D41 CD 88 4A 00         A   422    				call hwsc_charline_to_command_s
                           A   423    
000D45 AF                  A   424    os_got_cmd_str	xor a
000D46 32 15 6E 00         A   425    				ld (cursor_x),a					000D4A 21 14 6E 00         A   426    				ld hl,cursor_y					000D4E 34                  A   427    				inc (hl)
000D4F 3A CF 6B 00         A   428    				ld a,(charmap_rows)
000D53 BE                  A   429    				cp (hl)
000D54 20 06               A   430    				jr nz,os_esdok
000D56 3D                  A   431    				dec a
000D57 77                  A   432    				ld (hl),a
000D58 CD 12 49 00         A   433    				call hwsc_scroll_up
                           A   434    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  12


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000D5C CD 64 0D 00         A   435    os_esdok		call os_parse_cmd_chk_ps		                           A   436    
000D60 C3 73 0B 00         A   437    post_csb		jp os_main_loop
                           A   438    
                           A   439    	
                           A   440    ;----------------------------------------------
                           A   441    
                           A   442    
000D64                     A   443    os_parse_cmd_chk_ps
                           A   444    
000D64 CD 77 0D 00         A   445    				call os_parse_command_line
000D68 FEFE                A   446    				cp 0feh							000D6A C0                  A   447    				ret nz
000D6B 01500000            A   448    				ld bc,max_buffer_chars			000D6F 11 32 6E 00         A   449    				ld de,commandstring				000D73 EDB0                A   450    				ldir
000D75 18 ED               A   451    				jr os_parse_cmd_chk_ps
                           A   452    
                           A   453    	
                           A   454    ;----------------------------------------------
                           A   455    	
000D77                     A   456    os_parse_command_line
                           A   457    
000D77 3E01                A   458    				ld a,1
000D79 32 AD 6D 00         A   459    				ld (store_registers),a			                           A   460    
000D7D 21 32 6E 00         A   461    				ld hl,commandstring				000D81 0650                A   462    				ld b,max_buffer_chars			000D83 CD 9E 11 00         A   463    				call os_scan_for_non_space		000D87 B7                  A   464    				or a							000D88 C8                  A   465    				ret z
000D89 11 15 63 00         A   466    				ld de,dictionary-1				000D8D D5                  A   467    				push de
000D8E D1                  A   468    compcstr		pop de
000D8F E5                  A   469    				push hl
000D90 FDE1                A   470    				pop iy
000D92 13                  A   471    notacmd			inc de
000D93 1A                  A   472    				ld a,(de)
000D94 FE01                A   473    				cp 1							000D96 CA 3E 0E 00         A   474    				jp z,os_no_kernal_command_found
000D9A CB7F                A   475    				bit 7,a
000D9C 28 F4               A   476    				jr z,notacmd					000D9E E67F                A   477    				and 07fh
000DA0 4F                  A   478    				ld c,a							000DA1 D5                  A   479    				push de
000DA2 13                  A   480    cmdnscan		inc de
000DA3 FD7E00              A   481    				ld a,(iy)						000DA6 CD 07 14 00         A   482    				call os_uppercasify
000DAA 47                  A   483    				ld b,a
000DAB 1A                  A   484    				ld a,(de)						000DAC B8                  A   485    				cp b
000DAD FD23                A   486    				inc iy
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  13


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000DAF 28 F1               A   487    				jr z,cmdnscan					000DB1 1A                  A   488    nomatch			ld a,(de)						000DB2 B7                  A   489    				or a
000DB3 28 04               A   490    				jr z,posmatch					000DB5 CB7F                A   491    				bit 7,a			
000DB7 28 D5               A   492    				jr z,compcstr					000DB9 FD7EFF              A   493    posmatch		ld a,(iy-1)						000DBC FE20                A   494    				cp 32
000DBE 20 CE               A   495    				jr nz,compcstr					                           A   496    	
000DC0 D1                  A   497    				pop de				
000DC1 FDE5                A   498    				push iy							000DC3 E1                  A   499    				pop hl
000DC4 CD 9E 11 00         A   500    				call os_scan_for_non_space
000DC8 22 D6 6E 00         A   501    				ld (os_args_loc),hl				                           A   502    	
000DCC 21 FE 68 00         A   503    				ld hl,os_cmd_locs
000DD0 11030000            A   504    				ld de,3
000DD4 51                  A   505    				ld d,c
000DD5 ED5C                A   506    				mlt de							000DD7 19                  A   507    				add hl,de
000DD8 ED37                A   508    				ld ix,(hl)						                           A   509    
000DDA 2A D6 6E 00         A   510    				ld hl,(os_args_loc)				000DDE CD 1A 10 00         A   511    go_int_cmd		call os_run_command				                           A   512    
000DE2 CD 58 10 00         A   513    				call error_to_envar
000DE6 B7                  A   514    				or a
000DE7 C8                  A   515    				ret z							000DE8 FE01                A   516    				cp 1
000DEA 20 17               A   517    				jr nz,show_erm
000DEC 78                  A   518    os_hwe1			ld a,b							000DED 21 1A 66 00         A   519    os_hwerr		ld hl,hex_byte_txt		
000DF1 CD 49 12 00         A   520    				call hexbyte_to_ascii	
000DF5 CD A6 15 00         A   521    				call os_new_line
000DF9 21 EE 67 00         A   522    				ld hl,hw_err_msg
000DFD CD DD 15 00         A   523    				call os_show_packed_text
000E01 AF                  A   524    				xor a
000E02 C9                  A   525    				ret
                           A   526    
000E03 01000000            A   527    show_erm		ld bc,0							000E07 4F                  A   528    				ld c,a
000E08 D680                A   529    				sub 080h						000E0A 38 11               A   530    				jr c,no_trans					000E0C 21 39 6A 00         A   531    				ld hl,kernal_error_code_transla
000E10 CB77                A   532    				bit 6,a							000E12 28 06               A   533    				jr z,not_fs_err					000E14 21 49 6A 00         A   534    				ld hl,fs_error_code_translation
000E18 D640                A   535    				sub 040h
000E1A 4F                  A   536    not_fs_err		ld c,a
000E1B 09                  A   537    				add hl,bc
000E1C 4E                  A   538    				ld c,(hl)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  14


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000E1D 0600                A   539    no_trans		ld b,0
000E1F 21 6A 69 00         A   540    				ld hl,packed_msg_list
000E23 7E                  A   541    findmsg			ld a,(hl)
000E24 FEFF                A   542    				cp 0ffh
000E26 C8                  A   543    				ret z							000E27 23                  A   544    				inc hl
000E28 B7                  A   545    				or a
000E29 20 F8               A   546    				jr nz,findmsg					000E2B 04                  A   547    				inc b
000E2C 79                  A   548    				ld a,c							000E2D B8                  A   549    				cp b
000E2E 20 F3               A   550    				jr nz,findmsg
000E30 CD A6 15 00         A   551    				call os_new_line
000E34 CD DD 15 00         A   552    				call os_show_packed_text
000E38 CD A6 15 00         A   553    				call os_new_line
000E3C AF                  A   554    				xor a
000E3D C9                  A   555    				ret
                           A   556    	
                           A   557    
000E3E                     A   558    os_no_kernal_command_found
                           A   559    
000E3E CD 24 10 00         A   560    				call test_volx					000E42 20 0A               A   561    				jr nz,novolcmd					000E44 D630                A   562    gotvolcmd		sub 030h
000E46 CD 49 1C 00         A   563    				call os_change_volume
000E4A C3 05 10 00         A   564    				jp extcmderf					                           A   565    		
000E4E 7E                  A   566    novolcmd		ld a,(hl)						000E4F FE47                A   567    				cp 'G'							000E51 20 3A               A   568    				jr nz,not_g_cmd					000E53 23                  A   569    				inc hl
000E54 7E                  A   570    				ld a,(hl)
000E55 2B                  A   571    				dec hl
000E56 FE20                A   572    				cp ' '
000E58 20 33               A   573    				jr nz,not_g_cmd
000E5A 23                  A   574    				inc hl
000E5B CD 9E 11 00         A   575    				call os_scan_for_non_space
000E5F 22 D6 6E 00         A   576    				ld (os_args_loc),hl				000E63 B7                  A   577    				or a
000E64 20 04               A   578    				jr nz,gotgargs
000E66 3E1F                A   579    				ld a,01fh						000E68 18 99               A   580    				jr show_erm
000E6A CD 88 12 00         A   581    gotgargs		call ascii_to_hex_no_scan		000E6E B7                  A   582    				or a
000E6F 20 92               A   583    				jr nz,show_erm
000E71 CD BF 47 00         A   584    				call enable_button_nmi			000E75 CD B2 1D 00         A   585    				call test_de
000E79 20 03               A   586    				jr nz,not_reset
000E7B AF                  A   587    				xor a
000E7C D304                A   588    				out (port_memory_paging),a		000E7E D5                  A   589    not_reset		push de
000E7F 2A D6 6E 00         A   590    				ld hl,(os_args_loc)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  15


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000E83 CD 89 11 00         A   591    				call os_next_arg				000E87 DDE1                A   592    				pop ix			
000E89 C3 1A 10 00         A   593    				jp os_run_command				                           A   594    				
                           A   595    				
                           A   596    
                           A   597    
000E8D 22 D6 6E 00         A   598    not_g_cmd		ld (os_args_loc),hl				000E91 22 D9 6E 00         A   599    				ld (os_args_pos_cache),hl
                           A   600    
000E95 CD EE 53 00         A   601    				call fs_check_disk_format		000E99 38 2A               A   602    				jr c,os_noextcmd				000E9B 20 28               A   603    				jr nz,os_noextcmd
                           A   604    	
000E9D CD 40 10 00         A   605    				call cache_dir_block			                           A   606    
000EA1 01 70 62 00         A   607    				ld bc,ezp_txt					000EA5 CD 79 10 00         A   608    				call scan_current_and_path_dirs
000EA9 DA ED 0D 00         A   609    				jp c,os_hwerr	
000EAD 28 4C               A   610    				jr z,os_got_extcmd
                           A   611    				
000EAF CD 4C 10 00         A   612    				call restore_dir_block
                           A   613    				
000EB3 01 76 62 00         A   614    				ld bc,pbf_txt					000EB7 CD 79 10 00         A   615    				call scan_current_and_path_dirs
000EBB DA ED 0D 00         A   616    				jp c,os_hwerr	
000EBF 28 0A               A   617    				jr z,os_got_script
                           A   618    				
000EC1 CD 4C 10 00         A   619    				call restore_dir_block			000EC5 3E0B                A   620    os_noextcmd		ld a,0bh						000EC7 C3 03 0E 00         A   621    				jp show_erm
                           A   622    
                           A   623    				
000ECB 21 EE 6E 00         A   624    os_got_script	ld hl,script_flags				000ECF CB46                A   625    				bit scr_in_script,(hl)
000ED1 C2 A2 40 00         A   626    				jp nz,script_error
000ED5 21 B1 6D 00         A   627    				ld hl,temp_string				000ED9 CD E8 10 00         A   628    				call set_script_fn
000EDD CD ED 1B 00         A   629    				call fs_get_dir_cluster			000EE1 ED53 E5 6E 00       A   630    				ld (script_dir),de
000EE6 CD 4C 10 00         A   631    				call restore_dir_block			000EEA 2A D6 6E 00         A   632    				ld hl,(os_args_loc)		
000EEE CD 9E 11 00         A   633    				call os_scan_for_non_space
000EF2 DD21 2C 3E 00       A   634    				ld ix,os_do_script				000EF7 C3 DE 0D 00         A   635    				jp go_int_cmd
                           A   636    				
                           A   637    
                           A   638    
                           A   639    
                           A   640    
000EFB 2A D6 6E 00         A   641    os_got_extcmd	ld hl,(os_args_loc)				000EFF CD 9E 11 00         A   642    				call os_scan_for_non_space		Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  16


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000F03 22 D6 6E 00         A   643    				ld (os_args_loc),hl
                           A   644    
000F07 11100000            A   645    				ld de,16
000F0B CD C1 17 00         A   646    				call os_set_load_length			000F0F 21000100            A   647    				ld hl,scratch_pad
000F13 22 C9 60 00         A   648    				ld (fs_ez80_address),hl
000F17 CD EB 55 00         A   649    				call fs_read_data_command
000F1B DA ED 0D 00         A   650    				jp c,os_hwerr					000F1F C2 03 0E 00         A   651    				jp nz,show_erm					000F23 2A020100            A   652    				ld hl,(scratch_pad+2)
000F27 1150524F            A   653    				ld de,04f5250h					000F2B AF                  A   654    				xor a	
000F2C ED52                A   655    				sbc hl,de
000F2E 28 0A               A   656    				jr z,loc_header
000F30 CD 4C 10 00         A   657    				call restore_dir_block			000F34 3E1A                A   658    				ld a,01ah						000F36 C3 03 0E 00         A   659    				jp show_erm						                           A   660    				
000F3A 3A0F0100            A   661    loc_header		ld a,(scratch_pad+15)			000F3E 32 A9 6D 00         A   662    				ld (store_adl),a			
000F42 CD 98 55 00         A   663    				call fs_open_file_command		000F46 DA ED 0D 00         A   664    				jp c,os_hwerr
000F4A C2 C5 0E 00         A   665    				jr nz,os_noextcmd
000F4E 2A050100            A   666    				ld hl,(scratch_pad+5)			000F52 22 C9 60 00         A   667    				ld (fs_ez80_address),hl
                           A   668    				
000F56 ED5B0B01 00         A   669    				ld de,(scratch_pad+11)			000F5B 7B                  A   670    				ld a,e
000F5C B2                  A   671    				or d
000F5D 28 14               A   672    				jr z,noprov_spec				000F5F 21400000            A   673    				ld hl,prose_version
000F63 AF                  A   674    				xor a
000F64 40ED52              A   675    				sbc.sis hl,de					000F67 30 0A               A   676    				jr nc,noprov_spec
000F69 CD 4C 10 00         A   677    				call restore_dir_block
000F6D 3E1B                A   678    				ld a,01bh						000F6F C3 03 0E 00         A   679    				jp show_erm
                           A   680    				
000F73 CD 54 4B 00         A   681    noprov_spec		call hwsc_get_version			000F77 2A0D0100            A   682    				ld hl,(scratch_pad+13)			000F7B EB                  A   683    				ex de,hl						000F7C 7B                  A   684    				ld a,e
000F7D B2                  A   685    				or d
000F7E 28 10               A   686    				jr z,nohwv_spec					000F80 AF                  A   687    				xor a
000F81 40ED52              A   688    				sbc.sis hl,de					000F84 30 0A               A   689    				jr nc,nohwv_spec
000F86 CD 4C 10 00         A   690    				call restore_dir_block
000F8A 3E2B                A   691    				ld a,02bh						000F8C C3 03 0E 00         A   692    				jp show_erm
                           A   693    
000F90 ED5B0801 00         A   694    nohwv_spec		ld de,(scratch_pad+8)			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  17


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
000F95 3A0A0100            A   695    				ld a,(scratch_pad+10)			000F99 B2                  A   696    				or d
000F9A B3                  A   697    				or e
000F9B 28 04               A   698    				jr z,readcode					000F9D CD C1 17 00         A   699    				call os_set_load_length			                           A   700    		
000FA1 ED4B C9 60 00       A   701    readcode		ld bc,(fs_ez80_address)			000FA6 C5                  A   702    				push bc
000FA7 E1                  A   703    				pop hl
000FA8 ED5B C0 60 00       A   704    				ld de,(fs_file_transfer_length)
000FAD 19                  A   705    				add hl,de
000FAE EB                  A   706    				ex de,hl
000FAF CD D3 3C 00         A   707    				call os_protected_ram_test
000FB3 C4 25 3D 00         A   708    				call nz,os_protected_ram_query
000FB7 28 0A               A   709    				jr z,ezp_loadpm_ok
000FB9 F5                  A   710    				push af
000FBA CD 4C 10 00         A   711    				call restore_dir_block
000FBE F1                  A   712    				pop af
000FBF C3 03 0E 00         A   713    				jp show_erm
                           A   714    
000FC3 2A050100            A   715    ezp_loadpm_ok	ld hl,(scratch_pad+5)
000FC7 22 DF 6E 00         A   716    				ld (os_extcmd_jmp_addr),hl		000FCB CD EB 55 00         A   717    				call fs_read_data_command
000FCF F5                  A   718    				push af
000FD0 CD 4C 10 00         A   719    				call restore_dir_block			000FD4 F1                  A   720    				pop af
000FD5 DA ED 0D 00         A   721    				jp c,os_hwerr					000FD9 C2 03 0E 00         A   722    				jp nz,show_erm					                           A   723    	
000FDD CD BF 47 00         A   724    				call enable_button_nmi			000FE1 DD2A DF 6E 00       A   725    				ld ix,(os_extcmd_jmp_addr)		000FE6 2A D6 6E 00         A   726    				ld hl,(os_args_loc)				000FEA C3 1A 10 00         A   727    				jp os_run_command				                           A   728    
000FEE F5                  A   729    extcmd_return	push af							000FEF CD B7 4A 00         A   730    				call hwsc_default_hw_settings	000FF3 3A AD 6D 00         A   731    				ld a,(store_registers)
000FF7 B7                  A   732    				or a
000FF8 28 06               A   733    				jr z,skp_strg
000FFA F1                  A   734    				pop af
000FFB CD 1F 15 00         A   735    				call os_store_CPU_regs			000FFF F5                  A   736    				push af
001000 F1                  A   737    skp_strg		pop af
                           A   738    
001001 CD 58 10 00         A   739    				call error_to_envar
001005 B7                  A   740    extcmderf		or a							001006 C8                  A   741    				ret z	
001007 FE01                A   742    				cp 1							001009 CA EC 0D 00         A   743    				jp z,os_hwe1					00100D FEFF                A   744    				cp 0ffh							00100F CA 56 0A 00         A   745    				jp z,os_cold_start
001013 FEFE                A   746    				cp 0feh							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  18


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001015 C8                  A   747    				ret z
001016 C3 03 0E 00         A   748    				jp show_erm						                           A   749    				
                           A   750    ;----------------------------------------------
                           A   751    
00101A                     A   752    os_run_command									00101A ED3906              A   753    				out0 (port_nmi_ack),a			00101D DD22 AE 6D 00       A   754    				ld (com_start_addr),ix			001022 DDE9                A   755    				jp (ix)							                           A   756    
                           A   757    ;----------------------------------------------
                           A   758    
                           A   759    
001024 3E30                A   760    test_volx		ld a,030h						001026 32 07 63 00         A   761    fvolcmd			ld (chvol_txt+3),a				00102A 11 04 63 00         A   762    				ld de,chvol_txt		
00102E 0606                A   763    				ld b,6
001030 CD CD 13 00         A   764    				call os_compare_strings	
001034 3A 07 63 00         A   765    				ld a,(chvol_txt+3)
001038 C8                  A   766    				ret z	
001039 3C                  A   767    				inc a			
00103A FE38                A   768    				cp 030h+max_volumes		
00103C 20 E8               A   769    				jr nz,fvolcmd
00103E B7                  A   770    				or a
00103F C9                  A   771    				ret
                           A   772    				
                           A   773    ;----------------------------------------------
                           A   774    				
                           A   775    				
                           A   776    				
001040                     A   777    cache_dir_block
                           A   778    
                           A   779    	
001040 D5                  A   780    				push de
001041 CD ED 1B 00         A   781    				call fs_get_dir_cluster	
001045 ED53 DC 6E 00       A   782    				ld (os_dir_block_cache),de
00104A D1                  A   783    				pop de	
00104B C9                  A   784    				ret
                           A   785    		
                           A   786    
00104C                     A   787    restore_dir_block
                           A   788    
00104C D5                  A   789    				push de
00104D ED5B DC 6E 00       A   790    				ld de,(os_dir_block_cache)
001052 CD F9 1B 00         A   791    				call fs_update_dir_cluster
001056 D1                  A   792    				pop de
001057 C9                  A   793    				ret
                           A   794    
                           A   795    ;----------------------------------------------
                           A   796    
001058                     A   797    error_to_envar
                           A   798    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  19


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001058 F5                  A   799    				push af							001059 C5                  A   800    				push bc							00105A E5                  A   801    				push hl							00105B 21000100            A   802    				ld hl,scratch_pad				00105F CD 49 12 00         A   803    				call hexbyte_to_ascii
001063 3600                A   804    				ld (hl),0
001065 11000100            A   805    				ld de,scratch_pad
001069 21 9D 62 00         A   806    				ld hl,error_txt
00106D CD 00 1D 00         A   807    				call os_set_envar
001071 CD CA 47 00         A   808    				call disable_button_nmi			001075 E1                  A   809    				pop hl
001076 C1                  A   810    				pop bc
001077 F1                  A   811    				pop af
001078 C9                  A   812    				ret
                           A   813    
                           A   814    ;----------------------------------------------
                           A   815    
001079                     A   816    scan_current_and_path_dirs
                           A   817    
001079 ED430001 00         A   818    				ld (scratch_pad),bc				00107E 2A D9 6E 00         A   819    				ld hl,(os_args_pos_cache)		001082 22 D6 6E 00         A   820    				ld (os_args_loc),hl
                           A   821    				
001086 AF                  A   822    				xor a							001087 CD 93 3D 00         A   823    				call os_parse_path_string		00108B 20 13               A   824    				jr nz,no_ecmd_here
                           A   825    				
00108D 22 D6 6E 00         A   826    				ld (os_args_loc),hl				                           A   827    
001091 ED4B0001 00         A   828    				ld bc,(scratch_pad)				001096 CD D2 11 00         A   829    				call os_args_to_fn_append_extn	00109A CD 98 55 00         A   830    				call fs_open_file_command		00109E D8                  A   831    				ret c					 		00109F C8                  A   832    				ret z							                           A   833    
0010A0 21 FF 62 00         A   834    no_ecmd_here	ld hl,path_txt					0010A4 CD BC 1C 00         A   835    				call os_get_envar
0010A8 ED53 F0 6E 00       A   836    				ld (path_parse_loc),de
                           A   837    
0010AD CD 68 55 00         A   838    path_loop		call fs_goto_root_dir_command	0010B1 2A F0 6E 00         A   839    				ld hl,(path_parse_loc)			0010B5 CD 33 5E 00         A   840    				call fs_hl_to_filename			0010B9 CD 41 55 00         A   841    				call fs_change_dir_command		0010BD D8                  A   842    				ret c
0010BE 20 17               A   843    				jr nz,next_dir_in_path			                           A   844    	
0010C0 2A D9 6E 00         A   845    				ld hl,(os_args_pos_cache)		0010C4 22 D6 6E 00         A   846    				ld (os_args_loc),hl
0010C8 ED4B0001 00         A   847    				ld bc,(scratch_pad)				0010CD CD D2 11 00         A   848    				call os_args_to_fn_append_extn	                           A   849    				
0010D1 CD 98 55 00         A   850    				call fs_open_file_command		Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  20


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0010D5 D8                  A   851    				ret c
0010D6 C8                  A   852    				ret z							                           A   853    				
0010D7                     A   854    next_dir_in_path
                           A   855    				
0010D7 2A F0 6E 00         A   856    				ld hl,(path_parse_loc)			0010DB CD 89 11 00         A   857    				call os_next_arg
0010DF 22 F0 6E 00         A   858    				ld (path_parse_loc),hl
0010E3 20 C8               A   859    				jr nz,path_loop					0010E5 AF                  A   860    				xor a
0010E6 3C                  A   861    				inc a
0010E7 C9                  A   862    				ret								                           A   863    				
                           A   864    ;----------------------------------------------
                           A   865    				
0010E8 11 03 6E 00         A   866    set_script_fn	ld de,script_fn
0010EC 060D                A   867    				ld b,13
0010EE CD EC 13 00         A   868    				call os_copy_ascii_run
0010F2 AF                  A   869    				xor a
0010F3 12                  A   870    				ld (de),a
0010F4 C9                  A   871    				ret
                           A   872    
                           A   873    ;==============================================
                           A   874    ; Routines called by command line
                           A   875    ;==============================================
                           A   876    
                           A   877    ; Set:-
                           A   878    ; HL to address of string
                           A   879    ; c = y
                           A   880    ; b = x
                           A   881    
0010F5                     A   882    ext_print_string
                           A   883    
0010F5 CC 3A 17 00         A   884    				call z,mbase_hl
0010F9 18 05               A   885    				jr os_print_string
                           A   886    
0010FB                     A   887    os_print_string_cond
                           A   888    
0010FB CD A0 1B 00         A   889    				call test_quiet_mode
0010FF C0                  A   890    				ret nz
                           A   891    
001100                     A   892    os_print_string
                           A   893    
001100 D5                  A   894    				push de
001101 C5                  A   895    				push bc
001102 ED4B 14 6E 00       A   896    				ld bc,(cursor_pos)				001107 7E                  A   897    prstr_lp		ld a,(hl)
001108 23                  A   898    				inc hl
001109 B7                  A   899    				or a
00110A 20 09               A   900    				jr nz,prstr_ne
00110C ED43 14 6E 00       A   901    				ld (cursor_pos),bc
001111 C1                  A   902    				pop bc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  21


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001112 D1                  A   903    				pop de
001113 AF                  A   904    				xor a							001114 C9                  A   905    				ret
                           A   906    
001115 FE0D                A   907    prstr_ne		cp 13
001117 20 04               A   908    				jr nz,not_cr
001119 0600                A   909    				ld b,0
00111B 18 EA               A   910    				jr prstr_lp
00111D FE0A                A   911    not_cr			cp 10
00111F 28 12               A   912    				jr z,line_feed				
001121 FE0B                A   913    				cp 11
001123 28 0C               A   914    				jr z,next_line
001125 CD 4D 49 00         A   915    				call hwsc_plot_char
001129 04                  A   916    				inc b
00112A 3A D2 6B 00         A   917    				ld a,(charmap_columns)
00112E B8                  A   918    				cp b
00112F 20 D6               A   919    				jr nz,prstr_lp
001131 0600                A   920    next_line		ld b,0
001133 0C                  A   921    line_feed		inc c
001134 3A CF 6B 00         A   922    				ld a,(charmap_rows)
001138 B9                  A   923    				cp c
001139 20 CC               A   924    				jr nz,prstr_lp
00113B 0D                  A   925    				dec c
00113C CD 12 49 00         A   926    				call hwsc_scroll_up
001140 18 C5               A   927    				jr prstr_lp
                           A   928    
                           A   929    ;----------------------------------------------
                           A   930    
001142 21 2D 6F 00         A   931    os_print_char	ld hl,char_to_print
001146 77                  A   932    				ld (hl),a
001147 18 B7               A   933    				jr os_print_string
                           A   934    
                           A   935    ;----------------------------------------------
                           A   936    
001149 F5                  A   937    home_cursor		push af
00114A AF                  A   938    				xor a
00114B 32 15 6E 00         A   939    				ld (cursor_x),a
00114F F1                  A   940    				pop af
001150 C9                  A   941    				ret
                           A   942    				
                           A   943    ;----------------------------------------------
                           A   944    
001151                     A   945    os_cursor_flash
                           A   946    
001151 21 17 6E 00         A   947    				ld hl,cursorflashtimer
001155 34                  A   948    				inc (hl)
001156 7E                  A   949    				ld a,(hl)
001157 FE19                A   950    				cp 25
001159 C0                  A   951    				ret nz
00115A 3600                A   952    				ld (hl),0
00115C 3A 18 6E 00         A   953    				ld a,(cursor_status)
001160 EE01                A   954    				xor 1
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  22


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001162 32 18 6E 00         A   955    				ld (cursor_status),a
001166 28 15               A   956    				jr z,no_cursor
001168 3E5F                A   957    				ld a,05fh
00116A 21 CC 6B 00         A   958    				ld hl,overwrite_mode
00116E CB46                A   959    				bit 0,(hl)
001170 28 02               A   960    				jr z,cursor_selected
001172 3E7F                A   961    				ld a,07fh
                           A   962    				
001174 CD 83 11 00         A   963    cursor_selected	call os_set_cursor_image
001178 CD A0 49 00         A   964    				call hwsc_draw_cursor			00117C C9                  A   965    				ret
                           A   966    
00117D CD 86 49 00         A   967    no_cursor		call hwsc_remove_cursor
001181 C9                  A   968    				ret
                           A   969    
                           A   970    
                           A   971    ;----------------------------------------------
                           A   972    
001182                     A   973    ext_set_cursor_image
                           A   974    
001182 7B                  A   975    				ld a,e
                           A   976    				
001183                     A   977    os_set_cursor_image
                           A   978    			
001183 32 CD 6B 00         A   979    				ld (cursor_image_char),a
001187 BF                  A   980    				cp a
001188 C9                  A   981    				ret
                           A   982    
                           A   983    ;----------------------------------------------
                           A   984    
001189                     A   985    os_next_arg
                           A   986    
001189 CD 95 11 00         A   987    				call os_scan_for_space
00118D B7                  A   988    				or a
00118E C8                  A   989    				ret z
00118F CD 9E 11 00         A   990    				call os_scan_for_non_space
001193 B7                  A   991    				or a
001194 C9                  A   992    				ret
                           A   993    
                           A   994    
                           A   995    ;----------------------------------------------
                           A   996    	
                           A   997    
001195                     A   998    os_scan_for_space
                           A   999    
001195 7E                  A  1000    os_sfspl 		ld a,(hl)						001196 B7                  A  1001    				or a							001197 C8                  A  1002    				ret z
001198 FE20                A  1003    				cp ' '
00119A C8                  A  1004    				ret z
00119B 23                  A  1005    				inc hl
00119C 18 F7               A  1006    				jr os_sfspl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  23


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1007    	
                           A  1008    
                           A  1009    ;----------------------------------------------
                           A  1010    	
                           A  1011    
00119E                     A  1012    os_scan_for_non_space
                           A  1013    
00119E 2B                  A  1014    				dec hl							00119F 23                  A  1015    os_nsplp		inc hl			
0011A0 7E                  A  1016    				ld a,(hl)			
0011A1 B7                  A  1017    				or a			
0011A2 C8                  A  1018    				ret z							0011A3 FE20                A  1019    				cp ' '
0011A5 28 F8               A  1020    				jr z,os_nsplp
0011A7 C9                  A  1021    				ret
                           A  1022    	
                           A  1023    	
                           A  1024    ;----------------------------------------------
                           A  1025    
0011A8                     A  1026    os_args_to_alt_filename
                           A  1027    
0011A8 CD 00 12 00         A  1028    				call os_atfn_pre				0011AC C8                  A  1029    				ret z
0011AD CD 2D 5E 00         A  1030    				call fs_hl_to_alt_filename
0011B1 18 09               A  1031    				jr os_atfrl
                           A  1032    	
                           A  1033    	
                           A  1034    	
                           A  1035    		
0011B3                     A  1036    os_args_to_filename
                           A  1037    
0011B3 CD 00 12 00         A  1038    				call os_atfn_pre				0011B7 C8                  A  1039    				ret z
0011B8 CD 33 5E 00         A  1040    				call fs_hl_to_filename	
                           A  1041    
0011BC 7E                  A  1042    os_atfrl		ld a,(hl)						0011BD B7                  A  1043    				or a							0011BE 28 0B               A  1044    				jr z,os_cfne
0011C0 FE20                A  1045    				cp 32
0011C2 28 07               A  1046    				jr z,os_cfne
0011C4 FE2F                A  1047    				cp 02fh
0011C6 28 03               A  1048    				jr z,os_cfne
0011C8 23                  A  1049    				inc hl
0011C9 18 F1               A  1050    				jr os_atfrl	
0011CB 22 D6 6E 00         A  1051    os_cfne			ld (os_args_loc),hl				0011CF 79                  A  1052    				ld a,c			
0011D0 B7                  A  1053    				or a							0011D1 C9                  A  1054    				ret
                           A  1055    
                           A  1056    
                           A  1057    
0011D2                     A  1058    os_args_to_fn_append_extn
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  24


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1059    
                           A  1060    ; Set BC to location of extension text
                           A  1061    
0011D2 CD 00 12 00         A  1062    				call os_atfn_pre				0011D6 C8                  A  1063    				ret z
0011D7 11 B1 6D 00         A  1064    				ld de,temp_string
0011DB 7E                  A  1065    ccmdtlp			ld a,(hl)						0011DC B7                  A  1066    				or a
0011DD 28 0D               A  1067    				jr z,goteocmd
0011DF FE20                A  1068    				cp ' '
0011E1 28 09               A  1069    				jr z,goteocmd
0011E3 FE2E                A  1070    				cp '.'
0011E5 28 05               A  1071    				jr z,goteocmd
0011E7 12                  A  1072    				ld (de),a
0011E8 13                  A  1073    				inc de
0011E9 23                  A  1074    				inc hl
0011EA 18 EF               A  1075    				jr ccmdtlp
                           A  1076    	
0011EC E5                  A  1077    goteocmd		push hl
0011ED C5                  A  1078    				push bc
0011EE E1                  A  1079    				pop hl
0011EF 01060000            A  1080    				ld bc,6
0011F3 EDB0                A  1081    				ldir 
0011F5 21 B1 6D 00         A  1082    				ld hl,temp_string
0011F9 CD 33 5E 00         A  1083    				call fs_hl_to_filename
0011FD E1                  A  1084    				pop hl
0011FE 18 BC               A  1085    				jr os_atfrl
                           A  1086    	
                           A  1087    
                           A  1088    
                           A  1089    
001200                     A  1090    os_atfn_pre
                           A  1091    
001200 2A D6 6E 00         A  1092    				ld hl,(os_args_loc)				001204 CD 9E 11 00         A  1093    				call os_scan_for_non_space
001208 B7                  A  1094    				or a
001209 C8                  A  1095    				ret z
00120A 7E                  A  1096    				ld a,(hl)
00120B FE2F                A  1097    				cp 02fh							00120D 20 01               A  1098    				jr nz,notfsl1
00120F 23                  A  1099    				inc hl
001210 AF                  A  1100    notfsl1			xor a
001211 3C                  A  1101    				inc a
001212 C9                  A  1102    				ret
                           A  1103    
                           A  1104    
                           A  1105    ;--------- Number <-> String functions --------
                           A  1106    
                           A  1107    
001213                     A  1108    os_clear_output_line
                           A  1109    
001213 C5                  A  1110    				push bc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  25


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001214 E5                  A  1111    				push hl			
001215 21 84 6E 00         A  1112    				ld hl,output_line
001219 01500000            A  1113    				ld bc,max_buffer_chars
00121D 3E20                A  1114    				ld a,32
00121F CD 13 17 00         A  1115    				call os_bchl_memfill
001223 E1                  A  1116    				pop hl
001224 C1                  A  1117    				pop bc
001225 C9                  A  1118    				ret
                           A  1119    	
                           A  1120    	
                           A  1121    	
001226                     A  1122    os_skip_leading_ascii_zeros
                           A  1123    
001226 7E                  A  1124    slazlp			ld a,(hl)						001227 FE30                A  1125    				cp '0'							001229 C0                  A  1126    				ret nz
00122A 23                  A  1127    				inc hl
00122B 10 F9               A  1128    				djnz slazlp
00122D C9                  A  1129    				ret
                           A  1130    	
                           A  1131    
                           A  1132    
00122E                     A  1133    os_leading_ascii_zeros_to_spaces
                           A  1134    
00122E E5                  A  1135    				push hl
00122F 7E                  A  1136    clazlp			ld a,(hl)						001230 FE30                A  1137    				cp '0'							001232 20 05               A  1138    				jr nz,claze	
001234 3620                A  1139    				ld (hl),' '
001236 23                  A  1140    				inc hl
001237 10 F6               A  1141    				djnz clazlp
001239 E1                  A  1142    claze			pop hl
00123A C9                  A  1143    				ret
                           A  1144    	
                           A  1145    
                           A  1146    
                           A  1147    		
00123B                     A  1148    n_hexbytes_to_ascii
                           A  1149    
00123B 1A                  A  1150    				ld a,(de)						00123C CD 49 12 00         A  1151    				call hexbyte_to_ascii			001240 1B                  A  1152    				dec de
001241 10 F8               A  1153    				djnz n_hexbytes_to_ascii
001243 C9                  A  1154    				ret
                           A  1155    			
                           A  1156    			
                           A  1157    
001244                     A  1158    ext_hexbyte_to_ascii
                           A  1159    
001244 CC 3A 17 00         A  1160    				call z,mbase_hl
001248 7B                  A  1161    				ld a,e
                           A  1162    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  26


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001249                     A  1163    hexbyte_to_ascii
                           A  1164    
001249 C5                  A  1165    				push bc
00124A 47                  A  1166    				ld b,a							00124B CB3F                A  1167    				srl a							00124D CB3F                A  1168    				srl a
00124F CB3F                A  1169    				srl a
001251 CB3F                A  1170    				srl a
001253 CD 65 12 00         A  1171    				call hxdigconv
001257 77                  A  1172    				ld (hl),a
001258 23                  A  1173    				inc hl
001259 78                  A  1174    				ld a,b
00125A E60F                A  1175    				and 0fh
00125C CD 65 12 00         A  1176    				call hxdigconv
001260 77                  A  1177    				ld (hl),a
001261 23                  A  1178    				inc hl
001262 C1                  A  1179    				pop bc
001263 AF                  A  1180    				xor a							001264 C9                  A  1181    				ret
                           A  1182    				
001265 C630                A  1183    hxdigconv		add a,030h
001267 FE3A                A  1184    				cp 03ah
001269 38 02               A  1185    				jr c,hxdone
00126B C607                A  1186    				add a,7
00126D C9                  A  1187    hxdone			ret
                           A  1188    
                           A  1189    
                           A  1190    
                           A  1191    
00126E                     A  1192    hexword_to_ascii	
                           A  1193    
00126E 7A                  A  1194    				ld a,d							00126F CD 49 12 00         A  1195    				call hexbyte_to_ascii
001273 7B                  A  1196    				ld a,e
001274 CD 49 12 00         A  1197    				call hexbyte_to_ascii
001278 C9                  A  1198    				ret
                           A  1199    	
                           A  1200    
                           A  1201    
                           A  1202    
001279                     A  1203    ext_ascii_to_hexword
                           A  1204    		
001279 CC 3A 17 00         A  1205    				call z,mbase_hl
                           A  1206    
00127D                     A  1207    ascii_to_hexword
                           A  1208    	
00127D CD 9E 11 00         A  1209    				call os_scan_for_non_space		001281 B7                  A  1210    				or a
001282 20 04               A  1211    				jr nz,ascii_to_hex_no_scan
001284 3E81                A  1212    				ld a,081h						001286 B7                  A  1213    				or a
001287 C9                  A  1214    				ret	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  27


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1215    
                           A  1216    	
001288                     A  1217    ascii_to_hex_no_scan
                           A  1218    
001288 DDE5                A  1219    				push ix
00128A C5                  A  1220    				push bc
00128B DD210000 00         A  1221    				ld ix,0
001290 0606                A  1222    				ld b,6							001292 CD BE 12 00         A  1223    athlp			call ascii_to_hex_digit
001296 FEF0                A  1224    				cp 0f0h							001298 28 17               A  1225    				jr z,athend
00129A FED0                A  1226    				cp 0d0h
00129C 28 13               A  1227    				jr z,athend						00129E FE10                A  1228    				cp 16
0012A0 30 17               A  1229    				jr nc,badhex					0012A2 DD29                A  1230    				add ix,ix						0012A4 DD29                A  1231    				add ix,ix
0012A6 DD29                A  1232    				add ix,ix
0012A8 DD29                A  1233    				add ix,ix
0012AA DDB5                A  1234    				or a,ixl
0012AC DD6F                A  1235    				ld ixl,a
0012AE 23                  A  1236    				inc hl
0012AF 10 E1               A  1237    				djnz athlp
0012B1 DDE5                A  1238    athend			push ix
0012B3 D1                  A  1239    				pop de
0012B4 AF                  A  1240    				xor a
0012B5 C1                  A  1241    ath_quit		pop bc
0012B6 DDE1                A  1242    				pop ix							0012B8 C9                  A  1243    				ret
                           A  1244    		
0012B9 3E82                A  1245    badhex			ld a,82h						0012BB B7                  A  1246    				or a
0012BC 18 F7               A  1247    				jr ath_quit
                           A  1248    				
                           A  1249    	
                           A  1250    		
0012BE                     A  1251    ascii_to_hex_digit
                           A  1252    
0012BE 7E                  A  1253    				ld a,(hl)						0012BF FE61                A  1254    				cp 061h
0012C1 38 02               A  1255    				jr c,hc_uppercase
0012C3 D620                A  1256    				sub 020h						0012C5 D63A                A  1257    hc_uppercase	sub 03ah						0012C7 38 02               A  1258    				jr c,zeronine
0012C9 C6F9                A  1259    				add a,0f9h
0012CB C60A                A  1260    zeronine		add a,0ah
0012CD C9                  A  1261    				ret
                           A  1262    
                           A  1263    
                           A  1264    ;--------- Text Input / Non-numeric string func
                           A  1265    
                           A  1266    ; Waits for user to enter a string of character
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  28


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1267    ; Before calling, set:  HL = destination of str
                           A  1268    ;                        E = max number of char
                           A  1269    ; Returns:   A  = number of characters in enter
                           A  1270    
                           A  1271    
0012CE                     A  1272    ext_user_input
0012CE CC 3A 17 00         A  1273    				call z,mbase_hl
                           A  1274    				
0012D2                     A  1275    os_user_input
0012D2 AF                  A  1276    				xor a
0012D3 32 9F 6B 00         A  1277    				ld (ui_index),a
0012D7 22 A1 6B 00         A  1278    				ld (ui_string_addr),hl
0012DB 7B                  A  1279    				ld a,e
0012DC 32 A0 6B 00         A  1280    				ld (ui_maxchars),a
                           A  1281    				
0012E0 3A CC 6B 00         A  1282    				ld a,(overwrite_mode)
0012E4 32 31 6E 00         A  1283    				ld (ui_im_cache),a
0012E8 AF                  A  1284    				xor a
0012E9 32 CC 6B 00         A  1285    				ld (overwrite_mode),a			                           A  1286    				
0012ED CD A0 49 00         A  1287    ui_loop			call hwsc_draw_cursor			0012F1 CD 1D 4F 00         A  1288    				call os_wait_key_press			0012F5 32 54 6F 00         A  1289    				ld (current_scancode),a
0012F9 78                  A  1290    				ld a,b
0012FA 32 55 6F 00         A  1291    				ld (current_asciicode),a		0012FE CD 86 49 00         A  1292    				call hwsc_remove_cursor
                           A  1293    	
001302 3A 54 6F 00         A  1294    				ld a,(current_scancode)
001306 FE66                A  1295    				cp 066h							001308 20 1F               A  1296    				jr nz,os_nuibs
00130A 3A 9F 6B 00         A  1297    				ld a,(ui_index)
00130E B7                  A  1298    				or a
00130F 28 DC               A  1299    				jr z,ui_loop					001311 21 15 6E 00         A  1300    				ld hl,cursor_x					001315 35                  A  1301    				dec (hl)						001316 46                  A  1302    os_uixok		ld b,(hl)		
001317 3A 14 6E 00         A  1303    				ld a,(cursor_y)
00131B 4F                  A  1304    				ld c,a
00131C 3E20                A  1305    				ld a,32
00131E CD 4D 49 00         A  1306    				call hwsc_plot_char
001322 21 9F 6B 00         A  1307    				ld hl,ui_index
001326 35                  A  1308    				dec (hl)						001327 18 C4               A  1309    				jr ui_loop
                           A  1310    
001329 FE76                A  1311    os_nuibs		cp 076h							00132B 28 6B               A  1312    				jr z,ui_aborted
00132D FE5A                A  1313    				cp 05ah							00132F 28 46               A  1314    				jr z,ui_enter_pressed
                           A  1315    	
001331 3A 9F 6B 00         A  1316    				ld a,(ui_index)					001335 21 A0 6B 00         A  1317    				ld hl,ui_maxchars
001339 BE                  A  1318    				cp (hl)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  29


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
00133A 28 B1               A  1319    				jr z,ui_loop	
                           A  1320    
00133C 3A 55 6F 00         A  1321    				ld a,(current_asciicode)		001340 FE20                A  1322    				cp 32							001342 38 A9               A  1323    				jr c,ui_loop					                           A  1324    
001344 57                  A  1325    ui_gtcha		ld d,a
001345 2A A1 6B 00         A  1326    				ld hl,(ui_string_addr)
001349 3A 9F 6B 00         A  1327    				ld a,(ui_index)
00134D 01000000            A  1328    				ld bc,0
001351 4F                  A  1329    				ld c,a
001352 09                  A  1330    				add hl,bc
001353 72                  A  1331    				ld (hl),d						001354 3C                  A  1332    				inc a
001355 32 9F 6B 00         A  1333    				ld (ui_index),a					                           A  1334    				
001359 ED4B 14 6E 00       A  1335    				ld bc,(cursor_y)				00135E 7A                  A  1336    				ld a,d
00135F CD 4D 49 00         A  1337    				call hwsc_plot_char		
001363 21 15 6E 00         A  1338    				ld hl,cursor_x					001367 34                  A  1339    				inc (hl)
001368 3A D2 6B 00         A  1340    				ld a,(charmap_columns)			00136C BE                  A  1341    				cp (hl)
00136D C2 ED 12 00         A  1342    				jp nz,ui_loop
001371 3600                A  1343    				ld (hl),0
001373 C3 ED 12 00         A  1344    				jp ui_loop
                           A  1345    
001377                     A  1346    ui_enter_pressed
                           A  1347    				
001377 3A 31 6E 00         A  1348    				ld a,(ui_im_cache)				00137B 32 CC 6B 00         A  1349    				ld (overwrite_mode),a
00137F 3A 9F 6B 00         A  1350    				ld a,(ui_index)					001383 B7                  A  1351    				or a
001384 20 04               A  1352    				jr nz,ui_data
001386 3E81                A  1353    				ld a,081h						001388 B7                  A  1354    				or a
001389 C9                  A  1355    				ret
00138A 2A A1 6B 00         A  1356    ui_data			ld hl,(ui_string_addr)
00138E 11000000            A  1357    				ld de,0
001392 5F                  A  1358    				ld e,a
001393 19                  A  1359    				add hl,de
001394 3600                A  1360    				ld (hl),0						001396 BF                  A  1361    				cp a							001397 C9                  A  1362    				ret
                           A  1363    
001398 3A 31 6E 00         A  1364    ui_aborted		ld a,(ui_im_cache)				00139C 32 CC 6B 00         A  1365    				ld (overwrite_mode),a
0013A0 3E80                A  1366    				ld a,080h						0013A2 B7                  A  1367    				or a							0013A3 C9                  A  1368    				ret
                           A  1369    		
                           A  1370    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  30


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1371    	
0013A4                     A  1372    os_count_lines
                           A  1373    
0013A4 E5                  A  1374    				push hl							0013A5 0679                A  1375    				ld b,'y'						0013A7 21 19 6E 00         A  1376    				ld hl,os_linecount			
0013AB 34                  A  1377    				inc (hl)						0013AC 3A CF 6B 00         A  1378    				ld a,(charmap_rows)
0013B0 D604                A  1379    				sub 4
0013B2 BE                  A  1380    				cp (hl)
0013B3 20 0E               A  1381    				jr nz,os_nntpo
0013B5 3600                A  1382    				ld (hl),0
0013B7 21 7C 62 00         A  1383    				ld hl,os_more_txt
0013BB CD 00 11 00         A  1384    				call os_print_string
0013BF CD 1D 4F 00         A  1385    				call os_wait_key_press	
0013C3 E1                  A  1386    os_nntpo		pop hl
0013C4 C9                  A  1387    				ret
                           A  1388    
                           A  1389    ;----------------------------------------------
                           A  1390    
0013C5                     A  1391    ext_compare_strings
                           A  1392    	
0013C5 CC 3A 17 00         A  1393    				call z,mbase_hl
0013C9 CC 4B 17 00         A  1394    				call z,mbase_de
                           A  1395    				
0013CD                     A  1396    os_compare_strings
                           A  1397    
                           A  1398    ; both strings at HL/DE should be zero terminat
                           A  1399    ; compare will fail if string lengths are diffe
                           A  1400    ; unless count (B) is reached first
                           A  1401    ; Case is ignored
                           A  1402    ; Zero flag set on return if same
                           A  1403    
0013CD E5                  A  1404    				push hl							0013CE D5                  A  1405    				push de							0013CF 1A                  A  1406    ocslp			ld a,(de)						0013D0 B7                  A  1407    				or a
0013D1 28 0C               A  1408    				jr z,ocsbt
0013D3 CD 10 14 00         A  1409    				call case_insensitive_compare	0013D7 20 0E               A  1410    				jr nz,ocs_diff
0013D9 13                  A  1411    				inc de
0013DA 23                  A  1412    				inc hl
0013DB 10 F2               A  1413    				djnz ocslp
0013DD 18 04               A  1414    				jr ocs_same
0013DF 1A                  A  1415    ocsbt			ld a,(de)						0013E0 B6                  A  1416    				or (hl)
0013E1 20 04               A  1417    				jr nz,ocs_diff
0013E3 D1                  A  1418    ocs_same		pop de
0013E4 E1                  A  1419    				pop hl
0013E5 AF                  A  1420    				xor a							0013E6 C9                  A  1421    				ret
0013E7 D1                  A  1422    ocs_diff		pop de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  31


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0013E8 E1                  A  1423    				pop hl
0013E9 AF                  A  1424    				xor a							0013EA 3C                  A  1425    				inc a
0013EB C9                  A  1426    				ret
                           A  1427    
                           A  1428    
                           A  1429    ;----------------------------------------------
                           A  1430    
0013EC                     A  1431    os_copy_ascii_run
                           A  1432    
                           A  1433    ;INPUT HL = source ($00 or $20 terminates)
                           A  1434    ;      DE = dest
                           A  1435    ;       b = max chars
                           A  1436    
                           A  1437    ;OUTPUT HL/DE = end of runs
                           A  1438    ;           c = char count
                           A  1439    	
0013EC 0E00                A  1440    				ld c,0
0013EE 7E                  A  1441    cpyar_lp		ld a,(hl)
0013EF B7                  A  1442    				or a
0013F0 C8                  A  1443    				ret z
0013F1 FE20                A  1444    				cp 32
0013F3 C8                  A  1445    				ret z
0013F4 12                  A  1446    				ld (de),a
0013F5 23                  A  1447    				inc hl
0013F6 13                  A  1448    				inc de
0013F7 0C                  A  1449    				inc c
0013F8 10 F4               A  1450    				djnz cpyar_lp
0013FA C9                  A  1451    				ret
                           A  1452    
                           A  1453    ;----------------------------------------------
                           A  1454    
0013FB                     A  1455    uppercasify_string
                           A  1456    
                           A  1457    ; Set HL to string location ($00 quits)
                           A  1458    ; Set B to max number of chars
                           A  1459    
0013FB 7E                  A  1460    				ld a,(hl)
0013FC B7                  A  1461    				or a
0013FD C8                  A  1462    				ret z
0013FE CD 07 14 00         A  1463    				call os_uppercasify
001402 77                  A  1464    				ld (hl),a
001403 23                  A  1465    				inc hl
001404 10 F5               A  1466    				djnz uppercasify_string	
001406 C9                  A  1467    				ret
                           A  1468    	
                           A  1469    
001407                     A  1470    os_uppercasify
                           A  1471    
                           A  1472    ; INPUT/OUTPUT A = ascii char to make uppercase
                           A  1473    
001407 FE61                A  1474    				cp 061h			
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  32


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001409 D8                  A  1475    				ret c
00140A FE7B                A  1476    				cp 07bh
00140C D0                  A  1477    				ret nc
00140D D620                A  1478    				sub 020h				
00140F C9                  A  1479    				ret
                           A  1480    
                           A  1481    ;----------------------------------------------
                           A  1482    
001410                     A  1483    case_insensitive_compare
                           A  1484    
                           A  1485    ; compares A with (HL) disregarding the case of
                           A  1486    ; Zero flag set if the characters are the same
                           A  1487    ; all registers are preserved.
                           A  1488    
001410 C5                  A  1489    				push bc					
001411 4F                  A  1490    				ld c,a
                           A  1491    
001412 CD 07 14 00         A  1492    				call os_uppercasify				001416 47                  A  1493    				ld b,a
001417 7E                  A  1494    				ld a,(hl)
001418 CD 07 14 00         A  1495    				call os_uppercasify
00141C B8                  A  1496    				cp b
                           A  1497    
00141D 79                  A  1498    				ld a,c
00141E C1                  A  1499    				pop bc
00141F C9                  A  1500    				ret
                           A  1501    
                           A  1502    ;----------------------------------------------
                           A  1503    
001420                     A  1504    os_decimal_add
                           A  1505    
                           A  1506    ;INPUT HL = source LSB, DE = dest LSB, b = numb
                           A  1507    
001420 C5                  A  1508    				push bc
001421 0E00                A  1509    				ld c,0
001423 1A                  A  1510    decdlp			ld a,(de)
001424 86                  A  1511    				add a,(hl)
001425 81                  A  1512    				add a,c
001426 FE0A                A  1513    				cp 10
001428 38 0B               A  1514    				jr c,daddnc
00142A D60A                A  1515    				sub 10
00142C 0E01                A  1516    				ld c,1
00142E 12                  A  1517    decnclp			ld (de),a
00142F 23                  A  1518    				inc hl
001430 13                  A  1519    				inc de
001431 10 F0               A  1520    				djnz decdlp
001433 C1                  A  1521    				pop bc
001434 C9                  A  1522    				ret
001435 0E00                A  1523    daddnc			ld c,0
001437 18 F5               A  1524    				jr decnclp
                           A  1525    	
                           A  1526    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  33


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1527    
001439                     A  1528    os_hex_to_decimal
                           A  1529    
                           A  1530    ; INPUT xDE hex longword
                           A  1531    ; OUTPUT xHL = decimal LSB address (8 digits) 
                           A  1532    
       00000100            A  1533    hex_to_convert		equ scratch_pad
       00000103            A  1534    decimal_digits		equ scratch_pad+3
       0000010B            A  1535    decimal_add_digits	equ scratch_pad+3+8
                           A  1536    
001439 ED530001 00         A  1537    				ld (hex_to_convert),de
                           A  1538    		
00143E 210B0100            A  1539    				ld hl,decimal_add_digits
001442 E5                  A  1540    				push hl
001443 11030100            A  1541    				ld de,decimal_digits
001447 AF                  A  1542    				xor a
001448 0608                A  1543    				ld b,8
00144A 12                  A  1544    setupdec		ld (de),a
00144B 77                  A  1545    				ld (hl),a
00144C 23                  A  1546    				inc hl
00144D 13                  A  1547    				inc de
00144E 10 FA               A  1548    				djnz setupdec
001450 E1                  A  1549    				pop hl
001451 3601                A  1550    				ld (hl),1
                           A  1551    	
001453 21000100            A  1552    				ld hl,hex_to_convert
001457 0603                A  1553    				ld b,3
001459 C5                  A  1554    decconvlp		push bc
00145A 7E                  A  1555    				ld a,(hl)
00145B CD 79 14 00         A  1556    				call decadder
00145F CD 92 14 00         A  1557    				call decaddx16
001463 7E                  A  1558    				ld a,(hl)
001464 0F                  A  1559    				rrca
001465 0F                  A  1560    				rrca
001466 0F                  A  1561    				rrca
001467 0F                  A  1562    				rrca
001468 CD 79 14 00         A  1563    				call decadder
00146C CD 92 14 00         A  1564    				call decaddx16
001470 C1                  A  1565    				pop bc
001471 23                  A  1566    				inc hl
001472 10 E5               A  1567    				djnz decconvlp
001474 21030100            A  1568    				ld hl,decimal_digits
001478 C9                  A  1569    				ret
                           A  1570    
                           A  1571    
                           A  1572    
001479 E60F                A  1573    decadder		and 15
00147B C8                  A  1574    				ret z
00147C 47                  A  1575    				ld b,a
00147D E5                  A  1576    				push hl
00147E C5                  A  1577    daddlp			push bc
00147F 11030100            A  1578    				ld de,decimal_digits
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  34


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001483 210B0100            A  1579    				ld hl,decimal_add_digits
001487 0608                A  1580    				ld b,8
001489 CD 20 14 00         A  1581    				call os_decimal_add
00148D C1                  A  1582    				pop bc
00148E 10 EE               A  1583    				djnz daddlp	
001490 E1                  A  1584    				pop hl
001491 C9                  A  1585    				ret
                           A  1586    			
                           A  1587    				
001492 E5                  A  1588    decaddx16		push hl
001493 0604                A  1589    				ld b,4							001495 C5                  A  1590    x16loop			push bc
001496 110B0100            A  1591    				ld de,decimal_add_digits
00149A 210B0100            A  1592    				ld hl,decimal_add_digits
00149E 0608                A  1593    				ld b,8
0014A0 CD 20 14 00         A  1594    				call os_decimal_add
0014A4 C1                  A  1595    				pop bc
0014A5 10 EE               A  1596    				djnz x16loop	
0014A7 E1                  A  1597    				pop hl
0014A8 C9                  A  1598    				ret
                           A  1599    	
                           A  1600    	
                           A  1601    ;----------------------------------------------
                           A  1602    
0014A9                     A  1603    os_show_decimal
                           A  1604    
0014A9 11 84 6E 00         A  1605    				ld de,output_line				0014AD 01090000            A  1606    				ld bc,9
0014B1 09                  A  1607    				add hl,bc
0014B2 060A                A  1608    				ld b,10
0014B4 7E                  A  1609    shdeclp			ld a,(hl)
0014B5 B7                  A  1610    				or a
0014B6 28 04               A  1611    				jr z,dnodigit
0014B8 C630                A  1612    				add a,030h
0014BA 12                  A  1613    				ld (de),a
0014BB 13                  A  1614    				inc de
0014BC 2B                  A  1615    dnodigit		dec hl
0014BD 10 F5               A  1616    				djnz shdeclp
0014BF AF                  A  1617    				xor a
0014C0 12                  A  1618    				ld (de),a
0014C1 CD 09 15 00         A  1619    				call os_print_output_line
0014C5 C9                  A  1620    				ret
                           A  1621    				
                           A  1622    ;----------------------------------------------
                           A  1623    		
0014C6                     A  1624    os_copy_to_output_line
                           A  1625    	
0014C6 D5                  A  1626    				push de
0014C7 C5                  A  1627    				push bc
0014C8 11 84 6E 00         A  1628    				ld de,output_line				0014CC 01510000            A  1629    				ld bc,max_buffer_chars+1		0014D0 EDA0                A  1630    os_cloll		ldi
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  35


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0014D2 7E                  A  1631    				ld a,(hl)
0014D3 B7                  A  1632    				or a
0014D4 28 04               A  1633    				jr z,os_clold
0014D6 78                  A  1634    				ld a,b
0014D7 B1                  A  1635    				or c
0014D8 20 F6               A  1636    				jr nz,os_cloll
0014DA 12                  A  1637    os_clold		ld (de),a
0014DB C1                  A  1638    				pop bc
0014DC D1                  A  1639    				pop de
0014DD C9                  A  1640    				ret
                           A  1641    
                           A  1642    
                           A  1643    ;----------------------------------------------
                           A  1644    
0014DE                     A  1645    os_show_hex_address
                           A  1646    
0014DE E5                  A  1647    				push hl							0014DF 21 84 6E 00         A  1648    				ld hl,output_line
0014E3 ED53 26 6E 00       A  1649    				ld (hex_address),de
0014E8 3A 28 6E 00         A  1650    				ld a,(hex_address+2)
0014EC CD 49 12 00         A  1651    				call hexbyte_to_ascii
0014F0 18 10               A  1652    				jr shw_nt
                           A  1653    				
                           A  1654    
0014F2                     A  1655    os_show_hex_byte
                           A  1656    
0014F2 E5                  A  1657    				push hl							0014F3 21 84 6E 00         A  1658    				ld hl,output_line
0014F7 CD 49 12 00         A  1659    				call hexbyte_to_ascii
0014FB 18 09               A  1660    				jr shb_nt
                           A  1661    
                           A  1662    
                           A  1663    
0014FD                     A  1664    os_show_hex_word
                           A  1665    
0014FD E5                  A  1666    				push hl							0014FE 21 84 6E 00         A  1667    				ld hl,output_line
001502 CD 6E 12 00         A  1668    shw_nt			call hexword_to_ascii
001506 3600                A  1669    shb_nt			ld (hl),0
001508 E1                  A  1670    				pop hl
                           A  1671    
                           A  1672    	
                           A  1673    
001509                     A  1674    os_print_output_line
                           A  1675    
001509 E5                  A  1676    				push hl
00150A 21 84 6E 00         A  1677    				ld hl,output_line
00150E CD 00 11 00         A  1678    cproline		call os_print_string
001512 E1                  A  1679    				pop hl
001513 C9                  A  1680    				ret
                           A  1681    
                           A  1682    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  36


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1683    
001514                     A  1684    os_print_output_line_skip_zeroes
                           A  1685    
001514 E5                  A  1686    				push hl
001515 21 84 6E 00         A  1687    				ld hl,output_line
001519 CD 26 12 00         A  1688    				call os_skip_leading_ascii_zero
00151D 18 EF               A  1689    				jr cproline
                           A  1690    				
                           A  1691    		
                           A  1692    ;----------------------------------------------
                           A  1693    
00151F                     A  1694    os_store_CPU_regs
                           A  1695    
00151F F3                  A  1696    				di								                           A  1697    
001520 33                  A  1698    				inc sp							001521 33                  A  1699    				inc sp
001522 33                  A  1700    				inc sp
001523 ED73 A2 6D 00       A  1701    				ld (store_spl),sp
001528 3B                  A  1702    				dec sp							001529 3B                  A  1703    				dec sp
00152A 3B                  A  1704    				dec sp
                           A  1705    				
00152B F5                  A  1706    				push af
00152C 32 85 6D 00         A  1707    				ld (store_a1),a					001530 08                  A  1708    				ex af,af'
001531 32 8F 6D 00         A  1709    				ld (store_a2),a
001535 08                  A  1710    				ex af,af'
001536 ED43 86 6D 00       A  1711    				ld (store_bc1),bc		
00153B ED53 89 6D 00       A  1712    				ld (store_de1),de
001540 22 8C 6D 00         A  1713    				ld (store_hl1),hl
001544 D9                  A  1714    				exx
001545 ED43 90 6D 00       A  1715    				ld (store_bc2),bc
00154A ED53 93 6D 00       A  1716    				ld (store_de2),de
00154F 22 96 6D 00         A  1717    				ld (store_hl2),hl
001553 D9                  A  1718    				exx
001554 DD22 99 6D 00       A  1719    				ld (store_ix),ix
001559 FD22 9C 6D 00       A  1720    				ld (store_iy),iy
                           A  1721    				
00155E ED6E                A  1722    			    ld a,MB
001560 32 A7 6D 00         A  1723    				ld (store_mbase),a
                           A  1724    								
001564 C5                  A  1725    				push bc
001565 0600                A  1726    				ld b,0
001567 20 02               A  1727    				jr nz,zfstzero					001569 CBF0                A  1728    				set 6,b
                           A  1729    
00156B 30 02               A  1730    zfstzero		jr nc,cfstzero					00156D CBC0                A  1731    				set 0,b
                           A  1732    
00156F F2 75 15 00         A  1733    cfstzero		jp p,sfstzero					001573 CBF8                A  1734    				set 7,b
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  37


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1735    
001575 EA 7B 15 00         A  1736    sfstzero		jp pe,pfstzero					001579 CBD0                A  1737    				set 2,b
                           A  1738    
00157B ED57                A  1739    pfstzero		ld a,i			
00157D EA 83 15 00         A  1740    				jp pe,ifstzero					001581 CBE0                A  1741    				set 4,b
                           A  1742    
001583 78                  A  1743    ifstzero		ld a,b
001584 32 A8 6D 00         A  1744    				ld (store_f),a
                           A  1745    				
001588 3E00                A  1746    				ld a,os_location/65536			00158A ED6D                A  1747    				ld MB,a							00158C 40ED73 A5 6D        A  1748    				ld.sis (store_sps),sp
001591 3A A7 6D 00         A  1749    				ld a,(store_mbase)				001595 ED6D                A  1750    				ld MB,a
                           A  1751    				
001597 C1                  A  1752    				pop bc
001598 F1                  A  1753    				pop af
001599 FB                  A  1754    				ei
00159A C9                  A  1755    				ret
                           A  1756    
                           A  1757    
                           A  1758    
00159B                     A  1759    os_dont_store_registers
                           A  1760    
00159B AF                  A  1761    				xor a
00159C 32 AD 6D 00         A  1762    				ld (store_registers),a			0015A0 C9                  A  1763    				ret
                           A  1764    	
                           A  1765    	
                           A  1766    ;----------------------------------------------
                           A  1767    
0015A1                     A  1768    os_new_line_cond
                           A  1769    
0015A1 CD A0 1B 00         A  1770    				call test_quiet_mode
0015A5 C0                  A  1771    				ret nz
                           A  1772    
                           A  1773    	
0015A6                     A  1774    os_new_line
                           A  1775    
0015A6 E5                  A  1776    				push hl
0015A7 21 94 62 00         A  1777    				ld hl,crlfx2_txt+1
0015AB CD 00 11 00         A  1778    				call os_print_string
0015AF E1                  A  1779    				pop hl
0015B0 C9                  A  1780    				ret
                           A  1781    				
                           A  1782    ;----------------------------------------------
                           A  1783    
0015B1                     A  1784    os_set_cursor_position
                           A  1785    				
                           A  1786    												Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  38


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0015B1 3A CF 6B 00         A  1787    				ld a,(charmap_rows)				0015B5 3D                  A  1788    				dec a							0015B6 B9                  A  1789    				cp c
0015B7 38 14               A  1790    				jr c,badpos
0015B9 79                  A  1791    				ld a,c
0015BA 32 14 6E 00         A  1792    				ld (cursor_y),a
                           A  1793    				
0015BE 3A D2 6B 00         A  1794    				ld a,(charmap_columns)
0015C2 3D                  A  1795    				dec a
0015C3 B8                  A  1796    				cp b
0015C4 38 07               A  1797    				jr c,badpos
0015C6 78                  A  1798    				ld a,b
0015C7 32 15 6E 00         A  1799    				ld (cursor_x),a
0015CB AF                  A  1800    				xor a
0015CC C9                  A  1801    				ret				
                           A  1802    
0015CD 3E88                A  1803    badpos			ld a,88h						0015CF B7                  A  1804    				or a
0015D0 C9                  A  1805    				ret
                           A  1806    
                           A  1807    
                           A  1808    					
                           A  1809    	
                           A  1810    	
0015D1                     A  1811    os_get_cursor_position
                           A  1812    
0015D1 ED4B 14 6E 00       A  1813    				ld bc,(cursor_pos)				0015D6 BF                  A  1814    				cp a							0015D7 C9                  A  1815    				ret
                           A  1816    
                           A  1817    
                           A  1818    ;----------------------------------------------
                           A  1819    
0015D8                     A  1820    os_show_packed_text_cond
                           A  1821    
0015D8 CD A0 1B 00         A  1822    				call test_quiet_mode
0015DC C0                  A  1823    				ret nz
                           A  1824    
                           A  1825    	
0015DD                     A  1826    os_show_packed_text
                           A  1827    
                           A  1828    ; Construct sentence from internal dictionary u
                           A  1829    	
0015DD C5                  A  1830    				push bc
0015DE D5                  A  1831    				push de
0015DF DDE5                A  1832    				push ix
0015E1 DD21 84 6E 00       A  1833    				ld ix,output_line
0015E6 7E                  A  1834    readpind		ld a,(hl)
0015E7 B7                  A  1835    				or a
0015E8 20 10               A  1836    				jr nz,getword					0015EA DD2B                A  1837    				dec ix							0015EC DD7700              A  1838    				ld (ix),a						Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  39


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1839    			
0015EF E5                  A  1840    				push hl
0015F0 CD 09 15 00         A  1841    				call os_print_output_line
0015F4 E1                  A  1842    				pop hl
                           A  1843    			
0015F5 DDE1                A  1844    				pop ix
0015F7 D1                  A  1845    				pop de
0015F8 C1                  A  1846    				pop bc
0015F9 C9                  A  1847    				ret
                           A  1848    				
0015FA 11 15 63 00         A  1849    getword			ld de,dictionary-1
0015FE 0E00                A  1850    				ld c,0
001600 13                  A  1851    dictloop		inc de
001601 1A                  A  1852    				ld a,(de)
001602 B7                  A  1853    				or a							001603 28 04               A  1854    				jr z,faword
001605 CB7F                A  1855    				bit 7,a							001607 28 F7               A  1856    				jr z,dictloop	
                           A  1857    			
001609 0C                  A  1858    faword			inc c							00160A 79                  A  1859    				ld a,c
00160B BE                  A  1860    				cp (hl)
00160C 20 F2               A  1861    				jr nz,dictloop
00160E 13                  A  1862    copytol			inc de							00160F 1A                  A  1863    				ld a,(de)
001610 B7                  A  1864    				or a
001611 28 0B               A  1865    				jr z,eoword						001613 CB7F                A  1866    				bit 7,a
001615 20 07               A  1867    				jr nz,eoword
001617 DD7700              A  1868    				ld (ix),a						00161A DD23                A  1869    				inc ix
00161C 18 F0               A  1870    				jr copytol
00161E DD360020            A  1871    eoword			ld (ix),32						001622 DD23                A  1872    				inc ix
001624 23                  A  1873    				inc hl
001625 18 BF               A  1874    				jr readpind
                           A  1875    
                           A  1876    
                           A  1877    		
                           A  1878    ;--------- Mouse functions --------------------
                           A  1879    
       00000064            A  1880    default_sample_rate 	equ 100			; 100 s
       00000003            A  1881    default_resolution		equ 03h			; 8 cou
       000000E6            A  1882    default_scaling			equ 0e6h		; valid
                           A  1883    
                           A  1884    
001627 21800200            A  1885    os_init_mouse	ld hl,640
00162B 11E00100            A  1886    				ld de,480
00162F 22 6C 6F 00         A  1887    				ld (mouse_window_size_x),hl	 
001633 ED53 6F 6F 00       A  1888    				ld (mouse_window_size_y),de
001638 21000000            A  1889    				ld hl,0
00163C 22 64 6F 00         A  1890    				ld (mouse_abs_x),hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  40


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001640 22 67 6F 00         A  1891    				ld (mouse_abs_y),hl
001644 22 5E 6F 00         A  1892    				ld (mouse_disp_x),hl
001648 22 61 6F 00         A  1893    				ld (mouse_disp_y),hl
                           A  1894    			
00164C CD AB 45 00         A  1895    				call disable_ms_irq
                           A  1896    
001650 21 69 6D 00         A  1897    				ld hl,devices_connected
001654 CB8E                A  1898    				res 1,(hl)
                           A  1899    		
001656 CD DD 4C 00         A  1900    				call init_mouse
00165A C0                  A  1901    				ret nz
                           A  1902    			
00165B AF                  A  1903    				xor a
00165C 32 5C 6F 00         A  1904    				ld (mouse_packet_index),a
001660 32 5D 6F 00         A  1905    				ld (mouse_buttons),a			                           A  1906    
001664 CD A5 45 00         A  1907    				call enable_ms_irq
                           A  1908    
001668 21 69 6D 00         A  1909    				ld hl,devices_connected
00166C CBCE                A  1910    				set 1,(hl)
00166E AF                  A  1911    				xor a
00166F C9                  A  1912    				ret				
                           A  1913    				
                           A  1914    				
                           A  1915    			
001670                     A  1916    os_get_mouse_motion
                           A  1917    			
                           A  1918    ; Returns: ZF = Set: Relative X coord in HL, Re
                           A  1919    ;          ZF = Not set: Mouse driver not initi
                           A  1920    			
001670 3A 69 6D 00         A  1921    				ld a,(devices_connected)
001674 E602                A  1922    				and 2
001676 EE02                A  1923    				xor 2
001678 C0                  A  1924    				ret nz
                           A  1925    				
001679 AF                  A  1926    ms_reread		xor a
00167A 32 6B 6F 00         A  1927    				ld (mouse_updated),a
00167E 2A 5E 6F 00         A  1928    				ld hl,(mouse_disp_x)			001682 ED5B 61 6F 00       A  1929    				ld de,(mouse_disp_y)
001687 3A 6B 6F 00         A  1930    				ld a,(mouse_updated)			00168B B7                  A  1931    				or a
00168C 20 EB               A  1932    				jr nz,ms_reread
00168E AF                  A  1933    mouse_end		xor a
00168F 3A 6A 6F 00         A  1934    				ld a,(mouse_wheel)
001693 47                  A  1935    				ld b,a
001694 3A 5D 6F 00         A  1936    				ld a,(mouse_buttons)
001698 C9                  A  1937    				ret
                           A  1938    			
                           A  1939    			
001699                     A  1940    os_get_mouse_position
                           A  1941    
                           A  1942    ; Returns: ZF = Set: Abolute X coord in HL, Abs
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  41


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1943    ;          ZF = Not set: Mouse driver not initi
                           A  1944    
001699 3A 69 6D 00         A  1945    				ld a,(devices_connected)
00169D E602                A  1946    				and 2
00169F EE02                A  1947    				xor 2
0016A1 C0                  A  1948    				ret nz
                           A  1949    				
0016A2 AF                  A  1950    ms_reread_abs	xor a
0016A3 32 6B 6F 00         A  1951    				ld (mouse_updated),a
                           A  1952    
0016A7 2A 64 6F 00         A  1953    				ld hl,(mouse_abs_x)
0016AB ED5B 67 6F 00       A  1954    				ld de,(mouse_abs_y)
0016B0 3A 6B 6F 00         A  1955    				ld a,(mouse_updated)			0016B4 B7                  A  1956    				or a
0016B5 20 EB               A  1957    				jr nz,ms_reread_abs
                           A  1958    				
0016B7 18 D5               A  1959    				jr mouse_end
                           A  1960    				
                           A  1961    	
                           A  1962    ;==============================================
                           A  1963    ;----- General Subroutines --------------------
                           A  1964    ;==============================================
                           A  1965    
                           A  1966    ; .--------------.
                           A  1967    ; ! CRC Checksum !
                           A  1968    ; '--------------'
                           A  1969    
                           A  1970    ; makes 16 bit checksum in HL, src addr = DE, l
                           A  1971    
0016B9                     A  1972    crc_checksum
                           A  1973    
0016B9 21FFFF00            A  1974    				ld hl,0ffffh		
0016BD 1A                  A  1975    crcloop			ld a,(de)			
0016BE AC                  A  1976    				xor h			
0016BF 67                  A  1977    				ld h,a			
0016C0 0608                A  1978    				ld b,8
0016C2 4029                A  1979    crcbyte			add.sis hl,hl					0016C4 30 08               A  1980    				jr nc,crcnext
0016C6 7C                  A  1981    				ld a,h
0016C7 EE10                A  1982    				xor 10h
0016C9 67                  A  1983    				ld h,a
0016CA 7D                  A  1984    				ld a,l
0016CB EE21                A  1985    				xor 21h
0016CD 6F                  A  1986    				ld l,a
0016CE 10 F2               A  1987    crcnext			djnz crcbyte
0016D0 13                  A  1988    				inc de
0016D1 0D                  A  1989    				dec c
0016D2 20 E9               A  1990    				jr nz,crcloop
0016D4 C9                  A  1991    				ret
                           A  1992    
                           A  1993    
                           A  1994    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  42


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  1995    
0016D5                     A  1996    os_get_key_mod_flags
                           A  1997    
0016D5 3A 53 6F 00         A  1998    				ld a,(key_mod_flags)
0016D9 BF                  A  1999    				cp a							0016DA C9                  A  2000    				ret
                           A  2001    
                           A  2002    ;----------------------------------------------
                           A  2003    
0016DB                     A  2004    os_get_vmode
                           A  2005    			
0016DB 3A CF 6B 00         A  2006    				ld a,(charmap_rows)
0016DF 4F                  A  2007    				ld c,a
0016E0 3A D2 6B 00         A  2008    				ld a,(charmap_columns)
0016E4 47                  A  2009    				ld b,a
0016E5 3A A4 6B 00         A  2010    				ld a,(video_mode)
0016E9 BF                  A  2011    				cp a						; Z
0016EA C9                  A  2012    				ret
                           A  2013    
                           A  2014    ;----------------------------------------------
                           A  2015    
0016EB 7B                  A  2016    ext_set_vmode	ld a,e
                           A  2017    
0016EC FE04                A  2018    os_set_vmode	cp 4
0016EE 38 04               A  2019    				jr c,vm_range_ok
0016F0 3E88                A  2020    				ld a,88h					;ou
0016F2 B7                  A  2021    				or a
0016F3 C9                  A  2022    				ret
                           A  2023    				
0016F4 32 A4 6B 00         A  2024    vm_range_ok		ld (video_mode),a
0016F8 21030000            A  2025    				ld hl,3
0016FC 67                  A  2026    				ld h,a
0016FD ED6C                A  2027    				mlt hl
0016FF 11 D5 6B 00         A  2028    				ld de,vmode_parameter_list
001703 19                  A  2029    				add hl,de
001704 7E                  A  2030    				ld a,(hl)
001705 23                  A  2031    				inc hl
001706 46                  A  2032    				ld b,(hl)
001707 23                  A  2033    				inc hl
001708 4E                  A  2034    				ld c,(hl)
001709 CD 35 48 00         A  2035    				call set_charmap_parameters
                           A  2036    				
00170D CD D7 48 00         A  2037    				call hwsc_clear_screen
                           A  2038    
001711 AF                  A  2039    				xor a				
001712 C9                  A  2040    				ret
                           A  2041    
                           A  2042    
                           A  2043    ;----------------------------------------------
                           A  2044    
001713                     A  2045    os_bchl_memfill
                           A  2046    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  43


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2047    ; fill memory from xHL with A. Count in xBC.
                           A  2048    		
001713 77                  A  2049    mf_loop			ld (hl),a
001714 EDA1                A  2050    				cpi								001716 EA 13 17 00         A  2051    				jp pe,mf_loop
00171A C9                  A  2052    				ret
                           A  2053    	
                           A  2054    ;----------------------------------------------
                           A  2055    
00171B 7B                  A  2056    ext_set_pen		ld a,e
                           A  2057    
00171C 32 A5 6B 00         A  2058    os_set_pen		ld (current_pen),a
001720 BF                  A  2059    				cp a							001721 C9                  A  2060    				ret
                           A  2061    
                           A  2062    ;----------------------------------------------
                           A  2063    	
001722 3A A5 6B 00         A  2064    os_get_pen		ld a,(current_pen)
001726 BF                  A  2065    				cp a							001727 C9                  A  2066    				ret	
                           A  2067    
                           A  2068    ;----------------------------------------------
                           A  2069    
001728                     A  2070    ext_background_colours
                           A  2071    				
001728 CC 3A 17 00         A  2072    				call z,mbase_hl
00172C C3 CB 48 00         A  2073    				jp hswc_set_ui_colours
                           A  2074    				
                           A  2075    				
                           A  2076    ;----------------------------------------------
                           A  2077    
001730                     A  2078    os_get_xde_msb	
                           A  2079    			
001730 ED53 2C 6E 00       A  2080    				ld (xrr_temp),de				001735 3A 2E 6E 00         A  2081    				ld a,(xrr_temp+2)
001739 C9                  A  2082    				ret
                           A  2083    
                           A  2084    ;----------------------------------------------
                           A  2085    
00173A F5                  A  2086    mbase_hl		push af
00173B 22 2C 6E 00         A  2087    				ld (xrr_temp),hl				00173F ED6E                A  2088    				ld a,MB
001741 32 2E 6E 00         A  2089    				ld (xrr_temp+2),a
001745 2A 2C 6E 00         A  2090    				ld hl,(xrr_temp)
001749 F1                  A  2091    				pop af
00174A C9                  A  2092    				ret
                           A  2093    				
00174B F5                  A  2094    mbase_de		push af
00174C ED53 2C 6E 00       A  2095    				ld (xrr_temp),de				001751 ED6E                A  2096    				ld a,MB
001753 32 2E 6E 00         A  2097    				ld (xrr_temp+2),a
001757 ED5B 2C 6E 00       A  2098    				ld de,(xrr_temp)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  44


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
00175C F1                  A  2099    				pop af
00175D C9                  A  2100    				ret
                           A  2101    
                           A  2102    
                           A  2103    ;----------------------------------------------
                           A  2104    ; Unpacks Phil's Z80P_RLE packed files - V1.02 
                           A  2105    ;----------------------------------------------
                           A  2106    
00175E                     A  2107    unpack_rle
                           A  2108    
                           A  2109    ;set xHL = source address of packed file
                           A  2110    ;set xDE = destination address for unpacked dat
                           A  2111    ;set xBC = length of packed file
                           A  2112    
00175E E5                  A  2113    			push hl	
00175F DDE1                A  2114    			pop ix
001761 0B                  A  2115    			dec bc								001762 23                  A  2116    			inc hl
001763 DD7E00              A  2117    unp_gtok	ld a,(ix)							001766 BE                  A  2118    unp_next	cp (hl)								001767 28 07               A  2119    			jr z,unp_brun						001769 EDA0                A  2120    			ldi									00176B EA 66 17 00         A  2121    			jp pe,unp_next						00176F C9                  A  2122    			ret
                           A  2123    	
001770 C5                  A  2124    unp_brun	push bc								001771 23                  A  2125    			inc hl		
001772 7E                  A  2126    			ld a,(hl)							001773 23                  A  2127    			inc hl		
001774 46                  A  2128    			ld b,(hl)							001775 23                  A  2129    			inc hl
                           A  2130    	
001776 12                  A  2131    unp_rllp	ld (de),a							001777 13                  A  2132    			inc de			
001778 10 FC               A  2133    			djnz unp_rllp
                           A  2134    	
00177A C1                  A  2135    			pop bc	
00177B 0B                  A  2136    			dec bc								00177C 0B                  A  2137    			dec bc
00177D 0B                  A  2138    			dec bc
00177E E5                  A  2139    			push hl								00177F 21000000            A  2140    			ld hl,0
001783 B7                  A  2141    			or a
001784 ED4A                A  2142    			adc hl,bc
001786 E1                  A  2143    			pop hl
001787 20 DA               A  2144    			jr nz,unp_gtok
001789 C9                  A  2145    			ret	
                           A  2146    	
                           A  2147    ;----------------------------------------------
                           A  2148    ; Commonly called error messages - gets message
                           A  2149    ;----------------------------------------------
                           A  2150    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  45


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2151    
00178A 3E0D                A  2152    os_no_fn_error		ld a,0dh
00178C B7                  A  2153    					or a
00178D C9                  A  2154    					ret
                           A  2155    			
00178E 3E15                A  2156    os_fn_too_long		ld a,15h
001790 B7                  A  2157    					or a
001791 C9                  A  2158    					ret
                           A  2159    				
001792 3E16                A  2160    os_no_start_addr	ld a,16h
001794 B7                  A  2161    					or a
001795 C9                  A  2162    					ret
                           A  2163    			
001796 3E17                A  2164    os_no_filesize		ld a,17h
001798 B7                  A  2165    					or a
001799 C9                  A  2166    					ret
                           A  2167    			
00179A 3E18                A  2168    os_abort_save		ld a,18h
00179C B7                  A  2169    					or a
00179D C9                  A  2170    					ret
                           A  2171    			
00179E 3E1C                A  2172    os_no_e_addr_error	ld a,1ch
0017A0 B7                  A  2173    					or a
0017A1 C9                  A  2174    					ret
                           A  2175    			
0017A2 3E1D                A  2176    os_no_d_addr_error	ld a,1dh
0017A4 B7                  A  2177    					or a
0017A5 C9                  A  2178    					ret
                           A  2179    				
0017A6 3E1E                A  2180    os_range_error		ld a,1eh
0017A8 B7                  A  2181    					or a
0017A9 C9                  A  2182    					ret
                           A  2183    			
0017AA 3E1F                A  2184    os_no_args_error	ld a,1fh
0017AC B7                  A  2185    					or a
0017AD C9                  A  2186    					ret	
                           A  2187    
                           A  2188    ;----------------------------------------------
                           A  2189    
                           A  2190    ; Set xHL to address of zero terminated filenam
                           A  2191    ; RETURNS:	C:xDE  = File length
                           A  2192    ;    		HL     = Start cluster of file
                           A  2193    
0017AE CC 3A 17 00         A  2194    ext_find_file	call z,mbase_hl
                           A  2195    
0017B2 CD 33 5E 00         A  2196    os_find_file	call fs_hl_to_filename
0017B6 CD 98 55 00         A  2197    				call fs_open_file_command		0017BA 38 01               A  2198    				jr c,os_fferr					0017BC C9                  A  2199    				ret								                           A  2200    					
0017BD 47                  A  2201    os_fferr		ld b,a							0017BE AF                  A  2202    				xor a			
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  46


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0017BF 3C                  A  2203    				inc a							0017C0 C9                  A  2204    				ret	
                           A  2205    
                           A  2206    ;----------------------------------------------
                           A  2207    
0017C1                     A  2208    os_set_load_length
                           A  2209    
0017C1 ED53 C0 60 00       A  2210    				ld (fs_file_transfer_length),de
0017C6 BF                  A  2211    				cp a							0017C7 C9                  A  2212    				ret
                           A  2213    				
                           A  2214    ;----------------------------------------------
                           A  2215    
0017C8                     A  2216    ext_set_file_pointer
                           A  2217    
0017C8 79                  A  2218    				ld a,c
                           A  2219    				
0017C9                     A  2220    os_set_file_pointer
                           A  2221    
                           A  2222    ; Moves the 'start of file' pointer allowing ra
                           A  2223    ; Note: File pointer is reset by opening a file
                           A  2224    ; by normal read function.
                           A  2225    
0017C9 ED53 B4 60 00       A  2226    				ld (fs_file_pointer),de			0017CE 32 B7 60 00         A  2227    				ld (fs_file_pointer+3),a
0017D2 F5                  A  2228    				push af
0017D3 AF                  A  2229    				xor a
0017D4 32 E6 60 00         A  2230    				ld (fs_filepointer_valid),a		0017D8 F1                  A  2231    				pop af
0017D9 BF                  A  2232    				cp a							0017DA C9                  A  2233    				ret
                           A  2234    				
                           A  2235    ;----------------------------------------------
                           A  2236    
                           A  2237    ; set xHL = load address 
                           A  2238    ; (Before calling this routine, call os_find_fi
                           A  2239    
0017DB                     A  2240    ext_read_bytes_from_file
                           A  2241    
0017DB CC 3A 17 00         A  2242    				call z,mbase_hl					                           A  2243    				
0017DF                     A  2244    os_read_bytes_from_file
                           A  2245    
0017DF 22 C9 60 00         A  2246    				ld (fs_ez80_address),hl			0017E3 CD EB 55 00         A  2247    				call fs_read_data_command
0017E7 38 D4               A  2248    				jr c,os_fferr
0017E9 C9                  A  2249    				ret
                           A  2250    
                           A  2251    ;----------------------------------------------
                           A  2252    
                           A  2253    ; Before calling, set xHL = address of zero ter
                           A  2254    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  47


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0017EA CC 3A 17 00         A  2255    ext_create_file	call z,mbase_hl
                           A  2256    
0017EE CD 33 5E 00         A  2257    os_create_file	call fs_hl_to_filename
0017F2 CD C3 58 00         A  2258    				call fs_create_file_command		0017F6 DA BD 17 00         A  2259    				jp c,os_fferr					0017FA C9                  A  2260    				ret
                           A  2261    
                           A  2262    ;----------------------------------------------
                           A  2263    
0017FB                     A  2264    ext_write_bytes_to_file
                           A  2265    
0017FB CC 3A 17 00         A  2266    				call z,mbase_hl
0017FF CC 4B 17 00         A  2267    				call z,mbase_de
                           A  2268    
001803                     A  2269    os_write_bytes_to_file
                           A  2270    
                           A  2271    ; Before calling, set..
                           A  2272    
                           A  2273    ; xDE   = address to save data from
                           A  2274    ; xBC   = number of bytes to save
                           A  2275    ; xHL   = address of null-terminated ascii name
                           A  2276    
                           A  2277    ; On return:
                           A  2278    
                           A  2279    ; If zero flag NOT set, there was an error.
                           A  2280    ; If   A = $00, b = hardware error code
                           A  2281    ; Else A = File system error code
                           A  2282    
                           A  2283    ; NOTE:
                           A  2284    ; Will return 'file not found' if the file has 
                           A  2285    				
001803 ED43 C0 60 00       A  2286    				ld (fs_file_transfer_length),bc
001808 ED53 C9 60 00       A  2287    				ld (fs_ez80_address),de	 	
00180D CD 33 5E 00         A  2288    				call fs_hl_to_filename
001811 CD F5 58 00         A  2289    				call fs_write_bytes_to_file_com
001815 DA BD 17 00         A  2290    				jp c,os_fferr
001819 C9                  A  2291    				ret
                           A  2292    		
                           A  2293    		
                           A  2294    ;----------------------------------------------
                           A  2295    	
                           A  2296    
00181A                     A  2297    os_check_volume_format
                           A  2298    
00181A E5                  A  2299    				push hl
00181B CD EE 53 00         A  2300    				call fs_check_disk_format
00181F E1                  A  2301    				pop hl
001820 DA BD 17 00         A  2302    os_rffsc		jp c,os_fferr
001824 C9                  A  2303    				ret
                           A  2304    
                           A  2305    ;----------------------------------------------
                           A  2306    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  48


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2307    
001825 7B                  A  2308    ext_format		ld a,e
001826 CC 3A 17 00         A  2309    				call z,mbase_hl					                           A  2310    
00182A DD21 2E 6C 00       A  2311    os_format		ld ix,current_driver
00182F DD5E00              A  2312    				ld e,(ix)
001832 D5                  A  2313    				push de
001833 DDE5                A  2314    				push ix
001835 CD 9C 2C 00         A  2315    				call setup_dev_format			001839 38 05               A  2316    				jr c,osfdok
                           A  2317    				
00183B 3ED0                A  2318    				ld a,0d0h						00183D B7                  A  2319    				or a
00183E 18 04               A  2320    				jr osfdbad
                           A  2321    				
001840 CD 00 52 00         A  2322    osfdok			call fs_format_partition
                           A  2323    			
001844 DDE1                A  2324    osfdbad			pop ix							001846 D1                  A  2325    				pop de
001847 DD7300              A  2326    				ld (ix),e
00184A 18 D4               A  2327    				jr os_rffsc
                           A  2328    
                           A  2329    
                           A  2330    ;----------------------------------------------
                           A  2331    
                           A  2332    
00184C CC 3A 17 00         A  2333    ext_make_dir	call z,mbase_hl					                           A  2334    
001850 CD 33 5E 00         A  2335    os_make_dir		call fs_hl_to_filename
001854 CD 3B 57 00         A  2336    				call fs_make_dir_command
001858 18 C6               A  2337    				jr os_rffsc
                           A  2338    
                           A  2339    
                           A  2340    ;----------------------------------------------
                           A  2341    
                           A  2342    
00185A CC 3A 17 00         A  2343    ext_change_dir	call z,mbase_hl					                           A  2344    
00185E CD 33 5E 00         A  2345    os_change_dir	call fs_hl_to_filename
001862 CD 41 55 00         A  2346    				call fs_change_dir_command
001866 18 B8               A  2347    				jr os_rffsc
                           A  2348    				
                           A  2349    	
                           A  2350    ;----------------------------------------------
                           A  2351    	
                           A  2352    	
001868 CD 74 55 00         A  2353    os_parent_dir	call fs_parent_dir_command
00186C 18 B2               A  2354    				jr os_rffsc
                           A  2355    				
                           A  2356    
                           A  2357    ;----------------------------------------------
                           A  2358    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  49


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2359    	
00186E CD 68 55 00         A  2360    os_root_dir		call fs_goto_root_dir_command
001872 18 AC               A  2361    				jr os_rffsc
                           A  2362    
                           A  2363    
                           A  2364    ;----------------------------------------------
                           A  2365    
                           A  2366    
001874 CC 3A 17 00         A  2367    ext_erase_file	call z,mbase_hl					                           A  2368    
001878 CD 33 5E 00         A  2369    os_erase_file	call fs_hl_to_filename
00187C CD 8C 5A 00         A  2370    				call fs_erase_file_command
001880 18 9E               A  2371    				jr os_rffsc
                           A  2372    	
                           A  2373    
                           A  2374    ;----------------------------------------------
                           A  2375    
                           A  2376    
001882                     A  2377    os_goto_first_dir_entry	
                           A  2378    
001882 CD E7 5A 00         A  2379    				call fs_goto_first_dir_entry
001886 18 98               A  2380    				jr os_rffsc
                           A  2381    
                           A  2382    
                           A  2383    ;----------------------------------------------
                           A  2384    
                           A  2385    
001888                     A  2386    os_get_dir_entry		
                           A  2387    
001888 CD FE 5A 00         A  2388    				call fs_get_dir_entry	
00188C 18 92               A  2389    				jr os_rffsc
                           A  2390    
                           A  2391    
                           A  2392    ;----------------------------------------------
                           A  2393    
                           A  2394    
00188E                     A  2395    os_goto_next_dir_entry	
                           A  2396    	
00188E CD 8B 5B 00         A  2397    				call fs_goto_next_dir_entry	
001892 18 8C               A  2398    				jr os_rffsc
                           A  2399    
                           A  2400    
                           A  2401    ;----------------------------------------------
                           A  2402    
                           A  2403    
001894                     A  2404    os_get_current_dir_name
                           A  2405    
001894 CD 01 5F 00         A  2406    				call fs_get_current_dir_name
001898 18 86               A  2407    				jr os_rffsc
                           A  2408    				
                           A  2409    
                           A  2410    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  50


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2411    
                           A  2412    
00189A CC 3A 17 00         A  2413    ext_rename_file	call z,mbase_hl
00189E CC 4B 17 00         A  2414    				call z,mbase_de
                           A  2415    
0018A2 D5                  A  2416    os_rename_file	push de
0018A3 CD 2D 5E 00         A  2417    				call fs_hl_to_alt_filename		0018A7 E1                  A  2418    				pop hl				
0018A8 CD 33 5E 00         A  2419    				call fs_hl_to_filename	
0018AC CD A3 5A 00         A  2420    				call fs_rename_command
0018B0 C3 20 18 00         A  2421    				jr os_rffsc
                           A  2422    				
                           A  2423    
                           A  2424    ;----------------------------------------------
                           A  2425    
                           A  2426    
0018B4 CC 3A 17 00         A  2427    ext_delete_dir	call z,mbase_hl					                           A  2428    
0018B8 CD 33 5E 00         A  2429    os_delete_dir	call fs_hl_to_filename
0018BC CD 14 58 00         A  2430    				call fs_delete_dir_command
0018C0 C3 20 18 00         A  2431    				jp os_rffsc
                           A  2432    	
                           A  2433    	
                           A  2434    ;----- LOW LEVEL SECTOR ACCESS ETC FOR EXTERNAL
                           A  2435    
                           A  2436    
0018C4                     A  2437    ext_read_sector
0018C4 CD 0F 19 00         A  2438    				call ext_sector_access_preamble
0018C8 C0                  A  2439    				ret nz
0018C9 32 2E 6C 00         A  2440    				ld (current_driver),a
0018CD CD D8 5F 00         A  2441    				call fs_read_sector
0018D1 20 11               A  2442    				jr nz,sect_done
0018D3 38 0F               A  2443    				jr c,sect_done
0018D5 21000800            A  2444    				ld hl,sector_buffer
0018D9 ED5B 3E 6C 00       A  2445    				ld de,(sector_rd_wr_addr)
0018DE 01000200            A  2446    				ld bc,512
0018E2 EDB0                A  2447    				ldir			
0018E4 F5                  A  2448    sect_done		push af
0018E5 3A 5E 6D 00         A  2449    				ld a,(sys_driver_backup)		0018E9 32 2E 6C 00         A  2450    				ld (current_driver),a
0018ED F1                  A  2451    				pop af
0018EE C3 20 18 00         A  2452    				jp os_rffsc
                           A  2453    				
                           A  2454    
0018F2                     A  2455    ext_write_sector
                           A  2456    			
0018F2 CD 0F 19 00         A  2457    				call ext_sector_access_preamble
0018F6 C0                  A  2458    				ret nz
0018F7 32 2E 6C 00         A  2459    				ld (current_driver),a
0018FB 2A 3E 6C 00         A  2460    				ld hl,(sector_rd_wr_addr)
0018FF 11000800            A  2461    				ld de,sector_buffer
001903 01000200            A  2462    				ld bc,512
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  51


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001907 EDB0                A  2463    				ldir			
001909 CD 01 60 00         A  2464    				call fs_write_sector
00190D 18 D5               A  2465    				jr sect_done
                           A  2466    
                           A  2467    
00190F                     A  2468    ext_sector_access_preamble
                           A  2469    
00190F CC 3A 17 00         A  2470    				call z,mbase_hl
001913 22 3E 6C 00         A  2471    				ld (sector_rd_wr_addr),hl
                           A  2472    				
001917 78                  A  2473    				ld a,b
001918 F5                  A  2474    				push af							001919 DD21 10 6E 00       A  2475    				ld ix,sector_lba0
00191E DD1F00              A  2476    				ld (ix),de						001921 DD7103              A  2477    				ld (ix+3),c
001924 CD 33 1C 00         A  2478    				call dev_to_driver_lookup		001928 E5                  A  2479    				push hl
001929 DDE1                A  2480    				pop ix
00192B 2A 10 6E 00         A  2481    				ld hl,(sector_lba0)				00192F 3A 13 6E 00         A  2482    				ld a,(sector_lba3)				001933 DD0701              A  2483    				ld bc,(ix+1)					001936 B7                  A  2484    				or a							001937 ED42                A  2485    				sbc hl,bc
001939 DD9E04              A  2486    				sbc a,(ix+4)
00193C 38 05               A  2487    				jr c,range_ok
00193E F1                  A  2488    				pop af
00193F 3ED5                A  2489    				ld a,0d5h						001941 B7                  A  2490    				or a							001942 C9                  A  2491    				ret
                           A  2492    	
001943 3A 2E 6C 00         A  2493    range_ok		ld a,(current_driver)
001947 32 5E 6D 00         A  2494    				ld (sys_driver_backup),a
00194B F1                  A  2495    				pop af							00194C CD 33 1C 00         A  2496    				call dev_to_driver_lookup
001950 30 02               A  2497    				jr nc,bad_dev
001952 BF                  A  2498    os_null			cp a							001953 C9                  A  2499    				ret
                           A  2500    					
001954 3ED0                A  2501    bad_dev			ld a,0d0h						001956 B7                  A  2502    				or a							001957 C9                  A  2503    				ret	
                           A  2504    			
                           A  2505    
                           A  2506    ;----------------------------------------------
                           A  2507    
                           A  2508    
001958                     A  2509    os_get_device_info
                           A  2510    
001958 21 D9 6C 00         A  2511    				ld hl,host_device_hardware_info
00195C 11 27 45 00         A  2512    				ld de,driver_table
001960 3A 2F 6C 00         A  2513    				ld a,(device_count)
001964 47                  A  2514    				ld b,a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  52


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001965 3A 2E 6C 00         A  2515    				ld a,(current_driver)
001969 BF                  A  2516    				cp a
00196A C9                  A  2517    				ret
                           A  2518    
                           A  2519    
                           A  2520    
                           A  2521    
00196B                     A  2522    os_get_volume_info
                           A  2523    
00196B 21 59 6C 00         A  2524    				ld hl,volume_mount_list	
00196F 3A 30 6C 00         A  2525    				ld a,(volume_count)
001973 47                  A  2526    				ld b,a
001974 3A 2D 6C 00         A  2527    				ld a,(current_volume)
001978 C9                  A  2528    				ret
                           A  2529    				
                           A  2530    		
                           A  2531    ;----------------------------------------------
                           A  2532    
                           A  2533    
001979                     A  2534    ext_serial_get_header
                           A  2535    
001979 CC 3A 17 00         A  2536    				call z,mbase_hl
00197D 7B                  A  2537    				ld a,e
00197E CD 93 4F 00         A  2538    				call serial_get_header
001982 DDE5                A  2539    				push ix
001984 D1                  A  2540    				pop de
001985 C9                  A  2541    				ret
                           A  2542    				
                           A  2543    				
001986                     A  2544    ext_serial_receive_file
                           A  2545    				
001986 CC 3A 17 00         A  2546    				call z,mbase_hl
00198A CD 2E 50 00         A  2547    				call serial_receive_file
00198E C9                  A  2548    				ret
                           A  2549    				
                           A  2550    	
00198F                     A  2551    ext_serial_send_file
                           A  2552    
00198F CC 3A 17 00         A  2553    				call z,mbase_hl					001993 CC 4B 17 00         A  2554    				call z,mbase_de					001997 D5                  A  2555    				push de	
001998 DDE1                A  2556    				pop ix							00199A C5                  A  2557    				push bc							00199B D1                  A  2558    				pop de							00199C CD F7 50 00         A  2559    				call serial_send_file
0019A0 C9                  A  2560    				ret
                           A  2561    
                           A  2562    
0019A1                     A  2563    ext_serial_tx
0019A1 7B                  A  2564    				ld a,e
0019A2 CD 11 48 00         A  2565    				call send_serial_byte
0019A6 AF                  A  2566    				xor a							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  53


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
0019A7 C9                  A  2567    				ret
                           A  2568    
                           A  2569    
0019A8                     A  2570    ext_serial_rx
0019A8 7B                  A  2571    				ld a,e
0019A9 32 FD 6B 00         A  2572    				ld (serial_timeout),a
0019AD CD D6 47 00         A  2573    				call receive_serial_byte
0019B1 C9                  A  2574    				ret
                           A  2575    				
                           A  2576    
                           A  2577    ;----------------------------------------------
                           A  2578    
0019B2                     A  2579    ext_mount_volumes
                           A  2580    
0019B2 7B                  A  2581    				ld a,e
                           A  2582    
0019B3                     A  2583    os_mount_volumes
                           A  2584    				
0019B3 32 5F 6D 00         A  2585    				ld (os_quiet_mode),a			                           A  2586    				
0019B7 21 25 62 00         A  2587    				ld hl,storage_txt
0019BB CD FB 10 00         A  2588    				call os_print_string_cond
0019BF 3A 2D 6C 00         A  2589    				ld a,(current_volume)
0019C3 F5                  A  2590    				push af
0019C4 CD FA 19 00         A  2591    				call mount_go
0019C8 F1                  A  2592    				pop af	
0019C9 32 2D 6C 00         A  2593    				ld (current_volume),a			0019CD CD 74 1C 00         A  2594    				call fs_set_driver_for_volume	0019D1 CD EE 53 00         A  2595    				call fs_check_disk_format		0019D5 38 01               A  2596    				jr c,m_inv_vol	
0019D7 C8                  A  2597    				ret z
                           A  2598    
0019D8 AF                  A  2599    m_inv_vol		xor a							0019D9 F5                  A  2600    m_try_vol_lp	push af							0019DA CD 49 1C 00         A  2601    				call os_change_volume			0019DE 20 03               A  2602    				jr nz,pmvbad					0019E0 F1                  A  2603    				pop af
0019E1 AF                  A  2604    				xor a
0019E2 C9                  A  2605    				ret
0019E3 F1                  A  2606    pmvbad			pop af
0019E4 3C                  A  2607    				inc a							0019E5 FE08                A  2608    				cp max_volumes
0019E7 20 F0               A  2609    				jr nz,m_try_vol_lp
                           A  2610    				
0019E9 3A 2F 6C 00         A  2611    				ld a,(device_count)
0019ED B7                  A  2612    				or a
0019EE 20 08               A  2613    				jr nz,mfsdevs
0019F0 21 01 6A 00         A  2614    				ld hl,none_found_msg
0019F4 CD D8 15 00         A  2615    				call os_show_packed_text_cond
0019F8 AF                  A  2616    mfsdevs			xor a
0019F9 C9                  A  2617    				ret
                           A  2618    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  54


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2619    
                           A  2620    
0019FA 21 59 6C 00         A  2621    mount_go		ld hl,volume_mount_list			0019FE 01800000            A  2622    				ld bc,max_volumes*16
001A02 AF                  A  2623    clrdl_lp		xor a
001A03 CD 13 17 00         A  2624    				call os_bchl_memfill
                           A  2625    								
001A07 21 41 6C 00         A  2626    				ld hl,volume_dir_clusters		001A0B 01180000            A  2627    				ld bc,max_volumes*3		
001A0F AF                  A  2628    				xor a	
001A10 CD 13 17 00         A  2629    				call os_bchl_memfill	
                           A  2630    			
001A14 11 D9 6C 00         A  2631    				ld de,host_device_hardware_info
001A18 ED53 59 6D 00       A  2632    				ld (dhwn_temp_pointer),de
                           A  2633    				
001A1D FD21 59 6C 00       A  2634    				ld iy,volume_mount_list
001A22 AF                  A  2635    				xor a
001A23 32 30 6C 00         A  2636    				ld (volume_count),a
001A27 32 2F 6C 00         A  2637    				ld (device_count),a
001A2B 32 2E 6C 00         A  2638    mnt_loop		ld (current_driver),a			001A2F CD BF 1B 00         A  2639    				call locate_driver_base			001A33 21000000            A  2640    				ld hl,0
001A37 AF                  A  2641    				xor a
001A38 ED5A                A  2642    				adc hl,de
001A3A C8                  A  2643    				ret z							001A3B EB                  A  2644    				ex de,hl						001A3C FDE5                A  2645    				push iy
001A3E CD 4F 1A 00         A  2646    				call find_dev					001A42 FDE1                A  2647    				pop iy							001A44 CC 50 1A 00         A  2648    				call z,got_dev		
001A48 3A 2E 6C 00         A  2649    nxt_drv			ld a,(current_driver)			001A4C 3C                  A  2650    				inc a
001A4D 18 DC               A  2651    				jr mnt_loop
                           A  2652    
                           A  2653    				
001A4F E9                  A  2654    find_dev		jp (hl)
                           A  2655    			
                           A  2656    			
001A50 E5                  A  2657    got_dev			push hl							001A51 D5                  A  2658    				push de							001A52 C5                  A  2659    				push bc
001A53 CD A1 15 00         A  2660    				call os_new_line_cond			001A57 015B0100            A  2661    				ld bc,015bh
001A5B CD D0 1B 00         A  2662    				call os_print_multiple_chars_co
001A5F 3A 2E 6C 00         A  2663    				ld a,(current_driver)
001A63 CD BF 1B 00         A  2664    				call locate_driver_base
001A67 210C0000            A  2665    				ld hl,0ch
001A6B 19                  A  2666    				add hl,de
001A6C CD FB 10 00         A  2667    				call os_print_string_cond		001A70 015D0100            A  2668    				ld bc,015dh
001A74 CD D0 1B 00         A  2669    				call os_print_multiple_chars_co
001A78 C1                  A  2670    				pop bc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  55


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001A79 D1                  A  2671    				pop de
001A7A AF                  A  2672    				xor a
001A7B 32 5D 6D 00         A  2673    				ld (vols_on_device_temp),a
                           A  2674    				
001A7F 21 2F 6C 00         A  2675    				ld hl,device_count
001A83 34                  A  2676    				inc (hl)						001A84 3A 2E 6C 00         A  2677    				ld a,(current_driver)
001A88 2A 59 6D 00         A  2678    				ld hl,(dhwn_temp_pointer)	
001A8C 77                  A  2679    				ld (hl),a
001A8D 23                  A  2680    				inc hl
001A8E 73                  A  2681    				ld (hl),e						001A8F FD7304              A  2682    				ld (iy+4),e						001A92 23                  A  2683    				inc hl							001A93 72                  A  2684    				ld (hl),d
001A94 FD7205              A  2685    				ld (iy+5),d
001A97 23                  A  2686    				inc hl
001A98 71                  A  2687    				ld (hl),c			
001A99 FD7106              A  2688    				ld (iy+6),c
001A9C 23                  A  2689    				inc hl
001A9D 70                  A  2690    				ld (hl),b						001A9E 23                  A  2691    				inc hl
001A9F D1                  A  2692    				pop de
001AA0 EB                  A  2693    				ex de,hl
001AA1 01160000            A  2694    				ld bc,22
001AA5 EDB0                A  2695    				ldir							001AA7 AF                  A  2696    				xor a
001AA8 0605                A  2697    				ld b,5		
001AAA 12                  A  2698    clrrode			ld (de),a						001AAB 13                  A  2699    				inc de
001AAC 10 FC               A  2700    				djnz clrrode
001AAE ED53 59 6D 00       A  2701    				ld (dhwn_temp_pointer),de		                           A  2702    					
001AB3 AF                  A  2703    				xor a							001AB4 32 5C 6D 00         A  2704    fnxtpart		ld (partition_temp),a
001AB8 FDE5                A  2705    				push iy
001ABA CD 9B 53 00         A  2706    				call fs_get_partition_info
001ABE FDE1                A  2707    				pop iy
001AC0 38 36               A  2708    				jr c,nxt_dev					001AC2 FECE                A  2709    				cp 0ceh
001AC4 28 32               A  2710    				jr z,nxt_dev					001AC6 FECF                A  2711    				cp 0cfh							001AC8 28 2E               A  2712    				jr z,nxt_dev					001ACA F5                  A  2713    				push af
001ACB FD360001            A  2714    				ld (iy),1						001ACF 3A 2E 6C 00         A  2715    				ld a,(current_driver)
001AD3 FD7701              A  2716    				ld (iy+1),a						001AD6 3A 5C 6D 00         A  2717    				ld a,(partition_temp)	
001ADA FD7707              A  2718    				ld (iy+7),a						001ADD F1                  A  2719    				pop af
001ADE FED3                A  2720    				cp 0d3h
001AE0 20 35               A  2721    				jr nz,dev_mbr					001AE2 AF                  A  2722    				xor a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  56


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001AE3 FD7708              A  2723    				ld (iy+8),a						001AE6 FD7709              A  2724    				ld (iy+9),a						001AE9 FD770A              A  2725    				ld (iy+10),a					001AEC FD770B              A  2726    				ld (iy+11),a
001AEF CD 4E 1B 00         A  2727    				call show_vol_info
001AF3 CD 3F 1B 00         A  2728    				call test_max_vol
001AF7 C8                  A  2729    				ret z							                           A  2730    			
001AF8 3A 5D 6D 00         A  2731    nxt_dev			ld a,(vols_on_device_temp)		001AFC B7                  A  2732    				or a
001AFD C0                  A  2733    				ret nz		
001AFE CD A0 1B 00         A  2734    				call test_quiet_mode
001B02 20 06               A  2735    				jr nz,skp_cu
001B04 3E0A                A  2736    				ld a,10
001B06 32 15 6E 00         A  2737    				ld (cursor_x),a
001B0A 21 FE 69 00         A  2738    skp_cu			ld hl,no_vols_msg				001B0E CD D8 15 00         A  2739    				call os_show_packed_text_cond
001B12 CD A1 15 00         A  2740    				call os_new_line_cond
001B16 C9                  A  2741    				ret
                           A  2742    				
001B17 DD1708              A  2743    dev_mbr			ld de,(ix+8)					001B1A FD1F08              A  2744    				ld (iy+8),de
001B1D DD7E0B              A  2745    				ld a,(ix+0bh)					001B20 FD770B              A  2746    				ld (iy+0bh),a
001B23 DD170C              A  2747    				ld de,(ix+0ch)				
001B26 FD1F04              A  2748    				ld (iy+4),de					                           A  2749    					
001B29 CD 4E 1B 00         A  2750    				call show_vol_info
001B2D CD 3F 1B 00         A  2751    				call test_max_vol	
001B31 C8                  A  2752    				ret z							001B32 3A 5C 6D 00         A  2753    				ld a,(partition_temp)
001B36 3C                  A  2754    				inc a
001B37 FE04                A  2755    				cp 4							001B39 C2 B4 1A 00         A  2756    				jr nz,fnxtpart
001B3D 18 B9               A  2757    				jr nxt_dev
                           A  2758    				
                           A  2759    
001B3F 11100000            A  2760    test_max_vol	ld de,16
001B43 FD19                A  2761    				add iy,de			
001B45 21 30 6C 00         A  2762    				ld hl,volume_count
001B49 34                  A  2763    				inc (hl)
001B4A 7E                  A  2764    				ld a,(hl)
001B4B FE08                A  2765    				cp max_volumes
001B4D C9                  A  2766    				ret
                           A  2767    			
                           A  2768    			
001B4E CD A0 1B 00         A  2769    show_vol_info	call test_quiet_mode
001B52 20 06               A  2770    				jr nz,skp_cm2
001B54 3E09                A  2771    				ld a,9			
001B56 32 15 6E 00         A  2772    				ld (cursor_x),a
001B5A 3A 30 6C 00         A  2773    skp_cm2			ld a,(volume_count)
001B5E F5                  A  2774    				push af
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  57


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001B5F C630                A  2775    				add a,30h		
001B61 32 35 6C 00         A  2776    				ld (vol_txt+4),a	
001B65 21 31 6C 00         A  2777    				ld hl,vol_txt
001B69 CD FB 10 00         A  2778    				call os_print_string_cond		001B6D 21 5D 6D 00         A  2779    				ld hl,vols_on_device_temp
001B71 CBC6                A  2780    				set 0,(hl)						                           A  2781    			
001B73 F1                  A  2782    				pop af
001B74 FDE5                A  2783    				push iy
001B76 CD 49 1C 00         A  2784    				call os_change_volume			001B7A 28 0A               A  2785    				jr z,vform_ok					001B7C 21 AE 69 00         A  2786    svi_fe			ld hl,format_err_msg		
001B80 CD D8 15 00         A  2787    svi_pem			call os_show_packed_text_cond	001B84 18 0D               A  2788    				jr skpsvl
                           A  2789    			
001B86 CD E2 5B 00         A  2790    vform_ok		call fs_get_volume_label
001B8A 38 0E               A  2791    				jr c,svi_hwe
001B8C B7                  A  2792    				or a
001B8D 20 ED               A  2793    				jr nz,svi_fe
001B8F CD FB 10 00         A  2794    				call os_print_string_cond		                           A  2795    			
001B93 CD A1 15 00         A  2796    skpsvl			call os_new_line_cond
001B97 FDE1                A  2797    				pop iy
001B99 C9                  A  2798    				ret
                           A  2799    				
001B9A 21 F3 67 00         A  2800    svi_hwe			ld hl,disk_err_msg
001B9E 18 E0               A  2801    				jr svi_pem
                           A  2802    			
                           A  2803    			
001BA0                     A  2804    test_quiet_mode
                           A  2805    			
001BA0 3A 5F 6D 00         A  2806    				ld a,(os_quiet_mode)
001BA4 B7                  A  2807    				or a
001BA5 C9                  A  2808    				ret
                           A  2809    
                           A  2810    ;----------------------------------------------
                           A  2811    
                           A  2812    
001BA6                     A  2813    show_dev_driver_name
                           A  2814    	
                           A  2815    	
001BA6 CD BF 1B 00         A  2816    				call locate_driver_base			001BAA EB                  A  2817    				ex de,hl
001BAB 110C0000            A  2818    				ld de,0ch
001BAF 19                  A  2819    				add hl,de
001BB0 CD 00 11 00         A  2820    				call os_print_string			001BB4 C5                  A  2821    				push bc
001BB5 01200100            A  2822    				ld bc,0120h
001BB9 CD D5 1B 00         A  2823    				call os_print_multiple_chars	001BBD C1                  A  2824    				pop bc
001BBE C9                  A  2825    				ret
                           A  2826    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  58


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2827    
001BBF                     A  2828    locate_driver_base
                           A  2829    
001BBF E5                  A  2830    				push hl							001BC0 11030000            A  2831    				ld de,3							001BC4 57                  A  2832    				ld d,a
001BC5 ED5C                A  2833    				mlt de
001BC7 21 27 45 00         A  2834    				ld hl,driver_table
001BCB 19                  A  2835    				add hl,de
001BCC ED17                A  2836    				ld de,(hl)
001BCE E1                  A  2837    				pop hl
001BCF C9                  A  2838    				ret
                           A  2839    				
                           A  2840    		
                           A  2841    ;----------------------------------------------
                           A  2842    
001BD0                     A  2843    os_print_multiple_chars_cond
                           A  2844    
001BD0 CD A0 1B 00         A  2845    				call test_quiet_mode
001BD4 C0                  A  2846    				ret nz
                           A  2847    			
001BD5                     A  2848    os_print_multiple_chars
                           A  2849    
                           A  2850    ;c = char
                           A  2851    ;b = count
001BD5 C5                  A  2852    				push bc
001BD6 E5                  A  2853    				push hl
001BD7 79                  A  2854    				ld a,c
001BD8 21 96 62 00         A  2855    				ld hl,rep_char_txt
001BDC 77                  A  2856    				ld (hl),a
001BDD E5                  A  2857    pmch_lp			push hl
001BDE CD 00 11 00         A  2858    				call os_print_string
001BE2 E1                  A  2859    				pop hl
001BE3 10 F8               A  2860    				djnz pmch_lp
001BE5 E1                  A  2861    				pop hl
001BE6 C1                  A  2862    				pop bc
001BE7 C9                  A  2863    				ret
                           A  2864    
                           A  2865    ;----------------------------------------------
                           A  2866    
                           A  2867    
001BE8 7B                  A  2868    ext_plot_char	ld a,e
001BE9 C3 4D 49 00         A  2869    				jp hwsc_plot_char
                           A  2870    				
                           A  2871    
                           A  2872    ;----------------------------------------------
                           A  2873    ; Some file system related routines 
                           A  2874    ;----------------------------------------------
                           A  2875    
                           A  2876    
001BED                     A  2877    fs_get_dir_cluster
                           A  2878    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  59


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  2879    
001BED F5                  A  2880    				push af							001BEE E5                  A  2881    				push hl			
001BEF CD 05 1C 00         A  2882    				call fs_get_dir_cluster_address
001BF3 ED17                A  2883    				ld de,(hl)
001BF5 E1                  A  2884    dclopdone		pop hl
001BF6 F1                  A  2885    				pop af
001BF7 BF                  A  2886    				cp a							001BF8 C9                  A  2887    				ret
                           A  2888    				
                           A  2889    
                           A  2890    
                           A  2891    
                           A  2892    
001BF9                     A  2893    fs_update_dir_cluster
                           A  2894    
001BF9 F5                  A  2895    				push af							001BFA E5                  A  2896    				push hl			
001BFB D5                  A  2897    				push de			
001BFC CD 05 1C 00         A  2898    				call fs_get_dir_cluster_address
001C00 D1                  A  2899    				pop de
001C01 ED1F                A  2900    				ld (hl),de
001C03 18 F0               A  2901    				jr dclopdone
                           A  2902    			
                           A  2903    
                           A  2904    
                           A  2905    
                           A  2906    
001C05                     A  2907    fs_get_dir_cluster_address
                           A  2908    
001C05 21 41 6C 00         A  2909    				ld hl,volume_dir_clusters		001C09 3A 2D 6C 00         A  2910    				ld a,(current_volume)	
001C0D 11030000            A  2911    				ld de,3
001C11 57                  A  2912    				ld d,a
001C12 ED5C                A  2913    				mlt de
001C14 19                  A  2914    				add hl,de
001C15 C9                  A  2915    				ret
                           A  2916    				
                           A  2917    	
                           A  2918    
                           A  2919    	
                           A  2920    	
001C16                     A  2921    fs_get_total_sectors
                           A  2922    
                           A  2923    
001C16 F5                  A  2924    				push af
001C17 E5                  A  2925    				push hl							001C18 CD 27 1C 00         A  2926    				call fs_calc_volume_offset	
001C1C 21 5D 6C 00         A  2927    				ld hl,volume_mount_list+4
001C20 19                  A  2928    				add hl,de
001C21 ED17                A  2929    				ld de,(hl)
001C23 E1                  A  2930    				pop hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  60


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001C24 F1                  A  2931    				pop af
001C25 BF                  A  2932    				cp a							001C26 C9                  A  2933    				ret
                           A  2934    
                           A  2935    
                           A  2936    
                           A  2937    
                           A  2938    
001C27                     A  2939    fs_calc_volume_offset
                           A  2940    
001C27 3A 2D 6C 00         A  2941    				ld a,(current_volume)			001C2B 11100000            A  2942    calc_vol		ld de,16
001C2F 57                  A  2943    				ld d,a
001C30 ED5C                A  2944    				mlt de
001C32 C9                  A  2945    				ret
                           A  2946    
                           A  2947    
                           A  2948    
                           A  2949    
                           A  2950    
001C33                     A  2951    dev_to_driver_lookup
                           A  2952    
001C33 21 2F 6C 00         A  2953    				ld hl,device_count				001C37 BE                  A  2954    				cp (hl)							001C38 D0                  A  2955    				ret nc
001C39 11200000            A  2956    				ld de,32						001C3D 57                  A  2957    				ld d,a
001C3E ED5C                A  2958    				mlt de
001C40 21 D9 6C 00         A  2959    				ld hl,host_device_hardware_info
001C44 19                  A  2960    				add hl,de
001C45 7E                  A  2961    				ld a,(hl)
001C46 37                  A  2962    				scf
001C47 C9                  A  2963    				ret
                           A  2964    				
                           A  2965    
                           A  2966    
001C48                     A  2967    ext_change_volume
                           A  2968    
001C48 7B                  A  2969    				ld a,e
                           A  2970    
001C49                     A  2971    os_change_volume
                           A  2972    
001C49 47                  A  2973    				ld b,a							001C4A FE08                A  2974    				cp max_volumes		
001C4C 30 22               A  2975    				jr nc,fs_ccv2					                           A  2976    			
001C4E 3A 2D 6C 00         A  2977    				ld a,(current_volume)			001C52 F5                  A  2978    				push af
001C53 78                  A  2979    				ld a,b
001C54 32 2D 6C 00         A  2980    				ld (current_volume),a			001C58 CD 74 1C 00         A  2981    				call fs_set_driver_for_volume	                           A  2982    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  61


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001C5C CD EE 53 00         A  2983    				call fs_check_disk_format		001C60 38 05               A  2984    				jr c,fs_cant_chg_vols	
001C62 20 03               A  2985    				jr nz,fs_cant_chg_vols
001C64 F1                  A  2986    				pop af							001C65 AF                  A  2987    				xor a							001C66 C9                  A  2988    				ret
                           A  2989    
                           A  2990    
001C67                     A  2991    fs_cant_chg_vols
                           A  2992    			
001C67 F1                  A  2993    				pop af
001C68 32 2D 6C 00         A  2994    				ld (current_volume),a			001C6C CD 74 1C 00         A  2995    				call fs_set_driver_for_volume	                           A  2996    				
001C70 3ECF                A  2997    fs_ccv2			ld a,0cfh						001C72 B7                  A  2998    				or a
001C73 C9                  A  2999    				ret
                           A  3000    					
                           A  3001    	
001C74                     A  3002    fs_set_driver_for_volume
                           A  3003    
001C74 CD 27 1C 00         A  3004    				call fs_calc_volume_offset		001C78 21 5A 6C 00         A  3005    				ld hl,volume_mount_list+1
001C7C 19                  A  3006    				add hl,de
001C7D 7E                  A  3007    				ld a,(hl)
001C7E 32 2E 6C 00         A  3008    				ld (current_driver),a
001C82 C9                  A  3009    				ret
                           A  3010    
                           A  3011    
                           A  3012    ;----------------------------------------------
                           A  3013    
001C83                     A  3014    ext_file_sector_list
                           A  3015    
                           A  3016    ;Input HL = cluster, E = sector offset
                           A  3017    
                           A  3018    ;Output HL = new cluster, E = new sector number
                           A  3019    ;       IX = address of LBA0 LSB of sector (int
                           A  3020    
                           A  3021    				
001C83 3A 79 60 00         A  3022    				ld a,(fs_cluster_size)
001C87 BB                  A  3023    				cp e
001C88 20 0A               A  3024    				jr nz,fsl_sc
001C8A CD 80 5E 00         A  3025    				call get_fat_entry_for_cluster
001C8E DA BD 17 00         A  3026    				jp c,os_fferr
001C92 1E00                A  3027    				ld e,0
001C94 CD 57 5F 00         A  3028    fsl_sc			call cluster_and_offset_to_lba
001C98 1C                  A  3029    				inc e
001C99 01 10 6E 00         A  3030    fsl_done		ld bc,sector_lba0
001C9D BF                  A  3031    				cp a							001C9E C9                  A  3032    				ret
                           A  3033    
                           A  3034    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  62


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  3035    
001C9F                     A  3036    os_get_disk_sector_ptr
                           A  3037     
001C9F 21 10 6E 00         A  3038    				ld hl,sector_lba0
001CA3 11000800            A  3039    				ld de,sector_buffer
001CA7 BF                  A  3040    				cp a
001CA8 C9                  A  3041    				ret
                           A  3042    				
                           A  3043    ;----------------------------------------------
                           A  3044    
                           A  3045    
001CA9 E5                  A  3046    os_count_chars	push hl							001CAA 01000000            A  3047    				ld bc,0
001CAE 7E                  A  3048    cch_lp			ld a,(hl)
001CAF B7                  A  3049    				or a
001CB0 28 04               A  3050    				jr z,cch_end
001CB2 23                  A  3051    				inc hl
001CB3 03                  A  3052    				inc bc
001CB4 18 F8               A  3053    				jr cch_lp
001CB6 E1                  A  3054    cch_end			pop hl
001CB7 C9                  A  3055    				ret
                           A  3056    				
                           A  3057    			
                           A  3058    ;----------------------------------------------
                           A  3059    ; Environment variable code V0.01
                           A  3060    ;----------------------------------------------
                           A  3061    
001CB8                     A  3062    ext_get_envar
001CB8 CC 3A 17 00         A  3063    				call z,mbase_hl
                           A  3064    
001CBC                     A  3065    os_get_envar
                           A  3066    
                           A  3067    ;Set: 		HL = name of required variable
                           A  3068    ;Returns:	ZF Set: DE = address of variable's 
                           A  3069    ;        	ZF Not Set: Couldn't find variable
                           A  3070    				
001CBC DD21FF01 00         A  3071    				ld ix,envar_list-1
001CC1 CD A9 1C 00         A  3072    env_fname		call os_count_chars				001CC5 78                  A  3073    				ld a,b
001CC6 B1                  A  3074    				or c
001CC7 28 2B               A  3075    				jr z,env_bad
                           A  3076    								
001CC9 ED1201              A  3077    env_cname		lea de,ix+1
001CCC 1A                  A  3078    				ld a,(de)
001CCD FEFF                A  3079    				cp 0ffh
001CCF 28 1F               A  3080    				jr z,unknown_env
001CD1 C5                  A  3081    				push bc
001CD2 41                  A  3082    				ld b,c
001CD3 CD CD 13 00         A  3083    				call os_compare_strings
001CD7 C1                  A  3084    				pop bc
001CD8 20 06               A  3085    				jr nz,env_nomatch
001CDA 03                  A  3086    				inc bc							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  63


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001CDB EB                  A  3087    				ex de,hl
001CDC 09                  A  3088    				add hl,bc
001CDD EB                  A  3089    				ex de,hl						001CDE AF                  A  3090    				xor a
001CDF C9                  A  3091    				ret			
                           A  3092    				
001CE0 DD23                A  3093    env_nomatch		inc ix							001CE2 CD 8C 1D 00         A  3094    				call check_envar_bounds
001CE6 20 0C               A  3095    				jr nz,env_bad
001CE8 DD7E00              A  3096    				ld a,(ix)
001CEB B7                  A  3097    				or a
001CEC 28 DB               A  3098    				jr z,env_cname
001CEE 18 F0               A  3099    				jr env_nomatch
                           A  3100    
001CF0 3E8F                A  3101    unknown_env		ld a,8fh						001CF2 B7                  A  3102    				or a
001CF3 C9                  A  3103    				ret
                           A  3104    
001CF4 3E82                A  3105    env_bad			ld a,82h						001CF6 B7                  A  3106    				or a
001CF7 C9                  A  3107    				ret	
                           A  3108    				
                           A  3109    ;----------------------------------------------
                           A  3110    
001CF8                     A  3111    ext_set_envar
                           A  3112    
                           A  3113    ;HL = addr of variable name (zero terminated)
                           A  3114    ;DE = addr of data for variable (zero terminate
                           A  3115    
                           A  3116    ;Returns:
                           A  3117    ;ZF = Set: OK
                           A  3118    ;ZF = Not Set: No enough space for new variable
                           A  3119    		
001CF8 CC 3A 17 00         A  3120    				call z,mbase_hl
001CFC CC 4B 17 00         A  3121    				call z,mbase_de
                           A  3122    
001D00 7E                  A  3123    os_set_envar	ld a,(hl)						001D01 B7                  A  3124    				or a
001D02 28 F0               A  3125    				jr z,env_bad
001D04 1A                  A  3126    				ld a,(de)
001D05 B7                  A  3127    				or a
001D06 28 EC               A  3128    				jr z,env_bad
                           A  3129    
001D08 E5                  A  3130    				push hl
001D09 D5                  A  3131    				push de
001D0A CD 56 1D 00         A  3132    				call os_delete_envar			001D0E D1                  A  3133    				pop de
001D0F E1                  A  3134    				pop hl
                           A  3135    				
001D10 DD2A 99 6F 00       A  3136    				ld ix,(envar_top_loc)			001D15 CD 8C 1D 00         A  3137    env_enlp		call check_envar_bounds
001D19 20 D9               A  3138    				jr nz,env_bad
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  64


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001D1B 7E                  A  3139    				ld a,(hl)						001D1C DD7700              A  3140    				ld (ix),a
001D1F B7                  A  3141    				or a
001D20 28 05               A  3142    				jr z,env_ndone
001D22 23                  A  3143    				inc hl
001D23 DD23                A  3144    				inc ix
001D25 18 EE               A  3145    				jr env_enlp
                           A  3146    				
001D27 CD 8C 1D 00         A  3147    env_ndone		call check_envar_bounds			001D2B 20 C7               A  3148    				jr nz,env_bad
001D2D DD36003D            A  3149    				ld (ix),'='
001D31 DD23                A  3150    				inc ix
                           A  3151    
001D33 CD 8C 1D 00         A  3152    env_evlp		call check_envar_bounds			001D37 20 BB               A  3153    				jr nz,env_bad
001D39 1A                  A  3154    				ld a,(de)
001D3A DD7700              A  3155    				ld (ix),a
001D3D B7                  A  3156    				or a
001D3E 28 05               A  3157    				jr z,env_vdone
001D40 13                  A  3158    				inc de
001D41 DD23                A  3159    				inc ix
001D43 18 EE               A  3160    				jr env_evlp
                           A  3161    
001D45 DD23                A  3162    env_vdone		inc ix
001D47 DD3600FF            A  3163    				ld (ix),0ffh
001D4B DD22 99 6F 00       A  3164    				ld (envar_top_loc),ix			001D50 AF                  A  3165    				xor a
001D51 C9                  A  3166    				ret
                           A  3167    
                           A  3168    	
                           A  3169    ;----------------------------------------------
                           A  3170    
001D52                     A  3171    ext_delete_envar
                           A  3172    
001D52 CC 3A 17 00         A  3173    				call z,mbase_hl
                           A  3174    
001D56                     A  3175    os_delete_envar
                           A  3176    
                           A  3177    ;HL = name of required variable (null terminate
                           A  3178    ;ZF = Set: OK
                           A  3179    ;ZF = Not Set: Didnt find named variable
                           A  3180    
                           A  3181    
001D56 CD BC 1C 00         A  3182    				call os_get_envar				001D5A C0                  A  3183    				ret nz
                           A  3184    				
001D5B D5                  A  3185    				push de
001D5C E1                  A  3186    				pop hl
001D5D AF                  A  3187    				xor a
001D5E ED42                A  3188    				sbc hl,bc						                           A  3189    				
001D60 13                  A  3190    env_fnxt		inc de							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  65


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
001D61 D5                  A  3191    				push de
001D62 DDE1                A  3192    				pop ix
001D64 CD 8C 1D 00         A  3193    				call check_envar_bounds
001D68 20 8A               A  3194    				jr nz,env_bad
001D6A 1A                  A  3195    				ld a,(de)
001D6B B7                  A  3196    				or a
001D6C 20 F2               A  3197    				jr nz,env_fnxt
                           A  3198    
001D6E 13                  A  3199    env_gnxt		inc de							001D6F EB                  A  3200    				ex de,hl
001D70 7E                  A  3201    env_collp		ld a,(hl)
001D71 12                  A  3202    				ld (de),a						001D72 FEFF                A  3203    				cp 0ffh
001D74 28 0F               A  3204    				jr z,env_clspd					001D76 E5                  A  3205    				push hl
001D77 DDE1                A  3206    				pop ix
001D79 CD 8C 1D 00         A  3207    				call check_envar_bounds
001D7D C2 F4 1C 00         A  3208    				jr nz,env_bad
001D81 23                  A  3209    				inc hl
001D82 13                  A  3210    				inc de
001D83 18 EB               A  3211    				jr env_collp
                           A  3212    
001D85 ED53 99 6F 00       A  3213    env_clspd		ld (envar_top_loc),de			001D8A AF                  A  3214    				xor a
001D8B C9                  A  3215    				ret
                           A  3216    				
                           A  3217    ;----------------------------------------------
                           A  3218    
001D8C                     A  3219    check_envar_bounds
                           A  3220    
001D8C C5                  A  3221    				push bc
001D8D E5                  A  3222    				push hl
001D8E DDE5                A  3223    				push ix
001D90 E1                  A  3224    				pop hl
001D91 01010400            A  3225    				ld bc,1+(envar_list+envar_buffe
001D95 AF                  A  3226    				xor a
001D96 ED42                A  3227    				sbc hl,bc
001D98 38 05               A  3228    				jr c,env_bok
001D9A AF                  A  3229    				xor a
001D9B 3C                  A  3230    				inc a
001D9C E1                  A  3231    				pop hl
001D9D C1                  A  3232    				pop bc
001D9E C9                  A  3233    				ret
                           A  3234    
001D9F AF                  A  3235    env_bok			xor a
001DA0 E1                  A  3236    				pop hl
001DA1 C1                  A  3237    				pop bc
001DA2 C9                  A  3238    				ret
                           A  3239    						
                           A  3240    ;----------------------------------------------
                           A  3241    
001DA3                     A  3242    os_get_keymap_location
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  66


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  3243    
001DA3 21 61 6A 00         A  3244    				ld hl,unshifted_keymap
001DA7 BF                  A  3245    				cp a							001DA8 C9                  A  3246    				ret
                           A  3247    
                           A  3248    
                           A  3249    ;----------------------------------------------
                           A  3250    
                           A  3251    
001DA9 CC 3A 17 00         A  3252    ext_play_audio	call z,mbase_hl
                           A  3253    				
001DAD CD 5B 4E 00         A  3254    os_play_audio	call hwsc_play_audio
001DB1 C9                  A  3255    				ret
                           A  3256    				
                           A  3257    ;----------------------------------------------
                           A  3258    
001DB2 E5                  A  3259    test_de			push hl
001DB3 21000000            A  3260    				ld hl,0
001DB7 ED5A                A  3261    				adc hl,de
001DB9 E1                  A  3262    				pop hl
001DBA C9                  A  3263    				ret
                           A  3264    
                           A  3265    ;==============================================
                           A  3266    ; Internal OS command routines
                           A  3267    ;==============================================
                           A  3268    
                           B     0    	include 'commands\c.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"c" - Copy memory command. V0.02 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
001DBB                     B     5    os_cmd_c
                           B     6    
001DBB CD F1 1D 00         B     7    				call get_start_and_end			                           B     8    				
001DBF CD 1A 1E 00         B     9    				call hexword_or_bust			001DC3 CA A2 17 00         B    10    				jp z,os_no_d_addr_error
001DC7 ED53 23 6E 00       B    11    				ld (copy_dest_address),de
                           B    12    						
001DCC CD DF 1D 00         B    13    				call test_mem_range				001DD0 DA A6 17 00         B    14    				jp c,os_range_error				001DD4 ED5B 23 6E 00       B    15    				ld de,(copy_dest_address)
001DD9 EDB0                B    16    				ldir
                           B    17    
001DDB 3E20                B    18    copy_done		ld a,020h						001DDD B7                  B    19    				or a
001DDE C9                  B    20    				ret
                           B    21    			
                           B    22    			
                           B    23    ;----------------------------------------------
                           B    24    			
001DDF                     B    25    test_mem_range
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  67


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\c.asm
                           B    26    			
                           B    27    ; on return:
                           B    28    ;
                           B    29    ; carry flag: Set = bad range
                           B    30    ; xBC = run length on return
                           B    31    ; xHL = start address
                           B    32    			
001DDF 2A 20 6E 00         B    33    				ld hl,(cmdop_end_address)	
001DE3 ED4B 1D 6E 00       B    34    				ld bc,(cmdop_start_address)
001DE8 C5                  B    35    				push bc
001DE9 AF                  B    36    				xor a
001DEA ED42                B    37    				sbc hl,bc
001DEC E5                  B    38    				push hl
001DED C1                  B    39    				pop bc
001DEE 03                  B    40    				inc bc
001DEF E1                  B    41    				pop hl
001DF0 C9                  B    42    				ret
                           B    43    				
                           B    44    ;----------------------------------------------
                           B    45    			
001DF1                     B    46    get_start_and_end
                           B    47    			
001DF1 CD 7D 12 00         B    48    				call ascii_to_hexword			001DF5 ED53 1D 6E 00       B    49    				ld (cmdop_start_address),de
001DFA 23                  B    50    				inc hl
001DFB 28 09               B    51    				jr z,st_addrok
001DFD E1                  B    52    				pop hl							001DFE FE82                B    53    				cp 82h							001E00 28 02               B    54    				jr z,c_badhex
001E02 3E16                B    55    				ld a,016h						001E04 B7                  B    56    c_badhex		or a
001E05 C9                  B    57    				ret
                           B    58    				
001E06 CD 7D 12 00         B    59    st_addrok		call ascii_to_hexword			001E0A ED53 20 6E 00       B    60    				ld (cmdop_end_address),de
001E0F 23                  B    61    				inc hl
001E10 B7                  B    62    				or a
001E11 C8                  B    63    				ret z
001E12 E1                  B    64    				pop hl							001E13 FE82                B    65    				cp 82h							001E15 28 ED               B    66    				jr z,c_badhex
001E17 3E1C                B    67    				ld a,01ch						001E19 C9                  B    68    				ret
                           B    69    				
                           B    70    ;----------------------------------------------
                           B    71    
001E1A                     B    72    hexword_or_bust
                           B    73    
                           B    74    ; Set HL to string address:
                           B    75    ; Returns to parent routine ONLY if the string 
                           B    76    ; DE = hex word. If no hex found, the zero flag
                           B    77    ; If chars are invalid hex, returns to grandpar
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  68


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\c.asm
                           B    78    
001E1A CD 7D 12 00         B    79    				call ascii_to_hexword		
001E1E FE82                B    80    				cp 82h
001E20 20 03               B    81    				jr nz,hex_good
001E22 E1                  B    82    				pop hl						; r
001E23 B7                  B    83    				or a	
001E24 C9                  B    84    				ret			 
001E25 FE81                B    85    hex_good		cp 081h						; n
001E27 C9                  B    86    				ret
                           B    87    	
                           B    88    ;----------------------------------------------
                           B    89    
                           B     0    	include 'commands\cd.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'cd' - Change Dir command. V0.03 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
001E28                     B     5    os_cmd_cd	
                           B     6    
001E28 CD 1A 18 00         B     7    				call os_check_volume_format	
001E2C C0                  B     8    				ret nz
                           B     9    				
001E2D 7E                  B    10    				ld a,(hl)						001E2E B7                  B    11    				or a				
001E2F CA 6E 1E 00         B    12    				jp z,cd_show_path		
                           B    13    					
001E33 7E                  B    14    				ld a,(hl)						001E34 23                  B    15    				inc hl
001E35 46                  B    16    				ld b,(hl)
001E36 2B                  B    17    				dec hl
001E37 FE2E                B    18    				cp '.'			
001E39 20 08               B    19    				jr nz,cd_nual
001E3B B8                  B    20    				cp b
001E3C 20 05               B    21    				jr nz,cd_nual
001E3E CD 68 18 00         B    22    				call os_parent_dir	
001E42 C9                  B    23    				ret
                           B    24    			
                           B    25    			
001E43 FE2F                B    26    cd_nual			cp 02fh			
001E45 20 05               B    27    				jr nz,cd_nogor					001E47 CD 6E 18 00         B    28    				call os_root_dir	
001E4B C9                  B    29    				ret
                           B    30    				
                           B    31    				
001E4C CD 24 10 00         B    32    cd_nogor		call test_volx					001E50 20 0C               B    33    				jr nz,notvolx
001E52 D630                B    34    				sub 30h
001E54 CD 49 1C 00         B    35    				call os_change_volume
001E58 C0                  B    36    				ret nz
001E59 CD 6E 18 00         B    37    				call os_root_dir
001E5D C9                  B    38    				ret
                           B    39    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  69


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\cd.asm
                           B    40    				
001E5E CD 12 3E 00         B    41    notvolx			call os_cache_original_vol_dir
001E62 3E01                B    42    				ld a,1
001E64 CD 93 3D 00         B    43    				call os_parse_path_string
001E68 C8                  B    44    				ret z
001E69 CD FD 3D 00         B    45    				call os_restore_original_vol_di
001E6D C9                  B    46    				ret
                           B    47    				
                           B    48    ;----------------------------------------------
                           B    49    			
001E6E                     B    50    cd_show_path
                           B    51    			
                           B    52    			
       00000010            B    53    max_dirs	equ 16
                           B    54    			
001E6E 0610                B    55    				ld b,max_dirs
001E70 0E00                B    56    				ld c,0
001E72 C5                  B    57    lp1				push bc
001E73 CD ED 1B 00         B    58    				call fs_get_dir_cluster
001E77 C1                  B    59    				pop bc
001E78 D5                  B    60    				push de
001E79 0C                  B    61    				inc c
001E7A C5                  B    62    				push bc
001E7B CD 68 18 00         B    63    				call os_parent_dir
001E7F C1                  B    64    				pop bc
001E80 20 02               B    65    				jr nz,shdir_lp
001E82 10 EE               B    66    				djnz lp1
                           B    67    				
001E84 D1                  B    68    shdir_lp		pop de
001E85 C5                  B    69    				push bc
001E86 CD F9 1B 00         B    70    				call fs_update_dir_cluster
001E8A CD 94 18 00         B    71    				call os_get_current_dir_name
001E8E CD 00 11 00         B    72    				call os_print_string
001E92 C1                  B    73    				pop bc
001E93 0D                  B    74    				dec c
001E94 28 11               B    75    				jr z,cd_sp_done
001E96 2B                  B    76    				dec hl
001E97 2B                  B    77    				dec hl
001E98 7E                  B    78    				ld a,(hl)
001E99 FE3A                B    79    				cp ':'
001E9B 28 E7               B    80    				jr z,shdir_lp				;no
001E9D 21 AD 1E 00         B    81    				ld hl,cd_fwdslash_txt
001EA1 CD 00 11 00         B    82    				call os_print_string
001EA5 18 DD               B    83    				jr shdir_lp
                           B    84    			
001EA7 CD A6 15 00         B    85    cd_sp_done		call os_new_line	
001EAB AF                  B    86    				xor a
001EAC C9                  B    87    				ret
                           B    88    			
001EAD 2F00                B    89    cd_fwdslash_txt	db '/',0	
                           B    90    			
                           B    91    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  70


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\cls.asm
                           B     0    	include 'commands\cls.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"cls" - Clear screen command. V0.02 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
001EAF                     B     5    os_cmd_cls
                           B     6    
001EAF CD D7 48 00         B     7    				call hwsc_clear_screen
001EB3 AF                  B     8    				xor a
001EB4 C9                  B     9    				ret
                           B    10    				
                           B    11    ;----------------------------------------------
                           B    12    	
                           B     0    	include 'commands\colon.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;":" for write hex bytes command. V0.02 - ADL m
                           B     3    ;----------------------------------------------
                           B     4    
001EB5                     B     5    os_cmd_colon
                           B     6    	
001EB5 CD 1A 1E 00         B     7    				call hexword_or_bust			001EB9 CA 92 17 00         B     8    				jp z,os_no_start_addr			001EBD D5                  B     9    				push de
001EBE DDE1                B    10    				pop ix							                           B    11    			
001EC0 CD 1A 1E 00         B    12    wmblp			call hexword_or_bust			001EC4 28 07               B    13    				jr z,os_ccmdn
001EC6 DD7300              B    14    				ld (ix),e						001EC9 DD23                B    15    				inc ix
001ECB 18 F3               B    16    				jr wmblp
                           B    17    
001ECD AF                  B    18    os_ccmdn		xor a
001ECE C9                  B    19    				ret
                           B    20    		
                           B    21    
                           B    22    ;----------------------------------------------
                           B     0    	include 'commands\d.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; OS "D" Command: EZ80 Disassembler V0.02
                           B     3    ; Totally and utterly unoptimized!
                           B     4    ;----------------------------------------------
                           B     5    
001ECF FD21 B6 24 00       B     6    os_cmd_d		ld iy,prefix_bits_loc
001ED4 FDCB 07 C6          B     7    				set adl_dis,(iy+var_adl)
                           B     8    
001ED8 CD 1A 1E 00         B     9    os_cmd_d_go		call hexword_or_bust			001EDC 28 05               B    10    				jr z,d_no_hex					001EDE ED53 2D 2A 00       B    11    				ld (dis_addr),de
                           B    12    				
001EE3 3A CF 6B 00         B    13    d_no_hex		ld a,(charmap_rows)				001EE7 D602                B    14    				sub a,2
001EE9 47                  B    15    				ld b,a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  71


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
001EEA C5                  B    16    dis_loop		push bc
                           B    17    				
001EEB DD2A 2D 2A 00       B    18    				ld ix,(dis_addr)				001EF0 CD 98 24 00         B    19    				call show_ix					001EF4 3E20                B    20    				ld a,' '
001EF6 CD 8C 24 00         B    21    				call show_ascii_char
                           B    22    
001EFA FD21 B6 24 00       B    23    				ld iy,prefix_bits_loc
001EFF FD360000            B    24    				ld (iy),0						001F03 CD 3F 1F 00         B    25    				call dis_instr					001F07 DD23                B    26    				inc ix							                           B    27    				
001F09 3E1A                B    28    				ld a,26							001F0B 32 15 6E 00         B    29    				ld (cursor_pos+1),a				001F0F ED4B 2D 2A 00       B    30    				ld bc,(dis_addr)
001F14 DD22 2D 2A 00       B    31    				ld (dis_addr),ix				001F19 DDE5                B    32    				push ix
001F1B E1                  B    33    				pop hl
001F1C AF                  B    34    				xor a
001F1D ED42                B    35    				sbc hl,bc						001F1F 7D                  B    36    				ld a,l
001F20 E607                B    37    				and 7
001F22 6F                  B    38    				ld l,a
001F23 0A                  B    39    shexoplp		ld a,(bc)						001F24 CD 7B 24 00         B    40    				call show_hex_byte
001F28 3E20                B    41    				ld a,' '
001F2A CD 8C 24 00         B    42    				call show_ascii_char
001F2E 03                  B    43    				inc bc
001F2F 2D                  B    44    				dec l
001F30 20 F1               B    45    				jr nz,shexoplp
                           B    46    				
001F32 CD A6 15 00         B    47    				call os_new_line
001F36 C1                  B    48    				pop bc
001F37 10 B1               B    49    				djnz dis_loop
                           B    50    
001F39 CD A6 15 00         B    51    				call os_new_line
001F3D AF                  B    52    				xor a
001F3E C9                  B    53    				ret
                           B    54    
                           B    55    
                           B    56    ;- Handle op code prefixes --------------------
                           B    57    			
       00000000            B    58    cb_prefix			equ 0					
       00000001            B    59    ed_prefix			equ 1
       00000002            B    60    sub_ix_prefix		equ 2
       00000003            B    61    sub_iy_prefix		equ 3
       00000004            B    62    ddcb_fdcb_prefix	equ 4					; p
       00000005            B    63    dot_l_prefix		equ 5
       00000006            B    64    il_prefix			equ 6
       00000007            B    65    show_adl_prefix		equ 7
                           B    66    
       00000000            B    67    adl_dis				equ 0					; b
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  72


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B    68    
                           B    69    
001F3F DD7E00              B    70    dis_instr	ld a,(ix)						; c
                           B    71    			
001F42 FDCB 07 46          B    72    			bit adl_dis,(iy+var_adl)		; i
001F46 28 04               B    73    			jr z,z80_list					; T
001F48 FDCB00F6            B    74    			set il_prefix,(iy)				; a
001F4C                     B    75    z80_list			
                           B    76    			
                           B    77    ;----------------------------------------------
                           B    78    
001F4C FE40                B    79    			cp 40h
001F4E 20 0A               B    80    			jr nz,not_sis
001F50 FDCB00B6            B    81    			res il_prefix,(iy)
001F54 FDCB00AE            B    82    			res dot_l_prefix,(iy)
001F58 18 28               B    83    			jr set_adl_pf
                           B    84    			
001F5A FE49                B    85    not_sis		cp 49h
001F5C 20 0A               B    86    			jr nz,not_lis
001F5E FDCB00B6            B    87    			res il_prefix,(iy)
001F62 FDCB00EE            B    88    			set dot_l_prefix,(iy)
001F66 18 1A               B    89    			jr set_adl_pf
                           B    90    			
001F68 FE52                B    91    not_lis		cp 52h
001F6A 20 0A               B    92    			jr nz,not_sil
001F6C FDCB00F6            B    93    			set il_prefix,(iy)
001F70 FDCB00AE            B    94    			res dot_l_prefix,(iy)
001F74 18 0C               B    95    			jr set_adl_pf
                           B    96    			
001F76 FE5B                B    97    not_sil		cp 5bh
001F78 20 11               B    98    			jr nz,not_adl_prefix_byte
001F7A FDCB00F6            B    99    			set il_prefix,(iy)
001F7E FDCB00EE            B   100    			set dot_l_prefix,(iy)
                           B   101    			
001F82 FDCB00FE            B   102    set_adl_pf	set show_adl_prefix,(iy)
001F86 DD23                B   103    			inc ix
001F88 DD7E00              B   104    			ld a,(ix)	
                           B   105    			
                           B   106    ;----------------------------------------------
                           B   107    
001F8B                     B   108    not_adl_prefix_byte			
                           B   109    			
001F8B FECB                B   110    			cp 0cbh								001F8D 20 08               B   111    			jr nz,not_cb
001F8F FDCB00C6            B   112    do_cb		set cb_prefix,(iy)
001F93 DD23                B   113    			inc ix
001F95 18 3A               B   114    			jr not_traditional_prefix_byte
                           B   115    
001F97 FEED                B   116    not_cb		cp 0edh
001F99 20 08               B   117    			jr nz,not_ed
001F9B FDCB00CE            B   118    do_ed		set ed_prefix,(iy)
001F9F DD23                B   119    			inc ix
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  73


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
001FA1 18 2E               B   120    			jr not_traditional_prefix_byte
                           B   121    
001FA3 FEDD                B   122    not_ed		cp 0ddh
001FA5 20 18               B   123    			jr nz,not_dd
001FA7 CD DA 21 00         B   124    do_dd		call check_nxt_byte_prefix			001FAB 28 92               B   125    			jr z,dis_instr						001FAD FDCB00D6            B   126    			set sub_ix_prefix,(iy)
001FB1 FECB                B   127    xdcb_query	cp 0cbh								001FB3 20 1C               B   128    			jr nz,not_traditional_prefix_byte	001FB5 FDCB00E6            B   129    			set ddcb_fdcb_prefix,(iy)
001FB9 DD23                B   130    			inc ix								001FBB DD23                B   131    			inc ix								001FBD 18 12               B   132    			jr not_traditional_prefix_byte
                           B   133    
001FBF FEFD                B   134    not_dd		cp 0fdh
001FC1 20 0E               B   135    			jr nz,not_traditional_prefix_byte
001FC3 CD DA 21 00         B   136    do_fd		call check_nxt_byte_prefix
001FC7 CA 3F 1F 00         B   137    			jr z,dis_instr	
001FCB FDCB00DE            B   138    			set sub_iy_prefix,(iy)
001FCF 18 E0               B   139    			jr xdcb_query
                           B   140    
001FD1                     B   141    not_traditional_prefix_byte
                           B   142    
                           B   143    ;----------------------------------------------
                           B   144    
001FD1 DD7E00              B   145    			ld a,(ix)	
001FD4 E6C0                B   146    			and 11000000b			; seperate 
001FD6 07                  B   147    			rlca
001FD7 07                  B   148    			rlca
001FD8 FD77 01             B   149    			ld (iy+var_x),a			;var x= val
                           B   150    			
001FDB DD7E00              B   151    			ld a,(ix)
001FDE E638                B   152    			and 00111000b
001FE0 CB3F                B   153    			srl a
001FE2 CB3F                B   154    			srl a
001FE4 CB3F                B   155    			srl a	
001FE6 FD77 02             B   156    			ld (iy+var_y),a			;var x = vl
                           B   157    
001FE9 DD7E00              B   158    			ld a,(ix)
001FEC E607                B   159    			and 00000111b
001FEE FD77 03             B   160    			ld (iy+var_z),a			;var z = va
                           B   161    			
001FF1 DD7E00              B   162    			ld a,(ix)
001FF4 E630                B   163    			and 00110000b
001FF6 CB3F                B   164    			srl a
001FF8 CB3F                B   165    			srl a
001FFA CB3F                B   166    			srl a
001FFC CB3F                B   167    			srl a
001FFE FD77 04             B   168    			ld (iy+var_p),a			; var p = v
                           B   169    			
002001 DD7E00              B   170    			ld a,(ix)
002004 E608                B   171    			and 00001000b
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  74


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002006 CB3F                B   172    			srl a
002008 CB3F                B   173    			srl a
00200A CB3F                B   174    			srl a
00200C FD77 05             B   175    			ld (iy+var_q),a				;var q 
                           B   176    
00200F CD E8 21 00         B   177    			call find_instruction_ascii		; g
                           B   178    	
                           B   179    ;----------------------------------------------
                           B   180    
002013 78                  B   181    index_table	ld a,b							; a
002014 B7                  B   182    			or a
002015 28 07               B   183    			jr z,parse_instr				; m
002017 CB7E                B   184    d_filp		bit 7,(hl)						; w
002019 23                  B   185    			inc hl							; o
00201A 28 FB               B   186    			jr z,d_filp					
00201C 10 F9               B   187    			djnz d_filp
                           B   188    										
                           B   189    			
00201E FD21 B6 24 00       B   190    parse_instr	ld iy,opcode_vars
002023 01000000            B   191    			ld bc,0
002027 7E                  B   192    			ld a,(hl)						;ge
002028 FE80                B   193    			cp 80h
00202A C8                  B   194    			ret z
00202B E67F                B   195    			and 7fh
                           B   196    			
00202D FE26                B   197    			cp '&'							;sy
00202F 20 28               B   198    			jr nz,not_adlsym
002031 FDCB007E            B   199    			bit show_adl_prefix,(iy)		;do
002035 CA C3 21 00         B   200    			jr z,next_opcode_ascii_char
002039 0600                B   201    			ld b,0
00203B FDCB006E            B   202    			bit dot_l_prefix,(iy)
00203F 28 02               B   203    			jr z,naplsb
002041 CBC0                B   204    			set 0,b
002043 FDCB0076            B   205    naplsb		bit il_prefix,(iy)
002047 28 02               B   206    			jr z,napmsb
002049 CBC8                B   207    			set 1,b
00204B E5                  B   208    napmsb		push hl
00204C 21 15 2A 00         B   209    			ld hl,adl_prefix_list
002050 CD 13 20 00         B   210    			call index_table				; r
002054 E1                  B   211    			pop hl
002055 C3 C3 21 00         B   212    			jp next_opcode_ascii_char
                           B   213    
002059 FE5E                B   214    not_adlsym	cp '^'							;sy
00205B 20 0D               B   215    			jr nz,d_not_imm8
00205D DD23                B   216    			inc ix							;th
00205F DD7E00              B   217    			ld a,(ix)
002062 CD 7B 24 00         B   218    			call show_hex_byte
002066 C3 C3 21 00         B   219    			jp next_opcode_ascii_char
                           B   220    					
00206A FE21                B   221    d_not_imm8	cp '!'							;sy
00206C 20 26               B   222    			jr nz,d_not_imm16					00206E 11020000            B   223    			ld de,2
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  75


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002072 FDCB0076            B   224    			bit il_prefix,(iy)				;ad
002076 28 08               B   225    			jr z,imm16
002078 13                  B   226    			inc de
002079 DD7E03              B   227    			ld a,(ix+3)
00207C CD 7B 24 00         B   228    			call show_hex_byte
002080 DD7E02              B   229    imm16		ld a,(ix+2)						;sh
002083 CD 7B 24 00         B   230    			call show_hex_byte			
002087 DD7E01              B   231    			ld a,(ix+1)						;th
00208A CD 7B 24 00         B   232    			call show_hex_byte
00208E DD19                B   233    			add ix,de						;ad
002090 C3 C3 21 00         B   234    			jp next_opcode_ascii_char
                           B   235    
002094 FE2F                B   236    d_not_imm16	cp '/'							;sy
002096 20 36               B   237    			jr nz,d_not_sb
002098 FDCB0066            B   238    			bit ddcb_fdcb_prefix,(iy)
00209C 28 05               B   239    			jr z,norm_dbyte
00209E DD7EFF              B   240    			ld a,(ix-1)						;if
0020A1 18 05               B   241    			jr xdcb_dbyte
0020A3 DD23                B   242    norm_dbyte	inc ix
0020A5 DD7E00              B   243    			ld a,(ix)						;th
0020A8 CB7F                B   244    xdcb_dbyte	bit 7,a
0020AA 20 10               B   245    			jr nz,d_sbin					;sh
0020AC F5                  B   246    			push af
0020AD 3E2B                B   247    			ld a,'+'
0020AF CD 8C 24 00         B   248    			call show_ascii_char
0020B3 F1                  B   249    			pop af
0020B4 CD 7B 24 00         B   250    			call show_hex_byte
0020B8 C3 C3 21 00         B   251    			jp next_opcode_ascii_char
0020BC F5                  B   252    d_sbin		push af
0020BD 3E2D                B   253    			ld a,'-'
0020BF CD 8C 24 00         B   254    			call show_ascii_char
0020C3 F1                  B   255    			pop af
0020C4 ED44                B   256    			neg
0020C6 CD 7B 24 00         B   257    			call show_hex_byte
0020CA C3 C3 21 00         B   258    			jp next_opcode_ascii_char
                           B   259    			
0020CE FE64                B   260    d_not_sb	cp 'd'							;sy
0020D0 20 1E               B   261    			jr nz,d_not_pcdip
0020D2 DD23                B   262    			inc ix
0020D4 01000000            B   263    			ld bc,0
0020D8 DD7E00              B   264    			ld a,(ix)
0020DB CB7F                B   265    			bit 7,a
0020DD 28 01               B   266    			jr z,d_spcd_pos
0020DF 0B                  B   267    			dec bc
0020E0 4F                  B   268    d_spcd_pos	ld c,a
0020E1 03                  B   269    			inc bc
0020E2 DDE5                B   270    			push ix
0020E4 DD09                B   271    			add ix,bc
0020E6 CD 98 24 00         B   272    			call show_ix
0020EA DDE1                B   273    			pop ix
0020EC C3 C3 21 00         B   274    			jp next_opcode_ascii_char
                           B   275    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  76


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0020F0 FE3E                B   276    d_not_pcdip	cp '>'							;sy
0020F2 20 16               B   277    			jr nz,d_not_sdig
0020F4 23                  B   278    			inc hl							;th
0020F5 01000000            B   279    			ld bc,0
0020F9 4E                  B   280    			ld c,(hl)
0020FA FD21 B6 24 00       B   281    			ld iy,opcode_vars
0020FF FD09                B   282    			add iy,bc
002101 FD7E00              B   283    			ld a,(iy)						;a 
002104 C630                B   284    			add a,30h						;co
002106 C3 BF 21 00         B   285    			jp d_output_char
                           B   286    
00210A FE5F                B   287    d_not_sdig	cp '_'
00210C 20 12               B   288    			jr nz,d_nhlsubst				; s
00210E E5                  B   289    			push hl
00210F 21 ED 29 00         B   290    			ld hl,hl_subs
002113 CD CB 21 00         B   291    hl_subst	call prefix_to_offset
002117 CD 13 20 00         B   292    			call index_table				; r
00211B E1                  B   293    			pop hl
00211C C3 C3 21 00         B   294    			jp next_opcode_ascii_char
                           B   295    			
002120 FE7C                B   296    d_nhlsubst	cp '|'
002122 20 07               B   297    			jr nz,d_noinvhls
002124 E5                  B   298    			push hl
002125 21 F3 29 00         B   299    			ld hl,inv_hl_subs
002129 18 E8               B   300    			jr hl_subst
                           B   301    			
00212B FE68                B   302    d_noinvhls	cp 'h'							;sy
00212D 20 07               B   303    			jr nz,d_nhsubst
00212F E5                  B   304    			push hl
002130 21 F9 29 00         B   305    			ld hl,h_subs
002134 18 DD               B   306    			jr hl_subst
                           B   307    			
002136 FE6C                B   308    d_nhsubst	cp 'l'							;sy
002138 20 07               B   309    			jr nz,d_nlsubst
00213A E5                  B   310    			push hl
00213B 21 00 2A 00         B   311    			ld hl,l_subs
00213F 18 D2               B   312    			jr hl_subst
                           B   313    			
002141 FE24                B   314    d_nlsubst	cp '$'
002143 20 07               B   315    			jr nz,d_nihlsubst				; s
002145 E5                  B   316    			push hl
002146 21 07 2A 00         B   317    			ld hl,ind_hl_subs
00214A 18 C7               B   318    			jr hl_subst
                           B   319    
                           B   320    
00214C                     B   321    d_nihlsubst	
                           B   322    
00214C FE7E                B   323    			cp '~'							; s
00214E 20 1F               B   324    			jr nz,ntable_r
002150 11 42 29 00         B   325    			ld de,table_r
002154 23                  B   326    do_table 	inc hl
002155 01000000            B   327    			ld bc,0							; t
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  77


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002159 4E                  B   328    			ld c,(hl)
00215A FD21 B6 24 00       B   329    			ld iy,opcode_vars
00215F FD09                B   330    			add iy,bc
002161 FD4600              B   331    			ld b,(iy)						;in
002164 E5                  B   332    			push hl
002165 EB                  B   333    			ex de,hl
002166 CD 13 20 00         B   334    			call index_table				; r
00216A E1                  B   335    			pop hl
00216B C3 C3 21 00         B   336    			jp next_opcode_ascii_char
                           B   337    			
00216F 11 4D 29 00         B   338    ntable_r	ld de,table_r2					; s
002173 FE3D                B   339    			cp '='
002175 28 DD               B   340    			jr z,do_table
                           B   341    			
002177 11 58 29 00         B   342    			ld de,table_rp					; s
00217B FE40                B   343    			cp '@'
00217D 28 D5               B   344    			jr z,do_table 
                           B   345    			
00217F 11 5F 29 00         B   346    			ld de,table_rp2					; s
002183 FE2A                B   347    			cp '*'
002185 28 CD               B   348    			jr z,do_table
                           B   349    			
002187 11 C5 29 00         B   350    			ld de,table_rp3					; s
00218B FE3C                B   351    			cp '<'
00218D 28 C5               B   352    			jr z,do_table
                           B   353    			
00218F 11 CD 29 00         B   354    			ld de,table_rp4					; s
002193 FE7D                B   355    			cp '}'
002195 28 BD               B   356    			jr z,do_table
                           B   357    			
002197 11 67 29 00         B   358    			ld de,table_cc					; s
00219B FE23                B   359    			cp '#'
00219D 28 B5               B   360    			jr z,do_table 
                           B   361    			
00219F 11 73 29 00         B   362    			ld de,table_alu					; s
0021A3 FE3A                B   363    			cp ':'
0021A5 28 AD               B   364    			jr z,do_table 
                           B   365    			
0021A7 11 9F 29 00         B   366    			ld de,table_rot					; s
0021AB FE25                B   367    			cp '%'
0021AD 28 A5               B   368    			jr z,do_table 
                           B   369    			
0021AF 11 DD 29 00         B   370    			ld de,table_rst					; s
0021B3 FE3B                B   371    			cp ';'
0021B5 28 9D               B   372    			jr z,do_table 
                           B   373    
0021B7 11 D5 29 00         B   374    			ld de,table_rp5					; s
0021BB FE7B                B   375    			cp '{'
0021BD 28 95               B   376    			jr z,do_table 
                           B   377    
0021BF                     B   378    ntable_bli
                           B   379    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  78


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B   380    ;----------------------------------------------
                           B   381    
0021BF                     B   382    d_output_char
                           B   383    
0021BF CD 8C 24 00         B   384    			call show_ascii_char
                           B   385    
0021C3                     B   386    next_opcode_ascii_char
                           B   387    
0021C3 CB7E                B   388    			bit 7,(hl)						;if
0021C5 C0                  B   389    			ret nz
0021C6 23                  B   390    			inc hl
0021C7 C3 1E 20 00         B   391    			jp parse_instr
                           B   392    			
                           B   393    			
                           B   394    ;----------------------------------------------
                           B   395    
                           B   396    
0021CB                     B   397    prefix_to_offset
                           B   398    
0021CB 0602                B   399    			ld b,2							;se
0021CD FDCB005E            B   400    			bit sub_iy_prefix,(iy)
0021D1 C0                  B   401    			ret nz
0021D2 05                  B   402    			dec b
0021D3 FDCB0056            B   403    			bit sub_ix_prefix,(iy)
0021D7 C0                  B   404    			ret nz
0021D8 05                  B   405    			dec b
0021D9 C9                  B   406    			ret
                           B   407    			
                           B   408    			
0021DA                     B   409    check_nxt_byte_prefix			
                           B   410    
0021DA DD23                B   411    			inc ix
0021DC DD7E00              B   412    			ld a,(ix)
0021DF FEDD                B   413    			cp 0ddh
0021E1 C8                  B   414    			ret z
0021E2 FEED                B   415    			cp 0edh
0021E4 C8                  B   416    			ret z
0021E5 FEFD                B   417    			cp 0fdh
0021E7 C9                  B   418    			ret
                           B   419    			
                           B   420    			
                           B   421    ;==============================================
                           B   422    ;- Find instruction ascii ---------------------
                           B   423    ;==============================================
                           B   424    
                           B   425    ; Returns HL = ptr to ascii name
                           B   426    ;          B = group index (number of instructi
                           B   427    
0021E8                     B   428    find_instruction_ascii
                           B   429    
0021E8 0600                B   430    			ld b,0						; defau
                           B   431    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  79


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0021EA FDCB0066            B   432    			bit ddcb_fdcb_prefix,(iy)	; Was t
0021EE 28 12               B   433    			jr z,not_ddcb_fdcb_inst
0021F0 21 1C 29 00         B   434    			ld hl,ddcb_fdcb_z6		
0021F4 FD46 01             B   435    			ld b,(iy+var_x)				; x is 
0021F7 FD7E 03             B   436    			ld a,(iy+var_z)
0021FA FE06                B   437    			cp 6
0021FC C8                  B   438    			ret z
0021FD 21 E4 28 00         B   439    			ld hl,ddcb_fdcb_zn6					002201 C9                  B   440    			ret
                           B   441    			
                           B   442    ;==============================================
                           B   443    
002202                     B   444    not_ddcb_fdcb_inst
                           B   445    
002202 FDCB0046            B   446    			bit cb_prefix,(iy)			;is thi
002206 28 08               B   447    			jr z,not_cb_inst
002208 21 6C 26 00         B   448    			ld hl,cb_group		
00220C FD46 01             B   449    			ld b,(iy+var_x)				; x is 
00220F C9                  B   450    			ret
                           B   451    
                           B   452    ;==============================================
                           B   453    
002210                     B   454    not_cb_inst
                           B   455    
002210 FDCB004E            B   456    			bit ed_prefix,(iy)			;is thi
002214 CA 35 23 00         B   457    			jr z,not_ed_inst
                           B   458    
002218 FD7E 01             B   459    			ld a,(iy+var_x)				;x = 0
00221B B7                  B   460    			or a
00221C 20 56               B   461    			jr nz,notedx0
                           B   462    		
                           B   463    			
00221E FD7E 03             B   464    			ld a,(iy+var_z)				
002221 B7                  B   465    			or a
002222 20 0D               B   466    			jr nz,notedx0z0
002224 21 93 26 00         B   467    			ld hl,ed_x0_z0_yn6			;x0 / z
002228 FD7E 02             B   468    			ld a,(iy+var_y)
00222B FE06                B   469    			cp 6
00222D C0                  B   470    			ret nz
00222E 0601                B   471    			ld b,1
002230 C9                  B   472    			ret
                           B   473    
002231 FE01                B   474    notedx0z0	cp 1
002233 20 0D               B   475    			jr nz,notedx0z1
002235 21 A4 26 00         B   476    			ld hl,ed_x0_z1				;x0 / z
002239 FD7E 02             B   477    			ld a,(iy+var_y)
00223C FE06                B   478    			cp 6
00223E C0                  B   479    			ret nz
00223F 0601                B   480    			ld b,1
002241 C9                  B   481    			ret
                           B   482    
002242 FE02                B   483    notedx0z1	cp 2
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  80


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002244 20 05               B   484    			jr nz,notedx0z2
002246 21 BA 26 00         B   485    			ld hl,ed_x0_z2				;x0 / z
00224A C9                  B   486    			ret
                           B   487    
00224B FE03                B   488    notedx0z2	cp 3
00224D 20 05               B   489    			jr nz,notedx0z3
00224F 21 C6 26 00         B   490    			ld hl,ed_x0_z3				;x0 / z
002253 C9                  B   491    			ret
                           B   492    			
002254 FE04                B   493    notedx0z3	cp 4
002256 20 05               B   494    			jr nz,notedx0z4
002258 21 D2 26 00         B   495    			ld hl,ed_x0_z4				;x0 / z
00225C C9                  B   496    			ret
                           B   497    
00225D FE06                B   498    notedx0z4	cp 6
00225F 20 05               B   499    			jr nz,notedx0z6				;x0 / z
002261 21 DC 26 00         B   500    			ld hl,ed_x0_z6
002265 C9                  B   501    			ret
                           B   502    
002266 FE07                B   503    notedx0z6	cp 7
002268 C2 3F 29 00         B   504    			jr nz,bad_opcode			;x0 / z
00226C 21 E7 26 00         B   505    			ld hl,ed_x0_z7
002270 FD46 05             B   506    			ld b,(iy+var_q)
002273 C9                  B   507    			ret
                           B   508    			
                           B   509    ;----------------------------------------------
                           B   510    			
002274 FE01                B   511    notedx0		cp 1	
002276 20 68               B   512    			jr nz,ed_xn1
                           B   513    
002278 FD7E 03             B   514    			ld a,(iy+var_z)					;x 
00227B B7                  B   515    			or a
00227C 20 0D               B   516    			jr nz,ed_x1_zn0
00227E 21 FC 26 00         B   517    			ld hl,ed_x1_z0_yn6				;z 
002282 FD7E 02             B   518    			ld a,(iy+var_y)
002285 FE06                B   519    			cp 6
002287 C0                  B   520    			ret nz
002288 0601                B   521    			ld b,1
00228A C9                  B   522    			ret
                           B   523    			
00228B FE01                B   524    ed_x1_zn0	cp 1
00228D 20 0D               B   525    			jr nz,ed_x1_zn1
00228F 21 0C 27 00         B   526    			ld hl,ed_x1_z1_yn6				;z 
002293 FD7E 02             B   527    			ld a,(iy+var_y)
002296 FE06                B   528    			cp 6
002298 C0                  B   529    			ret nz
002299 0601                B   530    			ld b,1
00229B C9                  B   531    			ret
                           B   532    		
00229C FE02                B   533    ed_x1_zn1	cp 2
00229E 20 08               B   534    			jr nz,ed_x1_zn2					;z 
0022A0 21 21 27 00         B   535    			ld hl,ed_x1_z2	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  81


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0022A4 FD46 05             B   536    			ld b,(iy+var_q)
0022A7 C9                  B   537    			ret
                           B   538    
0022A8 FE03                B   539    ed_x1_zn2	cp 3
0022AA 20 08               B   540    			jr nz,ed_x1_zn3					;z 
0022AC 21 37 27 00         B   541    			ld hl,ed_x1_z3	
0022B0 FD46 05             B   542    			ld b,(iy+var_q)
0022B3 C9                  B   543    			ret
                           B   544    			
0022B4 FE04                B   545    ed_x1_zn3	cp 4							;z 
0022B6 20 08               B   546    			jr nz,ed_x1_zn4
0022B8 21 4C 27 00         B   547    			ld hl,ed_x1_z4
0022BC FD46 02             B   548    			ld b,(iy+var_y)
0022BF C9                  B   549    			ret
                           B   550    			
0022C0 FE05                B   551    ed_x1_zn4	cp 5
0022C2 20 08               B   552    			jr nz,ed_x1_zn5
0022C4 21 84 27 00         B   553    			ld hl,ed_x1_z5					;z 
0022C8 FD46 02             B   554    			ld b,(iy+var_y)
0022CB C9                  B   555    			ret
                           B   556    			
0022CC FE06                B   557    ed_x1_zn5	cp 6
0022CE 20 08               B   558    			jr nz,ed_x1_zn6					;z=
0022D0 21 B3 27 00         B   559    			ld hl,ed_x1_z6
0022D4 FD46 02             B   560    			ld b,(iy+var_y)
0022D7 C9                  B   561    			ret
                           B   562    			
0022D8 21 D8 27 00         B   563    ed_x1_zn6	ld hl,ed_x1_z7					;z=
0022DC FD46 02             B   564    			ld b,(iy+var_y)
0022DF C9                  B   565    			ret
                           B   566    
                           B   567    ;----------------------------------------------
                           B   568    				
0022E0 FE02                B   569    ed_xn1		cp 2
0022E2 20 2E               B   570    			jr nz,ed_xn2
                           B   571    			
0022E4 FD46 02             B   572    			ld b,(iy+var_y)
0022E7 FD7E 03             B   573    			ld a,(iy+var_z)
0022EA B7                  B   574    			or a
0022EB 20 05               B   575    			jr nz,edx2zn0
0022ED 21 FC 27 00         B   576    			ld hl,ed_x2_z0					;x=
0022F1 C9                  B   577    			ret
                           B   578    
0022F2 FE01                B   579    edx2zn0		cp 1
0022F4 20 05               B   580    			jr nz,edx2zn1
0022F6 21 16 28 00         B   581    			ld hl,ed_x2_z1					;x=
0022FA C9                  B   582    			ret
                           B   583    
0022FB FE02                B   584    edx2zn1		cp 2
0022FD 20 05               B   585    			jr nz,edx2zn2
0022FF 21 30 28 00         B   586    			ld hl,ed_x2_z2					;x=
002303 C9                  B   587    			ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  82


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B   588    
002304 FE03                B   589    edx2zn2		cp 3
002306 20 05               B   590    			jr nz,edx2zn3
002308 21 60 28 00         B   591    			ld hl,ed_x2_z3					;x=
00230C C9                  B   592    			ret
                           B   593    
00230D 21 92 28 00         B   594    edx2zn3		ld hl,ed_x2_z4					;x=
002311 C9                  B   595    			ret
                           B   596    
                           B   597    ;----------------------------------------------
                           B   598    
002312 FE03                B   599    ed_xn2		cp 3
002314 20 18               B   600    			jr nz,ed_xn3
                           B   601    			
002316 FD46 02             B   602    			ld b,(iy+var_y)
002319 FD7E 03             B   603    			ld a,(iy+var_z)
00231C FE02                B   604    			cp 2
00231E 20 05               B   605    			jr nz,edx3zn2
002320 21 C8 28 00         B   606    			ld hl,ed_x3_z2					;x=
002324 C9                  B   607    			ret
002325 FE03                B   608    edx3zn2		cp 3
002327 20 05               B   609    			jr nz,edx3zn3
002329 21 D6 28 00         B   610    			ld hl,ed_x3_z3					;x=
00232D C9                  B   611    			ret
                           B   612    
00232E                     B   613    edx3zn3
                           B   614    
00232E                     B   615    ed_xn3
                           B   616    
                           B   617    ;----------------------------------------------
                           B   618    
00232E                     B   619    invalid_op
00232E 21 3F 29 00         B   620    			ld hl,bad_opcode				; x
002332 0600                B   621    			ld b,0
002334 C9                  B   622    			ret
                           B   623    			
                           B   624    			
                           B   625    ;========= UNPREFIXED INSTRUCTION =============
                           B   626    
                           B   627    
002335 FD7E 01             B   628    not_ed_inst	ld a,(iy+var_x)				; is X 
002338 B7                  B   629    			or a
002339 C2 D1 23 00         B   630    			jr nz,x_not_zero
                           B   631    
                           B   632    ;----------------------------------------------
                           B   633    
                           B   634    
00233D FD7E 03             B   635    			ld a,(iy+var_z)				;x = 0
002340 B7                  B   636    			or a
002341 20 14               B   637    			jr nz,x0_z_not_zero
002343 21 BE 24 00         B   638    			ld hl,x0_z0
002347 FD7E 02             B   639    			ld a,(iy+var_y)				;y is t
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  83


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
00234A 47                  B   640    			ld b,a
00234B D604                B   641    			sub 4
00234D FD77 06             B   642    			ld (iy+var_calc),a			;var_ca
002350 78                  B   643    			ld a,b
002351 FE04                B   644    			cp 4
002353 D8                  B   645    			ret c
002354 0604                B   646    			ld b,4						;if y >
002356 C9                  B   647    			ret
                           B   648    			
002357                     B   649    x0_z_not_zero		
                           B   650    			
002357 FE01                B   651    			cp 1
002359 20 1A               B   652    			jr nz,x0_z_not_one
00235B FD7E 02             B   653    			ld a,(iy+var_y)				;x=0/z=
00235E FE06                B   654    			cp 6
002360 20 0B               B   655    			jr nz,x0z1yn6
002362 CD 71 24 00         B   656    			call test_ixiy_prefix		;if y=6
002366 28 05               B   657    			jr z,x0z1yn6				;altern
002368 21 F1 24 00         B   658    			ld hl,x0_z1_y6
00236C C9                  B   659    			ret
                           B   660    
00236D 21 DE 24 00         B   661    x0z1yn6		ld hl,x0_z1					;x=0, z
002371 FD46 05             B   662    			ld b,(iy+var_q)				;q is t
002374 C9                  B   663    			ret 
                           B   664    			
002375                     B   665    x0_z_not_one
                           B   666    
002375 FE02                B   667    			cp 2
002377 20 08               B   668    			jr nz,x0_z_not_two
002379 21 F9 24 00         B   669    			ld hl,x0_z2
00237D FD46 02             B   670    			ld b,(iy+var_y)				;y is t
002380 C9                  B   671    			ret
                           B   672    			
002381                     B   673    x0_z_not_two
                           B   674    
002381 FE03                B   675    			cp 3
002383 20 08               B   676    			jr nz,x0_z_not_three
002385 21 45 25 00         B   677    			ld hl,x0_z3
002389 FD46 05             B   678    			ld b,(iy+var_q)				;q is t
00238C C9                  B   679    			ret
                           B   680    			
00238D                     B   681    x0_z_not_three
                           B   682    
00238D FE04                B   683    			cp 4
00238F 20 05               B   684    			jr nz,x0_z_not_four
002391 21 55 25 00         B   685    			ld hl,x0_z4					;no ini
002395 C9                  B   686    			ret			
                           B   687    			
002396                     B   688    x0_z_not_four
                           B   689    
002396 FE05                B   690    			cp 5
002398 20 05               B   691    			jr nz,x0_z_not_five
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  84


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
00239A 21 5D 25 00         B   692    			ld hl,x0_z5					;no ini
00239E C9                  B   693    			ret				
                           B   694    			
00239F                     B   695    x0_z_not_five
                           B   696    
00239F FE06                B   697    			cp 6
0023A1 20 1A               B   698    			jr nz,x0_z_not_six
0023A3 21 65 25 00         B   699    			ld hl,x0_z6					;normal
0023A7 FD7E 02             B   700    			ld a,(iy+var_y)
0023AA FE07                B   701    			cp 7
0023AC C0                  B   702    			ret nz
0023AD FDCB0056            B   703    			bit sub_ix_prefix,(iy)
0023B1 20 05               B   704    			jr nz,altx0z6
0023B3 FDCB005E            B   705    			bit sub_iy_prefix,(iy)
0023B7 C8                  B   706    			ret z	
0023B8 21 6E 25 00         B   707    altx0z6		ld hl,alt_x0_z6				;if dd/
0023BC C9                  B   708    			ret
                           B   709    
                           B   710    
0023BD                     B   711    x0_z_not_six
                           B   712    			
0023BD 21 76 25 00         B   713    			ld hl,x0_z7					;x=0, z
0023C1 FD46 02             B   714    			ld b,(iy+var_y)				;y is n
0023C4 CD 71 24 00         B   715    			call test_ixiy_prefix
0023C8 C8                  B   716    			ret z
0023C9 21 90 25 00         B   717    altx0z7		ld hl,alt_x0_z7				;if dd/
0023CD FD46 05             B   718    			ld b,(iy+var_q)				;this i
0023D0 C9                  B   719    			ret
                           B   720    
                           B   721    ;----------------------------------------------
                           B   722    
0023D1 FE01                B   723    x_not_zero	cp 1						; is x 
0023D3 20 32               B   724    			jr nz,x_not_one
                           B   725    			
0023D5 21 A2 25 00         B   726    			ld hl,x1_table				; x=1
0023D9 CD 71 24 00         B   727    			call test_ixiy_prefix
0023DD 20 11               B   728    			jr nz,pref_x1
0023DF FD7E 02             B   729    			ld a,(iy+var_y)
0023E2 FE06                B   730    			cp 6
0023E4 C0                  B   731    			ret nz
0023E5 FD7E 03             B   732    			ld a,(iy+var_z)
0023E8 FE06                B   733    			cp 6
0023EA C0                  B   734    			ret nz
0023EB 21 C0 25 00         B   735    			ld hl,x1_y6_z6				;if y=6
0023EF C9                  B   736    			ret
                           B   737    
0023F0 FD7E 02             B   738    pref_x1		ld a,(iy+var_y)				
0023F3 FE06                B   739    			cp 6
0023F5 20 05               B   740    			jr nz,x1yn6
0023F7 21 AC 25 00         B   741    			ld hl,x1_y6
0023FB C9                  B   742    			ret
                           B   743    			
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  85


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0023FC FD7E 03             B   744    x1yn6		ld a,(iy+var_z)
0023FF FE06                B   745    			cp 6
002401 C0                  B   746    			ret nz
002402 21 B6 25 00         B   747    			ld hl,x1_z6
002406 C9                  B   748    			ret
                           B   749    			
                           B   750    ;----------------------------------------------
                           B   751    			
002407 FE02                B   752    x_not_one	cp 2						; is x 
002409 20 05               B   753    			jr nz,x_not_two
00240B 21 C4 25 00         B   754    			ld hl,x2_table				; no in
00240F C9                  B   755    			ret
                           B   756    			
                           B   757    ;----------------------------------------------
                           B   758    
002410 FD7E 03             B   759    x_not_two	ld a,(iy+var_z)				; x mus
002413 B7                  B   760    			or a
002414 20 05               B   761    			jr nz,x3_z_not_zero
002416 21 C9 25 00         B   762    			ld hl,x3_z0					; no in
00241A C9                  B   763    			ret
                           B   764    						
00241B                     B   765    x3_z_not_zero
                           B   766    
00241B FE01                B   767    			cp 1
00241D 20 11               B   768    			jr nz,x3_z_not_one
00241F 21 D1 25 00         B   769    			ld hl,x3_z1_q0
002423 FD7E 05             B   770    			ld a,(iy+var_q)
002426 B7                  B   771    			or a
002427 C8                  B   772    			ret z						; no in
002428 21 D9 25 00         B   773    			ld hl,x3_z1_q1
00242C FD46 04             B   774    			ld b,(iy+var_p)				; index
00242F C9                  B   775    			ret
                           B   776    
002430                     B   777    x3_z_not_one
                           B   778    
002430 FE02                B   779    			cp 2
002432 20 05               B   780    			jr nz,x3_z_not_two
002434 21 F0 25 00         B   781    			ld hl,x3_z2					;no ini
002438 C9                  B   782    			ret
                           B   783    
002439                     B   784    x3_z_not_two
                           B   785    
002439 FE03                B   786    			cp 3
00243B 20 08               B   787    			jr nz,x3_z_not_three
00243D 21 F9 25 00         B   788    			ld hl,x3_z3
002441 FD46 02             B   789    			ld b,(iy+var_y)				;index 
002444 C9                  B   790    			ret
                           B   791    
002445                     B   792    x3_z_not_three
                           B   793    
002445 FE04                B   794    			cp 4
002447 20 05               B   795    			jr nz,x3_z_not_four
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  86


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002449 21 2E 26 00         B   796    			ld hl,x3_z4				;no initial
00244D C9                  B   797    			ret						
                           B   798    
                           B   799    
00244E                     B   800    x3_z_not_four
                           B   801    
00244E FE05                B   802    			cp 5
002450 20 11               B   803    			jr nz,x3_z_not_five
002452 21 39 26 00         B   804    			ld hl,x3_z5_q0
002456 FD7E 05             B   805    			ld a,(iy+var_q)
002459 B7                  B   806    			or a
00245A C8                  B   807    			ret z						;no ind
00245B 21 42 26 00         B   808    			ld hl,x3_z5_q1
00245F FD46 04             B   809    			ld b,(iy+var_p)				;else i
002462 C9                  B   810    			ret
                           B   811    
002463                     B   812    x3_z_not_five
                           B   813    
002463 FE06                B   814    			cp 6
002465 20 05               B   815    			jr nz,x3_z_not_six
002467 21 60 26 00         B   816    			ld hl,x3_z6					;no ind
00246B C9                  B   817    			ret
                           B   818    
00246C                     B   819    x3_z_not_six
                           B   820    
00246C 21 64 26 00         B   821    			ld hl,x3_z7					;x=3, z
002470 C9                  B   822    			ret
                           B   823    
                           B   824    
                           B   825    ;==============================================
                           B   826    
002471                     B   827    test_ixiy_prefix
                           B   828    
002471 FDCB0056            B   829    			bit sub_ix_prefix,(iy)
002475 C0                  B   830    			ret nz
002476 FDCB005E            B   831    			bit sub_iy_prefix,(iy)
00247A C9                  B   832    			ret
                           B   833    			
                           B   834    ;==============================================
                           B   835    
                           B   836    
00247B                     B   837    show_hex_byte
                           B   838    
00247B E5                  B   839    			push hl
00247C 21 28 2A 00         B   840    			ld hl,output_byte_txt
002480 E5                  B   841    			push hl
002481 CD 49 12 00         B   842    			call hexbyte_to_ascii
002485 E1                  B   843    			pop hl
002486 CD 00 11 00         B   844    			call os_print_string
00248A E1                  B   845    			pop hl
00248B C9                  B   846    			ret
                           B   847    			
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  87


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B   848    
00248C                     B   849    show_ascii_char
                           B   850    
00248C E5                  B   851    			push hl
00248D 21 2B 2A 00         B   852    			ld hl,output_char_txt
002491 77                  B   853    			ld (hl),a
002492 CD 00 11 00         B   854    			call os_print_string
002496 E1                  B   855    			pop hl
002497 C9                  B   856    			ret
                           B   857    		
                           B   858    		
002498 DD22 25 2A 00       B   859    show_ix		ld (d_work_address),ix
00249D 3A 27 2A 00         B   860    			ld a,(d_work_address+2)
0024A1 CD 7B 24 00         B   861    			call show_hex_byte
0024A5 3A 26 2A 00         B   862    			ld a,(d_work_address+1)
0024A9 CD 7B 24 00         B   863    			call show_hex_byte
0024AD 3A 25 2A 00         B   864    			ld a,(d_work_address)
0024B1 CD 7B 24 00         B   865    			call show_hex_byte
0024B5 C9                  B   866    			ret
                           B   867    			
                           B   868    ;----------------------------------------------
                           B   869    
                           B   870    ; SYMBOLS:
                           B   871    
                           B   872    ; #  CC_table
                           B   873    ; ~  r table (registers)
                           B   874    ; =  r2 table (registers 2)
                           B   875    ; @  RP table (register pairs 1)
                           B   876    ; *  RP2 table (registers pairs 2)
                           B   877    ; :  ALU table
                           B   878    ; %  ROT table
                           B   879    ; _  HL,IX/IY substitute selected by prefix
                           B   880    ; |  HL, IY/IX substitute based on prefix (IX/I
                           B   881    ; $  (HL),(IX+d),(IY+d) substitute selected by 
                           B   882    ; h  H,IXH/IYH substitute selected by prefix
                           B   883    ; l  L,IXL,IYL substitute selected by prefix
                           B   884    ; &  ADL prefix 
                           B   885    
                           B   886    ; ^   n (8 bit immediate)
                           B   887    ; !   nn (16 or 24 bit immediate)
                           B   888    ; d   8 bit signed jump displacement from PC
                           B   889    ; /   8 bit signed byte used for IX+d, IY+d ins
                           B   890    ; >   single digit used by BIT,SET,RES instruct
                           B   891    ; <   RP3 table (register pairs 3)
                           B   892    ; }   RP4 table (register pairs 4)
                           B   893    ; ;   RST table
                           B   894    ; {   RP5 table (register pairs 5)
                           B   895    
0024B6                     B   896    opcode_vars
                           B   897    
0024B6 00                  B   898    prefix_bits_loc	db 0	
0024B7 00                  B   899    var_x_loc		db 0	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  88


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0024B8 00                  B   900    var_y_loc		db 0	
0024B9 00                  B   901    var_z_loc		db 0	
0024BA 00                  B   902    var_p_loc		db 0	
0024BB 00                  B   903    var_q_loc		db 0
0024BC 00                  B   904    var_calc_loc	db 0
0024BD 01                  B   905    var_adl_loc		db 1
                           B   906    
       00000000            B   907    prefix_bits		equ opcode_vars-prefix_bits_loc
       00000001            B   908    var_x			equ var_x_loc-opcode_vars
       00000002            B   909    var_y			equ var_y_loc-opcode_vars
       00000003            B   910    var_z			equ var_z_loc-opcode_vars
       00000004            B   911    var_p			equ var_p_loc-opcode_vars
       00000005            B   912    var_q			equ var_q_loc-opcode_vars
       00000006            B   913    var_calc		equ var_calc_loc-opcode_vars
       00000007            B   914    var_adl			equ var_adl_loc-opcode_vars
                           B   915    
                           B   916    ;---- Unprefixed opcodes ----------------------
                           B   917    
                           B   918    
0024BE 4E4FD0              B   919    x0_z0		db 'NO','P'+80h				; y0
0024C1 45582041 462C4146   B   920    			db 'EX AF,AF',27h+80h		; y1 
0024C9 A7 
0024CA 444A4E5A 206480     B   921    			db 'DJNZ ','d',80h			; y2
0024D1 4A522064 80         B   922    			db 'JR ','d',80h			; y3
0024D6 4A522023 06 2C6480   B   923    			db 'JR #',var_calc,',d',80h	; y4-y7
                           B   924    			
0024DE 4C442620 40 04      B   925    x0_z1		db 'LD& @',var_p,',!',80h	; q=0
0024E4 2C2180 
0024E7 41444426 205F2C40   B   926    			db 'ADD& _,@',var_p,80h		; q=1
0024EF 04 80 
0024F1 4C442620 7C2C2480   B   927    x0_z1_y6	db 'LD& |,$',80h
                           B   928    
0024F9 4C442620 28424329   B   929    x0_z2		db 'LD& (BC),','A'+80h		;y=0
002501 2CC1 
002503 4C442620 412C2842   B   930    			db 'LD& A,(BC',')'+80h		;y=1
00250B 43A9 
00250D 4C442620 28444529   B   931    			db 'LD& (DE),','A'+80h		;y=2
002515 2CC1 
002517 4C442620 412C2844   B   932    			db 'LD& A,(DE',')'+80h		;y=3
00251F 45A9 
002521 4C442620 2821292C   B   933    			db 'LD& (!),','_'+80h		;y=4
002529 DF 
00252A 4C442620 5F2C2821   B   934    			db 'LD& _,(!',')'+80h		;y=5
002532 A9 
002533 4C442620 2821292C   B   935    			db 'LD& (!),','A'+80h		;y=6
00253B C1 
00253C 4C442620 412C2821   B   936    			db 'LD& A,(!',')'+80h		;y=7
002544 A9 
                           B   937    
002545 494E4326 2040 04    B   938    x0_z3		db 'INC& @',var_p,80h		;q=0
00254C 80 
00254D 44454326 2040 04    B   939    			db 'DEC& @',var_p,80h		;q=1
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  89


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
002554 80 
                           B   940    			
002555 494E4326 207E 02    B   941    x0_z4		db 'INC& ~',var_y,80h		
00255C 80 
                           B   942    
00255D 44454326 207E 02    B   943    x0_z5		db 'DEC& ~',var_y,80h		
002564 80 
                           B   944    			
002565 4C442620 7E 02      B   945    x0_z6		db 'LD& ~',var_y,',^',80h	
00256B 2C5E80 
00256E 4C442620 242C7C80   B   946    alt_x0_z6	db 'LD& $,|',80h			; when 
                           B   947    		
002576 524C43C1            B   948    x0_z7		db 'RLC','A'+80h		;y=0
00257A 525243C1            B   949    			db 'RRC','A'+80h		;y=1
00257E 524CC1              B   950    			db 'RL','A'+80h			;y=2
002581 5252C1              B   951    			db 'RR','A'+80h			;y=3
002584 4441C1              B   952    			db 'DA','A'+80h			;y=4
002587 4350CC              B   953    			db 'CP','L'+80h			;y=5
00258A 5343C6              B   954    			db 'SC','F'+80h			;y=6 (and n
00258D 4343C6              B   955    			db 'CC','F'+80h			;y=7 (and n
                           B   956    			
002590 4C442620 7B 04      B   957    alt_x0_z7	db 'LD& {',var_p,',$',80h	;q=0 (D
002596 2C2480 
002599 4C442620 242C7B 04   B   958    			db 'LD& $,{',var_p,80h		;q=1 (D
0025A1 80 
                           B   959    		
                           B   960    
                           B   961    
0025A2 4C442620 7E 02      B   962    x1_table	db 'LD& ~',var_y,',~',var_z,80h	
0025A8 2C7E 03 80 
0025AC 4C442620 7E 02      B   963    x1_y6	 	db 'LD& ~',var_y,',=',var_z,80h		0025B2 2C3D 03 80 
0025B6 4C442620 3D 02      B   964    x1_z6		db 'LD& =',var_y,',~',var_z,80h		0025BC 2C7E 03 80 
                           B   965    
0025C0 48414CD4            B   966    x1_y6_z6	db 'HAL','T'+80h
                           B   967    
                           B   968    
                           B   969    
0025C4 3A 02 7E 03 80      B   970    x2_table	db ':',var_y,'~',var_z,80h			                           B   971    			
                           B   972    		
                           B   973    		
0025C9 52455426 2023 02    B   974    x3_z0		db 'RET& #',var_y,80h
0025D0 80 
                           B   975    
0025D1 504F5026 202A 04    B   976    x3_z1_q0	db 'POP& *',var_p,80h			
0025D8 80 
0025D9 52455426 80         B   977    x3_z1_q1	db 'RET','&',80h		;p=0
0025DE 4558D8              B   978    			db 'EX','X'+80h			;p=1
0025E1 4A502620 5F80       B   979    			db 'JP& _',80h			;p=2
0025E7 4C442620 53502C5F   B   980    			db 'LD& SP,_',80h		;p=3
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  90


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0025EF 80 
                           B   981    
0025F0 4A502620 23 02      B   982    x3_z2		db 'JP& #',var_y,',!',80h		
0025F6 2C2180 
                           B   983    
0025F9 4A502620 2180       B   984    x3_z3		db 'JP& !',80h			;y = 0
0025FF 43422070 667880     B   985    			db 'CB pfx',80h			;y = 1
002606 4F555420 285E292C   B   986    			db 'OUT (^),','A'+80h	;y = 2
00260E C1 
00260F 494E2041 2C285EA9   B   987    			db 'IN A,(^',')'+80h	;y = 3
002617 45582620 28535029   B   988    			db 'EX& (SP),','_',80h	;y = 4
00261F 2C5F80 
002622 45582044 452C48CC   B   989    			db 'EX DE,H','L'+80h	;y = 5
00262A 44C9                B   990    			db 'D','I'+80h			;y = 6
00262C 45C9                B   991    			db 'E','I'+80h			;y = 7
                           B   992    
00262E 43414C4C 262023 02   B   993    x3_z4		db 'CALL& #',var_y,',!',80h
002636 2C2180 
                           B   994    
002639 50555348 26202A 04   B   995    x3_z5_q0	db 'PUSH& *',var_p,80h			
002641 80 
002642 43414C4C 26202180   B   996    x3_z5_q1	db 'CALL& !',80h			;p=0
00264A 44442070 667880     B   997    			db 'DD pfx',80h			;p=1
002651 45442070 667880     B   998    			db 'ED pfx',80h			;p=2
002658 20464420 70667880   B   999    			db' FD pfx',80h			;p=3
                           B  1000    
002660 3A 02 5E80          B  1001    x3_z6		db ':',var_y,'^',80h	;ALU_table(
                           B  1002    
002664 52535426 203B 02    B  1003    x3_z7		db 'RST& ;',var_y,80h		; rst_t
00266B 80 
                           B  1004    
                           B  1005    
                           B  1006    ;--- CB - Prefixed op-codes--------------------
                           B  1007    
                           B  1008    
00266C 25 02 207E 03 80    B  1009    cb_group		db '%',var_y,' ~',var_z,80h		002672 42495426 203E 02    B  1010    				db 'BIT& >',var_y,',~',var_z,80
002679 2C7E 03 80 
00267D 52455326 203E 02    B  1011    				db 'RES& >',var_y,',~',var_z,80
002684 2C7E 03 80 
002688 53455426 203E 02    B  1012    				db 'SET& >',var_y,',~',var_z,80
00268F 2C7E 03 80 
                           B  1013    
                           B  1014    
                           B  1015    ;---- ED - Prefixed op-codes-------------------
                           B  1016    
002693 494E3020 7E 02      B  1017    ed_x0_z0_yn6	db 'IN0 ~',var_y,',(^',')'+80h
002699 2C285EA9 
00269D 494E3020 285EA9     B  1018    ed_x0_z0_y6		db 'IN0 (^',')'+80h	
                           B  1019    
0026A4 4F555430 20285E29   B  1020    ed_x0_z1		db 'OUT0 (^),~',var_y,80h		0026AC 2C7E 02 80 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  91


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
0026B0 4C442620 49592C28   B  1021    				db 'LD& IY,(_',')'+80h			0026B8 5FA9 
                           B  1022    
0026BA 4C454126 203C 04    B  1023    ed_x0_z2		db 'LEA& <',var_p,',IX/',80h	0026C1 2C49582F 80 
0026C6 4C454126 207D 04    B  1024    ed_x0_z3		db 'LEA& }',var_p,',IY/',80h
0026CD 2C49592F 80 
0026D2 54535426 20412C7E   B  1025    ed_x0_z4		db 'TST& A,~',var_y,80h
0026DA 02 80 
                           B  1026    
0026DC 4C442620 285F292C   B  1027    ed_x0_z6		db 'LD& (_),}',var_p,80h
0026E4 7D 04 80 
                           B  1028    
0026E7 4C442620 3C 04      B  1029    ed_x0_z7		db 'LD& <',var_p,',(_',')'+80h	0026ED 2C285FA9 
0026F1 4C442620 285F292C   B  1030    				db 'LD& (_),<',var_p,80h		0026F9 3C 04 80 
                           B  1031    
0026FC 494E207E 02         B  1032    ed_x1_z0_yn6	db 'IN ~',var_y,',(BC',')'+80h
002701 2C284243 A9 
002706 494E2028 43A9       B  1033    ed_x1_z0_y6		db 'IN (C',')'+80h
                           B  1034    
00270C 4F555420 28424329   B  1035    ed_x1_z1_yn6	db 'OUT (BC),~',var_y,80h
002714 2C7E 02 80 
002718 4F555420 2843292C   B  1036    ed_x1_z1_y6		db 'OUT (C),','0'+80h
002720 B0 
                           B  1037    
002721 53424326 20484C2C   B  1038    ed_x1_z2		db 'SBC& HL,@',var_p,80h		002729 40 04 80 
00272C 41444326 20484C2C   B  1039    				db 'ADC& HL,@',var_p,80h		002734 40 04 80 
                           B  1040    
002737 4C442620 2821292C   B  1041    ed_x1_z3		db 'LD& (!),@',var_p,80h		00273F 40 04 80 
002742 4C442620 40 04      B  1042    				db 'LD& @',var_p,',(!',')'+80h	002748 2C2821A9 
                           B  1043    
00274C 4E45C7              B  1044    ed_x1_z4		db 'NE','G'+80h				;y=
00274F 4D4C5420 42C3       B  1045    				db 'MLT B','C'+80h			;y=
002755 4C454126 2049582C   B  1046    				db 'LEA& IX,IY/',80h			00275D 49592F80 
002761 4D4C5420 44C5       B  1047    				db 'MLT D','E'+80h			;y=
002767 54535426 20412C5E   B  1048    				db 'TST& A,^',80h			;y=
00276F 80 
002770 4D4C5420 48CC       B  1049    				db 'MLT H','L'+80h			;y=
002776 54535449 4F205E80   B  1050    				db 'TSTIO ^',80h			;y=
00277E 4D4C5420 53D0       B  1051    				db 'MLT S','P'+80h 			;y=
                           B  1052    
002784 5245544E 2680       B  1053    ed_x1_z5		db 'RETN&',80h				;y=
00278A 52455449 2680       B  1054    				db 'RETI&',80h				;y=
002790 4C454126 2049592C   B  1055    				db 'LEA& IY,IX/',80h		;y=
002798 49582F80 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  92


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
00279C BF                  B  1056    				db '?'+80h					;y=
00279D 50454126 2049582F   B  1057    				db 'PEA& IX/',80h			;y=
0027A5 80 
0027A6 4C44204D 422CC1     B  1058    				db 'LD MB,','A'+80h			;y=
0027AD BF                  B  1059    				db '?'+80h					;y=
0027AE 53544D49 D8         B  1060    				db 'STMI','X'+80h			;y=
                           B  1061    				
                           B  1062    	
0027B3 494D20B0            B  1063    ed_x1_z6		db 'IM ','0'+80h			;y=
0027B7 BF                  B  1064    				db '?'+80h					;y=
0027B8 494D20B1            B  1065    				db 'IM ','1'+80h			;y=
0027BC 494D20B2            B  1066    				db 'IM ','2'+80h			;y=
0027C0 50454126 2049592F   B  1067    				db 'PEA& IY/',80h			;y=
0027C8 80 
0027C9 4C442041 2C4DC2     B  1068    				db 'LD A,','M','B'+80h		;y=
0027D0 534CD0              B  1069    				db 'SL','P'+80h				;y=
0027D3 52534D49 D8         B  1070    				db 'RSMI','X'+80h			;y=
                           B  1071    
0027D8 4C442049 2CC1       B  1072    ed_x1_z7		db 'LD I,','A'+80h			;y=
0027DE 4C442052 2CC1       B  1073    				db 'LD R,','A'+80h			;y=
0027E4 4C442041 2CC9       B  1074    				db 'LD A,','I'+80h			;y=
0027EA 4C442041 2CD2       B  1075    				db 'LD A,','R'+80h			;y=
0027F0 5252C4              B  1076    				db 'RR','D'+80h				;y=
0027F3 524CC4              B  1077    				db 'RL','D'+80h				;y=
0027F6 4E4FD0              B  1078    				db 'NO','P'+80h				;y=
0027F9 4E4FD0              B  1079    				db 'NO','P'+80h				;y=
                           B  1080    
                           B  1081    
0027FC BFBFBFBF            B  1082    ed_x2_z0		db '?'+80h,'?'+80h,'?'+80h,'?'+
002800 4C444926 80         B  1083    				db 'LDI&',80h					002805 4C444426 80         B  1084    				db 'LDD&',80h					00280A 4C444952 2680       B  1085    				db 'LDIR&',80h					002810 4C444452 2680       B  1086    				db 'LDDR&',80h					                           B  1087    
002816 BFBFBFBF            B  1088    ed_x2_z1		db '?'+80h,'?'+80h,'?'+80h,'?'+
00281A 43504926 80         B  1089    				db 'CPI&',80h					00281F 43504426 80         B  1090    				db 'CPD&',80h					002824 43504952 2680       B  1091    				db 'CPIR&',80h					00282A 43504452 2680       B  1092    				db 'CPDR&',80h					                           B  1093    
002830 494E494D 2680       B  1094    ed_x2_z2		db 'INIM&',80h		; y0	
002836 494E444D 2680       B  1095    				db 'INDM&',80h		; y1
00283C 494E494D 522680     B  1096    				db 'INIMR&',80h		; y2
002843 494E444D 522680     B  1097    				db 'INDMR&',80h		; y3
00284A 494E4926 80         B  1098    				db 'INI&',80h		; y4
00284F 494E4426 80         B  1099    				db 'IND&',80h		; y5
002854 494E4952 2680       B  1100    				db 'INIR&',80h		; y6
00285A 494E4452 2680       B  1101    				db 'INDR&',80h		; y7
                           B  1102    
                           B  1103    
002860 4F54494D 2680       B  1104    ed_x2_z3		db 'OTIM&',80h		; y0
002866 4F54444D 2680       B  1105    				db 'OTDM&',80h		; y1
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  93


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
00286C 4F54494D 522680     B  1106    				db 'OTIMR&',80h		; y2
002873 4F54444D 522680     B  1107    				db 'OTDMR&',80h		; y3
00287A 4F555449 2680       B  1108    				db 'OUTI&',80h		; y4
002880 4F555444 2680       B  1109    				db 'OUTD&',80h		; y5
002886 4F544952 2680       B  1110    				db 'OTIR&',80h		; y6
00288C 4F544452 2680       B  1111    				db 'OTDR&',80h		; y7
                           B  1112    
002892 494E4932 2680       B  1113    ed_x2_z4		db 'INI2&',80h		; y0
002898 494E4432 2680       B  1114    				db 'IND2&',80h		; y1
00289E 494E4932 522680     B  1115    				db 'INI2R&',80h		; y2
0028A5 494E4432 522680     B  1116    				db 'IND2R&',80h		; y3
0028AC 4F555449 322680     B  1117    				db 'OUTI2&',80h		; y4
0028B3 4F555444 322680     B  1118    				db 'OUTD2&',80h		; y5
0028BA 4F544932 522680     B  1119    				db 'OTI2R&',80h		; y6
0028C1 4F544432 522680     B  1120    				db 'OTD2R&',80h		; y7
                           B  1121    
                           B  1122    
0028C8 494E4952 582680     B  1123    ed_x3_z2		db 'INIRX&',80h 	; y0
0028CF 494E4452 582680     B  1124    				db 'INDRX&',80h		; y1
                           B  1125    
0028D6 4F544952 582680     B  1126    ed_x3_z3		db 'OTIRX&',80h		; y0
0028DD 4F544452 582680     B  1127    				db 'OTDRX&',80h		; y1
                           B  1128    			
                           B  1129    
                           B  1130    ;--- DDCB or FDCB - Prefixed op-codes----------
                           B  1131    
                           B  1132    
0028E4 4C442620 7E 03      B  1133    ddcb_fdcb_zn6	db 'LD& ~',var_z, ',%',var_y,' 
0028EA 2C25 02 202480 
0028F0 42495426 203E 02    B  1134    				db 'BIT& >',var_y,',$',80h		0028F7 2C2480 
0028FA 4C442620 7E 03      B  1135    				db 'LD& ~',var_z,',RES& >',var_
002900 2C524553 26203E 02 
002908 2C2480 
00290B 4C442620 7E 03      B  1136    				db 'LD& ~',var_z,',SET& >',var_
002911 2C534554 26203E 02 
002919 2C2480 
                           B  1137    
00291C 25 02 202480        B  1138    ddcb_fdcb_z6	db '%',var_y,' $',80h			002921 42495426 203E 02    B  1139    				db 'BIT& >',var_y,',$',80h		002928 2C2480 
00292B 52455326 203E 02    B  1140    				db 'RES& >',var_y,',$',80h		002932 2C2480 
002935 53455426 203E 02    B  1141    				db 'SET& >',var_y,',$',80h		00293C 2C2480 
                           B  1142    
                           B  1143    ;----------------------------------------------
                           B  1144    
00293F 3F3FBF              B  1145    bad_opcode	db '??','?'+80h
                           B  1146    
                           B  1147    ;----------------------------------------------
                           B  1148    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  94


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B  1149    
002942 C2C3C4C5 68806C80   B  1150    table_r		db 'B'+80h, 'C'+80h, 'D'+80h, 'E'+8
00294A 2480C1 
                           B  1151    
00294D C2C3C4C5 48804C80   B  1152    table_r2	db 'B'+80h, 'C'+80h, 'D'+80h, 'E'+8
002955 2480C1 
                           B  1153    
002958 42C344C5 DF53D0     B  1154    table_rp	db 'B','C'+80h, 'D','E'+80h, '_'+80
                           B  1155    
00295F 42C344C5 5F8041C6   B  1156    table_rp2	db 'B','C'+80h, 'D','E'+80h, '_',+8
                           B  1157    	
002967 4EDADA4E C3C350CF   B  1158    table_cc	db 'N','Z'+80h, 'Z'+80h, 'N','C'+80
00296F 50C5D0CD 
                           B  1159    	
002973 41444426 2041AC41   B  1160    table_alu	db 'ADD& A',','+80h, 'ADC& A',','+8
00297B 44432620 41AC5355 
002983 4226A053 42432041 
00298B 26AC 
00298D 414E4426 A0584F52   B  1161    			db 'AND&',' '+80h, 'XOR&',' '+80h, 
002995 26A04F52 26A04350 
00299D 26A0 
                           B  1162    			
00299F 524C4326 80525243   B  1163    table_rot	db 'RLC&',80h, 'RRC&',80h, 'RL&',80
0029A7 2680524C 26805252 
0029AF 2680 
0029B1 534C4126 80535241   B  1164    			db 'SLA&',80h, 'SRA&',80h, 'SLL&',8
0029B9 2680534C 4C268053 
0029C1 524C2680 
                           B  1165    	
0029C5 42C344C5 48CC49D8   B  1166    table_rp3	db 'B','C'+80h, 'D','E'+80h, 'H','L
                           B  1167    
0029CD 42C344C5 48CC49D9   B  1168    table_rp4	db 'B','C'+80h, 'D','E'+80h, 'H','L
                           B  1169    
0029D5 42C344C5 48CC5F80   B  1170    table_rp5	db 'B','C'+80h, 'D','E'+80h, 'H','L
                           B  1171    
0029DD 30B0                B  1172    table_rst	db '0','0'+80h
0029DF 30B8                B  1173    			db '0','8'+80h
0029E1 31B0                B  1174    			db '1','0'+80h
0029E3 31B8                B  1175    			db '1','8'+80h
0029E5 32B0                B  1176    			db '2','0'+80h
0029E7 32B8                B  1177    			db '2','8'+80h	
0029E9 33B0                B  1178    			db '3','0'+80h
0029EB 33B8                B  1179    			db '3','8'+80h			
                           B  1180    
                           B  1181    ;----------------------------------------------
                           B  1182    
                           B  1183    ; "_" = HL, IX, IY depending on prefix 
                           B  1184    ; "|" = as above with IX/IY switched
                           B  1185    
                           B  1186    ; "h" = H, IXH, IYL depending on prefix
                           B  1187    ; "l" = L, IXL, IYL depending on prefix
                           B  1188    ; "$" = (HL), (IX+d), (IY+d) depending on prefi
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  95


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\d.asm
                           B  1189    
0029ED 48CC49D8 49D9       B  1190    hl_subs		db 'H','L'+80h, 'I','X'+80h, 'I','Y
0029F3 48CC49D9 49D8       B  1191    inv_hl_subs	db 'H','L'+80h, 'I','Y'+80h, 'I','X
0029F9 C84958C8 4959C8     B  1192    h_subs		db 'H'+80h, 'IX','H'+80h, 'IY','H'+
002A00 CC4958CC 4959CC     B  1193    l_subs		db 'L'+80h, 'IX','L'+80h, 'IY','L'+
002A07 28484CA9 2849582F   B  1194    ind_hl_subs	db '(HL',')'+80h, '(IX/',')'+80h, '
002A0F A9284959 2FA9 
                           B  1195    
                           B  1196    ;----------------------------------------------
                           B  1197    
002A15                     B  1198    adl_prefix_list
                           B  1199    
002A15 2E5349D3 2E4C49D3   B  1200    			db '.SI','S'+80h, '.LI','S'+80h, '.
002A1D 2E5349CC 2E4C49CC 
                           B  1201    
                           B  1202    ;----------------------------------------------
                           B  1203    
002A25 000000              B  1204    d_work_address	dw24 0
                           B  1205    
002A28 2D2D00              B  1206    output_byte_txt	db "--",0
002A2B 2D00                B  1207    output_char_txt	db "-",0
                           B  1208    
002A2D 000001              B  1209    dis_addr		dw24 10000h
                           B  1210    
                           B  1211    ;----------------------------------------------
                           B  1212    
                           B     0    	include 'commands\del.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"del" delete file command. V0.03
                           B     3    ;----------------------------------------------
                           B     4    
                           B     5    
002A30 CD 1A 18 00         B     6    os_cmd_del		call os_check_volume_format	
002A34 C0                  B     7    				ret nz
                           B     8    			
002A35 CD 12 3E 00         B     9    				call os_cache_original_vol_dir
002A39 CD 42 2A 00         B    10    				call do_del
002A3D CD FD 3D 00         B    11    				call os_restore_original_vol_di
002A41 C9                  B    12    				ret
                           B    13    			
002A42 CD 9E 11 00         B    14    do_del			call os_scan_for_non_space		002A46 CA 1F 2F 00         B    15    				jp z,missing_args
                           B    16    
002A4A AF                  B    17    				xor a							002A4B CD 93 3D 00         B    18    				call os_parse_path_string
002A4F C0                  B    19    				ret nz
002A50 C3 78 18 00         B    20    				jp os_erase_file				                           B    21    				
                           B    22    				
                           B    23    ;----------------------------------------------
                           B     0    	include 'commands\dir.asm'
                           B     1    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  96


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\dir.asm
                           B     2    ; FAT16 'dir' - show directory command. v0.04
                           B     3    ;----------------------------------------------
                           B     4    
002A54 CD 1A 18 00         B     5    os_cmd_dir		call os_check_volume_format	
002A58 C0                  B     6    				ret nz
                           B     7    				
002A59 CD 12 3E 00         B     8    				call os_cache_original_vol_dir
002A5D CD 66 2A 00         B     9    				call do_dir
002A61 CD FD 3D 00         B    10    				call os_restore_original_vol_di
002A65 C9                  B    11    				ret
                           B    12    				
002A66 CD 9E 11 00         B    13    do_dir			call os_scan_for_non_space		002A6A 28 07               B    14    				jr z,dir_no_args
                           B    15    				
002A6C 3E01                B    16    				ld a,1							002A6E CD 93 3D 00         B    17    				call os_parse_path_string
002A72 C0                  B    18    				ret nz
                           B    19    										
002A73 CD 87 2B 00         B    20    dir_no_args		call div_line
002A77 CD 01 5F 00         B    21    				call fs_get_current_dir_name	002A7B D8                  B    22    				ret c
002A7C C0                  B    23    				ret nz
002A7D CD 00 11 00         B    24    				call os_print_string
002A81 CD ED 1B 00         B    25    				call fs_get_dir_cluster			002A85 7A                  B    26    				ld a,d
002A86 B3                  B    27    				or e
002A87 20 08               B    28    				jr nz,dcmdnr
002A89 CD E2 5B 00         B    29    				call fs_get_volume_label
002A8D CD 00 11 00         B    30    				call os_print_string
002A91 CD A6 15 00         B    31    dcmdnr			call os_new_line
                           B    32    				
002A95 CD 87 2B 00         B    33    nrootdir		call div_line
002A99 CD E7 5A 00         B    34    				call fs_goto_first_dir_entry
002A9D D8                  B    35    				ret c
002A9E 20 6F               B    36    				jr nz,os_dlr
002AA0 AF                  B    37    				xor a
002AA1 32 19 6E 00         B    38    				ld (os_linecount),a
                           B    39    				
002AA5 CD FE 5A 00         B    40    os_dfllp		call fs_get_dir_entry			002AA9 D8                  B    41    				ret c
002AAA 20 63               B    42    				jr nz,os_dlr					002AAC C5                  B    43    				push bc
002AAD CD 00 11 00         B    44    				call os_print_string			002AB1 CD D1 15 00         B    45    				call os_get_cursor_position		002AB5 060E                B    46    				ld b,14
002AB7 CD B1 15 00         B    47    				call os_set_cursor_position	
002ABB C1                  B    48    				pop bc
002ABC CB40                B    49    				bit 0,b							002ABE 28 06               B    50    				jr z,os_deif		
002AC0 21 94 2B 00         B    51    				ld hl,dir_txt					002AC4 18 32               B    52    				jr os_dpl
                           B    53    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  97


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\dir.asm
002AC6 21 3A 62 00         B    54    os_deif			ld hl,os_hex_prefix_txt			002ACA CD 00 11 00         B    55    				call os_print_string
002ACE ED530001 00         B    56    				ld (scratch_pad),de
002AD3 79                  B    57    				ld a,c
002AD4 32030100            B    58    				ld (scratch_pad+3),a
002AD8 21 84 6E 00         B    59    				ld hl,output_line
002ADC E5                  B    60    				push hl
002ADD ED5B0201 00         B    61    				ld de,(scratch_pad+2)
002AE2 CD 6E 12 00         B    62    				call hexword_to_ascii
002AE6 ED5B0001 00         B    63    				ld de,(scratch_pad)
002AEB CD 6E 12 00         B    64    				call hexword_to_ascii
002AEF 3600                B    65    				ld (hl),0
002AF1 E1                  B    66    				pop hl
002AF2 0607                B    67    				ld b,7							002AF4 CD 26 12 00         B    68    				call os_skip_leading_ascii_zero
002AF8 CD 00 11 00         B    69    os_dpl			call os_print_string
002AFC CD A6 15 00         B    70    				call os_new_line
                           B    71    				
002B00 CD 8B 5B 00         B    72    				call fs_goto_next_dir_entry
002B04 20 09               B    73    				jr nz,os_dlr					002B06 CD A4 13 00         B    74    				call os_count_lines
002B0A 3E79                B    75    				ld a,'y'
002B0C B8                  B    76    				cp b
002B0D 28 96               B    77    				jr z,os_dfllp
                           B    78    				
002B0F CD 87 2B 00         B    79    os_dlr			call div_line					002B13 CD E5 54 00         B    80    				call fs_calc_free_space
002B17 D8                  B    81    				ret c	
                           B    82    				
002B18 CD 26 2B 00         B    83    				call show_capacity				002B1C 21 A4 2B 00         B    84    				ld hl,free_txt
002B20 CD 00 11 00         B    85    				call os_print_string
002B24 AF                  B    86    				xor a
002B25 C9                  B    87    				ret
                           B    88    				
                           B    89    ;----------------------------------------------
                           B    90    
002B26                     B    91    show_capacity	
                           B    92    
                           B    93    ; set xDE = capacity in KB
                           B    94    ; (trashes all other registers!)
                           B    95    
002B26 DD21 9A 2B 00       B    96    				ld ix,dir_kb_txt
002B2B AF                  B    97    				xor a
002B2C D5                  B    98    				push de
002B2D E1                  B    99    				pop hl
002B2E 01241000            B   100    				ld bc,1024h
002B32 ED42                B   101    				sbc hl,bc
002B34 38 0B               B   102    				jr c,showresinkb
002B36 060A                B   103    				ld b,10
002B38 CD 4D 2B 00         B   104    				call shr_de
002B3C DD21 9F 2B 00       B   105    				ld ix,dir_mb_txt
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  98


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\dir.asm
002B41 CD 60 2B 00         B   106    showresinkb		call show_xde_decimal
002B45 DDE5                B   107    				push ix
002B47 E1                  B   108    				pop hl
002B48 CD 00 11 00         B   109    				call os_print_string
002B4C C9                  B   110    				ret
                           B   111    				
                           B   112    ;----------------------------------------------
                           B   113    
                           B   114    ; Set xDE = value to shift
                           B   115    ; Set B = number of places to shift right (0-23
                           B   116    	
002B4D E5                  B   117    shr_de			push hl
002B4E 3E18                B   118    				ld a,24
002B50 90                  B   119    				sub b
002B51 47                  B   120    				ld b,a
002B52 21000000            B   121    				ld hl,0
002B56 EB                  B   122    				ex de,hl
002B57 29                  B   123    divde_lp		add hl,hl
002B58 EB                  B   124    				ex de,hl
002B59 ED6A                B   125    				adc hl,hl
002B5B EB                  B   126    				ex de,hl
002B5C 10 F9               B   127    				djnz divde_lp
002B5E E1                  B   128    				pop hl
002B5F C9                  B   129    				ret
                           B   130    				
                           B   131    ;----------------------------------------------
                           B   132    
002B60                     B   133    show_xde_decimal
                           B   134    
002B60 CD 39 14 00         B   135    				call os_hex_to_decimal			002B64 11070000            B   136    				ld de,7
002B68 19                  B   137    				add hl,de						002B69 43                  B   138    				ld b,e
002B6A 11 84 6E 00         B   139    				ld de,output_line
002B6E D5                  B   140    				push de
002B6F 7E                  B   141    dec2strlp		ld a,(hl)						002B70 B7                  B   142    				or a
002B71 20 03               B   143    				jr nz,foundlnz
002B73 2B                  B   144    				dec hl
002B74 10 F9               B   145    				djnz dec2strlp
002B76 04                  B   146    foundlnz		inc b
002B77 7E                  B   147    ndecchar		ld a,(hl)						002B78 C630                B   148    				add a,030h
002B7A 12                  B   149    				ld (de),a
002B7B 13                  B   150    				inc de
002B7C 2B                  B   151    				dec hl
002B7D 10 F8               B   152    				djnz ndecchar
002B7F AF                  B   153    				xor a
002B80 12                  B   154    				ld (de),a
002B81 E1                  B   155    				pop hl							002B82 CD 00 11 00         B   156    				call os_print_string
002B86 C9                  B   157    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page:  99


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\dir.asm
                           B   158    
                           B   159    ;----------------------------------------------
                           B   160    			
002B87 0E2D                B   161    div_line		ld c,'-'
002B89 0613                B   162    				ld b,19
002B8B CD D5 1B 00         B   163    				call os_print_multiple_chars
002B8F CD A6 15 00         B   164    				call os_new_line
002B93 C9                  B   165    				ret
                           B   166    
                           B   167    ;----------------------------------------------
                           B   168    
002B94 5B444952 5D00       B   169    dir_txt			db '[DIR]',0
                           B   170    
002B9A 204B4220 00         B   171    dir_kb_txt		db ' KB ',0
002B9F 204D4220 00         B   172    dir_mb_txt		db ' MB ',0
002BA4 46726565 0B00       B   173    free_txt		db 'Free',11,0
                           B   174    
                           B   175    ;----------------------------------------------
                           B   176    	
                           B     0    	include 'commands\f.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"f" fill memory command. V0.02 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
002BAA                     B     5    os_cmd_f			
                           B     6    
002BAA CD F1 1D 00         B     7    				call get_start_and_end			                           B     8    			
002BAE CD 1A 1E 00         B     9    				call hexword_or_bust			002BB2 CA AA 17 00         B    10    				jp z,os_no_args_error			002BB6 7B                  B    11    				ld a,e
002BB7 32 30 6E 00         B    12    				ld (fillbyte),a
                           B    13    					
002BBB CD DF 1D 00         B    14    				call test_mem_range
002BBF DA A6 17 00         B    15    				jp c,os_range_error				                           B    16    					
002BC3 3A 30 6E 00         B    17    				ld a,(fillbyte)
002BC7 77                  B    18    f_floop			ld (hl),a
002BC8 EDA1                B    19    				cpi								002BCA EA C7 2B 00         B    20    				jp pe,f_floop
                           B    21    					
002BCE 3E20                B    22    				ld a,020h						002BD0 B7                  B    23    				or a
002BD1 C9                  B    24    				ret
                           B    25    
                           B    26    ;----------------------------------------------
                           B     0    	include 'commands\format.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"format" - format volume / device command. V0.
                           B     3    ;----------------------------------------------
                           B     4    
002BD2 7E                  B     5    os_cmd_format	ld a,(hl)						Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 100


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
002BD3 B7                  B     6    				or a
002BD4 20 04               B     7    				jr nz,fgotargs					002BD6 3E1F                B     8    				ld a,01fh						002BD8 B7                  B     9    				or a
002BD9 C9                  B    10    				ret
                           B    11    			
002BDA E5                  B    12    fgotargs		push hl
002BDB CD 89 11 00         B    13    				call os_next_arg				002BDF 20 04               B    14    				jr nz,fgotlab
002BE1 21 EE 2D 00         B    15    				ld hl,default_label
002BE5 22 34 01 00         B    16    fgotlab			ld (format_label_loc),hl
                           B    17    
002BE9 3E01                B    18    				ld a,1							002BEB CD B3 19 00         B    19    				call os_mount_volumes			002BEF E1                  B    20    				pop hl
                           B    21    				
                           B    22    ;----------------------------------------------
                           B    23    ; Format an entire device?
                           B    24    ;----------------------------------------------
                           B    25    
002BF0 3A 2F 6C 00         B    26    				ld a,(device_count)				002BF4 B7                  B    27    				or a
002BF5 CA 98 2C 00         B    28    				jr z,fno_dev
002BF9 47                  B    29    				ld b,a
002BFA 0E00                B    30    				ld c,0							002BFC DD21 D9 6C 00       B    31    				ld ix,host_device_hardware_info
002C01 DD7E00              B    32    fdev_lp			ld a,(ix)						002C04 CD BF 1B 00         B    33    				call locate_driver_base			002C08 D5                  B    34    				push de
002C09 FDE1                B    35    				pop iy
002C0B ED130C              B    36    				lea de,iy+0ch					002C0E C5                  B    37    				push bc
002C0F 0607                B    38    				ld b,7
002C11 CD CD 13 00         B    39    				call os_compare_strings
002C15 C1                  B    40    				pop bc
002C16 28 0A               B    41    				jr z,format_dev
002C18 ED3220              B    42    				lea ix,ix+20h					002C1B 0C                  B    43    				inc c
002C1C 10 E3               B    44    				djnz fdev_lp
002C1E C3 BF 2C 00         B    45    				jr form_vol_req
                           B    46    				
002C22 C5                  B    47    format_dev		push bc							002C23 CD A6 15 00         B    48    				call os_new_line
002C27 21 BA 2D 00         B    49    				ld hl,form_dev_warn1
002C2B CD DD 15 00         B    50    				call os_show_packed_text
002C2F C1                  B    51    				pop bc
                           B    52    				
002C30 79                  B    53    				ld a,c							002C31 C630                B    54    				add a,030h
002C33 32 3B 6C 00         B    55    				ld (dev_txt+3),a
002C37 21 38 6C 00         B    56    				ld hl,dev_txt	
002C3B CD 00 11 00         B    57    				call os_print_string			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 101


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
                           B    58    				
002C3F 79                  B    59    				ld a,c							002C40 CD 9C 2C 00         B    60    				call setup_dev_format			002C44 30 52               B    61    				jr nc,fno_dev	
002C46 3A 2E 6C 00         B    62    				ld a,(current_driver)
002C4A CD A6 1B 00         B    63    				call show_dev_driver_name		                           B    64    								
002C4E DD7E04              B    65    				ld a,(ix+4)
002C51 B7                  B    66    				or a
002C52 28 06               B    67    				jr z,less16gb
002C54 21 F9 2D 00         B    68    				ld hl,dev16gbplus_txt
002C58 18 1D               B    69    				jr form_capdone
002C5A 0601                B    70    less16gb		ld b,1
002C5C CD 4D 2B 00         B    71    				call shr_de						002C60 3E28                B    72    				ld a,'('
002C62 CD 42 11 00         B    73    				call os_print_char
002C66 DDE5                B    74    				push ix
002C68 DD1701              B    75    				ld de,(ix+1)					002C6B 0601                B    76    				ld b,1
002C6D CD 4D 2B 00         B    77    				call shr_de						002C71 CD 26 2B 00         B    78    				call show_capacity				002C75 DDE1                B    79    				pop ix
002C77 ED2205              B    80    form_capdone	lea hl,ix+5		
002C7A CD 00 11 00         B    81    				call os_print_string			002C7E 3E29                B    82    				ld a,')'
002C80 CD 42 11 00         B    83    				call os_print_char
                           B    84    
002C84 CD A6 15 00         B    85    				call os_new_line
002C88 CD A6 15 00         B    86    				call os_new_line
002C8C 21 C1 2D 00         B    87    				ld hl,form_warn2
002C90 CD B1 2D 00         B    88    				call show_packed_text_and_cr
                           B    89    				
002C94 C3 60 2D 00         B    90    				jp confirm_format
                           B    91    			
                           B    92    
                           B    93    
                           B    94    
002C98 3ED0                B    95    fno_dev			ld a,0d0h						002C9A B7                  B    96    				or a
002C9B C9                  B    97    				ret
                           B    98    				
                           B    99    	
                           B   100    	
002C9C                     B   101    setup_dev_format
                           B   102    
                           B   103    ; set A to device
                           B   104    					
002C9C CD 33 1C 00         B   105    				call dev_to_driver_lookup		002CA0 D0                  B   106    				ret nc							002CA1 32 2E 6C 00         B   107    				ld (current_driver),a			002CA5 E5                  B   108    				push hl
002CA6 DDE1                B   109    				pop ix
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 102


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
002CA8 DD1701              B   110    				ld de,(ix+1)					002CAB ED53 F6 60 00       B   111    				ld (partition_size),de
002CB0 21000000            B   112    				ld hl,0							002CB4 22 F9 60 00         B   113    				ld (partition_base),hl			002CB8 AF                  B   114    				xor a
002CB9 32 FC 60 00         B   115    				ld (partition_base+3),a
002CBD 37                  B   116    				scf								002CBE C9                  B   117    				ret
                           B   118    								
                           B   119    
                           B   120    ;----------------------------------------------
                           B   121    ; Format a volume?
                           B   122    ;----------------------------------------------
                           B   123    
002CBF 22 30 01 00         B   124    form_vol_req	ld (format_target_name),hl
002CC3 CD 24 10 00         B   125    				call test_volx					002CC7 C2 5C 2D 00         B   126    				jr nz,bad_vol
002CCB D630                B   127    				sub a,30h
002CCD 32 33 01 00         B   128    				ld (format_target_volume),a		002CD1 11100000            B   129    				ld de,16
002CD5 57                  B   130    				ld d,a
002CD6 ED5C                B   131    				mlt de
002CD8 DD21 59 6C 00       B   132    				ld ix,volume_mount_list	
002CDD DD19                B   133    				add ix,de
002CDF DD7E00              B   134    				ld a,(ix)
002CE2 B7                  B   135    				or a
002CE3 28 77               B   136    				jr z,bad_vol					                           B   137    				
002CE5 DD1704              B   138    				ld de,(ix+4)
002CE8 ED53 F6 60 00       B   139    				ld (partition_size),de
002CED DD1708              B   140    				ld de,(ix+8)
002CF0 ED53 F9 60 00       B   141    				ld (partition_base),de
002CF5 DD7E0B              B   142    				ld a,(ix+0bh)
002CF8 32 FC 60 00         B   143    				ld (partition_base+3),a
002CFC DD7E01              B   144    				ld a,(ix+1)						002CFF 32 2E 6C 00         B   145    				ld (current_driver),a
                           B   146    				
002D03 CD A6 15 00         B   147    				call os_new_line
002D07 21 CB 2D 00         B   148    				ld hl,form_vol_warn1
002D0B CD B1 2D 00         B   149    				call show_packed_text_and_cr	002D0F CD A6 15 00         B   150    				call os_new_line
                           B   151    				
002D13 DD2A 30 01 00       B   152    				ld ix,(format_target_name)		002D18 DD360500            B   153    				ld (ix+5),0
002D1C ED2200              B   154    				lea hl,ix+0
002D1F CD 00 11 00         B   155    				call os_print_string			                           B   156    				
002D23 3A 2D 6C 00         B   157    				ld a,(current_volume)
002D27 F5                  B   158    				push af
002D28 3A 33 01 00         B   159    				ld a,(format_target_volume)
002D2C CD 49 1C 00         B   160    				call os_change_volume
002D30 20 0A               B   161    				jr nz,no_vollab
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 103


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
002D32 CD E2 5B 00         B   162    				call fs_get_volume_label
002D36 20 04               B   163    				jr nz,no_vollab
002D38 CD 00 11 00         B   164    				call os_print_string			002D3C F1                  B   165    no_vollab		pop af
002D3D 32 2D 6C 00         B   166    				ld (current_volume),a
                           B   167    				
002D41 CD A6 15 00         B   168    				call os_new_line
002D45 CD A6 15 00         B   169    				call os_new_line
002D49 21 C1 2D 00         B   170    				ld hl,form_warn2
002D4D CD B1 2D 00         B   171    				call show_packed_text_and_cr	                           B   172    
002D51 CD 60 2D 00         B   173    				call confirm_format
002D55 F5                  B   174    				push af
002D56 CD 74 1C 00         B   175    				call fs_set_driver_for_volume
002D5A F1                  B   176    				pop af
002D5B C9                  B   177    				ret
                           B   178    
002D5C 3ECF                B   179    bad_vol			ld a,0cfh						002D5E B7                  B   180    				or a
002D5F C9                  B   181    				ret
                           B   182    		
                           B   183    			
                           B   184    ;----------------------------------------------
                           B   185    
                           B   186    
002D60                     B   187    confirm_format
                           B   188    
002D60 CD 99 2D 00         B   189    				call confirm_yes
002D64 20 2B               B   190    				jr nz,abort_format
                           B   191    				
002D66 21 D0 2D 00         B   192    				ld hl,formatting_txt			002D6A CD 00 11 00         B   193    				call os_print_string
                           B   194    				
002D6E 2A 34 01 00         B   195    				ld hl,(format_label_loc)
002D72 CD 00 52 00         B   196    				call fs_format_partition
002D76 38 0F               B   197    				jr c,form_err
002D78 20 0D               B   198    				jr nz,form_err
                           B   199    			
002D7A 21 E0 2D 00         B   200    				ld hl,ok_txt					002D7E CD 00 11 00         B   201    				call os_print_string
                           B   202    				
002D82 CD BA 35 00         B   203    f_end			call os_cmd_remount				002D86 C9                  B   204    				ret
                           B   205    
                           B   206    
002D87 21 E5 2D 00         B   207    form_err		ld hl,ferr_txt
002D8B CD 00 11 00         B   208    				call os_print_string
002D8F 18 F1               B   209    				jr f_end
                           B   210    				
                           B   211    
                           B   212    
002D91 CD A6 15 00         B   213    abort_format	call os_new_line
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 104


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
002D95 3E24                B   214    				ld a,024h						002D97 B7                  B   215    				or a
002D98 C9                  B   216    				ret
                           B   217    
                           B   218    
002D99 21000100            B   219    confirm_yes		ld hl,scratch_pad
002D9D 1E03                B   220    				ld e,3
002D9F E5                  B   221    				push hl
002DA0 CD D2 12 00         B   222    				call os_user_input
002DA4 E1                  B   223    				pop hl
002DA5 C0                  B   224    				ret nz
002DA6 0603                B   225    				ld b,3
002DA8 11 78 66 00         B   226    				ld de,yes_txt+1
002DAC CD CD 13 00         B   227    				call os_compare_strings
002DB0 C9                  B   228    				ret
                           B   229    			
                           B   230    			
002DB1                     B   231    show_packed_text_and_cr
                           B   232    			
002DB1 CD DD 15 00         B   233    				call os_show_packed_text
002DB5 CD A6 15 00         B   234    				call os_new_line
002DB9 C9                  B   235    				ret
                           B   236    			
                           B   237    ;----------------------------------------------
                           B   238    
002DBA                     B   239    form_dev_warn1
                           B   240    
002DBA 27283640 979700     B   241    				db 027h,028h,036h,040h,097h,097
                           B   242    
002DC1                     B   243    form_warn2
                           B   244    
002DC1 52467E98 9EA2A3A5   B   245    				db 052h,046h,07eh,098h,09eh,0a2
002DC9 9700 
                           B   246    
002DCB                     B   247    form_vol_warn1
                           B   248    	
002DCB 27286F40 00         B   249    				db 027h,028h,06fh,040h,0		                           B   250    
                           B   251    
002DD0                     B   252    formatting_txt
                           B   253    
002DD0 0B0B466F 726D6174   B   254    				db 11,11,'Formatting.. ',0
002DD8 74696E67 2E2E2000 
                           B   255    
002DE0 4F4B0B0B 00         B   256    ok_txt			db 'OK',11,11,0
                           B   257    
002DE5 4552524F 52210B0B   B   258    ferr_txt		db 'ERROR!',11,11,0
002DED 00 
                           B   259    
002DEE 50524F53 455F4449   B   260    default_label	db 'PROSE_DISK',0
002DF6 534B00 
                           B   261    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 105


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\format.asm
002DF9 28313647 422B2000   B   262    dev16gbplus_txt	db '(16GB+ ',0
                           B   263    
                           B   264    ;----------------------------------------------
                           B   265    
       00000130            B   266    format_target_name		equ scratch_pad+30h		       00000133            B   267    format_target_volume	equ scratch_pad+33h		       00000134            B   268    format_label_loc		equ scratch_pad+34h
                           B   269    
                           B   270    ;----------------------------------------------
                           B   271    
                           B     0    	include 'commands\h.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"H" - Hunt in memory command V0.02 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
002E01 CD F1 1D 00         B     5    os_cmd_h		call get_start_and_end			002E05 22 29 6E 00         B     6    				ld (find_hexstringascii),hl		                           B     7    
002E09 CD DF 1D 00         B     8    				call test_mem_range
002E0D DA A6 17 00         B     9    				jp c,os_range_error				                           B    10    			
002E11 AF                  B    11    				xor a
002E12 32 AE 2E 00         B    12    				ld (h_ascii_mode),a
                           B    13    				
002E16 2A 29 6E 00         B    14    				ld hl,(find_hexstringascii)
002E1A 0600                B    15    				ld b,0
002E1C 7E                  B    16    h_lfascii		ld a,(hl)						002E1D B7                  B    17    				or a
002E1E 28 28               B    18    				jr z,h_no_text					002E20 FE22                B    19    				cp 022h
002E22 28 03               B    20    				jr z,h_found_quote
002E24 23                  B    21    				inc hl
002E25 18 F5               B    22    				jr h_lfascii
002E27 23                  B    23    h_found_quote	inc hl
002E28 22 29 6E 00         B    24    				ld (find_hexstringascii),hl
002E2C 7E                  B    25    h_fasc_len		ld a,(hl)
002E2D B7                  B    26    				or a
002E2E CA AA 17 00         B    27    				jp z,os_no_args_error			002E32 FE22                B    28    				cp 022h
002E34 28 04               B    29    				jr z,h_startas
002E36 23                  B    30    				inc hl
002E37 04                  B    31    				inc b
002E38 18 F2               B    32    				jr h_fasc_len
                           B    33    
002E3A 78                  B    34    h_startas		ld a,b
002E3B B7                  B    35    				or a
002E3C CA AA 17 00         B    36    				jp z,os_no_args_error			002E40 3E01                B    37    				ld a,1
002E42 32 AE 2E 00         B    38    				ld (h_ascii_mode),a
002E46 18 16               B    39    				jr h_start_search
                           B    40    						
                           B    41    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 106


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\h.asm
002E48 2A 29 6E 00         B    42    h_no_text		ld hl,(find_hexstringascii)
002E4C 0600                B    43    				ld b,0							002E4E CD 1A 1E 00         B    44    cntfbyts		call hexword_or_bust			002E52 28 04               B    45    				jr z,gthexstr
002E54 04                  B    46    				inc b
002E55 23                  B    47    				inc hl
002E56 18 F6               B    48    				jr cntfbyts
002E58 78                  B    49    gthexstr		ld a,b
002E59 B7                  B    50    				or a
002E5A CA AA 17 00         B    51    				jp z,os_no_args_error	
                           B    52    
                           B    53    
002E5E                     B    54    h_start_search
                           B    55    	
002E5E DD2A 1D 6E 00       B    56    				ld ix,(cmdop_start_address)		002E63 DDE5                B    57    fndloop1		push ix
002E65 FDE1                B    58    				pop iy
002E67 48                  B    59    				ld c,b							002E68 2A 29 6E 00         B    60    				ld hl,(find_hexstringascii)
002E6C 3A AE 2E 00         B    61    fcmloop			ld a,(h_ascii_mode)
002E70 B7                  B    62    				or a
002E71 28 08               B    63    				jr z,h_hex
002E73 FD7E00              B    64    				ld a,(iy)
002E76 BE                  B    65    				cp (hl)
002E77 20 23               B    66    				jr nz,nofmatch
002E79 18 0A               B    67    				jr h_matched
002E7B CD 7D 12 00         B    68    h_hex			call ascii_to_hexword			002E7F FD7E00              B    69    				ld a,(iy)
002E82 BB                  B    70    				cp e
002E83 20 17               B    71    				jr nz,nofmatch
002E85 FD23                B    72    h_matched		inc iy
002E87 23                  B    73    				inc hl
002E88 0D                  B    74    				dec c
002E89 20 E1               B    75    				jr nz,fcmloop
                           B    76    			
002E8B DDE5                B    77    				push ix							002E8D D1                  B    78    				pop de							002E8E DDE5                B    79    				push ix
002E90 C5                  B    80    				push bc
002E91 CD DE 14 00         B    81    				call os_show_hex_address
002E95 CD A6 15 00         B    82    				call os_new_line
002E99 C1                  B    83    				pop bc
002E9A DDE1                B    84    				pop ix
                           B    85    				
002E9C DDE5                B    86    nofmatch		push ix
002E9E DD23                B    87    				inc ix
002EA0 D1                  B    88    				pop de
002EA1 2A 20 6E 00         B    89    				ld hl,(cmdop_end_address)
002EA5 AF                  B    90    				xor a
002EA6 ED52                B    91    				sbc hl,de
002EA8 20 B9               B    92    				jr nz,fndloop1
                           B    93    							
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 107


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\h.asm
002EAA 3E20                B    94    				ld a,020h						002EAC B7                  B    95    				or a
002EAD C9                  B    96    				ret
                           B    97    			
                           B    98    ;----------------------------------------------
                           B    99    
002EAE 00                  B   100    h_ascii_mode	db 0
                           B   101    
                           B   102    ;----------------------------------------------
                           B     0    	include 'commands\help.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"?" - List commands. V0.03 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
002EAF                     B     5    os_cmd_help		
002EAF AF                  B     6    				xor a
002EB0 32 19 6E 00         B     7    				ld (os_linecount),a
                           B     8    				
002EB4 21 00 68 00         B     9    				ld hl,packed_help1
002EB8 CD DD 15 00         B    10    show_page		call os_show_packed_text
002EBC E5                  B    11    				push hl
002EBD CD A6 15 00         B    12    				call os_new_line
002EC1 E1                  B    13    				pop hl
002EC2 23                  B    14    				inc hl						;sk
002EC3 7E                  B    15    				ld a,(hl)
002EC4 FEFF                B    16    				cp 0ffh						;la
002EC6 28 09               B    17    				jr z,last_help_page
                           B    18    				
002EC8 CD A4 13 00         B    19    				call os_count_lines
002ECC 78                  B    20    				ld a,b
002ECD FE79                B    21    				cp 'y'
002ECF 28 E7               B    22    				jr z,show_page
                           B    23    
002ED1                     B    24    last_help_page
002ED1 AF                  B    25    				xor a
002ED2 C9                  B    26    				ret	
                           B    27    	
                           B    28    ;----------------------------------------------
                           B    29    	
                           B     0    	include 'commands\gtr.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;">" for write ascii bytes to memory command. V
                           B     3    ;----------------------------------------------
                           B     4    
002ED3                     B     5    os_cmd_gtr
                           B     6    
002ED3 CD 1A 1E 00         B     7    				call hexword_or_bust			002ED7 CA 92 17 00         B     8    				jp z,os_no_start_addr
002EDB 23                  B     9    fndquot1		inc hl
002EDC 7E                  B    10    				ld a,(hl)
002EDD B7                  B    11    				or a
002EDE CA AA 17 00         B    12    				jp z,os_no_args_error
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 108


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\gtr.asm
002EE2 FE22                B    13    				cp 022h							002EE4 20 F5               B    14    				jr nz,fndquot1
002EE6 23                  B    15    				inc hl
002EE7 E5                  B    16    				push hl
002EE8 7E                  B    17    fndquot2		ld a,(hl)
002EE9 23                  B    18    				inc hl
002EEA B7                  B    19    				or a
002EEB 28 15               B    20    				jr z,noquot2
002EED FE22                B    21    				cp 022h							002EEF 20 F7               B    22    				jr nz,fndquot2
002EF1 E1                  B    23    				pop hl
                           B    24    					
002EF2 7E                  B    25    wmbalp			ld a,(hl)						002EF3 FE22                B    26    				cp 022h
002EF5 28 09               B    27    				jr z,os_gtrdn					002EF7 FE7D                B    28    				cp 07dh
002EF9 28 01               B    29    				jr z,skpnasc
002EFB 12                  B    30    				ld (de),a
002EFC 13                  B    31    skpnasc			inc de
002EFD 23                  B    32    				inc hl
002EFE 18 F2               B    33    				jr wmbalp
002F00 AF                  B    34    os_gtrdn		xor a
002F01 C9                  B    35    				ret	
                           B    36    				
002F02 E1                  B    37    noquot2			pop hl							002F03 3E12                B    38    				ld a,012h
002F05 B7                  B    39    				or a
002F06 C9                  B    40    				ret
                           B    41    
                           B    42    ;----------------------------------------------
                           B     0    	include 'commands\lb.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"lb" - Load binary file command. V0.05
                           B     3    ;----------------------------------------------
                           B     4    
002F07 CD 1A 18 00         B     5    os_cmd_lb		call os_check_volume_format	
002F0B C0                  B     6    				ret nz
                           B     7    				
002F0C CD 12 3E 00         B     8    				call os_cache_original_vol_dir
002F10 CD 19 2F 00         B     9    				call do_lb
002F14 CD FD 3D 00         B    10    				call os_restore_original_vol_di
002F18 C9                  B    11    				ret
                           B    12    				
002F19 CD 9E 11 00         B    13    do_lb			call os_scan_for_non_space		002F1D 20 04               B    14    				jr nz,lb_got_fn
002F1F 3E8D                B    15    missing_args	ld a,8dh
002F21 B7                  B    16    				or a
002F22 C9                  B    17    				ret
                           B    18    				
002F23 AF                  B    19    lb_got_fn		xor a
002F24 CD 93 3D 00         B    20    				call os_parse_path_string
002F28 C0                  B    21    				ret nz
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 109


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\lb.asm
002F29 CD B2 17 00         B    22    				call os_find_file				002F2D C0                  B    23    				ret nz
002F2E ED53 03 01 00       B    24    				ld (filesize_cache),de			002F33 2A 6A 6D 00         B    25    				ld hl,(free_sysram_base)
002F37 22 00 01 00         B    26    				ld (data_load_addr),hl			                           B    27    				
002F3B 2A D6 6E 00         B    28    				ld hl,(os_args_loc)
002F3F CD 89 11 00         B    29    				call os_next_arg
002F43 CD 7D 12 00         B    30    				call ascii_to_hexword			002F47 28 05               B    31    				jr z,lb_argsok
002F49 FE81                B    32    				cp 81h
002F4B 28 D2               B    33    				jr z,missing_args
002F4D C9                  B    34    				ret
                           B    35    				
002F4E ED53 00 01 00       B    36    lb_argsok		ld (data_load_addr),de
002F53 ED4B 00 01 00       B    37    				ld bc,(data_load_addr)			002F58 C5                  B    38    				push bc
002F59 E1                  B    39    				pop hl
002F5A ED5B 03 01 00       B    40    				ld de,(filesize_cache)
002F5F 19                  B    41    				add hl,de
002F60 EB                  B    42    				ex de,hl
002F61 CD D3 3C 00         B    43    				call os_protected_ram_test
002F65 C4 25 3D 00         B    44    				call nz,os_protected_ram_query
002F69 C0                  B    45    				ret nz
                           B    46    
002F6A 2A 00 01 00         B    47    				ld hl,(data_load_addr)			002F6E CD DF 17 00         B    48    				call os_read_bytes_from_file
002F72 C0                  B    49    				ret nz
                           B    50    			
002F73                     B    51    report_bytes_loaded
                           B    52    
002F73 21 3A 62 00         B    53    				ld hl,os_hex_prefix_txt			002F77 CD 00 11 00         B    54    				call os_print_string			                           B    55    				
002F7B 11 05 01 00         B    56    				ld de,filesize_cache+2			002F7F 21 84 6E 00         B    57    				ld hl,output_line
002F83 0603                B    58    				ld b,3
002F85 CD 3B 12 00         B    59    				call n_hexbytes_to_ascii
002F89 3600                B    60    				ld (hl),0	
002F8B 0605                B    61    				ld b,5							002F8D CD 14 15 00         B    62    				call os_print_output_line_skip_
                           B    63    				
002F91 21 A5 69 00         B    64    				ld hl,bytes_loaded_msg			002F95 CD DD 15 00         B    65    				call os_show_packed_text
                           B    66    				
002F99 21 98 62 00         B    67    				ld hl,to_txt					002F9D CD 00 11 00         B    68    				call os_print_string
                           B    69    
002FA1 21 3A 62 00         B    70    				ld hl,os_hex_prefix_txt			002FA5 CD 00 11 00         B    71    				call os_print_string	
                           B    72    
002FA9 ED5B 00 01 00       B    73    				ld de,(data_load_addr)			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 110


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\lb.asm
002FAE CD DE 14 00         B    74    				call os_show_hex_address
                           B    75    
002FB2 CD A6 15 00         B    76    				call os_new_line
002FB6 AF                  B    77    				xor a
002FB7 C9                  B    78    				ret
                           B    79    				
                           B    80    ;----------------------------------------------
                           B    81    
       00000100            B    82    data_load_addr	equ scratch_pad
       00000103            B    83    filesize_cache	equ scratch_pad+3
                           B    84    
                           B    85    ;----------------------------------------------
                           B     0    	include 'commands\m.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'m' - Show memory as hex bytes command. V0.02 
                           B     3    ;----------------------------------------------
                           B     4    
       00000010            B     5    bytes_per_line	equ 16
                           B     6    
002FB8 CD 1A 1E 00         B     7    os_cmd_m		call hexword_or_bust			002FBC 28 05               B     8    				jr z,m_no_hex					002FBE ED53 1A 6E 00       B     9    				ld (mem_mon_addr),de
                           B    10    				
002FC3 0610                B    11    m_no_hex		ld b,16							002FC5 C5                  B    12    smbllp			push bc							                           B    13    				
002FC6 21 FF 2F 00         B    14    				ld hl,colon_cmd_prefix			002FCA CD 00 11 00         B    15    				call os_print_string
002FCE ED5B 1A 6E 00       B    16    				ld de,(mem_mon_addr)
002FD3 CD DE 14 00         B    17    				call os_show_hex_address
                           B    18    
002FD7 21 84 6E 00         B    19    				ld hl,output_line
002FDB 0610                B    20    				ld b,bytes_per_line				002FDD 3620                B    21    mmbllp			ld (hl),' '
002FDF 23                  B    22    				inc hl
002FE0 1A                  B    23    				ld a,(de)	
002FE1 CD 49 12 00         B    24    				call hexbyte_to_ascii
002FE5 13                  B    25    				inc de
002FE6 10 F5               B    26    				djnz mmbllp
                           B    27    
002FE8 ED53 1A 6E 00       B    28    				ld (mem_mon_addr),de
002FED 360B                B    29    				ld (hl),11
002FEF 23                  B    30    				inc hl
002FF0 3600                B    31    				ld (hl),0
002FF2 21 84 6E 00         B    32    				ld hl,output_line
002FF6 CD 00 11 00         B    33    				call os_print_string
002FFA C1                  B    34    				pop bc
002FFB 10 C8               B    35    				djnz smbllp
                           B    36    				
002FFD AF                  B    37    				xor a
002FFE C9                  B    38    				ret
                           B    39    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 111


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\m.asm
                           B    40    ;----------------------------------------------
                           B    41    
002FFF 3A2000              B    42    colon_cmd_prefix	db ': ',0
                           B    43    
                           B    44    ;----------------------------------------------
                           B     0    	include 'commands\md.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"md" - Make dir command. V0.03
                           B     3    ;----------------------------------------------
                           B     4    
003002 CD 1A 18 00         B     5    os_cmd_md		call os_check_volume_format	
003006 C0                  B     6    				ret nz
                           B     7    			
003007 CD 12 3E 00         B     8    				call os_cache_original_vol_dir
00300B CD 14 30 00         B     9    				call do_md
00300F CD FD 3D 00         B    10    				call os_restore_original_vol_di
003013 C9                  B    11    				ret
                           B    12    			
003014 CD 9E 11 00         B    13    do_md			call os_scan_for_non_space		003018 CA 1F 2F 00         B    14    				jp z,missing_args
                           B    15    				
00301C AF                  B    16    				xor a							00301D CD 93 3D 00         B    17    				call os_parse_path_string
003021 C0                  B    18    				ret nz
                           B    19    				
003022 C3 50 18 00         B    20    				jp os_make_dir					                           B    21    				
                           B    22    ;----------------------------------------------
                           B     0    	include 'commands\r.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'R' - show CPU register values saved on return
                           B     3    ;----------------------------------------------
                           B     4    
003026                     B     5    os_cmd_r	
003026 DD21 85 6D 00       B     6    				ld ix,store_a1					00302B 21 D0 30 00         B     7    				ld hl,register_txt
00302F CD 00 11 00         B     8    rcmdloop2		call os_print_string
003033 7E                  B     9    rcmdloop		ld a,(hl)
003034 FE01                B    10    				cp 1
003036 28 0B               B    11    				jr z,showbyte
003038 FE02                B    12    				cp 2
00303A 28 15               B    13    				jr z,showword16
00303C FE03                B    14    				cp 3
00303E 28 2E               B    15    				jr z,showaddr
003040 23                  B    16    				inc hl
003041 18 F0               B    17    				jr rcmdloop
                           B    18    				
003043 DD7E00              B    19    showbyte		ld a,(ix)
003046 DD23                B    20    				inc ix
003048 DDE5                B    21    				push ix
00304A E5                  B    22    				push hl
00304B CD F2 14 00         B    23    				call os_show_hex_byte
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 112


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\r.asm
00304F 18 2A               B    24    				jr showreg
                           B    25    
003051 DD7E01              B    26    showword16		ld a,(ix+1)
003054 DDE5                B    27    				push ix
003056 E5                  B    28    				push hl
003057 CD F2 14 00         B    29    				call os_show_hex_byte
00305B E1                  B    30    				pop hl
00305C DDE1                B    31    				pop ix
00305E DD7E00              B    32    				ld a,(ix)
003061 DD23                B    33    				inc ix
003063 DD23                B    34    				inc ix
003065 DDE5                B    35    				push ix
003067 E5                  B    36    				push hl
003068 CD F2 14 00         B    37    				call os_show_hex_byte
00306C 18 0D               B    38    				jr showreg
                           B    39    
00306E DD1700              B    40    showaddr		ld de,(ix)
003071 ED3203              B    41    				lea ix,ix+3
003074 DDE5                B    42    				push ix
003076 E5                  B    43    				push hl
003077 CD DE 14 00         B    44    				call os_show_hex_address
00307B E1                  B    45    showreg			pop hl
00307C DDE1                B    46    				pop ix
00307E 23                  B    47    				inc hl
00307F 7E                  B    48    				ld a,(hl)
003080 B7                  B    49    				or a
003081 20 AC               B    50    				jr nz,rcmdloop2
                           B    51    			
003083 CD A6 15 00         B    52    				call os_new_line				003087 21 34 31 00         B    53    				ld hl,flag_txt
00308B CD C6 14 00         B    54    				call os_copy_to_output_line
00308F 21 88 6E 00         B    55    				ld hl,output_line+4
003093 01050000            B    56    				ld bc,5
003097 3A A8 6D 00         B    57    				ld a,(store_f)
00309B CB77                B    58    				bit 6,a							00309D 28 02               B    59    				jr z,zfzero
00309F 3631                B    60    				ld (hl),'1'
0030A1 09                  B    61    zfzero			add hl,bc
0030A2 CB47                B    62    				bit 0,a							0030A4 28 02               B    63    				jr z,cfzero
0030A6 3631                B    64    				ld (hl),'1'
0030A8 09                  B    65    cfzero			add hl,bc
0030A9 CB7F                B    66    				bit 7,a							0030AB 28 02               B    67    				jr z,sfzero
0030AD 364D                B    68    				ld (hl),'M'
0030AF 09                  B    69    sfzero			add hl,bc
0030B0 CB57                B    70    				bit 2,a							0030B2 28 02               B    71    				jr z,pfzero
0030B4 364F                B    72    				ld (hl),'O'
0030B6 09                  B    73    pfzero			add hl,bc
0030B7 23                  B    74    				inc hl
0030B8 CB67                B    75    				bit 4,a							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 113


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\r.asm
0030BA 28 02               B    76    				jr z,iffzero
0030BC 3631                B    77    				ld (hl),'1'
0030BE                     B    78    iffzero			
0030BE 01060000            B    79    				ld bc,6
0030C2 09                  B    80    				add hl,bc
0030C3 3A A9 6D 00         B    81    				ld a,(store_adl)
0030C7 C630                B    82    				add a,30h
0030C9 77                  B    83    				ld (hl),a
0030CA CD 09 15 00         B    84    				call os_print_output_line
0030CE AF                  B    85    				xor a
0030CF C9                  B    86    				ret
                           B    87    
                           B    88    ;----------------------------------------------
                           B    89    	
                           B    90    
0030D0 20413D00 01         B    91    register_txt		db ' A=',0,1
0030D5 20204243 3D0003     B    92    					db '  BC=',0,3
0030DC 20204445 3D0003     B    93    					db '  DE=',0,3
0030E3 2020484C 3D0003     B    94    					db '  HL=',0,3
                           B    95    					
0030EA 0B                  B    96    					db 11
                           B    97    
0030EB 27413D00 01         B    98    					db 027h,'A=',0,1
0030F0 20274243 3D0003     B    99    					db ' ',027h,'BC=',0,3
0030F7 20274445 3D0003     B   100    					db ' ',027h,'DE=',0,3
0030FE 2027484C 3D0003     B   101    					db ' ',027h,'HL=',0,3
                           B   102    					
003105 0B                  B   103    					db 11
                           B   104    
003106 2049583D 0003       B   105    					db ' IX=',0,3
00310C 2049593D 0003       B   106    					db ' IY=',0,3
                           B   107    					
003112 0B                  B   108    					db 11
                           B   109    					
003113 2050433D 0003       B   110    					db ' PC=',0,3
003119 204C5350 3D0003     B   111    					db ' LSP=',0,3
003120 20535350 3D0002     B   112    					db ' SSP=',0,2
                           B   113    					
003127 0B                  B   114    					db 11
                           B   115    					
003128 204D4241 53453D00   B   116    					db ' MBASE=',0,1,0,0
003130 010000 
                           B   117    					
003133 0B                  B   118    					db 11
                           B   119    
003134 205A463D 30204346   B   120    flag_txt			db ' ZF=0 CF=0 SF=P PV=E IF
00313C 3D302053 463D5020 
003144 50563D45 20494646 
00314C 3D302041 444C3D30 
003154 0B0B00 
                           B   121    		
                           B   122    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 114


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rd.asm
                           B     0    	include 'commands\rd.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"RD" - Remove directory command. V0.03
                           B     3    ;----------------------------------------------
                           B     4    
                           B     5    
003157 CD 1A 18 00         B     6    os_cmd_rd		call os_check_volume_format	
00315B C0                  B     7    				ret nz
                           B     8    				
00315C CD 12 3E 00         B     9    				call os_cache_original_vol_dir
003160 CD 69 31 00         B    10    				call do_rd
003164 CD FD 3D 00         B    11    				call os_restore_original_vol_di
003168 C9                  B    12    				ret
                           B    13    			
003169 CD 9E 11 00         B    14    do_rd			call os_scan_for_non_space		00316D CA 1F 2F 00         B    15    				jp z,missing_args
                           B    16    				
003171 AF                  B    17    				xor a							003172 CD 93 3D 00         B    18    				call os_parse_path_string
003176 C0                  B    19    				ret nz
                           B    20    							
003177 C3 B8 18 00         B    21    				jp os_delete_dir				                           B    22    
                           B    23    
                           B    24    ;----------------------------------------------
                           B     0    	include 'commands\rn.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"rn" - Rename command. V0.03
                           B     3    ;----------------------------------------------
                           B     4    
00317B CD 1A 18 00         B     5    os_cmd_rn		call os_check_volume_format	
00317F C0                  B     6    				ret nz
                           B     7    			
003180 CD 12 3E 00         B     8    				call os_cache_original_vol_dir
003184 CD 8D 31 00         B     9    				call do_rn
003188 CD FD 3D 00         B    10    				call os_restore_original_vol_di
00318C C9                  B    11    				ret
                           B    12    			
00318D CD 9E 11 00         B    13    do_rn			call os_scan_for_non_space		003191 CA 1F 2F 00         B    14    				jp z,missing_args
                           B    15    				
003195 AF                  B    16    				xor a							003196 CD 93 3D 00         B    17    				call os_parse_path_string
00319A C0                  B    18    				ret nz
                           B    19    
00319B E5                  B    20    				push hl
00319C D1                  B    21    				pop de
00319D CD 89 11 00         B    22    				call os_next_arg
0031A1 7E                  B    23    				ld a,(hl)						0031A2 B7                  B    24    				or a
0031A3 CA 1F 2F 00         B    25    				jp z,missing_args
                           B    26    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 115


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rn.asm
0031A7 EB                  B    27    				ex de,hl
0031A8 C3 A2 18 00         B    28    				jp os_rename_file				                           B    29    		
                           B    30    ;----------------------------------------------
                           B     0    	include 'commands\sb.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'SB' - Save binary file command. V0.03
                           B     3    ;----------------------------------------------
                           B     4    
0031AC                     B     5    os_cmd_sb
                           B     6    	
0031AC CD 1A 18 00         B     7    				call os_check_volume_format		0031B0 C0                  B     8    				ret nz
                           B     9    				
0031B1 CD 12 3E 00         B    10    				call os_cache_original_vol_dir
0031B5 CD BE 31 00         B    11    				call do_sb
0031B9 CD FD 3D 00         B    12    				call os_restore_original_vol_di
0031BD C9                  B    13    				ret
                           B    14    				
0031BE CD 9E 11 00         B    15    do_sb			call os_scan_for_non_space		0031C2 CA 1F 2F 00         B    16    				jp z,missing_args
0031C6 22 06 01 00         B    17    				ld (sb_save_name_addr),hl	
                           B    18    
0031CA CD 89 11 00         B    19    				call os_next_arg
0031CE CD 7D 12 00         B    20    				call ascii_to_hexword			0031D2 C2 92 17 00         B    21    				jp nz,os_no_start_addr			0031D6 ED53 00 01 00       B    22    				ld (sb_save_addr),de
                           B    23    				
0031DB CD 89 11 00         B    24    				call os_next_arg
0031DF CD 7D 12 00         B    25    				call ascii_to_hexword			0031E3 C2 96 17 00         B    26    				jp nz,os_no_filesize
0031E7 ED53 03 01 00       B    27    				ld (sb_save_length),de
                           B    28    				
0031EC 2A 06 01 00         B    29    				ld hl,(sb_save_name_addr)		0031F0 AF                  B    30    				xor a
0031F1 CD 93 3D 00         B    31    				call os_parse_path_string
0031F5 22 06 01 00         B    32    				ld (sb_save_name_addr),hl		0031F9 C0                  B    33    				ret nz
                           B    34    
0031FA CD B2 17 00         B    35    				call os_find_file				0031FE 28 06               B    36    				jr z,sb_file_exists
003200 FEC6                B    37    				cp 0c6h							003202 20 17               B    38    				jr nz,sb_makefile
003204 B7                  B    39    				or a
003205 C9                  B    40    				ret
                           B    41    
003206 21 BE 67 00         B    42    sb_file_exists	ld hl,save_append_msg			00320A CD DD 15 00         B    43    				call os_show_packed_text
00320E CD 1D 4F 00         B    44    				call os_wait_key_press
003212 3E79                B    45    				ld a,'y'
003214 B8                  B    46    				cp b
003215 28 0D               B    47    				jr z,os_sfapp
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 116


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\sb.asm
003217 3E2C                B    48    				ld a,2ch						003219 B7                  B    49    				or a
00321A C9                  B    50    				ret
                           B    51    
00321B 2A 06 01 00         B    52    sb_makefile		ld hl,(sb_save_name_addr)		00321F CD EE 17 00         B    53    				call os_create_file
003223 C0                  B    54    				ret nz
                           B    55    						
003224 2A 06 01 00         B    56    os_sfapp		ld hl,(sb_save_name_addr)		003228 ED5B 00 01 00       B    57    				ld de,(sb_save_addr)			00322D ED4B 03 01 00       B    58    				ld bc,(sb_save_length)			003232 CD 03 18 00         B    59    				call os_write_bytes_to_file
003236 C0                  B    60    				ret nz	
                           B    61    				
003237 3E20                B    62    				ld a,020h						003239 B7                  B    63    				or a
00323A C9                  B    64    				ret
                           B    65    			
                           B    66    				
                           B    67    ;----------------------------------------------
                           B    68    
       00000100            B    69    sb_save_addr		equ scratch_pad
       00000103            B    70    sb_save_length		equ scratch_pad+3
       00000106            B    71    sb_save_name_addr	equ scratch_pad+6
                           B    72    
                           B    73    ;----------------------------------------------
                           B     0    	include 'commands\rx.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"RX" - Receive binary file via serial port com
                           B     3    ;----------------------------------------------
                           B     4    
       00000040            B     5    buffer_blocks			 equ 64					                           B     6    
       00000100            B     7    rx_buffer_loc			 equ scratch_pad
       00000103            B     8    rx_buffer_ptr			 equ scratch_pad+3
       00000106            B     9    serial_file_length_cache equ scratch_pad+6
       00000109            B    10    rxe_args_location		 equ scratch_pad+9
                           B    11    
                           B    12    
00323B 7E                  B    13    os_cmd_rx		ld a,(hl)						00323C B7                  B    14    				or a
00323D CA 8A 17 00         B    15    				jp z,os_no_fn_error
                           B    16    				
003241 3E3E                B    17    				ld a,'>'						003243 BE                  B    18    				cp (hl)
003244 C2 63 33 00         B    19    				jp nz,rx_nrs
003248 23                  B    20    				inc hl
003249 3E20                B    21    				ld a,' '
00324B BE                  B    22    				cp (hl)
00324C 2B                  B    23    				dec hl
00324D C2 63 33 00         B    24    				jp nz,rx_nrs
                           B    25    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 117


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
003251 CD 1A 18 00         B    26    				call os_check_volume_format		003255 C0                  B    27    				ret nz		
                           B    28    				
003256 01004000            B    29    				ld bc,buffer_blocks*256			00325A 1E00                B    30    				ld e,0
00325C CD 7D 3C 00         B    31    				call os_allocate_ram
003260 C0                  B    32    				ret nz
003261 22000100            B    33    				ld (rx_buffer_loc),hl
                           B    34    				
003265 112A0000            B    35    				ld de,02ah						003269 ED53 EA 6B 00       B    36    				ld (serial_filename),de			00326E CD A3 34 00         B    37    				call rx_get_header
003272 C2 33 33 00         B    38    				jr nz,rxwtd_fail
003276 CD F0 50 00         B    39    				call s_holdack					                           B    40    				
00327A 21 FE 6B 00         B    41    				ld hl,serial_fileheader			00327E CD EE 17 00         B    42    				call os_create_file
003282 28 3A               B    43    				jr z,rx_ok_ttd
003284 FEC9                B    44    				cp 0c9h
003286 C2 33 33 00         B    45    				jp nz,rxwtd_fail				                           B    46    				
00328A 21 C8 67 00         B    47    				ld hl,overwrite_msg				00328E CD DD 15 00         B    48    				call os_show_packed_text
003292 CD 1D 4F 00         B    49    				call os_wait_key_press
003296 78                  B    50    				ld a,b
003297 FE59                B    51    				cp 'Y'
003299 28 0B               B    52    				jr z,rx_overwrite
00329B FE79                B    53    				cp 'y'
00329D 28 07               B    54    				jr z,rx_overwrite
00329F 3E2C                B    55    				ld a,2ch
0032A1 B7                  B    56    				or a
0032A2 C3 33 33 00         B    57    				jp rxwtd_fail
                           B    58    				
0032A6 21 FE 6B 00         B    59    rx_overwrite	ld hl,serial_fileheader			0032AA CD 78 18 00         B    60    				call os_erase_file
0032AE C2 33 33 00         B    61    				jp nz,rxwtd_fail				0032B2 21 FE 6B 00         B    62    				ld hl,serial_fileheader			0032B6 CD EE 17 00         B    63    				call os_create_file
0032BA C2 33 33 00         B    64    				jp nz,rxwtd_fail
                           B    65    				
0032BE 21 E7 67 00         B    66    rx_ok_ttd		ld hl,ser_recsave_msg
0032C2 CD DD 15 00         B    67    				call os_show_packed_text
                           B    68    				
0032C6 2A 0E 6C 00         B    69    rx_rnblk		ld hl,(serial_fileheader+16)	0032CA 22060100            B    70    				ld (serial_file_length_cache),h
0032CE 2A000100            B    71    				ld hl,(rx_buffer_loc)
0032D2 22030100            B    72    				ld (rx_buffer_ptr),hl
                           B    73    				
0032D6 0640                B    74    				ld b,buffer_blocks				                           B    75    				
0032D8 CD D8 50 00         B    76    rx_lnb			call s_goodack
0032DC CD 82 50 00         B    77    				call s_getblock
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 118


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
0032E0 28 0F               B    78    				jr z,rxtd_blok
0032E2 F5                  B    79    				push af							0032E3 CD E9 50 00         B    80    				call s_badack					0032E7 21 FE 6B 00         B    81    				ld hl,serial_fileheader			0032EB CD 78 18 00         B    82    				call os_erase_file
0032EF 18 47               B    83    				jr rx_dealloc
                           B    84    
0032F1 CD F0 50 00         B    85    rxtd_blok		call s_holdack					                           B    86    				
0032F5 21000700            B    87    				ld hl,serial_buffer				0032F9 ED5B0301 00         B    88    				ld de,(rx_buffer_ptr)
0032FE C5                  B    89    				push bc
0032FF 01000100            B    90    				ld bc,256
003303 EDB0                B    91    				ldir
003305 C1                  B    92    				pop bc
003306 ED530301 00         B    93    				ld (rx_buffer_ptr),de
                           B    94    				
00330B 2A 0E 6C 00         B    95    				ld hl,(serial_fileheader+16)	00330F 11000100            B    96    				ld de,256
003313 AF                  B    97    				xor a
003314 ED52                B    98    				sbc hl,de
003316 22 0E 6C 00         B    99    				ld (serial_fileheader+16),hl
00331A 28 28               B   100    				jr z,rx_lbr						00331C 38 26               B   101    				jr c,rx_lbr						00331E 10 B8               B   102    				djnz rx_lnb						                           B   103    
003320 01004000            B   104    				ld bc,buffer_blocks*256			003324 ED5B0001 00         B   105    				ld de,(rx_buffer_loc)
003329 21 FE 6B 00         B   106    				ld hl,serial_fileheader
00332D CD 03 18 00         B   107    				call os_write_bytes_to_file
003331 28 93               B   108    				jr z,rx_rnblk					003333 F5                  B   109    rxwtd_fail		push af
003334 CD E9 50 00         B   110    				call s_badack
003338 01004000            B   111    rx_dealloc		ld bc,buffer_blocks*256
00333C 1E00                B   112    				ld e,0
00333E CD A8 3C 00         B   113    				call os_deallocate_ram
003342 F1                  B   114    				pop af
003343 C9                  B   115    				ret
                           B   116    				
003344 CD D8 50 00         B   117    rx_lbr			call s_goodack					003348 ED4B0601 00         B   118    				ld bc,(serial_file_length_cache
00334D ED5B0001 00         B   119    				ld de,(rx_buffer_loc)
003352 21 FE 6B 00         B   120    				ld hl,serial_fileheader
003356 CD 03 18 00         B   121    				call os_write_bytes_to_file
00335A 28 03               B   122    				jr z,rxtd_done
00335C F5                  B   123    				push af
00335D 18 D9               B   124    				jr rx_dealloc
                           B   125    				
00335F 3E20                B   126    rxtd_done		ld a,020h						003361 B7                  B   127    				or a
003362 C9                  B   128    				ret
                           B   129    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 119


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
                           B   130    				
                           B   131    
                           B   132    				
003363 3E21                B   133    rx_nrs			ld a,'!'						003365 BE                  B   134    				cp (hl)							003366 C2 44 34 00         B   135    				jr nz,notrxe
00336A 23                  B   136    				inc hl
00336B 3E20                B   137    				ld a,' '
00336D BE                  B   138    				cp (hl)
00336E 2B                  B   139    				dec hl
00336F C2 44 34 00         B   140    				jr nz,notrxe
003373 CD 89 11 00         B   141    				call os_next_arg
003377 22090100            B   142    				ld (rxe_args_location),hl
                           B   143    							
00337B 112A0000            B   144    				ld de,02ah						00337F ED53 EA 6B 00       B   145    				ld (serial_filename),de			003384 CD A3 34 00         B   146    				call rx_get_header
003388 C0                  B   147    				ret nz
003389 21 DD 67 00         B   148    				ld hl,ser_rec2_msg
00338D CD DD 15 00         B   149    				call os_show_packed_text
003391 CD D8 50 00         B   150    				call s_goodack
003395 3E01                B   151    				ld a,1							003397 32 FD 6B 00         B   152    				ld (serial_timeout),a
00339B CD 82 50 00         B   153    				call s_getblock					00339F 28 07               B   154    				jr z,rxe_fblok
0033A1 F5                  B   155    rxe_badblock	push af							0033A2 CD E9 50 00         B   156    				call s_badack					0033A6 F1                  B   157    				pop af
0033A7 C9                  B   158    				ret
                           B   159    	
0033A8 ED4B0507 00         B   160    rxe_fblok		ld bc,(serial_buffer+5)			0033AD C5                  B   161    				push bc
0033AE E1                  B   162    				pop hl
0033AF ED5B 0E 6C 00       B   163    				ld de,(serial_fileheader+16)
0033B4 19                  B   164    				add hl,de
0033B5 EB                  B   165    				ex de,hl
0033B6 CD D3 3C 00         B   166    				call os_protected_ram_test		0033BA 28 11               B   167    				jr z,rxe_norampro
0033BC CD F0 50 00         B   168    				call s_holdack					0033C0 CD 25 3D 00         B   169    				call os_protected_ram_query
0033C4 28 07               B   170    				jr z,rxe_norampro
0033C6 F5                  B   171    				push af
0033C7 CD E9 50 00         B   172    				call s_badack
0033CB F1                  B   173    				pop af
0033CC C9                  B   174    				ret
                           B   175    	
0033CD 2A020700            B   176    rxe_norampro	ld hl,(serial_buffer+2)
0033D1 1150524F            B   177    				ld de,04f5250h					0033D5 AF                  B   178    				xor a
0033D6 28 04               B   179    				jr z,rxe_ok
0033D8 3E1A                B   180    				ld a,1ah						0033DA B7                  B   181    				or a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 120


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
0033DB C9                  B   182    				ret
0033DC 2A050700            B   183    rxe_ok			ld hl,(serial_buffer+5)			0033E0 22 E1 6B 00         B   184    				ld (serial_ez80_address),hl
0033E4 01000100            B   185    				ld bc,256						0033E8 DD21 FE 6B 00       B   186    				ld ix,serial_fileheader
0033ED AF                  B   187    				xor a
0033EE DDB612              B   188    				or (ix+18)						0033F1 20 0A               B   189    				jr nz,mtones
0033F3 DDB611              B   190    				or a,(ix+17)					0033F6 20 05               B   191    				jr nz,mtones
0033F8 0600                B   192    				ld b,0
0033FA DD4E10              B   193    				ld c,(ix+16)					0033FD 21000700            B   194    mtones			ld hl,serial_buffer				003401 ED5B E1 6B 00       B   195    				ld de,(serial_ez80_address)		003406 EDB0                B   196    				ldir
                           B   197    				
003408 D5                  B   198    				push de
003409 CD D8 50 00         B   199    				call s_goodack		
00340D DDE1                B   200    				pop ix							00340F 2A 0E 6C 00         B   201    				ld hl,(serial_fileheader+16)	003413 11000100            B   202    				ld de,256
003417 AF                  B   203    				xor a
003418 ED52                B   204    				sbc hl,de						00341A 28 18               B   205    				jr z,rxe_done
00341C 38 16               B   206    				jr c,rxe_done
00341E EB                  B   207    				ex de,hl
00341F ED53 0E 6C 00       B   208    				ld (serial_fileheader+16),de	003424 DD2A E1 6B 00       B   209    				ld ix,(serial_ez80_address)
003429 01000100            B   210    				ld bc,256
00342D DD09                B   211    				add ix,bc
00342F CD 40 50 00         B   212    				call s_gbloop					003433 C0                  B   213    				ret nz
003434 E1                  B   214    rxe_done		pop hl							003435 CD BF 47 00         B   215    				call enable_button_nmi			003439 2A090100            B   216    				ld hl,(rxe_args_location)
00343D DD2A E1 6B 00       B   217    				ld ix,(serial_ez80_address)
003442 DDE9                B   218    				jp (ix)							                           B   219    				
                           B   220    				
                           B   221    
003444 CD EA 34 00         B   222    notrxe			call clear_serial_filename
                           B   223    				
003448 0610                B   224    				ld b,16							00344A 11 EA 6B 00         B   225    				ld de,serial_filename
00344E CD EC 13 00         B   226    				call os_copy_ascii_run			003452 79                  B   227    				ld a,c
003453 32 FC 6B 00         B   228    				ld (serial_fn_length),a
003457 CD 95 11 00         B   229    				call os_scan_for_space
                           B   230    				
00345B CD 1A 1E 00         B   231    				call hexword_or_bust			00345F CA 92 17 00         B   232    				jp z,os_no_start_addr			003463 ED530001 00         B   233    				ld (data_load_addr),de			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 121


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
003468 CD A3 34 00         B   234    				call rx_get_header
00346C C0                  B   235    				ret nz
                           B   236    
00346D ED4B0001 00         B   237    				ld bc,(data_load_addr)			003472 C5                  B   238    				push bc
003473 E1                  B   239    				pop hl
003474 ED5B 0E 6C 00       B   240    				ld de,(serial_fileheader+16)
003479 19                  B   241    				add hl,de
00347A EB                  B   242    				ex de,hl
00347B CD D3 3C 00         B   243    				call os_protected_ram_test
00347F C4 25 3D 00         B   244    				call nz,os_protected_ram_query
003483 C0                  B   245    				ret nz
                           B   246    				
003484 21 DD 67 00         B   247    				ld hl,ser_rec2_msg
003488 CD DD 15 00         B   248    				call os_show_packed_text
                           B   249    	
00348C 2A000100            B   250    				ld hl,(data_load_addr)			003490 CD 2E 50 00         B   251    				call serial_receive_file
003494 C0                  B   252    				ret nz							                           B   253    
003495 ED5B 0E 6C 00       B   254    				ld de,(serial_fileheader+16)	00349A ED530301 00         B   255    				ld (filesize_cache),de
00349F C3 73 2F 00         B   256    				jp report_bytes_loaded			                           B   257    				
                           B   258    ;----------------------------------------------
                           B   259    
0034A3                     B   260    rx_get_header
0034A3 21 D9 67 00         B   261    				ld hl,ser_rec_msg
0034A7 CD DD 15 00         B   262    				call os_show_packed_text
                           B   263    				
0034AB 3E00                B   264    				ld a,0
0034AD 32 1F 6C 00         B   265    				ld (anim_wait_count),a			0034B1 3A 1F 6C 00         B   266    get_hdr_loop	ld a,(anim_wait_count)
0034B5 3C                  B   267    				inc a
0034B6 47                  B   268    				ld b,a
0034B7 FE06                B   269    				cp 6
0034B9 20 07               B   270    				jr nz,notsix
0034BB 0E20                B   271    				ld c,' '
0034BD 0605                B   272    				ld b,5
0034BF AF                  B   273    				xor a
0034C0 18 02               B   274    				jr mcharset
0034C2 0E2E                B   275    notsix			ld c,'.'
0034C4 32 1F 6C 00         B   276    mcharset		ld (anim_wait_count),a
0034C8 CD D5 1B 00         B   277    				call os_print_multiple_chars
0034CC CD 49 11 00         B   278    				call home_cursor
                           B   279    				
0034D0 21 EA 6B 00         B   280    				ld hl,serial_filename			0034D4 3E01                B   281    				ld a,1							0034D6 CD 93 4F 00         B   282    				call serial_get_header
0034DA C8                  B   283    				ret z
0034DB FE83                B   284    				cp 083h							0034DD C0                  B   285    				ret nz
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 122


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\rx.asm
0034DE CD 78 4F 00         B   286    				call os_get_key_press
0034E2 FE76                B   287    				cp 076h
0034E4 20 CB               B   288    				jr nz,get_hdr_loop
0034E6 3E80                B   289    				ld a,080h						0034E8 B7                  B   290    notsto			or a
0034E9 C9                  B   291    				ret								                           B   292    							
                           B   293    
                           B   294    ;----------------------------------------------
                           B   295    
0034EA                     B   296    clear_serial_filename
                           B   297    
0034EA E5                  B   298    				push hl							0034EB 21 EA 6B 00         B   299    				ld hl,serial_filename
0034EF 01100000            B   300    				ld bc,16
0034F3 AF                  B   301    				xor a
0034F4 CD 13 17 00         B   302    				call os_bchl_memfill
0034F8 E1                  B   303    				pop hl
0034F9 C9                  B   304    				ret
                           B   305    
                           B   306    ;----------------------------------------------
                           B   307    
                           B     0    	include 'commands\tx.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'TX' - Transmit binary file via serial port co
                           B     3    ;----------------------------------------------
                           B     4    
0034FA 7E                  B     5    os_cmd_tx		ld a,(hl)						0034FB B7                  B     6    				or a
0034FC CA 8A 17 00         B     7    				jp z,os_no_fn_error
                           B     8    			
003500 E5                  B     9    				push hl							003501 21 EA 6B 00         B    10    				ld hl,serial_filename
003505 01100000            B    11    				ld bc,16
003509 AF                  B    12    				xor a
00350A CD 13 17 00         B    13    				call os_bchl_memfill
00350E E1                  B    14    				pop hl
                           B    15    			
00350F 0610                B    16    				ld b,16							003511 11 EA 6B 00         B    17    				ld de,serial_filename
003515 CD EC 13 00         B    18    				call os_copy_ascii_run			003519 79                  B    19    				ld a,c
00351A 32 FC 6B 00         B    20    				ld (serial_fn_length),a
00351E CD 95 11 00         B    21    				call os_scan_for_space
                           B    22    							
003522 CD 1A 1E 00         B    23    				call hexword_or_bust			003526 CA 92 17 00         B    24    				jp z,os_no_start_addr			00352A ED53 E1 6B 00       B    25    				ld (serial_ez80_address),de
                           B    26    			
00352F CD 1A 1E 00         B    27    				call hexword_or_bust			003533 CA 96 17 00         B    28    				jp z,os_no_filesize
003537 ED53 E4 6B 00       B    29    				ld (serial_file_length),de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 123


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\tx.asm
00353C 21000000            B    30    				ld hl,0
003540 3E07                B    31    				ld a,07h						003542 B7                  B    32    				or a
003543 ED5A                B    33    				adc hl,de
003545 28 1D               B    34    				jr z,s_error
                           B    35    				
003547 21 E2 67 00         B    36    				ld hl,ser_send_msg
00354B CD DD 15 00         B    37    				call os_show_packed_text
                           B    38    			
00354F ED5B E4 6B 00       B    39    				ld de,(serial_file_length)
003554 21 EA 6B 00         B    40    				ld hl,serial_filename			003558 DD2A E1 6B 00       B    41    				ld ix,(serial_ez80_address)
00355D CD F7 50 00         B    42    				call serial_send_file
003561 C0                  B    43    				ret nz			
                           B    44    			
003562 3E20                B    45    				ld a,020h						003564 B7                  B    46    s_error			or a
003565 C9                  B    47    				ret
                           B    48    				
                           B    49    			
                           B    50    ;----------------------------------------------
                           B     0    	include 'commands\t.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;'T' - Show memory as ascii text command. V0.02
                           B     3    ;----------------------------------------------
                           B     4    
003566 CD 1A 1E 00         B     5    os_cmd_t		call hexword_or_bust			00356A 28 05               B     6    				jr z,t_no_hex					00356C ED53 1A 6E 00       B     7    				ld (mem_mon_addr),de
                           B     8    							
003571 0610                B     9    t_no_hex		ld b,16
003573 C5                  B    10    smaalp			push bc
                           B    11    				
003574 21 B7 35 00         B    12    				ld hl,gtr_cmd_prefix			003578 CD 00 11 00         B    13    				call os_print_string
00357C ED5B 1A 6E 00       B    14    				ld de,(mem_mon_addr)
003581 CD DE 14 00         B    15    				call os_show_hex_address
                           B    16    
003585 21 84 6E 00         B    17    				ld hl,output_line
003589 3620                B    18    				ld (hl),' '
00358B 23                  B    19    				inc hl
00358C 3622                B    20    				ld (hl),022h
00358E 0610                B    21    				ld b,16
003590 23                  B    22    mabllp			inc hl
003591 1A                  B    23    				ld a,(de)	
003592 FE20                B    24    				cp 020h
003594 38 04               B    25    				jr c,chchar
003596 FE7F                B    26    				cp 07fh
003598 38 02               B    27    				jr c,nchchar
00359A 3E7C                B    28    chchar			ld a,07ch
00359C 77                  B    29    nchchar			ld (hl),a
00359D 13                  B    30    				inc de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 124


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\t.asm
00359E 10 F0               B    31    				djnz mabllp
                           B    32    
0035A0 ED53 1A 6E 00       B    33    				ld (mem_mon_addr),de
0035A5 23                  B    34    				inc hl
0035A6 3622                B    35    				ld (hl),022h
0035A8 23                  B    36    				inc hl
0035A9 360B                B    37    				ld (hl),11
0035AB 23                  B    38    				inc hl
0035AC 3600                B    39    				ld (hl),0
0035AE CD 09 15 00         B    40    				call os_print_output_line
0035B2 C1                  B    41    				pop bc
0035B3 10 BE               B    42    				djnz smaalp
0035B5 AF                  B    43    				xor a
0035B6 C9                  B    44    				ret
                           B    45    	
                           B    46    ;----------------------------------------------
                           B    47    
0035B7 3E2000              B    48    gtr_cmd_prefix	db '> ',0
                           B    49    
                           B    50    ;----------------------------------------------
                           B     0    	include 'commands\mount.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; "MOUNT" = Re-mount and show drives v0.02 - AD
                           B     3    ;----------------------------------------------
                           B     4    
0035BA                     B     5    os_cmd_remount
                           B     6    
0035BA 3E00                B     7    				ld a,0							0035BC CD B3 19 00         B     8    				call os_mount_volumes
0035C0 CD A6 15 00         B     9    				call os_new_line
0035C4 AF                  B    10    				xor a
0035C5 C9                  B    11    				ret
                           B    12    
                           B    13    ;----------------------------------------------
                           B    14    	
                           B     0    	include 'commands\vers.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; "Vers" = Show OS / Hardware version v0.04
                           B     3    ;----------------------------------------------
                           B     4    
                           B     5    
0035C6 E5                  B     6    os_cmd_vers		push hl
0035C7 CD 54 4B 00         B     7    				call hwsc_get_version
0035CB 22100100            B     8    				ld (scratch_pad+10h),hl
0035CF ED531301 00         B     9    				ld (scratch_pad+13h),de
0035D4 E1                  B    10    				pop hl
0035D5 7E                  B    11    				ld a,(hl)
0035D6 FE23                B    12    				cp '#'
0035D8 20 13               B    13    				jr nz,vers_not_quiet
                           B    14    				
0035DA CD 73 3D 00         B    15    				call clear_output_envars
0035DE DD211001 00         B    16    				ld ix,scratch_pad+10h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 125


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\vers.asm
0035E3 0602                B    17    				ld b,2
0035E5 0E00                B    18    				ld c,0
0035E7 CD 40 3D 00         B    19    				call os_output_to_envars
0035EB AF                  B    20    				xor a
0035EC C9                  B    21    				ret
                           B    22    								
                           B    23    				
0035ED 21 3C 62 00         B    24    vers_not_quiet	ld hl,os_version_txt
0035F1 CD 00 11 00         B    25    				call os_print_string
                           B    26    			
0035F5 CD 54 4B 00         B    27    				call hwsc_get_version
0035F9 D5                  B    28    				push de
0035FA EB                  B    29    				ex de,hl
0035FB CD FD 14 00         B    30    				call os_show_hex_word
                           B    31    				
0035FF 21 57 62 00         B    32    				ld hl,fwd_slash_txt
003603 CD 00 11 00         B    33    				call os_print_string
                           B    34    				
003607 21 49 62 00         B    35    				ld hl,hw_version_txt
00360B CD 00 11 00         B    36    				call os_print_string
00360F D1                  B    37    				pop de
003610 CD FD 14 00         B    38    				call os_show_hex_word
                           B    39    				
003614 CD A6 15 00         B    40    				call os_new_line
003618 CD A6 15 00         B    41    				call os_new_line	
00361C AF                  B    42    				xor a
00361D C9                  B    43    				ret
                           B    44    				
                           B    45    	
                           B    46    ;----------------------------------------------
                           B    47    	
                           B     0    	include 'commands\ltn.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; OS "<" Command: Update mem hex bytes and re-d
                           B     3    ;
                           B     4    ; Not currently enabled in PROSE
                           B     5    ;----------------------------------------------
                           B     6    
00361E                     B     7    os_cmd_ltn
                           B     8    
00361E AF                  B     9    				xor a
00361F C9                  B    10    				ret
                           B    11    
                           B    12    
                           B    13    ;----------------------------------------------
                           B    14    	
                           B     0    	include 'commands\pen.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"Pen" - Change attribute v0.03 - ADL mode
                           B     3    ;----------------------------------------------
                           B     4    
003620                     B     5    os_cmd_pen
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 126


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\pen.asm
                           B     6    	
003620 0612                B     7    				ld b,18							003622 DD21 A5 6B 00       B     8    				ld ix,current_pen
                           B     9    				
003627 CD 1A 1E 00         B    10    chpenlp			call hexword_or_bust			00362B 28 0D               B    11    				jr z,pendone					00362D 23                  B    12    				inc hl
00362E DD7300              B    13    				ld (ix),e
003631 DD7201              B    14    				ld (ix+1),d
003634 DD23                B    15    				inc ix
003636 DD23                B    16    				inc ix
003638 10 ED               B    17    				djnz chpenlp	
                           B    18    				
00363A 21 A9 6B 00         B    19    pendone			ld hl,pen_palette				00363E CD CB 48 00         B    20    				call hswc_set_ui_colours
003642 AF                  B    21    				xor a
003643 C9                  B    22    				ret
                           B    23    
                           B    24    ;----------------------------------------------
                           B     0    	include 'commands\vmode.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"vmode" - Change video mode - ADL mode 0.3
                           B     3    ;----------------------------------------------
                           B     4    
003644                     B     5    os_cmd_vmode
                           B     6    	
003644 CD 1A 1E 00         B     7    				call hexword_or_bust			003648 20 04               B     8    				jr nz,vm_data					00364A 3E81                B     9    				ld a,81h						00364C B7                  B    10    				or a
00364D C9                  B    11    				ret
                           B    12    
00364E 7B                  B    13    vm_data			ld a,e
00364F CD EC 16 00         B    14    				call os_set_vmode
003653 C9                  B    15    				ret
                           B    16    				
                           B    17    ;----------------------------------------------
                           B     0    	include 'commands\font.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"font" - replace font. V0.02
                           B     3    ;----------------------------------------------
                           B     4    
003654 CD 1A 18 00         B     5    os_cmd_font		call os_check_volume_format	
003658 C0                  B     6    				ret nz
                           B     7    				
003659 CD 12 3E 00         B     8    				call os_cache_original_vol_dir
00365D CD 66 36 00         B     9    				call do_font
003661 CD FD 3D 00         B    10    				call os_restore_original_vol_di
003665 C9                  B    11    				ret
                           B    12    
003666 CD 9E 11 00         B    13    do_font			call os_scan_for_non_space		00366A CA 1F 2F 00         B    14    				jp z,missing_args
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 127


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\font.asm
                           B    15    
00366E AF                  B    16    				xor a							00366F CD 93 3D 00         B    17    				call os_parse_path_string
003673 C0                  B    18    				ret nz
003674 22000100            B    19    				ld (scratch_pad),hl				                           B    20    
003678 CD B2 17 00         B    21    				call os_find_file				00367C 28 17               B    22    				jr z,got_font
                           B    23    
00367E CD 6E 18 00         B    24    				call os_root_dir				003682 C0                  B    25    				ret nz
003683 21 E5 36 00         B    26    				ld hl,fonts_fn
003687 CD 5E 18 00         B    27    				call os_change_dir
00368B C0                  B    28    				ret nz
00368C 2A000100            B    29    				ld hl,(scratch_pad)
003690 CD B2 17 00         B    30    				call os_find_file				003694 C0                  B    31    				ret nz
                           B    32    				
003695 11000800            B    33    got_font		ld de,800h
003699 CD C1 17 00         B    34    				call os_set_load_length			00369D 21000080            B    35    				ld hl,vram_a_addr				0036A1 CD DF 17 00         B    36    				call os_read_bytes_from_file
0036A5 CD AB 36 00         B    37    				call convert_font
0036A9 AF                  B    38    				xor a
0036AA C9                  B    39    				ret
                           B    40    				
                           B    41    ;----------------------------------------------
                           B    42    				
0036AB 1EFF                B    43    convert_font	ld e,255						0036AD 01080000            B    44    				ld bc,8
0036B1 21F80780            B    45    				ld hl,vram_a_addr+07f8h	
0036B5 CD C0 36 00         B    46    conv_allch		call char_to_font
0036B9 AF                  B    47    				xor a
0036BA ED42                B    48    				sbc hl,bc
0036BC 1D                  B    49    				dec e
0036BD 20 F6               B    50    				jr nz,conv_allch
0036BF C9                  B    51    				ret
                           B    52    
                           B    53    ;----------------------------------------------
                           B    54    
                           B    55    ; set E = character number
                           B    56    ;     HL = character source def address
                           B    57    
0036C0 E5                  B    58    char_to_font	push hl
0036C1 C5                  B    59    				push bc
0036C2 01400000            B    60    				ld bc,64
0036C6 43                  B    61    				ld b,e
0036C7 ED4C                B    62    				mlt bc
0036C9 DD210000 80         B    63    				ld ix,vram_a_addr
0036CE DD09                B    64    				add ix,bc
0036D0 CD D8 36 00         B    65    				call conv_char
0036D4 C1                  B    66    				pop bc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 128


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\font.asm
0036D5 E1                  B    67    				pop hl
0036D6 AF                  B    68    				xor a
0036D7 C9                  B    69    				ret
                           B    70    	
                           B    71    ;----------------------------------------------
                           B    72    
0036D8 0608                B    73    conv_char		ld b,8
0036DA 7E                  B    74    bfontlp1		ld a,(hl)
0036DB DD7700              B    75    				ld (ix),a
0036DE 23                  B    76    				inc hl
0036DF ED3208              B    77    				lea ix,ix+8
0036E2 10 F6               B    78    				djnz bfontlp1
0036E4 C9                  B    79    				ret	
                           B    80    				
                           B    81    ;----------------------------------------------
                           B    82    
0036E5 666F6E74 7300       B    83    fonts_fn		db "fonts",0
                           B    84    
                           B    85    ;----------------------------------------------
                           B     0    	include 'commands\set.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"set" - set an environment variable v0.03
                           B     3    ;
                           B     4    ; Command should be in format:
                           B     5    ;
                           B     6    ; SET BLAH = SOMETHING
                           B     7    ; SET BLAH = "THIS THAT"
                           B     8    ; SET BLAH + (if numeric) to increment 24 bit v
                           B     9    ; SET BLAH - ("        ") to decrement 24 bit v
                           B    10    ; SET BLAH # to delete envar
                           B    11    ;----------------------------------------------
                           B    12    
       00000100            B    13    new_val		equ scratch_pad
       00000103            B    14    value_loc	equ scratch_pad+3
       00000106            B    15    arg_name	equ scratch_pad+6
                           B    16    
0036EB 7E                  B    17    os_cmd_set		ld a,(hl)						0036EC B7                  B    18    				or a
0036ED CA A9 37 00         B    19    				jr z,show_envars
                           B    20    		
0036F1 11060100            B    21    				ld de,arg_name					0036F5 CD EC 13 00         B    22    				call os_copy_ascii_run
0036F9 AF                  B    23    				xor a
0036FA 12                  B    24    				ld (de),a
0036FB 13                  B    25    				inc de
0036FC ED530301 00         B    26    				ld (value_loc),de
                           B    27    				
003701 CD 9E 11 00         B    28    				call os_scan_for_non_space
003705 28 47               B    29    				jr z,set_bad_args
003707 7E                  B    30    				ld a,(hl)
003708 FE2B                B    31    				cp '+'
00370A 28 5A               B    32    				jr z,set_inc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 129


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\set.asm
00370C FE2D                B    33    				cp '-'
00370E 28 4B               B    34    				jr z,set_dec
003710 FE23                B    35    				cp '#'
003712 28 3E               B    36    				jr z,del_env
003714 FE3D                B    37    				cp '='
003716 20 36               B    38    				jr nz,set_bad_args
                           B    39    							
003718 CD 89 11 00         B    40    				call os_next_arg				00371C 28 30               B    41    				jr z,set_bad_args
00371E 7E                  B    42    				ld a,(hl)
00371F 0E00                B    43    				ld c,0
003721 FE22                B    44    				cp 022h							003723 20 02               B    45    				jr nz,set_noquotes
003725 0C                  B    46    				inc c
003726 23                  B    47    				inc hl
003727 7E                  B    48    set_noquotes	ld a,(hl)
003728 12                  B    49    				ld (de),a
003729 CB41                B    50    				bit 0,c
00372B 28 06               B    51    				jr z,set_fcs
00372D FE22                B    52    				cp 022h
00372F 28 0D               B    53    				jr z,evsadone2
003731 18 04               B    54    				jr set_igsp
003733 FE20                B    55    set_fcs			cp ' '
003735 28 07               B    56    				jr z,evsadone2
003737 B7                  B    57    set_igsp		or a
003738 28 14               B    58    				jr z,set_bad_args
00373A 23                  B    59    				inc hl
00373B 13                  B    60    				inc de
00373C 18 E9               B    61    				jr set_noquotes
00373E AF                  B    62    evsadone2		xor a
00373F 12                  B    63    				ld (de),a
                           B    64    				
003740 21060100            B    65    				ld hl,arg_name
003744 ED5B0301 00         B    66    				ld de,(value_loc)
003749 CD 00 1D 00         B    67    				call os_set_envar
00374D C9                  B    68    				ret
                           B    69    
00374E 3E82                B    70    set_bad_args	ld a,82h
003750 B7                  B    71    				or a
003751 C9                  B    72    				ret
                           B    73    				
                           B    74    
003752 21060100            B    75    del_env			ld hl,arg_name				
003756 CD 56 1D 00         B    76    				call os_delete_envar
00375A C9                  B    77    				ret
                           B    78    			
                           B    79    
00375B CD 71 37 00         B    80    set_dec			call incdec_pre
00375F C0                  B    81    				ret nz
003760 1B                  B    82    				dec de
003761 CD 80 37 00         B    83    				call incdec_post
003765 C9                  B    84    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 130


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\set.asm
                           B    85    				
003766 CD 71 37 00         B    86    set_inc			call incdec_pre
00376A C0                  B    87    				ret nz
00376B 13                  B    88    				inc de
00376C CD 80 37 00         B    89    				call incdec_post
003770 C9                  B    90    				ret
                           B    91    				
003771 21060100            B    92    incdec_pre		ld hl,arg_name				
003775 CD BC 1C 00         B    93    				call os_get_envar
003779 C0                  B    94    				ret nz
00377A EB                  B    95    				ex de,hl
00377B CD 7D 12 00         B    96    				call ascii_to_hexword		;ge
00377F C9                  B    97    				ret
                           B    98    								
003780 ED530001 00         B    99    incdec_post		ld (new_val),de				;th
003785 0603                B   100    				ld b,3
003787 11020100            B   101    				ld de,new_val+2				;mo
00378B 2A030100            B   102    				ld hl,(value_loc)
00378F CD 3B 12 00         B   103    				call n_hexbytes_to_ascii
003793 3600                B   104    				ld (hl),0
003795 21060100            B   105    				ld hl,arg_name				;na
003799 E5                  B   106    				push hl
00379A CD 56 1D 00         B   107    				call os_delete_envar
00379E E1                  B   108    				pop hl
00379F ED5B0301 00         B   109    				ld de,(value_loc)
0037A4 CD 00 1D 00         B   110    				call os_set_envar
0037A8 C9                  B   111    				ret
                           B   112    			
                           B   113    			
                           B   114    
                           B   115    
0037A9 21000200            B   116    show_envars		ld hl,envar_list
                           B   117    				
0037AD 7E                  B   118    show_envlp		ld a,(hl)
0037AE FEFF                B   119    				cp 0ffh
0037B0 28 12               B   120    				jr z,set_done
0037B2 E5                  B   121    				push hl
0037B3 CD 00 11 00         B   122    				call os_print_string
0037B7 CD A6 15 00         B   123    				call os_new_line
0037BB E1                  B   124    				pop hl
                           B   125    				
0037BC 23                  B   126    set_fnl			inc hl
0037BD 7E                  B   127    				ld a,(hl)
0037BE B7                  B   128    				or a
0037BF 20 FB               B   129    				jr nz,set_fnl
0037C1 23                  B   130    				inc hl
0037C2 18 E9               B   131    				jr show_envlp
                           B   132    				
0037C4 AF                  B   133    set_done		xor a
0037C5 C9                  B   134    				ret
                           B   135    							
                           B   136    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 131


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\dz.asm
                           B     0    	include 'commands\dz.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; OS "DZ" Command: Z80-mode Disassemble V0.01
                           B     3    ;----------------------------------------------
                           B     4    
0037C6 FD21 B6 24 00       B     5    os_cmd_dz		ld iy,prefix_bits_loc
0037CB FDCB 07 86          B     6    				res adl_dis,(iy+var_adl)
0037CF C3 D8 1E 00         B     7    				jp os_cmd_d_go
                           B     8    				
                           B     9    ;----------------------------------------------
                           B     0    	include 'commands\sound.asm'
                           B     1    ;----------------------------------------------
                           B     2    ;"Sound" - Play a section of Audio RAM v1.00
                           B     3    ;----------------------------------------------
                           B     4    
0037D3 11FFFF00            B     5    os_cmd_sound	ld de,0ffffh					0037D7 ED53 66 38 00       B     6    				ld (aud_per),de
0037DC 3E40                B     7    				ld a,64
0037DE 32 68 38 00         B     8    				ld (aud_vol),a
0037E2 3E11                B     9    				ld a,11h
0037E4 32 69 38 00         B    10    				ld (aud_chans),a
                           B    11    				
0037E8 CD 1A 1E 00         B    12    				call hexword_or_bust			0037EC 20 06               B    13    				jr nz,alocok					0037EE CD E9 4E 00         B    14    				call hwsc_disable_audio			0037F2 AF                  B    15    				xor a
0037F3 C9                  B    16    				ret
0037F4 ED53 5A 38 00       B    17    alocok			ld (aud_loc),de
0037F9 ED53 60 38 00       B    18    				ld (aud_loc_loop),de
                           B    19    				
0037FE CD 1A 1E 00         B    20    				call hexword_or_bust
003802 20 04               B    21    				jr nz,gotaudlen
003804 3E8D                B    22    missaudpar		ld a,8dh						003806 B7                  B    23    				or a
003807 C9                  B    24    				ret				
003808 ED53 5D 38 00       B    25    gotaudlen		ld (aud_len),de
00380D ED53 63 38 00       B    26    				ld (aud_len_loop),de
                           B    27    				
003812 CD 1A 1E 00         B    28    				call hexword_or_bust
003816 28 33               B    29    				jr z,play_sound
003818 7B                  B    30    				ld a,e
003819 32 66 38 00         B    31    				ld (aud_per),a
00381D 7A                  B    32    				ld a,d
00381E 32 67 38 00         B    33    				ld (aud_per+1),a
                           B    34    				
003822 CD 1A 1E 00         B    35    				call hexword_or_bust
003826 28 23               B    36    				jr z,play_sound
003828 7B                  B    37    				ld a,e
003829 32 68 38 00         B    38    				ld (aud_vol),a
                           B    39    				
00382D CD 1A 1E 00         B    40    				call hexword_or_bust
003831 28 18               B    41    				jr z,play_sound
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 132


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\sound.asm
003833 7B                  B    42    				ld a,e
003834 32 69 38 00         B    43    				ld (aud_chans),a
                           B    44    				
003838 CD 1A 1E 00         B    45    				call hexword_or_bust
00383C 28 0D               B    46    				jr z,play_sound
00383E 7B                  B    47    				ld a,e
00383F B7                  B    48    				or a
003840 20 09               B    49    				jr nz,play_sound
003842 11010000            B    50    				ld de,1
003846 ED53 63 38 00       B    51    				ld (aud_len_loop),de
                           B    52    				
00384B 21 5A 38 00         B    53    play_sound		ld hl,audio_structure
00384F 3A 69 38 00         B    54    				ld a,(aud_chans)
003853 4F                  B    55    				ld c,a
003854 CD 5B 4E 00         B    56    				call hwsc_play_audio
003858 AF                  B    57    				xor a
003859 C9                  B    58    				ret
                           B    59    				
                           B    60    
                           B    61    ;----------------------------------------------
                           B    62    
00385A                     B    63    audio_structure
                           B    64    
00385A 000000              B    65    aud_loc			dw24 0			;loc
00385D 000000              B    66    aud_len			dw24 0			;len
003860 000000              B    67    aud_loc_loop	dw24 0	  	    ;loop loc
003863 000000              B    68    aud_len_loop	dw24 0		    ;loop len
                           B    69    
003866 FFFF                B    70    aud_per			dw 0ffffh		;per
003868 40                  B    71    aud_vol			db 64			;vol
                           B    72    
003869 11                  B    73    aud_chans		db 11h			;channels to pl
                           B    74    
                           B    75    ;----------------------------------------------
                           B    76    		
                           B     0    	include 'commands\avail.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; "Avail" = Show OS / Hardware version v0.03
                           B     3    ;----------------------------------------------
                           B     4    
00386A 7E                  B     5    os_cmd_avail	ld a,(hl)
00386B FE23                B     6    				cp '#'
00386D 20 13               B     7    				jr nz,avnoenv
                           B     8    				
00386F CD 73 3D 00         B     9    				call clear_output_envars		003873 DD21 6A 6D 00       B    10    				ld ix,free_sysram_base
003878 0606                B    11    				ld b,6
00387A 0E00                B    12    				ld c,0
00387C CD 40 3D 00         B    13    				call os_output_to_envars
003880 AF                  B    14    				xor a
003881 C9                  B    15    				ret
                           B    16    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 133


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\avail.asm
                           B    17    								
003882 DD21 6A 6D 00       B    18    avnoenv			ld ix,free_sysram_base
003887 21 D1 38 00         B    19    				ld hl,sysram_txt
00388B CD 00 11 00         B    20    				call os_print_string
00388F CD B5 38 00         B    21    				call show_range
                           B    22    				
003893 21 E0 38 00         B    23    				ld hl,vram_a_txt
003897 CD 00 11 00         B    24    				call os_print_string
00389B CD B5 38 00         B    25    				call show_range
                           B    26    				
00389F 21 EE 38 00         B    27    				ld hl,vram_b_txt
0038A3 CD 00 11 00         B    28    				call os_print_string
0038A7 CD B5 38 00         B    29    				call show_range
                           B    30    				
0038AB CD A6 15 00         B    31    				call os_new_line
0038AF CD A6 15 00         B    32    				call os_new_line	
0038B3 AF                  B    33    				xor a
0038B4 C9                  B    34    				ret
                           B    35    				
                           B    36    				
0038B5 DD1700              B    37    show_range		ld de,(ix)
0038B8 CD DE 14 00         B    38    				call os_show_hex_address
0038BC 3E2D                B    39    				ld a,'-'
0038BE CD 42 11 00         B    40    				call os_print_char
0038C2 DD1703              B    41    				ld de,(ix+3)
0038C5 CD DE 14 00         B    42    				call os_show_hex_address
0038C9 CD A6 15 00         B    43    				call os_new_line
0038CD ED3206              B    44    				lea ix,ix+6
0038D0 C9                  B    45    				ret
                           B    46    
                           B    47    			
                           B    48    
0038D1 0B537973 74656D20   B    49    sysram_txt		db 11,'System  RAM: ',0
0038D9 2052414D 3A2000 
0038E0 56696465 6F202020   B    50    vram_a_txt		db    'Video   RAM: ',0
0038E8 52414D3A 2000 
0038EE 5370722F 41756420   B    51    vram_b_txt		db    'Spr/Aud RAM: ',0
0038F6 52414D3A 2000 
                           B    52    
                           B    53    
                           B    54    ;----------------------------------------------
                           B    55    	
                           B     0    	include 'commands\fi.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; "FI" = Show file info.  v0.02
                           B     3    ;----------------------------------------------
                           B     4    
0038FC CD 9E 11 00         B     5    os_cmd_fi		call os_scan_for_non_space		003900 CA 1F 2F 00         B     6    				jp z,missing_args
                           B     7    								
003904 CD 1A 18 00         B     8    				call os_check_volume_format	
003908 C0                  B     9    				ret nz
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 134


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\fi.asm
                           B    10    
003909 CD 12 3E 00         B    11    				call os_cache_original_vol_dir
00390D CD 16 39 00         B    12    				call do_fi
003911 CD FD 3D 00         B    13    				call os_restore_original_vol_di
003915 C9                  B    14    				ret
                           B    15    
003916 E5                  B    16    do_fi			push hl
003917 CD 89 11 00         B    17    				call os_next_arg
00391B 7E                  B    18    				ld a,(hl)	
00391C 32220100            B    19    				ld (scratch_pad+34),a			003920 E1                  B    20    				pop hl
                           B    21    
003921 AF                  B    22    				xor a							003922 CD 93 3D 00         B    23    				call os_parse_path_string
003926 C0                  B    24    				ret nz
                           B    25    
003927 CD B2 17 00         B    26    				call os_find_file				00392B 28 12               B    27    				jr z,fi_filexists
00392D F5                  B    28    				push af							00392E 3A220100            B    29    				ld a,(scratch_pad+34)			003932 FE23                B    30    				cp '#'
003934 28 02               B    31    				jr z,fi_remove
003936 F1                  B    32    				pop af
003937 C9                  B    33    				ret
                           B    34    				
003938 CD 73 3D 00         B    35    fi_remove		call clear_output_envars
00393C F1                  B    36    				pop af
00393D AF                  B    37    				xor a							00393E C9                  B    38    				ret
                           B    39    				
                           B    40    				
                           B    41    				
00393F 21260100            B    42    fi_filexists	ld hl,scratch_pad+38
003943 71                  B    43    				ld (hl),c
003944 ED532301 00         B    44    				ld (scratch_pad+35),de			                           B    45    				
003949 11100000            B    46    				ld de,16
00394D CD C1 17 00         B    47    				call os_set_load_length			                           B    48    				
003951 21100100            B    49    				ld hl,scratch_pad+16			003955 CD DF 17 00         B    50    				call os_read_bytes_from_file
003959 C0                  B    51    				ret nz
                           B    52    
00395A FD211501 00         B    53    				ld iy,scratch_pad+16+5			00395F DD213001 00         B    54    				ld ix,scratch_pad+48			003964 CD 18 3A 00         B    55    				call fi_conv_w24				003968 CD 18 3A 00         B    56    				call fi_conv_w24				00396C CD 25 3A 00         B    57    				call fi_conv_w16				003970 CD 25 3A 00         B    58    				call fi_conv_w16				003974 11000000            B    59    				ld de,0
003978 FD5E00              B    60    				ld e,(iy)
00397B DD1F00              B    61    				ld (ix),de						Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 135


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\fi.asm
                           B    62    
00397E 3A220100            B    63    				ld a,(scratch_pad+34)
003982 FE23                B    64    				cp '#'
003984 28 31               B    65    				jr z,fi_quiet
                           B    66    				
003986 CD FA 39 00         B    67    				call fi_show_length				                           B    68    				
00398A CD 39 3A 00         B    69    				call test_ezp
00398E 20 21               B    70    				jr nz,not_ezp_file
                           B    71    				
003990 21 56 3A 00         B    72    				ld hl,fi_txt2					003994 0605                B    73    				ld b,5
003996 DD213001 00         B    74    				ld ix,scratch_pad+48	
00399B CD 00 11 00         B    75    fi_sptlp		call os_print_string
00399F E5                  B    76    				push hl
0039A0 DD1700              B    77    				ld de,(ix+0)
0039A3 CD DE 14 00         B    78    				call os_show_hex_address
0039A7 CD A6 15 00         B    79    				call os_new_line
0039AB E1                  B    80    				pop hl
0039AC ED3203              B    81    				lea ix,ix+3
0039AF 10 EA               B    82    				djnz fi_sptlp
                           B    83    				
0039B1 CD A6 15 00         B    84    not_ezp_file	call os_new_line
0039B5 AF                  B    85    				xor a
0039B6 C9                  B    86    				ret
                           B    87    				
                           B    88    
                           B    89    
0039B7 E5                  B    90    fi_quiet		push hl
0039B8 CD 73 3D 00         B    91    				call clear_output_envars
0039BC E1                  B    92    				pop hl	
                           B    93    
0039BD 11260100            B    94    				ld de,scratch_pad+38			0039C1 21280100            B    95    				ld hl,scratch_pad+40
0039C5 E5                  B    96    				push hl
0039C6 0604                B    97    				ld b,4
0039C8 CD 3B 12 00         B    98    				call n_hexbytes_to_ascii
0039CC 3600                B    99    				ld (hl),0
0039CE D1                  B   100    				pop de
0039CF DD21 F9 62 00       B   101    				ld ix,envar_out_n_txt
0039D4 DD360330            B   102    				ld (ix+3),'0'
0039D8 DD360430            B   103    				ld (ix+4),'0'
0039DC DDE5                B   104    				push ix
0039DE E1                  B   105    				pop hl
0039DF CD 00 1D 00         B   106    				call os_set_envar
                           B   107    				
0039E3 CD 39 3A 00         B   108    				call test_ezp
0039E7 28 02               B   109    				jr z,q_ezp_file
0039E9 AF                  B   110    				xor a
0039EA C9                  B   111    				ret
                           B   112    				
0039EB DD213001 00         B   113    q_ezp_file		ld ix,scratch_pad+48			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 136


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\fi.asm
0039F0 0605                B   114    				ld b,5
0039F2 0E01                B   115    				ld c,1
0039F4 CD 40 3D 00         B   116    				call os_output_to_envars		0039F8 AF                  B   117    				xor a
0039F9 C9                  B   118    				ret
                           B   119    
                           B   120    
                           B   121    
0039FA 21 45 3A 00         B   122    fi_show_length	ld hl,fi_txt
0039FE CD 00 11 00         B   123    				call os_print_string
003A02 3A260100            B   124    				ld a,(scratch_pad+38)
003A06 CD F2 14 00         B   125    				call os_show_hex_byte
003A0A ED5B2301 00         B   126    				ld de,(scratch_pad+35)
003A0F CD DE 14 00         B   127    				call os_show_hex_address
003A13 CD A6 15 00         B   128    				call os_new_line
003A17 C9                  B   129    				ret
                           B   130    
                           B   131    
                           B   132    ;----------------------------------------------
                           B   133    
003A18 FD1700              B   134    fi_conv_w24		ld de,(iy)
003A1B DD1F00              B   135    				ld (ix),de
003A1E ED3203              B   136    				lea ix,ix+3
003A21 ED3303              B   137    				lea iy,iy+3
003A24 C9                  B   138    				ret
                           B   139    				
003A25 11000000            B   140    fi_conv_w16		ld de,0
003A29 FD5E00              B   141    				ld e,(iy)
003A2C FD5601              B   142    				ld d,(iy+1)
003A2F DD1F00              B   143    				ld (ix),de
003A32 ED3203              B   144    				lea ix,ix+3
003A35 ED3302              B   145    				lea iy,iy+2
003A38 C9                  B   146    				ret
                           B   147    
                           B   148    ;----------------------------------------------
                           B   149    
                           B   150    
003A39 2A120100            B   151    test_ezp		ld hl,(scratch_pad+16+2)		003A3D AF                  B   152    				xor a
003A3E 1150524F            B   153    				ld de,04f5250h	
003A42 ED52                B   154    				sbc hl,de
003A44 C9                  B   155    				ret
                           B   156    					
                           B   157    ;----------------------------------------------
                           B   158    				
003A45 546F7461 6C204C65   B   159    fi_txt			db "Total Length  : ",0
003A4D 6E677468 20203A20 
003A55 00 
003A56 4C6F6164 204C6F63   B   160    fi_txt2			db "Load Location : ",0
003A5E 6174696F 6E203A20 
003A66 00 
003A67 5472756E 63617465   B   161    				db "Truncate to   : ",0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 137


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\fi.asm
003A6F 20746F20 20203A20 
003A77 00 
003A78 50524F53 45205265   B   162    				db "PROSE Reqd    : ",0
003A80 71642020 20203A20 
003A88 00 
003A89 414D4F45 42412052   B   163    				db "AMOEBA Reqd   : ",0
003A91 65716420 20203A20 
003A99 00 
003A9A 41444C20 6D6F6465   B   164    				db "ADL mode      : ",0
003AA2 20202020 20203A20 
003AAA 00 
                           B   165    
                           B   166    ;----------------------------------------------
                           B   167    
                           B     0    	include 'commands\echo.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; echo v0.01
                           B     3    ;----------------------------------------------
                           B     4    
003AAB                     B     5    os_cmd_echo
                           B     6    
003AAB 7E                  B     7    			ld a,(hl)					;if no 
003AAC B7                  B     8    			or a
003AAD 20 04               B     9    			jr nz,got_args
003AAF 3E81                B    10    			ld a,81h					;no dat
003AB1 B7                  B    11    			or a
003AB2 C9                  B    12    			ret
                           B    13    
                           B    14    
003AB3 11000100            B    15    got_args	ld de,scratch_pad
003AB7 7E                  B    16    			ld a,(hl)					;is cha
003AB8 FE22                B    17    			cp 22h
003ABA 20 0C               B    18    			jr nz,got_string
                           B    19    						
003ABC 0650                B    20    			ld b,80
003ABE 23                  B    21    echolp1		inc hl
003ABF 7E                  B    22    			ld a,(hl)
003AC0 FE22                B    23    			cp 22h
003AC2 28 04               B    24    			jr z,got_string
003AC4 12                  B    25    			ld (de),a
003AC5 13                  B    26    			inc de
003AC6 10 F6               B    27    			djnz echolp1
                           B    28    
003AC8 3E0B                B    29    got_string	ld a,11
003ACA 12                  B    30    			ld (de),a					;add a 
003ACB 13                  B    31    			inc de
003ACC AF                  B    32    			xor a
003ACD 12                  B    33    			ld (de),a
                           B    34    			
003ACE 21000100            B    35    			ld hl,scratch_pad
003AD2 CD 00 11 00         B    36    			call os_print_string
003AD6 AF                  B    37    			xor a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 138


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\commands\echo.asm
003AD7 C9                  B    38    			ret
                           B    39    			
                           B    40    ;----------------------------------------------
                           B    41    
                           A  3303    	
003AD8 C9                  A  3304    os_cmd_unused	ret		; <- dummy command, sho
                           A  3305    
                           A  3306    ;----------------------------------------------
                           A  3307    
003AD9                     A  3308    os_get_mem_base
                           A  3309    
003AD9 2A 6A 6D 00         A  3310    		ld hl,(free_sysram_base)
003ADD ED5B 70 6D 00       A  3311    		ld de,(free_vram_a_base)
003AE2 ED4B 76 6D 00       A  3312    		ld bc,(free_vram_b_base)
003AE7 BF                  A  3313    		cp a
003AE8 C9                  A  3314    		ret
                           A  3315    
                           A  3316    
003AE9                     A  3317    os_get_mem_top
                           A  3318    
003AE9 2A 6D 6D 00         A  3319    		ld hl,(free_sysram_top)
003AED ED5B 73 6D 00       A  3320    		ld de,(free_vram_a_top)
003AF2 ED4B 79 6D 00       A  3321    		ld bc,(free_vram_b_top)
003AF7 BF                  A  3322    		cp a
003AF8 C9                  A  3323    		ret
                           A  3324    
                           A  3325    ;----------------------------------------------
                           A  3326    
003AF9                     A  3327    ext_set_pointer
                           A  3328    
                           A  3329    ; Set D = 1: use default pointer, otherwise:
                           A  3330    
                           A  3331    ;  Set HL to location of sprite data in memory 
                           A  3332    ;  followed by:
                           A  3333    ;   $00 - palette offset
                           A  3334    ;   $00 - colour count
                           A  3335    ;  then.. palette data (starting from colour 1)
                           A  3336    
                           A  3337    ;   Set C to pointer height (max 32)
                           A  3338    ;   Set B to palette 0-3
                           A  3339    ;   Set E to enable/disable pointer sprite
                           A  3340    
                           A  3341    ;   Returns with Zero Flag set if mouse driver 
                           A  3342    				
003AF9 CC 3A 17 00         A  3343    				call z,mbase_hl
                           A  3344    
003AFD                     A  3345    os_set_pointer
                           A  3346    
003AFD 7B                  A  3347    				ld a,e
003AFE B7                  A  3348    				or a
003AFF CA A3 3B 00         A  3349    				jr z,disable_pointer
                           A  3350    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 139


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003B03 3A 69 6D 00         A  3351    				ld a,(devices_connected)		003B07 E602                A  3352    				and 2
003B09 20 07               A  3353    				jr nz,ok_md_enabled
003B0B CD A3 3B 00         A  3354    				call disable_pointer
003B0F AF                  A  3355    				xor a
003B10 3C                  A  3356    				inc a
003B11 C9                  A  3357    				ret
                           A  3358    				
                           A  3359    				
003B12 7A                  A  3360    ok_md_enabled	ld a,d
003B13 E601                A  3361    				and 1
003B15 28 27               A  3362    				jr z,user_def_pointer
                           A  3363    					
003B17 21 7E 72 00         A  3364    				ld hl,default_pointer
003B1B 1100FEC7            A  3365    				ld de,vram_b_addr+vram_b_size-5
003B1F 01 AC 00 00         A  3366    				ld bc,default_pointer_colours-d
003B23 CD 5E 17 00         A  3367    				call unpack_rle
                           A  3368    					
003B27 01000000            A  3369    				ld bc,0
003B2B 0E 14               A  3370    				ld c,default_pointer_height
003B2D ED43 76 6F 00       A  3371    				ld (os_pointer_height),bc
003B32 21 2A 73 00         A  3372    				ld hl,default_pointer_colours
003B36 3E03                A  3373    				ld a,3
003B38 32 79 6F 00         A  3374    				ld (os_pointer_palette),a		003B3C 18 1F               A  3375    				jr copy_spr_pal
                           A  3376    				
003B3E                     A  3377    user_def_pointer
003B3E 78                  A  3378    				ld a,b
003B3F E603                A  3379    				and 3
003B41 32 79 6F 00         A  3380    				ld (os_pointer_palette),a	
003B45 79                  A  3381    				ld a,c
003B46 FE20                A  3382    				cp 020h
003B48 38 02               A  3383    				jr c,pointhok
003B4A 3E20                A  3384    				ld a,020h
003B4C 32 76 6F 00         A  3385    pointhok		ld (os_pointer_height),a
003B50 01100000            A  3386    				ld bc,16
003B54 47                  A  3387    				ld b,a
003B55 ED4C                A  3388    				mlt bc							003B57 1100FEC7            A  3389    				ld de,vram_b_addr+vram_b_size-5
003B5B EDB0                A  3390    				ldir							                           A  3391    							
003B5D E5                  A  3392    copy_spr_pal	push hl							003B5E 01000000            A  3393    				ld bc,0
003B62 4E                  A  3394    				ld c,(hl)
003B63 CB21                A  3395    				sla c
003B65 CB10                A  3396    				rl b							003B67 210000FF            A  3397    				ld hl,hw_palette			
003B6B 09                  A  3398    				add hl,bc
003B6C 3A 79 6F 00         A  3399    				ld a,(os_pointer_palette)		003B70 CB27                A  3400    				sla a
003B72 47                  A  3401    				ld b,a
003B73 0E00                A  3402    				ld c,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 140


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003B75 09                  A  3403    				add hl,bc				
003B76 EB                  A  3404    				ex de,hl						003B77 E1                  A  3405    				pop hl							003B78 23                  A  3406    				inc hl							003B79 0600                A  3407    				ld b,0
003B7B 4E                  A  3408    				ld c,(hl)
003B7C CB21                A  3409    				sla c
003B7E CB10                A  3410    				rl b							003B80 23                  A  3411    				inc hl
003B81 EDB0                A  3412    				ldir							                           A  3413    				
003B83 21E07F00            A  3414    				ld hl,07fe0h
003B87 22 73 6F 00         A  3415    				ld (os_pointer_definition),hl	003B8B 3E01                A  3416    				ld a,1
003B8D 32 72 6F 00         A  3417    				ld (os_pointer_enable),a
003B91 320118FF            A  3418    				ld (sprite_control),a			003B95 3A 79 6F 00         A  3419    				ld a,(os_pointer_palette)
003B99 320318FF            A  3420    				ld (sprite_palette_select),a	003B9D CD 0F 4B 00         A  3421    				call hwsc_update_pointer_sprite
003BA1 AF                  A  3422    				xor a
003BA2 C9                  A  3423    				ret
                           A  3424    
                           A  3425    
003BA3                     A  3426    disable_pointer
                           A  3427    
003BA3 AF                  A  3428    				xor a
003BA4 32 72 6F 00         A  3429    				ld (os_pointer_enable),a
003BA8 320118FF            A  3430    				ld (sprite_control),a			003BAC C9                  A  3431    				ret
                           A  3432    				
                           A  3433    ;----------------------------------------------
                           A  3434    
003BAD                     A  3435    test_amoeba_vers
                           A  3436    
003BAD CD 54 4B 00         A  3437    				call hwsc_get_version			003BB1 210A0100            A  3438    				ld hl,amoeba_version_required-1
003BB5 AF                  A  3439    				xor a
003BB6 ED52                A  3440    				sbc hl,de
003BB8 D8                  A  3441    				ret c
                           A  3442    				
003BB9 21 BF 62 00         A  3443    				ld hl,hw_warn_txt2
003BBD 110B0100            A  3444    				ld de,amoeba_version_required
003BC1 CD 6E 12 00         A  3445    				call hexword_to_ascii
                           A  3446    				
003BC5 21004080            A  3447    				ld hl,vram_a_addr+16384			003BC9 222010FF            A  3448    				ld (bitmap_parameters),hl		003BCD 3600                A  3449    				ld (hl),0
003BCF E5                  A  3450    				push hl
003BD0 D1                  A  3451    				pop de
003BD1 13                  A  3452    				inc de
003BD2 01002C01            A  3453    				ld bc,320*240
003BD6 EDB0                A  3454    				ldir
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 141


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  3455    					
003BD8 DD2138D1 80         A  3456    				ld ix,vram_a_addr+16384+(320*11
003BDD FD21 AA 62 00       A  3457    				ld iy,hw_warn_txt1				003BE2 FD7E00              A  3458    nextwchar		ld a,(iy)
003BE5 B7                  A  3459    				or a
003BE6 28 3B               A  3460    				jr z,wmsg_done
003BE8 21400000            A  3461    				ld hl,64
003BEC 67                  A  3462    				ld h,a
003BED ED6C                A  3463    				mlt hl
003BEF 11000080            A  3464    				ld de,vram_a_addr
003BF3 19                  A  3465    				add hl,de						003BF4 0E08                A  3466    				ld c,8
003BF6 7E                  A  3467    wpixlp2			ld a,(hl)
003BF7 0608                A  3468    				ld b,8
003BF9 CB17                A  3469    wpixlp1			rl a
003BFB 30 06               A  3470    				jr nc,nowpix
003BFD DD360001            A  3471    				ld (ix),1
003C01 18 04               A  3472    				jr wpixd
003C03 DD360000            A  3473    nowpix			ld (ix),0
003C07 DD23                A  3474    wpixd			inc ix
003C09 10 EE               A  3475    				djnz wpixlp1
003C0B 11380100            A  3476    				ld de,320-8
003C0F DD19                A  3477    				add ix,de
003C11 11080000            A  3478    				ld de,8
003C15 19                  A  3479    				add hl,de
003C16 0D                  A  3480    				dec c
003C17 20 DD               A  3481    				jr nz,wpixlp2
                           A  3482    				
003C19 1108F6FF            A  3483    				ld de,8-(320*8)
003C1D DD19                A  3484    				add ix,de
003C1F FD23                A  3485    				inc iy
003C21 18 BF               A  3486    				jr nextwchar
                           A  3487    
                           A  3488    
003C23 CD D2 4C 00         A  3489    wmsg_done		call purge_keyboard
003C27 CD 36 45 00         A  3490    				call set_irq_vectors
003C2B CD 8E 45 00         A  3491    				call enable_os_irqs
003C2F FB                  A  3492    				ei
                           A  3493    
003C30 CD A7 4A 00         A  3494    wmsg_loop		call hwsc_wait_vrt			;	                           A  3495    				
003C34 11CC0C00            A  3496    				ld de,ccch
003C38 21 17 6E 00         A  3497    				ld hl,cursorflashtimer
003C3C 34                  A  3498    				inc (hl)
003C3D 7E                  A  3499    				ld a,(hl)
003C3E E640                A  3500    				and 64
003C40 28 04               A  3501    				jr z,got_wcolour
003C42 11000000            A  3502    				ld de,000h
003C46 ED530200 FF         A  3503    got_wcolour		ld (hw_palette+2),de
                           A  3504    								
003C4B CD 78 4F 00         A  3505    				call os_get_key_press
003C4F FE76                A  3506    				cp 76h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 142


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003C51 20 DD               A  3507    				jr nz,wmsg_loop
003C53 C3000000            A  3508    				jp 0
                           A  3509    
                           A  3510    ;----------------------------------------------
                           A  3511    
                           A  3512    
003C57 D5                  A  3513    relativize_hl	push de						
                           A  3514    
003C58 D1                  A  3515    				pop de
003C59 D1                  A  3516    				pop de						; P
003C5A 19                  A  3517    				add hl,de
003C5B 11080000            A  3518    				ld de,8
003C5F B7                  A  3519    				or a
003C60 ED52                A  3520    				sbc hl,de
003C62 3B                  A  3521    				dec sp
003C63 3B                  A  3522    				dec sp
003C64 3B                  A  3523    				dec sp
003C65 3B                  A  3524    				dec sp
003C66 3B                  A  3525    				dec sp
003C67 3B                  A  3526    				dec sp
003C68 D1                  A  3527    				pop de						; o
003C69 C9                  A  3528    				ret
                           A  3529    
                           A  3530    
003C6A D5                  A  3531    relative_call	push de						
                           A  3532    
003C6B D1                  A  3533    				pop de
003C6C D1                  A  3534    				pop de						; P
003C6D 19                  A  3535    				add hl,de
003C6E 11080000            A  3536    				ld de,8
003C72 B7                  A  3537    				or a
003C73 ED52                A  3538    				sbc hl,de
003C75 3B                  A  3539    				dec sp
003C76 3B                  A  3540    				dec sp
003C77 3B                  A  3541    				dec sp
003C78 3B                  A  3542    				dec sp
003C79 3B                  A  3543    				dec sp
003C7A 3B                  A  3544    				dec sp
003C7B D1                  A  3545    				pop de						; o
003C7C E9                  A  3546    				jp (hl)
                           A  3547    
                           A  3548    
                           A  3549    ;----------------------------------------------
                           A  3550    
003C7D                     A  3551    os_allocate_ram
                           A  3552    
                           A  3553    ; set BC = number of bytes to allocate
                           A  3554    ; set E = 0 sysram, E = 1 vram_a, E = 2 vram_b
                           A  3555    ; returns HL = address of allocated RAM
                           A  3556    ; ZF set if all OK
                           A  3557    
003C7D 7B                  A  3558    				ld a,e
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 143


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003C7E 11060000            A  3559    				ld de,6
003C82 57                  A  3560    				ld d,a
003C83 ED5C                A  3561    				mlt de
003C85 DD21 6A 6D 00       A  3562    				ld ix,free_sysram_base
003C8A DD19                A  3563    				add ix,de
                           A  3564    				
003C8C DD2703              A  3565    				ld hl,(ix+3)
003C8F AF                  A  3566    				xor a
003C90 ED42                A  3567    				sbc hl,bc
003C92 38 0E               A  3568    				jr c,alloc_err
003C94 DD2F03              A  3569    				ld (ix+3),hl
                           A  3570    				
003C97 DD1700              A  3571    				ld de,(ix)
003C9A AF                  A  3572    				xor a
003C9B E5                  A  3573    				push hl
003C9C ED52                A  3574    				sbc hl,de
003C9E E1                  A  3575    				pop hl
003C9F 23                  A  3576    				inc hl
003CA0 30 04               A  3577    				jr nc,alloc_ok
003CA2 3E8E                A  3578    alloc_err		ld a,8eh						003CA4 B7                  A  3579    				or a
003CA5 C9                  A  3580    				ret
                           A  3581    				
003CA6 AF                  A  3582    alloc_ok		xor a
003CA7 C9                  A  3583    				ret
                           A  3584    			
                           A  3585    
                           A  3586    
003CA8                     A  3587    os_deallocate_ram
                           A  3588    
                           A  3589    ; set BC = number of bytes to de-allocate
                           A  3590    ; set E = 0 sysram, E = 1 vram_a, E = 2 vram_b
                           A  3591    ; returns HL = address of allocated RAM
                           A  3592    ; ZF set if all OK		
                           A  3593    
003CA8 D5                  A  3594    				push de
                           A  3595    				
003CA9 7B                  A  3596    				ld a,e
003CAA 11060000            A  3597    				ld de,6
003CAE 57                  A  3598    				ld d,a
003CAF ED5C                A  3599    				mlt de
003CB1 DD21 6A 6D 00       A  3600    				ld ix,free_sysram_base
003CB6 DD19                A  3601    				add ix,de
                           A  3602    				
003CB8 DD2703              A  3603    				ld hl,(ix+3)
003CBB 09                  A  3604    				add hl,bc
003CBC DD2F03              A  3605    				ld (ix+3),hl
                           A  3606    				
003CBF D1                  A  3607    				pop de							003CC0 7B                  A  3608    				ld a,e
003CC1 B7                  A  3609    				or a
003CC2 20 0D               A  3610    				jr nz,dealloc_ok				Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 144


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  3611    				
003CC4 1100FE07            A  3612    				ld de,sysram_addr+sysram_size-s
003CC8 AF                  A  3613    				xor a
003CC9 ED52                A  3614    				sbc hl,de
003CCB 38 04               A  3615    				jr c,dealloc_ok
003CCD 1B                  A  3616    				dec de
003CCE DD1F03              A  3617    				ld (ix+3),de
003CD1 AF                  A  3618    dealloc_ok		xor a
003CD2 C9                  A  3619    				ret
                           A  3620    				
                           A  3621    				
                           A  3622    ;----------------------------------------------
                           A  3623    
003CD3                     A  3624    os_protected_ram_test
                           A  3625    
                           A  3626    ; set bc = start of range
                           A  3627    ; set de = end of range
                           A  3628    
                           A  3629    ; Returns ZF set if no collision
                           A  3630    
                           A  3631    
003CD3 DD21 6A 6D 00       A  3632    				ld ix,free_sysram_base			003CD8 DD2700              A  3633    				ld hl,(ix)
003CDB AF                  A  3634    				xor a
003CDC ED42                A  3635    				sbc hl,bc
003CDE 38 04               A  3636    				jr c,no_prose_hit
003CE0 3E26                A  3637    				ld a,26h						003CE2 B7                  A  3638    				or a
003CE3 C9                  A  3639    				ret
                           A  3640    				
003CE4 DD2706              A  3641    no_prose_hit	ld hl,(ix+6)					003CE7 AF                  A  3642    				xor a
003CE8 ED42                A  3643    				sbc hl,bc
003CEA 38 0D               A  3644    				jr c,no_vram_a_low_hit
003CEC 21000080            A  3645    				ld hl,800000h
003CF0 AF                  A  3646    				xor a
003CF1 ED52                A  3647    				sbc hl,de
003CF3 30 04               A  3648    				jr nc,no_vram_a_low_hit
003CF5 3E36                A  3649    				ld a,36h						003CF7 B7                  A  3650    				or a
003CF8 C9                  A  3651    				ret
                           A  3652    
003CF9                     A  3653    no_vram_a_low_hit
                           A  3654    				
003CF9 CD 0E 3D 00         A  3655    				call test_alloc
003CFD C0                  A  3656    				ret nz
003CFE ED3206              A  3657    				lea ix,ix+6
003D01 CD 0E 3D 00         A  3658    				call test_alloc
003D05 C0                  A  3659    				ret nz
003D06 ED3206              A  3660    				lea ix,ix+6
003D09 CD 0E 3D 00         A  3661    				call test_alloc
003D0D C9                  A  3662    				ret 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 145


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
                           A  3663    				
003D0E DD2703              A  3664    test_alloc		ld hl,(ix+3)					003D11 AF                  A  3665    				xor a
003D12 ED52                A  3666    				sbc hl,de
003D14 30 0D               A  3667    				jr nc,no_colis
003D16 21000008            A  3668    				ld hl,sysram_addr+sysram_size	003D1A AF                  A  3669    				xor a
003D1B ED42                A  3670    				sbc hl,bc
003D1D 38 04               A  3671    				jr c,no_colis
003D1F 3E35                A  3672    				ld a,35h						003D21 B7                  A  3673    				or a
003D22 C9                  A  3674    				ret
                           A  3675    				
003D23 AF                  A  3676    no_colis		xor a
003D24 C9                  A  3677    				ret
                           A  3678    				
                           A  3679    ;----------------------------------------------
                           A  3680    
003D25                     A  3681    os_protected_ram_query
                           A  3682    
003D25 F5                  A  3683    				push af
003D26 21 C4 62 00         A  3684    				ld hl,pmq_txt
003D2A CD 00 11 00         A  3685    				call os_print_string
003D2E CD 1D 4F 00         A  3686    				call os_wait_key_press
003D32 78                  A  3687    				ld a,b
003D33 FE79                A  3688    				cp 'y'
003D35 28 06               A  3689    				jr z,ok_pmwrite
003D37 FE59                A  3690    				cp 'Y'
003D39 28 02               A  3691    				jr z,ok_pmwrite
003D3B F1                  A  3692    				pop af
003D3C C9                  A  3693    				ret
                           A  3694    				
003D3D F1                  A  3695    ok_pmwrite		pop af
003D3E AF                  A  3696    				xor a
003D3F C9                  A  3697    				ret
                           A  3698    
                           A  3699    ;----------------------------------------------
                           A  3700    					
003D40                     A  3701    os_output_to_envars
                           A  3702    
                           A  3703    ; Set IX to location of first 24bit value to ou
                           A  3704    ; B = number of envars to make 
                           A  3705    ; C = Start envar number
                           A  3706    				
003D40 C5                  A  3707    out_to_envlp	push bc
003D41 79                  A  3708    				ld a,c
003D42 21 FC 62 00         A  3709    				ld hl,envar_out_n_txt+3
003D46 CD 49 12 00         A  3710    				call hexbyte_to_ascii
                           A  3711    						
003D4A 21000100            A  3712    				ld hl,scratch_pad
003D4E ED1202              A  3713    				lea de,ix+2
003D51 0603                A  3714    				ld b,3
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 146


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003D53 CD 3B 12 00         A  3715    				call n_hexbytes_to_ascii
003D57 3600                A  3716    				ld (hl),0
                           A  3717    				
003D59 21 F9 62 00         A  3718    				ld hl,envar_out_n_txt
003D5D 11000100            A  3719    				ld de,scratch_pad
003D61 DDE5                A  3720    				push ix
003D63 CD 00 1D 00         A  3721    				call os_set_envar
003D67 DDE1                A  3722    				pop ix
003D69 C1                  A  3723    				pop bc
003D6A C0                  A  3724    				ret nz
                           A  3725    				
003D6B ED3203              A  3726    				lea ix,ix+3
003D6E 0C                  A  3727    				inc c
003D6F 10 CF               A  3728    				djnz out_to_envlp
003D71 AF                  A  3729    				xor a
003D72 C9                  A  3730    				ret			
                           A  3731    
                           A  3732    
003D73                     A  3733    clear_output_envars
                           A  3734    
003D73 0E00                A  3735    				ld c,0
003D75 C5                  A  3736    del_out_envlp	push bc
003D76 79                  A  3737    				ld a,c
003D77 21 FC 62 00         A  3738    				ld hl,envar_out_n_txt+3
003D7B CD 49 12 00         A  3739    				call hexbyte_to_ascii
003D7F 21 F9 62 00         A  3740    				ld hl,envar_out_n_txt
003D83 CD 56 1D 00         A  3741    				call os_delete_envar
003D87 C1                  A  3742    				pop bc
003D88 C0                  A  3743    				ret nz
003D89 0C                  A  3744    				inc c
003D8A 10 E9               A  3745    				djnz del_out_envlp
003D8C AF                  A  3746    				xor a
003D8D C9                  A  3747    				ret			
                           A  3748    
                           A  3749    
                           A  3750    ;----------------------------------------------
                           A  3751    
003D8E                     A  3752    ext_parse_path
                           A  3753    
003D8E CC 3A 17 00         A  3754    				call z,mbase_hl
003D92 7B                  A  3755    				ld a,e
                           A  3756    									
003D93                     A  3757    os_parse_path_string
                           A  3758    
                           A  3759    ; Set HL = string address in format "locomotion
                           A  3760    ; A: 1 = change to all names in string, 0 = sto
                           A  3761    				
003D93 32060100            A  3762    				ld (scratch_pad+6),a
                           A  3763    	
003D97 E5                  A  3764    				push hl
003D98 DDE1                A  3765    				pop ix
003D9A DD7E04              A  3766    				ld a,(ix+4)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 147


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003D9D FE3A                A  3767    				cp ':'							003D9F 20 27               A  3768    				jr nz,pp_nchvol
003DA1 11 32 6C 00         A  3769    				ld de,vol_txt+1
003DA5 0603                A  3770    				ld b,3
003DA7 CD CD 13 00         A  3771    				call os_compare_strings
003DAB 20 1B               A  3772    				jr nz,pp_nchvol
003DAD 11050000            A  3773    				ld de,5
003DB1 19                  A  3774    				add hl,de
003DB2 22 D6 6E 00         A  3775    				ld (os_args_loc),hl				003DB6 DD7E03              A  3776    				ld a,(ix+3)						003DB9 D630                A  3777    				sub 030h
003DBB CD 49 1C 00         A  3778    				call os_change_volume
003DBF C0                  A  3779    				ret nz							003DC0 CD 6E 18 00         A  3780    				call os_root_dir				003DC4 2A D6 6E 00         A  3781    				ld hl,(os_args_loc)	
                           A  3782    			
003DC8 E5                  A  3783    pp_nchvol		push hl
003DC9 D1                  A  3784    				pop de
                           A  3785    				
003DCA 1B                  A  3786    				dec de
003DCB 13                  A  3787    pp_chkstring	inc de
003DCC 1A                  A  3788    				ld a,(de)						003DCD B7                  A  3789    				or a
003DCE 28 1D               A  3790    				jr z,pp_end
003DD0 FE20                A  3791    				cp ' '
003DD2 28 19               A  3792    				jr z,pp_end
003DD4 FE2F                A  3793    				cp '/'
003DD6 20 F3               A  3794    				jr nz,pp_chkstring
                           A  3795    
003DD8 13                  A  3796    				inc de
003DD9 ED530701 00         A  3797    				ld (scratch_pad+7),de
003DDE CD 5E 18 00         A  3798    				call os_change_dir				003DE2 C0                  A  3799    				ret nz
                           A  3800    				
003DE3 2A070100            A  3801    				ld hl,(scratch_pad+7)			003DE7 22 D6 6E 00         A  3802    				ld (os_args_loc),hl
003DEB 18 DB               A  3803    				jr pp_nchvol
                           A  3804    					
003DED 3A060100            A  3805    pp_end			ld a,(scratch_pad+6)			003DF1 B7                  A  3806    				or a
003DF2 C8                  A  3807    				ret z
003DF3 ED53 D6 6E 00       A  3808    				ld (os_args_loc),de	
003DF8 CD 5E 18 00         A  3809    				call os_change_dir
003DFC C9                  A  3810    				ret
                           A  3811    
                           A  3812    ;----------------------------------------------
                           A  3813    
003DFD                     A  3814    os_restore_original_vol_dir
                           A  3815    
003DFD F5                  A  3816    				push af							003DFE 3A F6 6E 00         A  3817    				ld a,(original_vol)
003E02 CD 49 1C 00         A  3818    				call os_change_volume	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 148


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
003E06 ED5B F3 6E 00       A  3819    				ld de,(original_dir)
003E0B CD F9 1B 00         A  3820    				call fs_update_dir_cluster
003E0F F1                  A  3821    				pop af
003E10 B7                  A  3822    				or a
003E11 C9                  A  3823    				ret
                           A  3824    				
                           A  3825    				
003E12                     A  3826    os_cache_original_vol_dir
                           A  3827    
003E12 F5                  A  3828    				push af
003E13 C5                  A  3829    				push bc
003E14 D5                  A  3830    				push de
003E15 E5                  A  3831    				push hl
003E16 3A 2D 6C 00         A  3832    				ld a,(current_volume)
003E1A 32 F6 6E 00         A  3833    				ld (original_vol),a
003E1E CD ED 1B 00         A  3834    				call fs_get_dir_cluster
003E22 ED53 F3 6E 00       A  3835    				ld (original_dir),de
003E27 E1                  A  3836    				pop hl
003E28 D1                  A  3837    				pop de
003E29 C1                  A  3838    				pop bc
003E2A F1                  A  3839    				pop af
003E2B C9                  A  3840    				ret
                           A  3841    				
                           A  3842    ;----------------------------------------------
                           A  3843    
                           B     0    	include 'script_routines.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; PROSE script routines V0.05
                           B     3    ;
                           B     4    ; Notes: Changing drives within a script not su
                           B     5    ;        Scripts cannot launch scripts as this 
                           B     6    ;		 Abort with CRTL + C
                           B     7    ;
                           B     8    ;       About: IF statement.. Syntax = IF envar
                           B     9    ;
                           B    10    ;		condition can be "=" / "<>" for string 
                           B    11    ;		if string is within (brackets), it is i
                           B    12    ;		if "VAL" is included, string is interpr
                           B    13    ;		"GOTO" can be omitted if desired.
                           B    14    ;       (destination labels must be declared as
                           B    15    ;----------------------------------------------
                           B    16    
       00000010            B    17    max_if_chars		equ 16 ;(string size for en
                           B    18    
       00000000            B    19    scr_in_script		equ 0
       00000001            B    20    scr_find_new_line	equ 1
       00000002            B    21    scr_numeric_comp	equ 2
       00000003            B    22    scr_end				equ 3
                           B    23    
                           B    24    
003E2C CD 37 3E 00         B    25    os_do_script	call run_script
003E30 21 EE 6E 00         B    26    				ld hl,script_flags
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 149


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
003E34 CB86                B    27    				res scr_in_script,(hl)
003E36 C9                  B    28    				ret
                           B    29    				
003E37 21 EE 6E 00         B    30    run_script		ld hl,script_flags	
003E3B CBC6                B    31    				set scr_in_script,(hl)
                           B    32    
003E3D CD 1A 18 00         B    33    				call os_check_volume_format		003E41 C0                  B    34    				ret nz
                           B    35    				
003E42 CD 56 40 00         B    36    				call new_script
                           B    37    
                           B    38    ;----------------------------------------------
                           B    39    
                           B    40    
003E46 3A 53 6F 00         B    41    scrp_loop		ld a,(key_mod_flags)			003E4A E602                B    42    				and 2
003E4C 28 12               B    43    				jr z,no_quit_script	
003E4E CD 78 4F 00         B    44    				call os_get_key_press
003E52 FE21                B    45    				cp 021h							003E54 20 0A               B    46    				jr nz,no_quit_script
                           B    47    
003E56 21 F6 67 00         B    48    				ld hl,script_aborted_msg
003E5A CD DD 15 00         B    49    				call os_show_packed_text
003E5E AF                  B    50    				xor a							003E5F C9                  B    51    				ret
                           B    52    					
                           B    53    
003E60 CD 69 40 00         B    54    no_quit_script	call get_script_line	
003E64 C0                  B    55    				ret nz
003E65 21 EE 6E 00         B    56    				ld hl,script_flags				003E69 CB5E                B    57    				bit scr_end,(hl)
003E6B 28 02               B    58    				jr z,scr_to_do
003E6D AF                  B    59    scr_done		xor a
003E6E C9                  B    60    				ret
                           B    61    				
003E6F 21 32 6E 00         B    62    scr_to_do		ld hl,commandstring				003E73 7E                  B    63    				ld a,(hl)
003E74 FE5B                B    64    				cp '['
003E76 28 28               B    65    				jr z,exec_scr_next
                           B    66    
003E78 11 A3 62 00         B    67    				ld de,if_command_txt			003E7C 0603                B    68    				ld b,3
003E7E CD CD 13 00         B    69    				call os_compare_strings
003E82 28 30               B    70    				jr z,do_exec_if
                           B    71    				
003E84 11 0B 63 00         B    72    				ld de,goto_txt					003E88 0605                B    73    				ld b,5
003E8A CD CD 13 00         B    74    				call os_compare_strings
003E8E 28 18               B    75    				jr z,scr_goto
                           B    76    				
003E90 11 A6 62 00         B    77    				ld de,end_command_txt			003E94 0604                B    78    				ld b,4
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 150


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
003E96 CD CD 13 00         B    79    				call os_compare_strings
003E9A 28 D1               B    80    				jr z,scr_done
                           B    81    			
003E9C CD 64 0D 00         B    82    				call os_parse_cmd_chk_ps		                           B    83    				
003EA0 21 EE 6E 00         B    84    exec_scr_next	ld hl,script_flags
003EA4 CBCE                B    85    				set scr_find_new_line,(hl)
003EA6 18 9E               B    86    				jr scrp_loop
                           B    87    
003EA8 CD 89 11 00         B    88    scr_goto		call os_next_arg
003EAC CD 3D 41 00         B    89    				call copy_goto_label
003EB0 C3 15 40 00         B    90    				jp if_cond_met
                           B    91    				
                           B    92    ;----------------------------------------------
                           B    93    
                           B    94    ; Handle "IF" instructions
                           B    95    
                           B    96    
003EB4 21 32 6E 00         B    97    do_exec_if		ld hl,commandstring				003EB8 CD 89 11 00         B    98    				call os_next_arg
003EBC CA A2 40 00         B    99    				jr z,script_error				                           B   100    				
003EC0 11 F7 6E 00         B   101    				ld de,if_name_txt
003EC4 0610                B   102    				ld b,max_if_chars
003EC6 CD EC 13 00         B   103    				call os_copy_ascii_run			003ECA AF                  B   104    				xor a
003ECB 12                  B   105    				ld (de),a
                           B   106    				
003ECC CD 9E 11 00         B   107    				call os_scan_for_non_space		003ED0 CA A2 40 00         B   108    				jr z,script_error
                           B   109    			
003ED4 0600                B   110    				ld b,0
003ED6 7E                  B   111    				ld a,(hl)
003ED7 FE3D                B   112    				cp '='
003ED9 28 14               B   113    				jr z,got_ifcond					003EDB 04                  B   114    				inc b
003EDC FE3E                B   115    				cp '>'
003EDE 28 0F               B   116    				jr z,got_ifcond					003EE0 04                  B   117    				inc b
003EE1 FE3C                B   118    				cp '<'
003EE3 C2 A2 40 00         B   119    				jr nz,script_error				003EE7 23                  B   120    				inc hl
003EE8 7E                  B   121    				ld a,(hl)
003EE9 2B                  B   122    				dec hl
003EEA FE3E                B   123    				cp '>'							003EEC 20 01               B   124    				jr nz,got_ifcond
003EEE 04                  B   125    				inc b
003EEF 78                  B   126    got_ifcond		ld a,b
003EF0 32 EF 6E 00         B   127    				ld (if_condition),a
                           B   128    				
003EF4 CD 89 11 00         B   129    				call os_next_arg				003EF8 CA A2 40 00         B   130    				jr z,script_error
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 151


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
                           B   131    				
003EFC DD21 EE 6E 00       B   132    				ld ix,script_flags
003F01 DDCB0096            B   133    				res scr_numeric_comp,(ix)		003F05 11 11 63 00         B   134    				ld de,val_txt
003F09 0604                B   135    				ld b,4
003F0B CD CD 13 00         B   136    				call os_compare_strings
003F0F 20 0C               B   137    				jr nz,not_val
003F11 DDCB00D6            B   138    				set scr_numeric_comp,(ix)
003F15 CD 89 11 00         B   139    				call os_next_arg
003F19 CA A2 40 00         B   140    				jr z,script_error
                           B   141    				
003F1D 11 09 6F 00         B   142    not_val			ld de,if_value_txt				003F21 0610                B   143    				ld b,max_if_chars
003F23 CD EC 13 00         B   144    				call os_copy_ascii_run
003F27 AF                  B   145    				xor a
003F28 12                  B   146    				ld (de),a
                           B   147    
003F29 11 09 6F 00         B   148    				ld de,if_value_txt
003F2D 1A                  B   149    				ld a,(de)						003F2E FE28                B   150    				cp '('							003F30 20 2A               B   151    				jr nz,if_arg2_done				003F32 1A                  B   152    scr_ev2lp		ld a,(de)						003F33 B7                  B   153    				or a
003F34 CA A2 40 00         B   154    				jr z,script_error
003F38 FE29                B   155    				cp ')'
003F3A 28 03               B   156    				jr z,got_if_ev2
003F3C 13                  B   157    				inc de
003F3D 18 F3               B   158    				jr scr_ev2lp
003F3F AF                  B   159    got_if_ev2		xor a
003F40 12                  B   160    				ld (de),a
003F41 E5                  B   161    				push hl							003F42 21 0A 6F 00         B   162    				ld hl,if_value_txt+1
003F46 CD BC 1C 00         B   163    				call os_get_envar
003F4A EB                  B   164    				ex de,hl
003F4B 28 02               B   165    				jr z,scr_ev2ok
003F4D E1                  B   166    				pop hl
003F4E C9                  B   167    				ret
003F4F 0610                B   168    scr_ev2ok		ld b,max_if_chars
003F51 11 09 6F 00         B   169    				ld de,if_value_txt
003F55 CD EC 13 00         B   170    				call os_copy_ascii_run
003F59 AF                  B   171    				xor a
003F5A 12                  B   172    				ld (de),a
003F5B E1                  B   173    				pop hl
                           B   174    
003F5C CD 9E 11 00         B   175    if_arg2_done	call os_scan_for_non_space		003F60 CA A2 40 00         B   176    				jr z,script_error
003F64 11 0B 63 00         B   177    				ld de,goto_txt
003F68 0605                B   178    				ld b,5
003F6A CD CD 13 00         B   179    				call os_compare_strings
003F6E 20 08               B   180    				jr nz,no_goto
003F70 CD 89 11 00         B   181    				call os_next_arg				003F74 CA A2 40 00         B   182    				jr z,script_error
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 152


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
                           B   183    
003F78 CD 3D 41 00         B   184    no_goto			call copy_goto_label
                           B   185    
003F7C 3A 09 6F 00         B   186    if_compare_args	ld a,(if_value_txt)				003F80 FE2A                B   187    				cp '*'
003F82 20 23               B   188    				jr nz,not_an_exist_test
003F84 21 F7 6E 00         B   189    				ld hl,if_name_txt				003F88 CD BC 1C 00         B   190    				call os_get_envar
003F8C 20 0D               B   191    				jr nz,doesnt_exist
003F8E 3A EF 6E 00         B   192    				ld a,(if_condition)				003F92 B7                  B   193    				or a
003F93 CA 15 40 00         B   194    				jp z,if_cond_met
003F97 C3 A0 3E 00         B   195    if_cond_failed  jp exec_scr_next
003F9B 3A EF 6E 00         B   196    doesnt_exist	ld a,(if_condition)
003F9F FE03                B   197    				cp 3
003FA1 CA 15 40 00         B   198    				jp z,if_cond_met
003FA5 18 F0               B   199    				jr if_cond_failed
                           B   200    
003FA7                     B   201    not_an_exist_test
                           B   202    
003FA7 DDCB0056            B   203    				bit scr_numeric_comp,(ix)
003FAB 28 42               B   204    				jr z,not_numeric_if				003FAD 21 F7 6E 00         B   205    				ld hl,if_name_txt
003FB1 CD BC 1C 00         B   206    				call os_get_envar
003FB5 C0                  B   207    				ret nz
003FB6 EB                  B   208    				ex de,hl			
003FB7 CD 7D 12 00         B   209    				call ascii_to_hexword			003FBB C0                  B   210    				ret nz
003FBC D5                  B   211    				push de
003FBD 21 09 6F 00         B   212    				ld hl,if_value_txt
003FC1 CD 7D 12 00         B   213    				call ascii_to_hexword
003FC5 E1                  B   214    				pop hl
003FC6 C0                  B   215    				ret nz
003FC7 3A EF 6E 00         B   216    				ld a,(if_condition)
003FCB 47                  B   217    				ld b,a
003FCC AF                  B   218    				xor a
003FCD ED52                B   219    				sbc hl,de
003FCF 20 06               B   220    				jr nz,numeric_diff			
003FD1 78                  B   221    				ld a,b							003FD2 B7                  B   222    				or a	
003FD3 28 40               B   223    				jr z,if_cond_met
003FD5 18 C0               B   224    				jr if_cond_failed
                           B   225    
003FD7 30 0B               B   226    numeric_diff	jr nc,value_smaller
003FD9 78                  B   227    				ld a,b							003FDA FE02                B   228    				cp 2
003FDC 28 37               B   229    				jr z,if_cond_met
003FDE FE03                B   230    				cp 3
003FE0 28 33               B   231    				jr z,if_cond_met
003FE2 18 B3               B   232    				jr if_cond_failed
                           B   233    
003FE4 78                  B   234    value_smaller	ld a,b							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 153


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
003FE5 FE01                B   235    				cp 1
003FE7 28 2C               B   236    				jr z,if_cond_met
003FE9 FE03                B   237    				cp 3
003FEB 28 28               B   238    				jr z,if_cond_met
003FED 18 A8               B   239    				jr if_cond_failed
                           B   240    				
                           B   241    
003FEF 21 F7 6E 00         B   242    not_numeric_if	ld hl,if_name_txt 
003FF3 CD BC 1C 00         B   243    				call os_get_envar
003FF7 C0                  B   244    				ret nz
                           B   245    				
003FF8 21 09 6F 00         B   246    				ld hl,if_value_txt
003FFC CD CD 13 00         B   247    				call os_compare_strings			004000 20 09               B   248    				jr nz,if_str_diff
004002 3A EF 6E 00         B   249    				ld a,(if_condition)
004006 B7                  B   250    				or a
004007 28 0C               B   251    				jr z,if_cond_met
004009 18 8C               B   252    				jr if_cond_failed
00400B 3A EF 6E 00         B   253    if_str_diff		ld a,(if_condition)
00400F FE03                B   254    				cp 3
004011 28 02               B   255    				jr z,if_cond_met
004013 18 82               B   256    				jr if_cond_failed
                           B   257    				
                           B   258    				
                           B   259    				
004015 CD 56 40 00         B   260    if_cond_met		call new_script					                           B   261    
004019 CD 69 40 00         B   262    find_if_label	call get_script_line			00401D C0                  B   263    				ret nz
00401E 21 EE 6E 00         B   264    				ld hl,script_flags
004022 CB5E                B   265    				bit scr_end,(hl)
004024 C2 6D 3E 00         B   266    				jp nz,scr_done
                           B   267    				
004028 21 32 6E 00         B   268    				ld hl,commandstring				00402C 7E                  B   269    				ld a,(hl)
00402D FE5B                B   270    				cp '['
00402F 20 1D               B   271    				jr nz,not_a_label				                           B   272    				
004031 23                  B   273    if_find_csb		inc hl
004032 7E                  B   274    				ld a,(hl)
004033 B7                  B   275    				or a
004034 28 18               B   276    				jr z,not_a_label				004036 FE5D                B   277    				cp ']'							004038 20 F7               B   278    				jr nz,if_find_csb
00403A 3600                B   279    				ld (hl),0						00403C 21 33 6E 00         B   280    				ld hl,commandstring+1
004040 11 1B 6F 00         B   281    				ld de,if_label_txt				004044 0610                B   282    				ld b,max_if_chars
004046 CD CD 13 00         B   283    				call os_compare_strings
00404A CA A0 3E 00         B   284    				jp z,exec_scr_next				                           B   285    
00404E 21 EE 6E 00         B   286    not_a_label		ld hl,script_flags
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 154


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
004052 CBCE                B   287    				set scr_find_new_line,(hl)		004054 18 C3               B   288    				jr find_if_label
                           B   289    											
                           B   290    ;----------------------------------------------
                           B   291    
                           B   292    
004056 E5                  B   293    new_script		push hl
004057 21000000            B   294    				ld hl,0
00405B 22 E8 6E 00         B   295    				ld (script_file_offset),hl		00405F 21 EE 6E 00         B   296    				ld hl,script_flags
004063 CB8E                B   297    				res scr_find_new_line,(hl)		004065 CB9E                B   298    				res scr_end,(hl)
004067 E1                  B   299    				pop hl
004068 C9                  B   300    				ret
                           B   301    
                           B   302    
                           B   303    ;----------------------------------------------
                           B   304    	
                           B   305    	
004069                     B   306    get_script_line
                           B   307    				
004069 CD ED 1B 00         B   308    				call fs_get_dir_cluster			00406D ED53 E2 6E 00       B   309    				ld (script_orig_dir),de			004072 ED5B E5 6E 00       B   310    				ld de,(script_dir)				004077 CD F9 1B 00         B   311    				call fs_update_dir_cluster
                           B   312    
00407B CD 91 40 00         B   313    				call open_script				00407F 20 04               B   314    				jr nz,scr_error
004081 CD A6 40 00         B   315    				call read_script				                           B   316    								
004085 F5                  B   317    scr_error		push af
004086 ED5B E2 6E 00       B   318    				ld de,(script_orig_dir)			00408B CD F9 1B 00         B   319    				call fs_update_dir_cluster
00408F F1                  B   320    				pop af
004090 C9                  B   321    				ret
                           B   322    
                           B   323    
                           B   324    ;----------------------------------------------
                           B   325    
                           B   326    
004091 21 03 6E 00         B   327    open_script		ld hl,script_fn					004095 CD B2 17 00         B   328    				call os_find_file				004099 C0                  B   329    				ret nz
                           B   330    				
00409A ED53 EB 6E 00       B   331    				ld (script_length),de			00409F 79                  B   332    				ld a,c							0040A0 B7                  B   333    				or a
0040A1 C8                  B   334    				ret z
                           B   335    				
0040A2 3E8C                B   336    script_error	ld a,08ch						0040A4 B7                  B   337    				or a
0040A5 C9                  B   338    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 155


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
                           B   339    				
                           B   340    
                           B   341    ;----------------------------------------------
                           B   342    
                           B   343    
0040A6 21 32 6E 00         B   344    read_script		ld hl,commandstring				0040AA 01500000            B   345    				ld bc,max_buffer_chars			0040AE 3E20                B   346    				ld a,32
0040B0 CD 13 17 00         B   347    				call os_bchl_memfill
                           B   348    				
0040B4 11500000            B   349    				ld de,max_buffer_chars			0040B8 CD C1 17 00         B   350    				call os_set_load_length
                           B   351    				
0040BC AF                  B   352    				xor a
0040BD 2A EB 6E 00         B   353    				ld hl,(script_length)
0040C1 ED5B E8 6E 00       B   354    				ld de,(script_file_offset)		0040C6 37                  B   355    				scf
0040C7 ED52                B   356    				sbc hl,de						0040C9 30 08               B   357    				jr nc,not_eoscr					0040CB 21 EE 6E 00         B   358    				ld hl,script_flags
0040CF CBDE                B   359    				set scr_end,(hl)				0040D1 AF                  B   360    				xor a
0040D2 C9                  B   361    				ret
0040D3 CD C9 17 00         B   362    not_eoscr		call os_set_file_pointer
                           B   363    
0040D7 21 32 6E 00         B   364    				ld hl,commandstring				0040DB CD DF 17 00         B   365    				call os_read_bytes_from_file
0040DF B7                  B   366    				or a			
0040E0 28 03               B   367    				jr z,scr_load_ok
0040E2 FECC                B   368    				cp 0cch							0040E4 C0                  B   369    				ret nz							                           B   370    
0040E5 21 EE 6E 00         B   371    scr_load_ok		ld hl,script_flags
0040E9 CB4E                B   372    				bit scr_find_new_line,(hl)		0040EB 20 17               B   373    				jr nz,scr_fnl					                           B   374    
0040ED 21 32 6E 00         B   375    				ld hl,commandstring				0040F1 0650                B   376    				ld b,max_buffer_chars
0040F3 7E                  B   377    scr_fcr			ld a,(hl)
0040F4 FE20                B   378    				cp 32
0040F6 38 05               B   379    				jr c,scr_gotclcr
0040F8 23                  B   380    				inc hl
0040F9 10 F8               B   381    				djnz scr_fcr
0040FB AF                  B   382    				xor a
0040FC C9                  B   383    				ret
0040FD 3620                B   384    scr_gotclcr		ld (hl),32						0040FF 23                  B   385    				inc hl
004100 10 FB               B   386    				djnz scr_gotclcr
004102 AF                  B   387    				xor a
004103 C9                  B   388    				ret
                           B   389    
004104 FD2A E8 6E 00       B   390    scr_fnl			ld iy,(script_file_offset)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 156


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\script_routines.asm
004109 21 32 6E 00         B   391    				ld hl,commandstring	
00410D 7E                  B   392    scr_find_cr		ld a,(hl)						00410E B7                  B   393    				or a
00410F 20 07               B   394    				jr nz,scr_neocl					004111 FD22 E8 6E 00       B   395    scr_eocl		ld (script_file_offset),iy
004116 18 8E               B   396    				jr read_script				
004118 FE20                B   397    scr_neocl		cp 20h							00411A 38 05               B   398    				jr c,scr_got_cr
00411C 23                  B   399    				inc hl
00411D FD23                B   400    				inc iy
00411F 18 EC               B   401    				jr scr_find_cr
                           B   402    				
004121 7E                  B   403    scr_got_cr		ld a,(hl)
004122 B7                  B   404    				or a							004123 28 EC               B   405    				jr z,scr_eocl					004125 FE20                B   406    				cp 20h
004127 30 05               B   407    				jr nc,scr_got_ch				004129 23                  B   408    				inc hl
00412A FD23                B   409    				inc iy
00412C 18 F3               B   410    				jr scr_got_cr
                           B   411    
00412E FD22 E8 6E 00       B   412    scr_got_ch		ld (script_file_offset),iy
004133 21 EE 6E 00         B   413    				ld hl,script_flags				004137 CB8E                B   414    				res scr_find_new_line,(hl)
004139 C3 A6 40 00         B   415    				jr read_script
                           B   416    
                           B   417    
                           B   418    ;----------------------------------------------
                           B   419    
00413D                     B   420    copy_goto_label
                           B   421    
00413D 11 1B 6F 00         B   422    				ld de,if_label_txt				004141 0610                B   423    				ld b,max_if_chars
004143 CD EC 13 00         B   424    				call os_copy_ascii_run			004147 AF                  B   425    				xor a
004148 12                  B   426    				ld (de),a						004149 C9                  B   427    				ret	
                           B   428    				
                           B   429    ;----------------------------------------------
                           B   430    			
                           B   431    				
                           B   432    				
                           B   433    				
                           A  3845    	
                           A  3846    ;----------------------------------------------
                           A  3847    ; Storage Device Drivers
                           A  3848    ;----------------------------------------------
                           A  3849    
                           B     0    	include		'prose_sdcard_driver_v110.asm'	                           B     1    ;----------------------------------------------
                           B     2    ; Low level Z80 MMC/SDC/SDHC card access routin
                           B     3    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 157


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B     4    ;
                           B     5    ; V1.10 - SDHC support added
                           B     6    ;
                           B     7    ; Limitations:
                           B     8    ; ------------
                           B     9    ; Does not check for block size
                           B    10    ;
                           B    11    ; Somewhat arbitrary timimg due to quirks of my
                           B    12    ; which means the data from the card following 
                           B    13    ; byte is skipped by the send_command routine.)
                           B    14    
                           B    15    
                           B    16    ;----------------------------------------------
                           B    17    ;
                           B    18    ; Key Routines:      Input Parameters          
                           B    19    ; -------------      ----------------          
                           B    20    ; sd_initialize		no arguments required      
                           B    21    ; sd_read_sector	[sector_lba0-3]				                           B    22    ; sd_write_sector	[sector_lba0-3]    			                           B    23    ;
                           B    24    ; (Assume all other registers are trashed.)
                           B    25    ;
                           B    26    ;----------------------------------------------
                           B    27    
                           B    28    ; Routines respond with Zero Flag set if operat
                           B    29    
                           B    30    ; $01 - SPI mode failed	 
                           B    31    ; $10 - MMC init failed	
                           B    32    ; $11 - SD init failed	
                           B    33    ; $12 - SDHC init failed	
                           B    34    ; $13 - voltage range bad	
                           B    35    ; $14 - check pattern bad
                           B    36    ; $20 - illegal command
                           B    37    ; $21 - bad command response
                           B    38    ; $22 - data token timeout
                           B    39    ; $23 - write timeout
                           B    40    ; $24 - write failed
                           B    41    ;
                           B    42    ;----------------------------------------------
                           B    43    
                           B    44    ; Define "sector_buffer" in main code (512 byte
                           B    45    
                           B    46    ;----------------------------------------------
                           B    47    
       00000041            B    48    CMD1	equ 40h + 1
       00000049            B    49    CMD9	equ 40h + 9
       0000004A            B    50    CMD10	equ 40h + 10
       0000004D            B    51    CMD13	equ 40h + 13
       00000051            B    52    CMD17	equ 40h + 17
       00000058            B    53    CMD24	equ 40h + 24
       00000069            B    54    ACMD41	equ 40h + 41
       00000077            B    55    CMD55	equ 40h + 55
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 158


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
       0000007A            B    56    CMD58	equ 40h + 58
                           B    57    
       00000001            B    58    sd_error_spi_mode_failed		equ 01h
                           B    59    
       00000010            B    60    sd_error_mmc_init_failed		equ 10h
       00000011            B    61    sd_error_sd_init_failed			equ 11h
       00000012            B    62    sd_error_sdhc_init_failed		equ 12h
       00000013            B    63    sd_error_vrange_bad				equ 13h
       00000014            B    64    sd_error_check_pattern_bad		equ 14h
                           B    65    
       00000020            B    66    sd_error_illegal_command		equ 20h
       00000021            B    67    sd_error_bad_command_response	equ 21h
       00000022            B    68    sd_error_data_token_timeout		equ 22h
       00000023            B    69    sd_error_write_timeout			equ 23h
       00000024            B    70    sd_error_write_failed			equ 24h
                           B    71    
                           B    72    ;----------------------------------------------
                           B    73    ; PROSE STANDARD DRIVER HEADER
                           B    74    ;----------------------------------------------
                           B    75    
00414A C3 5E 41 00         B    76    sd_card_driver	jp sd_initialize			; $
00414E C3 80 41 00         B    77    				jp sd_read_sector			; $
004152 C3 86 41 00         B    78    				jp sd_write_sector			; $
004156 53445F43 41524400   B    79    				db "SD_CARD",0				; $
                           B    80    
                           B    81    ;----------------------------------------------
                           B    82    ; SD Card INITIALIZE code begins...
                           B    83    ;----------------------------------------------
                           B    84    
00415E CD 8C 41 00         B    85    sd_initialize	call sd_init_main
004162 B7                  B    86    				or a						; i
004163 28 05               B    87    				jr z,sd_inok
004165 CD 1D 45 00         B    88    				call sd_power_off			; i
004169 C9                  B    89    				ret
                           B    90    
00416A CD 22 45 00         B    91    sd_inok			call sd_spi_port_fast		; o
                           B    92    
00416E CD EE 42 00         B    93    				call sd_read_cid			; a
004172 20 06               B    94    				jr nz,sd_done
004174 E5                  B    95    				push hl						; c
004175 CD 57 42 00         B    96    				call sd_read_csd
004179 E1                  B    97    				pop hl
                           B    98    
00417A CD 05 45 00         B    99    sd_done			call sd_deselect_card		; R
00417E B7                  B   100    				or a						; I
00417F C9                  B   101    				ret				 
                           B   102    
                           B   103    ;----------------------------------------------
                           B   104    		
004180 CD 72 43 00         B   105    sd_read_sector	call sd_read_sector_main
004184 18 F4               B   106    				jr sd_done
                           B   107    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 159


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   108    ;----------------------------------------------
                           B   109    	
004186 CD 98 43 00         B   110    sd_write_sector	call sd_write_sector_main
00418A 18 EE               B   111    				jr sd_done
                           B   112    	
                           B   113    ;----------------------------------------------
                           B   114    	
00418C AF                  B   115    sd_init_main	xor a							00418D 32 9C 44 00         B   116    				ld (sd_card_info),a			
                           B   117    
004191 CD 1D 45 00         B   118    				call sd_power_off				                           B   119    				
004195 11004000            B   120    				ld de,16384						004199 CD 6F 4B 00         B   121    				call hwsc_time_delay
                           B   122    							
00419D CD 11 45 00         B   123    				call sd_power_on				                           B   124    
0041A1 11830000            B   125    				ld de,131						0041A5 CD 6F 4B 00         B   126    				call hwsc_time_delay
                           B   127    				
0041A9 060A                B   128    				ld b,10							0041AB CD 21 44 00         B   129    sd_ecilp		call sd_send_eight_clocks
0041AF 10 FA               B   130    				djnz sd_ecilp
                           B   131    				
0041B1 21 70 44 00         B   132    				ld hl,CMD0_string				0041B5 CD 39 44 00         B   133    				call sd_send_command_string		0041B9 FE01                B   134    				cp 01h							0041BB 28 03               B   135    				jr z,sd_spi_mode_ok
                           B   136    				
0041BD 3E01                B   137    				ld a,sd_error_spi_mode_failed
0041BF C9                  B   138    				ret		
                           B   139    
                           B   140    ; ---- CARD IS IN IDLE MODE -------------------
                           B   141    
0041C0 21 76 44 00         B   142    sd_spi_mode_ok	ld hl,CMD8_string				0041C4 CD 39 44 00         B   143    				call sd_send_command_string
0041C8 FE01                B   144    				cp 01h
0041CA 20 52               B   145    				jr nz,sd_sdc_init				                           B   146    
0041CC 0604                B   147    				ld b,4
0041CE CD 61 44 00         B   148    				call sd_read_bytes_to_sector_bu
0041D2 3E01                B   149    				ld a,1
0041D4 23                  B   150    				inc hl
0041D5 23                  B   151    				inc hl
0041D6 BE                  B   152    				cp (hl)							0041D7 28 03               B   153    				jr z,sd_vrok
0041D9 3E13                B   154    				ld a,sd_error_vrange_bad
0041DB C9                  B   155    				ret				
                           B   156    
0041DC 3EAA                B   157    sd_vrok			ld a,0aah
0041DE 23                  B   158    				inc hl
0041DF BE                  B   159    				cp (hl)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 160


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
0041E0 28 03               B   160    				jr z,sd_check_pattern_ok
0041E2 3E14                B   161    				ld a,sd_error_check_pattern_bad
0041E4 C9                  B   162    				ret
                           B   163    				
0041E5                     B   164    sd_check_pattern_ok
                           B   165    
                           B   166    ;------ SDHC CARD CAN WORK AT 2.7v - 3.6v -----
                           B   167    	
0041E5 01401F00            B   168    				ld bc,8000						                           B   169    
0041E9 3E77                B   170    sdhc_iwl		ld a,CMD55						0041EB CD 28 44 00         B   171    				call sd_send_command_null_args
                           B   172    				
0041EF 21 7C 44 00         B   173    				ld hl,ACMD41HCS_string			0041F3 CD 39 44 00         B   174    				call sd_send_command_string
0041F7 28 0C               B   175    				jr z,sdhc_init_ok				0041F9 CB57                B   176    				bit 2,a
0041FB 20 05               B   177    				jr nz,sdhc_if					                           B   178    				
0041FD 0B                  B   179    				dec bc
0041FE 78                  B   180    				ld a,b
0041FF B1                  B   181    				or c
004200 20 E7               B   182    				jr nz,sdhc_iwl
                           B   183    				
004202 3E12                B   184    sdhc_if			ld a,sd_error_sdhc_init_failed	004204 C9                  B   185    				ret
                           B   186    				
004205                     B   187    sdhc_init_ok
                           B   188    
                           B   189    ;------ SDHC CARD IS INITIALIZED --------------
                           B   190    
004205 3E7A                B   191    				ld a,CMD58						004207 CD 28 44 00         B   192    				call sd_send_command_null_args
                           B   193    					
00420B 0604                B   194    				ld b,4							00420D CD 61 44 00         B   195    				call sd_read_bytes_to_sector_bu
004211 7E                  B   196    				ld a,(hl)
004212 E640                B   197    				and 040h						004214 0F                  B   198    				rrca
004215 0F                  B   199    				rrca 
004216 F602                B   200    				or 00000010b				
004218 32 9C 44 00         B   201    				ld (sd_card_info),a				00421C AF                  B   202    				xor a							00421D C9                  B   203    				ret
                           B   204    
                           B   205    	
                           B   206    ;-------- NOT AN SDHC CARD, TRY SD INIT -------
                           B   207    
00421E 01401F00            B   208    sd_sdc_init		ld bc,8000						                           B   209    
004222 3E77                B   210    sd_iwl			ld a,CMD55						004224 CD 28 44 00         B   211    				call sd_send_command_null_args
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 161


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   212    
004228 3E69                B   213    				ld a,ACMD41						00422A CD 28 44 00         B   214    				call sd_send_command_null_args
00422E 28 0C               B   215    				jr z,sd_rdy						                           B   216    				
004230 CB57                B   217    				bit 2,a				
004232 20 10               B   218    				jr nz,sd_mmc_init				                           B   219    							
004234 0B                  B   220    				dec bc
004235 78                  B   221    				ld a,b
004236 B1                  B   222    				or c
004237 20 E9               B   223    				jr nz,sd_iwl
                           B   224    				
004239 3E11                B   225    				ld a,sd_error_sd_init_failed	00423B C9                  B   226    				ret
                           B   227    				
00423C 3E01                B   228    sd_rdy			ld a,1
00423E 32 9C 44 00         B   229    				ld (sd_card_info),a				004242 AF                  B   230    				xor a							004243 C9                  B   231    				ret	
                           B   232    
                           B   233    ;-------- NOT AN SDHC OR SD CARD, TRY MMC INIT 
                           B   234    
004244 01401F00            B   235    sd_mmc_init		ld bc,8000						                           B   236    
004248 3E41                B   237    sdmmc_iwl		ld a,CMD1
00424A CD 28 44 00         B   238    				call sd_send_command_null_args	00424E C8                  B   239    				ret z							                           B   240    				
00424F 0B                  B   241    sd_mnrdy		dec bc
004250 78                  B   242    				ld a,b
004251 B1                  B   243    				or c
004252 20 F4               B   244    				jr nz,sdmmc_iwl
                           B   245    				
004254 3E10                B   246    				ld a,sd_error_mmc_init_failed	004256 C9                  B   247    				ret
                           B   248    	
                           B   249    ;----------------------------------------------
                           B   250    
                           B   251    ; Returns BC:DE = Total capacity of card (in se
                           B   252    
004257                     B   253    sd_read_csd
                           B   254    				
004257 3E49                B   255    				ld a,CMD9						004259 CD 28 44 00         B   256    				call sd_send_command_null_args	00425D C2 7E 43 00         B   257    				jp nz,sd_bcr_error				                           B   258    
004261 CD 0C 44 00         B   259    				call sd_wait_data_token			004265 C2 87 43 00         B   260    				jp nz,sd_dt_timeout	
                           B   261    
004269 0612                B   262    sd_id_ok		ld b,18							00426B CD 61 44 00         B   263    				call sd_read_bytes_to_sector_bu
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 162


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   264    
00426F DD210008 00         B   265    				ld ix,sector_buffer				004274 DDCB0076            B   266    				bit 6,(ix)
004278 28 19               B   267    				jr z,sd_csd_v1
                           B   268    
00427A DD6E09              B   269    sd_csd_v2		ld l,(ix+9)						00427D DD6608              B   270    				ld h,(ix+8)
004280 23                  B   271    				inc hl
004281 3E0A                B   272    				ld a,10
004283 01000000            B   273    				ld bc,0
004287 4029                B   274    sd_csd2lp		add.sis hl,hl
004289 CB11                B   275    				rl c
00428B CB10                B   276    				rl b
00428D 3D                  B   277    				dec a
00428E 20 F7               B   278    				jr nz,sd_csd2lp
004290 EB                  B   279    				ex de,hl						004291 AF                  B   280    				xor a
004292 C9                  B   281    				ret
                           B   282    				
004293 DD7E06              B   283    sd_csd_v1		ld a,(ix+6)						004296 E603                B   284    				and 00000011b
004298 57                  B   285    				ld d,a
004299 DD5E07              B   286    				ld e,(ix+7)
00429C DD7E08              B   287    				ld a,(ix+8)
00429F E6C0                B   288    				and 11000000b
0042A1 CB27                B   289    				sla a
0042A3 CB13                B   290    				rl e
0042A5 CB12                B   291    				rl d
0042A7 CB27                B   292    				sla a
0042A9 CB13                B   293    				rl e
0042AB CB12                B   294    				rl d							                           B   295    				
0042AD DD7E09              B   296    				ld a,(ix+9)
0042B0 E603                B   297    				and 00000011b
0042B2 47                  B   298    				ld b,a
0042B3 DD7E0A              B   299    				ld a,(ix+10)
0042B6 E680                B   300    				and 10000000b
0042B8 CB27                B   301    				sla a
0042BA CB10                B   302    				rl b							                           B   303    				
0042BC 04                  B   304    				inc b
0042BD 04                  B   305    				inc b
0042BE 21000000            B   306    				ld hl,0
0042C2 CB23                B   307    sd_cmsh			sla e
0042C4 CB12                B   308    				rl d
0042C6 CB15                B   309    				rl l
0042C8 CB14                B   310    				rl h
0042CA 10 F6               B   311    				djnz sd_cmsh					                           B   312    				
0042CC DD7E05              B   313    				ld a,(ix+5)
0042CF E60F                B   314    				and 00001111b					0042D1 28 17               B   315    				jr z,sd_nbls
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 163


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
0042D3 47                  B   316    				ld b,a
0042D4 CB23                B   317    sd_blsh			sla e
0042D6 CB12                B   318    				rl d
0042D8 CB15                B   319    				rl l
0042DA CB14                B   320    				rl h
0042DC 10 F6               B   321    				djnz sd_blsh					                           B   322    				
0042DE 0609                B   323    				ld b,9							0042E0 CB3C                B   324    sd_cbsec		srl h
0042E2 CB1D                B   325    				rr l
0042E4 CB1A                B   326    				rr d
0042E6 CB1B                B   327    				rr e
0042E8 10 F6               B   328    				djnz sd_cbsec
                           B   329    
0042EA E5                  B   330    sd_nbls			push hl
0042EB C1                  B   331    				pop bc							0042EC AF                  B   332    				xor a
0042ED C9                  B   333    				ret
                           B   334    
                           B   335    ;----------------------------------------------
                           B   336    
0042EE                     B   337    sd_read_cid
                           B   338    	
                           B   339    ; Returns HL = Pointer to device ID string
                           B   340    
0042EE 3E4A                B   341    				ld a,CMD10						0042F0 CD 28 44 00         B   342    				call sd_send_command_null_args
0042F4 C2 7E 43 00         B   343    				jp nz,sd_bcr_error				                           B   344    
0042F8 CD 0C 44 00         B   345    				call sd_wait_data_token			0042FC C2 87 43 00         B   346    				jp nz,sd_dt_timeout
                           B   347    					
004300 0612                B   348    				ld b,18
004302 CD 61 44 00         B   349    				call sd_read_bytes_to_sector_bu
                           B   350    				
004306 21030800            B   351    				ld hl,sector_buffer+03h			00430A 11200800            B   352    				ld de,sector_buffer+20h
00430E 01050000            B   353    				ld bc,5
004312 3A 9C 44 00         B   354    				ld a,(sd_card_info)
004316 E60F                B   355    				and 0fh
004318 20 01               B   356    				jr nz,sd_cn5
00431A 03                  B   357    				inc bc
00431B EDB0                B   358    sd_cn5			ldir
00431D E5                  B   359    				push hl
00431E D5                  B   360    				push de
00431F 21 82 44 00         B   361    				ld hl,sd_vnchars
004323 01140000            B   362    				ld bc,20
004327 EDB0                B   363    				ldir
004329 D1                  B   364    				pop de
00432A E1                  B   365    				pop hl
00432B 13                  B   366    				inc de
00432C 13                  B   367    				inc de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 164


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
00432D 7E                  B   368    				ld a,(hl)
00432E CB3F                B   369    				srl a
004330 CB3F                B   370    				srl a
004332 CB3F                B   371    				srl a
004334 CB3F                B   372    				srl a
004336 C630                B   373    				add a,30h						004338 12                  B   374    				ld (de),a
004339 13                  B   375    				inc de
00433A 13                  B   376    				inc de
00433B 7E                  B   377    				ld a,(hl)
00433C E60F                B   378    				and 0fh
00433E C630                B   379    				add a,30h
004340 12                  B   380    				ld (de),a						004341 13                  B   381    				inc de
004342 13                  B   382    				inc de
004343 13                  B   383    				inc de
004344 13                  B   384    				inc de
004345 13                  B   385    				inc de
004346 23                  B   386    				inc hl
004347 0604                B   387    				ld b,4
004349 7E                  B   388    sd_snulp		ld a,(hl)						00434A CB3F                B   389    				srl a
00434C CB3F                B   390    				srl a
00434E CB3F                B   391    				srl a
004350 CB3F                B   392    				srl a
004352 C630                B   393    				add a,30h
004354 FE3A                B   394    				cp 3ah
004356 38 02               B   395    				jr c,sd_hvl1
004358 C607                B   396    				add a,07h
00435A 12                  B   397    sd_hvl1			ld (de),a
00435B 13                  B   398    				inc de
00435C 7E                  B   399    				ld a,(hl)
00435D E60F                B   400    				and 0fh
00435F C630                B   401    				add a,30h
004361 FE3A                B   402    				cp 3ah
004363 38 02               B   403    				jr c,sd_hvl2
004365 C607                B   404    				add a,07h
004367 12                  B   405    sd_hvl2			ld (de),a
004368 13                  B   406    				inc de
004369 23                  B   407    				inc hl
00436A 10 DD               B   408    				djnz sd_snulp
                           B   409    				
00436C 21200800            B   410    				ld hl,sector_buffer+20h			004370 AF                  B   411    				xor a
004371 C9                  B   412    				ret
                           B   413    
                           B   414    ;----------------------------------------------
                           B   415    ; SD Card READ SECTOR code begins...
                           B   416    ;----------------------------------------------
                           B   417    	
004372                     B   418    sd_read_sector_main
                           B   419    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 165


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   420    ; 512 bytes are returned in sector buffer
                           B   421    
004372 CD E3 43 00         B   422    				call sd_set_sector_addr
                           B   423    
004376 3E51                B   424    				ld a,CMD17						004378 CD 34 44 00         B   425    				call sd_send_command_current_ar
00437C 28 03               B   426    				jr z,sd_rscr_ok					00437E 3E21                B   427    sd_bcr_error	ld a,sd_error_bad_command_respo
004380 C9                  B   428    				ret
                           B   429    
004381 CD 0C 44 00         B   430    sd_rscr_ok		call sd_wait_data_token			004385 28 03               B   431    				jr z,sd_dt_ok					004387 3E22                B   432    sd_dt_timeout	ld a,sd_error_data_token_timeou
004389 C9                  B   433    				ret
                           B   434    
00438A 21000800            B   435    sd_dt_ok		ld hl,sector_buffer
00438E CD B2 44 00         B   436    				call sd_read_513_bytes			004392 CD AA 44 00         B   437    				call sd_get_byte
                           B   438    				
004396 AF                  B   439    				xor a							004397 C9                  B   440    				ret
                           B   441    
                           B   442    ;----------------------------------------------
                           B   443    ; SD Card WRITE SECTOR code begins...
                           B   444    ;----------------------------------------------
                           B   445    
004398                     B   446    sd_write_sector_main
                           B   447    	
004398 CD E3 43 00         B   448    				call sd_set_sector_addr
                           B   449    
00439C 3E58                B   450    				ld a,CMD24						00439E CD 34 44 00         B   451    				call sd_send_command_current_ar
0043A2 20 DA               B   452    				jr nz,sd_bcr_error				                           B   453    				
0043A4 CD 21 44 00         B   454    				call sd_send_eight_clocks		                           B   455    
0043A8 3EFE                B   456    				ld a,0feh
0043AA CD 9D 44 00         B   457    				call sd_send_byte				                           B   458    
0043AE 21000800            B   459    				ld hl,sector_buffer
0043B2 CD E1 44 00         B   460    				call sd_write_512_bytes			0043B6 CD 21 44 00         B   461    				call sd_send_eight_clocks		0043BA CD 21 44 00         B   462    				call sd_send_eight_clocks		                           B   463    		
0043BE CD AA 44 00         B   464    				call sd_get_byte				0043C2 E61F                B   465    				and 1fh
0043C4 CB3F                B   466    				srl a
0043C6 FE02                B   467    				cp 02h
0043C8 28 03               B   468    				jr z,sd_wr_ok
                           B   469    
0043CA 3E24                B   470    sd_write_fail	ld a,sd_error_write_failed
0043CC C9                  B   471    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 166


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   472    
0043CD 01FFFF00            B   473    sd_wr_ok		ld bc,65535						0043D1 CD AA 44 00         B   474    sd_wcbsy		call sd_get_byte				0043D5 FEFF                B   475    				cp 0ffh
0043D7 20 02               B   476    				jr nz,sd_busy
0043D9 AF                  B   477    				xor a							0043DA C9                  B   478    				ret
                           B   479    				
0043DB 0B                  B   480    sd_busy			dec bc
0043DC 78                  B   481    				ld a,b
0043DD B1                  B   482    				or c
0043DE 20 F1               B   483    				jr nz,sd_wcbsy
                           B   484    
0043E0                     B   485    sd_card_busy_timeout
                           B   486    
0043E0 3E23                B   487    				ld a,sd_error_write_timeout
0043E2 C9                  B   488    				ret	
                           B   489    
                           B   490    ;----------------------------------------------
                           B   491    
0043E3                     B   492    sd_set_sector_addr
                           B   493    				
0043E3 21 10 6E 00         B   494    				ld hl,sector_lba0
0043E7 4E                  B   495    				ld c,(hl)
0043E8 23                  B   496    				inc hl
0043E9 5E                  B   497    				ld e,(hl)
0043EA 23                  B   498    				inc hl
0043EB 56                  B   499    				ld d,(hl)
0043EC 23                  B   500    				inc hl
0043ED 46                  B   501    				ld b,(hl)					; s
                           B   502    
0043EE 3A 9C 44 00         B   503    				ld a,(sd_card_info)
0043F2 E610                B   504    				and 10h
0043F4 20 0A               B   505    				jr nz,lbatoargs				; i
0043F6 69                  B   506    				ld l,c
0043F7 63                  B   507    				ld h,e
0043F8 7A                  B   508    				ld a,d						; o
0043F9 4029                B   509    				add.sis hl,hl
0043FB 8F                  B   510    				adc a,a	
0043FC EB                  B   511    				ex de,hl
0043FD 47                  B   512    				ld b,a
0043FE 0E00                B   513    				ld c,0
004400 21 97 44 00         B   514    lbatoargs		ld hl,cmd_generic_args
004404 70                  B   515    				ld (hl),b
004405 23                  B   516    				inc hl
004406 72                  B   517    				ld (hl),d
004407 23                  B   518    				inc hl
004408 73                  B   519    				ld (hl),e
004409 23                  B   520    				inc hl
00440A 71                  B   521    				ld (hl),c
00440B C9                  B   522    				ret
                           B   523    	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 167


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
                           B   524    	
                           B   525    ;----------------------------------------------
                           B   526    
00440C                     B   527    sd_wait_data_token
                           B   528    
00440C C5                  B   529    				push bc
00440D 01401F00            B   530    				ld bc,8000				
004411 CD AA 44 00         B   531    sd_wdt			call sd_get_byte			; r
004415 FEFE                B   532    				cp 0feh
004417 28 06               B   533    				jr z,sd_gdt
004419 0B                  B   534    				dec bc
00441A 78                  B   535    				ld a,b
00441B B1                  B   536    				or c
00441C 20 F3               B   537    				jr nz,sd_wdt
00441E 0C                  B   538    				inc c						; d
00441F C1                  B   539    sd_gdt			pop bc
004420 C9                  B   540    				ret
                           B   541    
                           B   542    ;----------------------------------------------
                           B   543    
004421                     B   544    sd_send_eight_clocks
                           B   545    
004421 3EFF                B   546    				ld a,0ffh
004423 CD 9D 44 00         B   547    				call sd_send_byte
004427 C9                  B   548    				ret
                           B   549    
                           B   550    ;----------------------------------------------
                           B   551    
                           B   552    
004428                     B   553    sd_send_command_null_args
                           B   554    
004428 21000000            B   555    				ld hl,0
00442C 22 97 44 00         B   556    				ld (cmd_generic_args),hl	; c
004430 22 98 44 00         B   557    				ld (cmd_generic_args+1),hl	
                           B   558    				
                           B   559    				
                           B   560    	
004434                     B   561    sd_send_command_current_args
                           B   562    	
004434 21 96 44 00         B   563    				ld hl,cmd_generic
004438 77                  B   564    				ld (hl),a
                           B   565    
                           B   566    
                           B   567    
004439                     B   568    sd_send_command_string
                           B   569    
                           B   570    ; set HL = location of 6 byte command string
                           B   571    ; returns command response in A (ZF set if $00)
                           B   572    
                           B   573    
004439 CD FD 44 00         B   574    				call sd_select_card				                           B   575    						
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 168


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
00443D CD 21 44 00         B   576    				call sd_send_eight_clocks		                           B   577    				
004441 C5                  B   578    				push bc
004442 0606                B   579    				ld b,6
004444 7E                  B   580    sd_sclp			ld a,(hl)
004445 CD 9D 44 00         B   581    				call sd_send_byte				004449 23                  B   582    				inc hl
00444A 10 F8               B   583    				djnz sd_sclp
00444C C1                  B   584    				pop bc
                           B   585    				
00444D CD AA 44 00         B   586    				call sd_get_byte				                           B   587    					
                           B   588    
004451                     B   589    sd_wait_valid_response
                           B   590    				
004451 C5                  B   591    				push bc
004452 0600                B   592    				ld b,0
004454 CD AA 44 00         B   593    sd_wncrl		call sd_get_byte				004458 CB7F                B   594    				bit 7,a							00445A 28 02               B   595    				jr z,sd_gcr
00445C 10 F6               B   596    				djnz sd_wncrl
                           B   597    								
00445E B7                  B   598    sd_gcr			or a							00445F C1                  B   599    				pop bc
004460 C9                  B   600    				ret
                           B   601    				
                           B   602    	
                           B   603    ;----------------------------------------------
                           B   604    
004461                     B   605    sd_read_bytes_to_sector_buffer
                           B   606    
004461 21000800            B   607    				ld hl,sector_buffer
                           B   608    	
004465                     B   609    sd_read_bytes
                           B   610    
                           B   611    ; set HL to dest address for data
                           B   612    ; set B to number of bytes required  
                           B   613    
004465 E5                  B   614    				push hl
004466 CD AA 44 00         B   615    sd_rblp			call sd_get_byte
00446A 77                  B   616    				ld (hl),a
00446B 23                  B   617    				inc hl
00446C 10 F8               B   618    				djnz sd_rblp
00446E E1                  B   619    				pop hl
00446F C9                  B   620    				ret
                           B   621    	
                           B   622    ;----------------------------------------------
                           B   623    
                           B   624    ; This data can be placed in ROM:
                           B   625    
004470 40000000 0095       B   626    CMD0_string			db 40h,00h,00h,00h,00h,95h
004476 48000001 AA87       B   627    CMD8_string			db 48h,00h,00h,01h,aah,87h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 169


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_sdcard_driver_v110.asm
00447C 69400000 0001       B   628    ACMD41HCS_string	db 69h,40h,00h,00h,00h,01h
004482 2076782E 7820534E   B   629    sd_vnchars			db " vx.x SN:00000000 ",0,0
00448A 3A303030 30303030 
004492 30200000 
                           B   630    
                           B   631    
                           B   632    ; The following variables need to be placed in 
                           B   633    
004496 00                  B   634    cmd_generic			db 00h
004497 00000000            B   635    cmd_generic_args	db 00h,00h,00h,00h
00449B 01                  B   636    cmd_generic_crc		db 01h
                           B   637    
00449C 00                  B   638    sd_card_info		db 0	; Bit [4] = CCS (bl
                           B   639    
                           B   640    
                           B   641    ;==============================================
                           B   642    
                           B   643    ;----------------------------------------------
                           B   644    
                           C     0    include "ez80p_sdcard_code.asm"				;EZ
                           C     1    ;----------------------------------------------
                           C     2    ; eZ80P Specific SD card low-level routines v1.
                           C     3    ;----------------------------------------------
                           C     4    
00449D                     C     5    sd_send_byte
                           C     6    
                           C     7    ;Put byte to send to card in A
                           C     8    
00449D ED3903              C     9    					out0 (port_sdc_data),a
0044A0 C5                  C    10    					push bc
0044A1 0E01                C    11    					ld c,port_hw_flags
0044A3 ED7410              C    12    sd_wb_loop			tstio 1<<sdc_serializer_bus
0044A6 20 FB               C    13    					jr nz,sd_wb_loop			0044A8 C1                  C    14    					pop bc
0044A9 C9                  C    15    					ret
                           C    16    
                           C    17    ;----------------------------------------------
                           C    18    
0044AA                     C    19    sd_get_byte
                           C    20    
                           C    21    ; Returns byte read from card in A
                           C    22    
0044AA CD 21 44 00         C    23    					call sd_send_eight_clocks
0044AE ED3803              C    24    					in0 a,(port_sdc_data)
0044B1 C9                  C    25    					ret
                           C    26    
                           C    27    ;----------------------------------------------
                           C    28    
0044B2                     C    29    sd_read_513_bytes
                           C    30    
                           C    31    ; optimized sector read
                           C    32    ; set hl = dest location for bytes
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 170


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_sdcard_code.asm
                           C    33    ; note: The last byte read (CRC) is not put int
                           C    34    
0044B2 C5                  C    35    					push bc
0044B3 D5                  C    36    					push de
0044B4 1EFF                C    37    					ld e,0ffh
0044B6 ED1903              C    38    					out0 (port_sdc_data),e		0044B9 0E01                C    39    					ld c,port_hw_flags			0044BB 0600                C    40    					ld b,0						                           C    41    
0044BD ED7410              C    42    sd_wser_loop1		tstio 1<<sdc_serializer_bus
0044C0 20 FB               C    43    					jr nz,sd_wser_loop1			0044C2 DB03                C    44    					in a,(port_sdc_data)		                           C    45    					
0044C4 ED1903              C    46    sd_512_loop			out0 (port_sdc_data),e		0044C7 77                  C    47    					ld (hl),a					0044C8 23                  C    48    					inc hl						                           C    49    					
0044C9 ED7410              C    50    sd_wser_loop2		tstio 1<<sdc_serializer_bus
0044CC 20 FB               C    51    					jr nz,sd_wser_loop2			0044CE DB03                C    52    					in a,(port_sdc_data)		                           C    53    												0044D0 ED1903              C    54    					out0 (port_sdc_data),e		0044D3 77                  C    55    					ld (hl),a					0044D4 23                  C    56    					inc hl						                           C    57    					
0044D5 ED7410              C    58    sd_wser_loop3		tstio 1<<sdc_serializer_bus
0044D8 20 FB               C    59    					jr nz,sd_wser_loop3			0044DA DB03                C    60    					in a,(port_sdc_data)		                           C    61    					
0044DC 10 E6               C    62    					djnz sd_512_loop
0044DE D1                  C    63    					pop de
0044DF C1                  C    64    					pop bc
0044E0 C9                  C    65    					ret
                           C    66    					
                           C    67    ;----------------------------------------------
                           C    68    					
0044E1                     C    69    sd_write_512_bytes
                           C    70    
                           C    71    ;optimized sector write
                           C    72    ;set hl = source location for bytes
                           C    73    
0044E1 0E01                C    74    					ld c,port_hw_flags			0044E3 0600                C    75    					ld b,0						0044E5 7E                  C    76    					ld a,(hl)
0044E6 ED3903              C    77    sd_wr512_loop		out0 (port_sdc_data),a
0044E9 23                  C    78    					inc hl
0044EA 7E                  C    79    					ld a,(hl)
0044EB ED7410              C    80    sd_wser_loop4		tstio 1<<sdc_serializer_bus
0044EE 20 FB               C    81    					jr nz,sd_wser_loop4			0044F0 ED3903              C    82    					out0 (port_sdc_data),a
0044F3 23                  C    83    					inc hl
0044F4 7E                  C    84    					ld a,(hl)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 171


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_sdcard_code.asm
0044F5 ED7410              C    85    sd_wser_loop5		tstio 1<<sdc_serializer_bus
0044F8 20 FB               C    86    					jr nz,sd_wser_loop5
0044FA 10 EA               C    87    					djnz sd_wr512_loop
0044FC C9                  C    88    					ret
                           C    89    
                           C    90    			
                           C    91    ;----------------------------------------------
                           C    92    ; SD Card control
                           C    93    ;----------------------------------------------
                           C    94    
0044FD F5                  C    95    sd_select_card		push af
0044FE 3E02                C    96    					ld a,00h+(1<<sdc_cs)		004500 ED3902              C    97    sd_wr_sdc_ctrl		out0 (port_sdc_ctrl),a
004503 F1                  C    98    					pop af
004504 C9                  C    99    					ret
                           C   100    
                           C   101    
004505 F5                  C   102    sd_deselect_card	push af
004506 3E82                C   103    					ld a,080h+(1<<sdc_cs)		004508 ED3902              C   104    					out0 (port_sdc_ctrl),a
00450B CD 21 44 00         C   105    					call sd_send_eight_clocks	00450F F1                  C   106    					pop af
004510 C9                  C   107    					ret
                           C   108    
                           C   109    
004511 F5                  C   110    sd_power_on			push af
004512 3A040000            C   111    					ld a,(1<<sdc_speed)			004516 ED3902              C   112    					out0 (port_sdc_ctrl),a		004519 3E83                C   113    					ld a,80h+(1<<sdc_power)+(1<
00451B 18 E3               C   114    					jr sd_wr_sdc_ctrl			                           C   115    
                           C   116    
00451D F5                  C   117    sd_power_off		push af
00451E 3E01                C   118    					ld a,00h+(1<<sdc_power)		004520 18 DE               C   119    					jr sd_wr_sdc_ctrl			                           C   120    
                           C   121    
004522 F5                  C   122    sd_spi_port_fast	push af
004523 3E84                C   123    					ld a,80h+(1<<sdc_speed)		004525 18 D9               C   124    					jr sd_wr_sdc_ctrl
                           C   125    
                           C   126    
                           C   127    ;----------------------------------------------
                           B   646    
                           B   647    ;----------------------------------------------
                           A  3851    	
                           A  3852    ; Additional storage device driver source can b
                           A  3853    ; Also add the driver's PROSE header address la
                           A  3854    
004527 4A4100              A  3855    driver_table		dw24 sd_card_driver	; Stora
00452A 000000              A  3856    					dw24 0 				; Stora
00452D 000000              A  3857    					dw24 0				; Stora
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 172


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_main.asm
004530 000000              A  3858    					dw24 0				; Stora
                           A  3859    					
004533 000000              A  3860    					dw24 0				; Essen
                           A  3861    					
                           A  3862    ;----------------------------------------------
                           A  3863    ; IO routines
                           A  3864    ;----------------------------------------------
                           A  3865    
                           B     0    	include		'ez80p_interrupt_code.asm'		                           B     1    ;----------------------------------------------
                           B     2    ; ez80p interrupt code v0.06 (MADL mode)
                           B     3    ;----------------------------------------------
                           B     4    
004536                     B     5    set_irq_vectors
                           B     6    		
004536 AF                  B     7    				xor a
004537 ED47                B     8    				ld i,a
                           B     9    						
004539 DD216F00 00         B    10    				ld ix,06fh						00453E 0623                B    11    				ld b,35
004540 DD3600C3            B    12    init_ivect_lp1	ld (ix),0c3h					004544 ED3204              B    13    				lea ix,ix+4
004547 10 F7               B    14    				djnz init_ivect_lp1
                           B    15    				
004549 216F0000            B    16    				ld hl,6fh						00454D DD210A00 00         B    17    				ld ix,0ah
004552 11040000            B    18    				ld de,4
004556 060B                B    19    				ld b,11							004558 DD7500              B    20    init_ivect_lp2	ld (ix),l
00455B DD7401              B    21    				ld (ix+1),h
00455E 19                  B    22    				add hl,de
00455F ED3202              B    23    				lea ix,ix+2
004562 10 F4               B    24    				djnz init_ivect_lp2
004564 DD213000 00         B    25    				ld ix,30h						004569 0619                B    26    				ld b,25
00456B DD7500              B    27    init_ivect_lp3	ld (ix),l
00456E DD7401              B    28    				ld (ix+1),h
004571 19                  B    29    				add hl,de
004572 ED3202              B    30    				lea ix,ix+2
004575 10 F4               B    31    				djnz init_ivect_lp3
                           B    32    				
004577 21 B7 45 00         B    33    				ld hl,int_routine				00457B 229C0000            B    34    				ld (09ch),hl					                           B    35    
00457F 3EC3                B    36    				ld a,0c3h						004581 32660000            B    37    				ld (066h),a
004585 21 77 47 00         B    38    				ld hl,nmi_routine				004589 22670000            B    39    				ld (067h),hl
00458D C9                  B    40    				ret
                           B    41    
                           B    42    
                           B    43    ;----------------------------------------------
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 173


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
                           B    44    
                           B    45    
00458E 21 69 6D 00         B    46    enable_os_irqs	ld hl,devices_connected			004592 CB46                B    47    				bit 0,(hl)
004594 C4 9F 45 00         B    48    				call nz,enable_kb_irq
004598 CB4E                B    49    				bit 1,(hl)
00459A C4 A5 45 00         B    50    				call nz,enable_ms_irq
00459E C9                  B    51    				ret
                           B    52    
                           B    53    
00459F 3E81                B    54    enable_kb_irq	ld a,10000001b
0045A1 ED3905              B    55    				out0 (port_irq_ctrl),a			0045A4 C9                  B    56    				ret
                           B    57    
0045A5 3E82                B    58    enable_ms_irq	ld a,10000010b
0045A7 ED3905              B    59    				out0 (port_irq_ctrl),a			0045AA C9                  B    60    				ret
                           B    61    
0045AB 3E02                B    62    disable_ms_irq	ld a,00000010b
0045AD ED3905              B    63    				out0 (port_irq_ctrl),a			0045B0 C9                  B    64    				ret
                           B    65    
0045B1 3E3F                B    66    disable_irqs	ld a,00111111b
0045B3 ED3905              B    67    				out0 (port_irq_ctrl),a			0045B6 C9                  B    68    				ret
                           B    69    			
                           B    70    ;----------------------------------------------
                           B    71    
                           B    72    
0045B7                     B    73    int_routine
0045B7 F5                  B    74    				push af							0045B8 ED3807              B    75    				in0 a,(port_ps2_ctrl)			0045BB CB67                B    76    				bit 4,a
0045BD C4 FB 45 00         B    77    				call nz,kb_interrupt_handler
0045C1 ED3807              B    78    				in0 a,(port_ps2_ctrl)			0045C4 CB6F                B    79    				bit 5,a
0045C6 C4 9D 46 00         B    80    				call nz,ms_interrupt_handler
0045CA F1                  B    81    				pop af
0045CB FB                  B    82    				ei								0045CC 5BED4D              B    83    				reti.l							                           B    84    
                           B    85    
                           B    86    
0045CF                     B    87    prt1_irq_handler
                           B    88    
0045CF F5                  B    89    				push af
0045D0 D5                  B    90    				push de
0045D1 E5                  B    91    				push hl
0045D2 ED3883              B    92    				in0 a,(TMR1_CTL)				                           B    93    				
0045D5 2A 7F 6D 00         B    94    				ld hl,(milliseconds_counter)
0045D9 23                  B    95    				inc hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 174


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
0045DA 22 7F 6D 00         B    96    				ld (milliseconds_counter),hl
0045DE 11E80300            B    97    				ld de,1000
0045E2 AF                  B    98    				xor a
0045E3 ED52                B    99    				sbc hl,de
0045E5 20 0D               B   100    				jr nz,sec_count_ok
0045E7 22 7F 6D 00         B   101    				ld (milliseconds_counter),hl
0045EB 2A 82 6D 00         B   102    				ld hl,(seconds_counter)
0045EF 23                  B   103    				inc hl
0045F0 22 82 6D 00         B   104    				ld (seconds_counter),hl
0045F4 E1                  B   105    sec_count_ok	pop hl
0045F5 D1                  B   106    				pop de
0045F6 F1                  B   107    				pop af
0045F7 FB                  B   108    				ei
0045F8 5BED4D              B   109    				reti.l
                           B   110    
                           B   111    ;----------------------------------------------
                           B   112    ; Keyboard IRQ routine v0.03
                           B   113    ;----------------------------------------------
                           B   114    
0045FB                     B   115    kb_interrupt_handler
                           B   116    
                           B   117    ;--- irq test ---------------------------------
                           B   118    
                           B   119    ;				push bc
                           B   120    ;				ld a,0ffh
                           B   121    ;				ld (hw_palette),a
                           B   122    ;				ld b,0
                           B   123    ;testlp1		djnz testlp1
                           B   124    ;				ld a,0
                           B   125    ;				ld (hw_palette),a
                           B   126    ;				pop bc
                           B   127    				
                           B   128    ;--- end of test ------------------------------
                           B   129    
                           B   130    
0045FB E5                  B   131    				push hl							0045FC C5                  B   132    				push bc
                           B   133    				
0045FD ED3802              B   134    key_loop		in0 a,(port_keyboard_data)		004600 47                  B   135    				ld b,a
                           B   136    
004601 3A 51 6F 00         B   137    				ld a,(key_release_mode)
004605 B7                  B   138    				or a
004606 28 20               B   139    				jr z,key_pressed
                           B   140    			
004608 78                  B   141    				ld a,b							004609 FEE0                B   142    				cp 0e0h							00460B 28 61               B   143    				jr z,kirq_done	
00460D FEE1                B   144    				cp 0e1h
00460F 28 5D               B   145    				jr z,kirq_done	
                           B   146    				
004611 CD 78 46 00         B   147    				call qualifiers					Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 175


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
004615 7D                  B   148    				ld a,l
004616 2F                  B   149    				cpl
004617 6F                  B   150    				ld l,a
004618 3A 53 6F 00         B   151    				ld a,(key_mod_flags)
00461C A5                  B   152    				and l							00461D 32 53 6F 00         B   153    				ld (key_mod_flags),a
004621 AF                  B   154    				xor a
004622 32 51 6F 00         B   155    				ld (key_release_mode),a
004626 18 46               B   156    				jr kirq_done
                           B   157    	
                           B   158    
004628 78                  B   159    key_pressed		ld a,b							004629 FEE0                B   160    				cp 0e0h							00462B 28 41               B   161    				jr z,kirq_done	
00462D FEE1                B   162    				cp 0e1h
00462F 28 3D               B   163    				jr z,kirq_done	
                           B   164    			
004631 FEF0                B   165    				cp 0f0h							004633 20 08               B   166    				jr nz,not_krel
004635 3E01                B   167    				ld a,1							004637 32 51 6F 00         B   168    				ld (key_release_mode),a			00463B 18 31               B   169    				jr kirq_done
                           B   170    	
                           B   171    	
00463D CD 78 46 00         B   172    not_krel		call qualifiers					004641 3A 53 6F 00         B   173    				ld a,(key_mod_flags)			004645 B5                  B   174    				or l
004646 32 53 6F 00         B   175    				ld (key_mod_flags),a			00464A 68                  B   176    				ld l,b
00464B 01000000            B   177    				ld bc,0
00464F 3A 4F 6F 00         B   178    				ld a,(key_buf_wr_idx)
004653 4F                  B   179    				ld c,a
004654 7D                  B   180    				ld a,l
004655 21 2F 6F 00         B   181    				ld hl,scancode_buffer
004659 09                  B   182    				add hl,bc
00465A 77                  B   183    				ld (hl),a						00465B 0E10                B   184    				ld c,16
00465D 09                  B   185    				add hl,bc
00465E 3A 53 6F 00         B   186    				ld a,(key_mod_flags)			004662 77                  B   187    				ld (hl),a	
004663 3A 4F 6F 00         B   188    				ld a,(key_buf_wr_idx)
004667 3C                  B   189    				inc a
004668 E60F                B   190    				and 15
00466A 32 4F 6F 00         B   191    				ld (key_buf_wr_idx),a			                           B   192    				
00466E ED3807              B   193    kirq_done		in0 a,(port_ps2_ctrl)			004671 CB67                B   194    				bit 4,a	
004673 20 88               B   195    				jr nz,key_loop
                           B   196    
004675 C1                  B   197    				pop bc
004676 E1                  B   198    				pop hl
004677 C9                  B   199    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 176


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
                           B   200    
                           B   201    
004678 2E40                B   202    qualifiers		ld l,040h		;apps
00467A FE2F                B   203    				cp 02fh
00467C C8                  B   204    				ret z
                           B   205    			
00467D 2E20                B   206    				ld l,020h		;r gui
00467F FE27                B   207    				cp 027h
004681 C8                  B   208    				ret z
                           B   209    			
004682 2E10                B   210    				ld l,010h		;r shift
004684 FE59                B   211    				cp 059h
004686 C8                  B   212    				ret z
                           B   213    			
004687 2E08                B   214    				ld l,08h		; alt
004689 FE11                B   215    				cp 011h
00468B C8                  B   216    				ret z
                           B   217    			
00468C 2E04                B   218    				ld l,04h		; l gui
00468E FE1F                B   219    				cp 01fh
                           B   220    			
004690 2E02                B   221    				ld l,02h		;l ctrl / r ctr
004692 FE14                B   222    				cp 14h
004694 C8                  B   223    				ret z
                           B   224    			
004695 2E01                B   225    				ld l,01h		;l shift
004697 FE12                B   226    				cp 12h
004699 C8                  B   227    				ret z
                           B   228    				
00469A 2E00                B   229    				ld l,0
00469C C9                  B   230    				ret
                           B   231    
                           B   232    ;----------------------------------------------
                           B   233    ; Mouse IRQ routine v0.03
                           B   234    ;----------------------------------------------
                           B   235    
00469D                     B   236    ms_interrupt_handler
                           B   237    
                           B   238    ;--- irq test ---------------------------------
                           B   239    
                           B   240    ;				push bc
                           B   241    ;				ld a,0ffh
                           B   242    ;				ld (hw_palette),a
                           B   243    ;				ld b,0
                           B   244    ;testlp1		djnz testlp1
                           B   245    ;				ld a,0
                           B   246    ;				ld (hw_palette),a
                           B   247    ;				pop bc
                           B   248    				
                           B   249    ;--- end of test ------------------------------
                           B   250    
                           B   251    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 177


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
00469D C5                  B   252    				push bc							00469E D5                  B   253    				push de							00469F E5                  B   254    				push hl							                           B   255    							
0046A0 11000000            B   256    ms_loop			ld de,0		
0046A4 3A 5C 6F 00         B   257    				ld a,(mouse_packet_index)		0046A8 5F                  B   258    				ld e,a
0046A9 21 58 6F 00         B   259    				ld hl,mouse_packet	
0046AD 19                  B   260    				add hl,de
0046AE ED3806              B   261    				in0 a,(port_mouse_data)
0046B1 77                  B   262    				ld (hl),a
                           B   263    								
0046B2 21 57 6F 00         B   264    				ld hl,mouse_packet_size
0046B6 1C                  B   265    				inc e							0046B7 7B                  B   266    				ld a,e
0046B8 BE                  B   267    				cp (hl)
0046B9 C2 62 47 00         B   268    				jr nz,msubpkt
                           B   269    
0046BD 3A 58 6F 00         B   270    				ld a,(mouse_packet)				0046C1 4F                  B   271    				ld c,a	
0046C2 E607                B   272    				and 0111b
0046C4 32 5D 6F 00         B   273    				ld (mouse_buttons),a
                           B   274    				
0046C8 11000000            B   275    				ld de,0							0046CC CB61                B   276    				bit 4,c
0046CE 28 01               B   277    				jr z,mxsignpos
0046D0 1B                  B   278    				dec de
0046D1 3A 59 6F 00         B   279    mxsignpos		ld a,(mouse_packet+1)
0046D5 5F                  B   280    				ld e,a
0046D6 2A 5E 6F 00         B   281    				ld hl,(mouse_disp_x)
0046DA 19                  B   282    				add hl,de
0046DB 22 5E 6F 00         B   283    				ld (mouse_disp_x),hl
                           B   284    				
0046DF 2A 64 6F 00         B   285    				ld hl,(mouse_abs_x)				0046E3 19                  B   286    				add hl,de
0046E4 22 64 6F 00         B   287    				ld (mouse_abs_x),hl
0046E8 CB61                B   288    				bit 4,c
0046EA 20 12               B   289    				jr nz,m_abs_neg_x
0046EC ED5B 6C 6F 00       B   290    				ld de,(mouse_window_size_x)
0046F1 AF                  B   291    				xor a
0046F2 ED52                B   292    				sbc hl,de
0046F4 38 13               B   293    				jr c,m_abs_x_ok
0046F6 1B                  B   294    				dec de
0046F7 ED53 64 6F 00       B   295    				ld (mouse_abs_x),de
0046FC 18 0B               B   296    				jr m_abs_x_ok
0046FE 29                  B   297    m_abs_neg_x		add hl,hl
0046FF 30 08               B   298    				jr nc,m_abs_x_ok
004701 21000000            B   299    				ld hl,0
004705 22 64 6F 00         B   300    				ld (mouse_abs_x),hl
                           B   301    				
                           B   302    				
004709 11000000            B   303    m_abs_x_ok		ld de,0							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 178


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
00470D CB69                B   304    				bit 5,c
00470F 28 01               B   305    				jr z,mysignpos
004711 1B                  B   306    				dec de
004712 3A 5A 6F 00         B   307    mysignpos		ld a,(mouse_packet+2)
004716 5F                  B   308    				ld e,a
004717 2A 61 6F 00         B   309    				ld hl,(mouse_disp_y)			00471B AF                  B   310    				xor a							00471C ED52                B   311    				sbc hl,de
00471E 22 61 6F 00         B   312    				ld (mouse_disp_y),hl
                           B   313    				
004722 2A 67 6F 00         B   314    				ld hl,(mouse_abs_y)				004726 AF                  B   315    				xor a
004727 ED52                B   316    				sbc hl,de
004729 22 67 6F 00         B   317    				ld (mouse_abs_y),hl
00472D CB69                B   318    				bit 5,c
00472F 28 12               B   319    				jr z,m_abs_neg_y
004731 ED5B 6F 6F 00       B   320    				ld de,(mouse_window_size_y)
004736 AF                  B   321    				xor a
004737 ED52                B   322    				sbc hl,de
004739 38 13               B   323    				jr c,m_abs_y_ok
00473B 1B                  B   324    				dec de
00473C ED53 67 6F 00       B   325    				ld (mouse_abs_y),de
004741 18 0B               B   326    				jr m_abs_y_ok
004743 29                  B   327    m_abs_neg_y		add hl,hl
004744 30 08               B   328    				jr nc,m_abs_y_ok
004746 21000000            B   329    				ld hl,0
00474A 22 67 6F 00         B   330    				ld (mouse_abs_y),hl
00474E                     B   331    m_abs_y_ok			
                           B   332    
00474E 21 5B 6F 00         B   333    				ld hl,mouse_packet+3			004752 3A 6A 6F 00         B   334    				ld a,(mouse_wheel)
004756 86                  B   335    				add a,(hl)
004757 32 6A 6F 00         B   336    				ld (mouse_wheel),a
                           B   337    				
00475B 3E01                B   338    				ld a,1
00475D 32 6B 6F 00         B   339    				ld (mouse_updated),a			                           B   340    				
004761 AF                  B   341    				xor a
004762 32 5C 6F 00         B   342    msubpkt			ld (mouse_packet_index),a
                           B   343    				
004766 ED3807              B   344    				in0 a,(port_ps2_ctrl)			004769 CB6F                B   345    				bit 5,a
00476B C2 A0 46 00         B   346    				jr nz,ms_loop				
                           B   347    				
00476F CD 0F 4B 00         B   348    				call hwsc_update_pointer_sprite
                           B   349    
004773 E1                  B   350    				pop hl
004774 D1                  B   351    				pop de
004775 C1                  B   352    				pop bc
004776 C9                  B   353    				ret
                           B   354    				
                           B   355    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 179


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
                           B   356    ;----------------------------------------------
                           B   357    ; ez80p NMI code v0.03
                           B   358    ;----------------------------------------------
                           B   359    
004777 F5                  B   360    nmi_routine		push af							004778 ED3805              B   361    				in0 a,(port_irq_flags)			00477B CB77                B   362    				bit 6,a							00477D 20 09               B   363    				jr nz,freeze
00477F 3E20                B   364    				ld a,00100000b					004781 ED3909              B   365    				out0 (port_clear_flags),a		004784 F1                  B   366    				pop af
004785 5BED45              B   367    				retn.l
                           B   368    				
004788 F1                  B   369    freeze			pop af
004789 CD 1F 15 00         B   370    				call os_store_CPU_regs
                           B   371    				
00478D 21000000            B   372    				ld hl,0
004791 39                  B   373    				add hl,sp
004792 7E                  B   374    				ld a,(hl)						004793 E601                B   375    				and 1
004795 32 A9 6D 00         B   376    				ld (store_adl),a
004799 20 0A               B   377    				jr nz,adl_freeze
00479B 23                  B   378    				inc hl
00479C 5E                  B   379    				ld e,(hl)						00479D 23                  B   380    				inc hl
00479E 56                  B   381    				ld d,(hl)
00479F CD 4B 17 00         B   382    				call mbase_de
0047A3 18 02               B   383    				jr got_pc
                           B   384    				
0047A5 33                  B   385    adl_freeze		inc sp
0047A6 D1                  B   386    				pop de							0047A7 ED53 9F 6D 00       B   387    got_pc			ld (store_pc),de				                           B   388    				
0047AC CD CA 47 00         B   389    				call disable_button_nmi
0047B0 3E40                B   390    				ld a,01000000b
0047B2 ED3909              B   391    				out0 (port_clear_flags),a		0047B5 3E01                B   392    				ld a,1
0047B7 32 67 6D 00         B   393    				ld (frozen),a
0047BB C3 56 0A 00         B   394    				jp os_cold_start				                           B   395    
                           B   396    ;----------------------------------------------
                           B   397    
                           B   398    ;nmi_routine
                           B   399    ;
                           B   400    ;				push af							                           B   401    ;				push bc
                           B   402    ;				ld a,0ffh
                           B   403    ;				ld (hw_palette),a
                           B   404    ;				ld b,0
                           B   405    ;nmi_testlp2		djnz nmi_testlp2
                           B   406    ;				ld a,0
                           B   407    ;				ld (hw_palette),a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 180


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_interrupt_code.asm
                           B   408    ;				pop bc
                           B   409    ;				ld a,01100000b
                           B   410    ;				out0 (port_clear_flags)
                           B   411    ;				pop af
                           B   412    ;				retn.l							                           B   413    
                           B   414    
                           B   415    ;----------------------------------------------
                           B   416    
0047BF                     B   417    enable_button_nmi
                           B   418    
0047BF 3E40                B   419    				ld a,01000000b
0047C1 ED3909              B   420    				out0 (port_clear_flags),a		0047C4 3EC0                B   421    				ld a,11000000b					0047C6 ED3905              B   422    				out0 (port_irq_ctrl),a			0047C9 C9                  B   423    				ret
                           B   424    
                           B   425    
0047CA                     B   426    disable_button_nmi
                           B   427    
0047CA 3E40                B   428    				ld a,01000000b					0047CC ED3905              B   429    				out0 (port_irq_ctrl),a
0047CF C9                  B   430    				ret
                           B   431    
                           B   432    
0047D0                     B   433    disable_all_nmis
                           B   434    
0047D0 3E60                B   435    				ld a,01100000b					0047D2 ED3905              B   436    				out0 (port_irq_ctrl),a
0047D5 C9                  B   437    				ret
                           B   438    				
                           B   439    ;----------------------------------------------
                           B   440    
                           B     0    	include		'ez80p_rs232_code.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; ez80p low level RS232 code v0.03 (ADL mode)
                           B     3    ;----------------------------------------------
                           B     4    		
0047D6                     B     5    receive_serial_byte
                           B     6    
                           B     7    ; If zero flag set on return OK, A = received b
                           B     8    ; Else timed out (and also A = error $83: time 
                           B     9    
0047D6 C5                  B    10    				push bc
0047D7 3A FD 6B 00         B    11    				ld a,(serial_timeout)
0047DB 47                  B    12    				ld b,a
0047DC 3ECC                B    13    rx_set_timer	ld a,cch
0047DE ED3981              B    14    				out0 (TMR0_RR_L),a				0047E1 3E0C                B    15    				ld a,0ch
0047E3 ED3982              B    16    				out0 (TMR0_RR_H),a				0047E6 3E03                B    17    				ld a,00000011b					0047E8 ED3980              B    18    				out0 (TMR0_CTL),a				Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 181


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_rs232_code.asm
0047EB ED3880              B    19    				in0 a,(TMR0_CTL)				                           B    20    				
0047EE 0EC5                B    21    rx_byte_lp		ld c,UART0_LSR					0047F0 ED7401              B    22    				tstio 1							0047F3 20 0E               B    23    				jr nz,rx_in_buffer
0047F5 AF                  B    24    				xor a
0047F6 B0                  B    25    				or b
0047F7 28 13               B    26    				jr z,rx_time_out
0047F9 0E80                B    27    				ld c,TMR0_CTL	
0047FB ED7480              B    28    				tstio 128						0047FE 28 EE               B    29    				jr z,rx_byte_lp		
004800 05                  B    30    				dec b
004801 18 D9               B    31    				jr rx_set_timer
                           B    32    
004803 01C00000            B    33    rx_in_buffer	ld bc,UART0_RBR
004807 ED78                B    34    				in a,(bc)						004809 C1                  B    35    				pop bc
00480A BF                  B    36    				cp a							00480B C9                  B    37    				ret
                           B    38    
00480C C1                  B    39    rx_time_out		pop bc
00480D 3E83                B    40    				ld a,083h						00480F B7                  B    41    				or a							004810 C9                  B    42    				ret
                           B    43    
                           B    44    
                           B    45    
                           B    46    ;----------------------------------------------
                           B    47    
004811                     B    48    send_serial_byte
                           B    49    
                           B    50    ; set A to the byte to send
                           B    51    
004811 C5                  B    52    				push bc
004812 0EC5                B    53    				ld c,UART0_LSR					004814 ED7420              B    54    rs232_swait		tstio 020h						004817 28 FB               B    55    				jr z,rs232_swait
004819 01C00000            B    56    				ld bc,UART0_THR
00481D ED79                B    57    				out (c),a						00481F C1                  B    58    				pop bc
004820 C9                  B    59    				ret
                           B    60    
                           B    61    ;----------------------------------------------
                           B    62    
004821                     B    63    send_serial_bytes
                           B    64    
                           B    65    ; set D to the first byte to send
                           B    66    ; and E to the second byte to send
                           B    67    
004821 7A                  B    68    				ld a,d
004822 CD 11 48 00         B    69    				call send_serial_byte
004826 7B                  B    70    				ld a,e
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 182


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_rs232_code.asm
004827 CD 11 48 00         B    71    				call send_serial_byte
00482B C9                  B    72    				ret
                           B    73    
                           B    74    ;----------------------------------------------
                           B    75    
00482C                     B    76    hwsc_flush_serial_buffer
                           B    77    
00482C C5                  B    78    				push bc
00482D 01C00000            B    79    				ld bc,UART0_RBR
004831 ED78                B    80    				in a,(bc)						004833 C1                  B    81    				pop bc
004834 C9                  B    82    				ret
                           B    83    
                           B    84    ;----------------------------------------------
                           B    85    		
                           B     0    	include		'ez80p_video_code.asm'
                           B     1    ;---------------------------------
                           B     2    ; ez80p-specific video code v0.10
                           B     3    ; Character Mode Routines
                           B     4    ;---------------------------------
                           B     5    
       00804000            B     6    charmap_addr	equ vram_a_addr+04000h			                           B     7    
004835                     B     8    set_charmap_parameters
                           B     9    
                           B    10    ;set
                           B    11    ; a = line/pixel doubling (bit 0 = line double,
                           B    12    ; b = columns
                           B    13    ; c = rows
                           B    14    
004835 E603                B    15    				and 3
004837 32 CE 6B 00         B    16    				ld (video_doubling),a
00483B 79                  B    17    				ld a,c
00483C 32 CF 6B 00         B    18    				ld (charmap_rows),a
004840 78                  B    19    				ld a,b
004841 32 D2 6B 00         B    20    				ld (charmap_columns),a
004845 21000000            B    21    				ld hl,0
004849 69                  B    22    				ld l,c
00484A 60                  B    23    				ld h,b
00484B ED6C                B    24    				mlt hl
00484D 29                  B    25    				add hl,hl
00484E 22 7C 6D 00         B    26    				ld (charmap_size),hl
004852 11004080            B    27    				ld de,charmap_addr
004856 19                  B    28    				add hl,de
004857 22 70 6D 00         B    29    				ld (free_vram_a_base),hl		                           B    30    				
00485B CD 61 48 00         B    31    				call os_set_video_hw_regs
00485F AF                  B    32    				xor a
004860 C9                  B    33    				ret
                           B    34    				
                           B    35    
004861                     B    36    os_set_video_hw_regs
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 183


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
                           B    37    
004861 3A CE 6B 00         B    38    				ld a,(video_doubling)
004865 CB27                B    39    				sla a
004867 F618                B    40    				or 00011000b
004869 320018FF            B    41    				ld (video_control),a			00486D AF                  B    42    				xor a
00486E 320218FF            B    43    				ld (bgnd_palette_select),a
004872 3E63                B    44    				ld a,99
004874 320418FF            B    45    				ld (right_border_position),a
                           B    46    
004878 DD210010 FF         B    47    				ld ix,tilemap_parameters		00487D 21004080            B    48    				ld hl,charmap_addr
004881 DD2F00              B    49    				ld (ix),hl			   			                           B    50    
004884 21020000            B    51    				ld hl,2
004888 DD2F04              B    52    				ld (ix+04h),hl					                           B    53    				
00488B 21000008            B    54    				ld hl,80000h
00488F 11000000            B    55    				ld de,0
004893 3A D2 6B 00         B    56    				ld a,(charmap_columns)
004897 5F                  B    57    				ld e,a
004898 AF                  B    58    				xor a
004899 ED52                B    59    				sbc hl,de
00489B AF                  B    60    				xor a
00489C ED52                B    61    				sbc hl,de
00489E DD2F08              B    62    				ld (ix+08h),hl					                           B    63    				
0048A1 21000000            B    64    				ld hl,0
0048A5 DD2F0C              B    65    				ld (ix+0ch),hl					                           B    66    				
0048A8 3A D2 6B 00         B    67    				ld a,(charmap_columns)
0048AC 3D                  B    68    				dec a
0048AD DD7710              B    69    				ld (ix+10h),a					                           B    70    				
0048B0 3E00                B    71    				ld a,0
0048B2 DD7711              B    72    				ld (ix+11h),a					0048B5 DD7712              B    73    				ld (ix+12h),a					                           B    74    
0048B8 21 A9 6B 00         B    75    				ld hl,pen_palette
0048BC CD CB 48 00         B    76    				call hswc_set_ui_colours
                           B    77    				
0048C0 CD F6 4A 00         B    78    				call hwsc_reset_sprites
                           B    79    				
0048C4 AF                  B    80    				xor a
0048C5 32 72 6F 00         B    81    				ld (os_pointer_enable),a		                           B    82    				
0048C9 AF                  B    83    				xor a							0048CA C9                  B    84    				ret
                           B    85    
                           B    86    ;----------------------------------------------
                           B    87    				
0048CB                     B    88    hswc_set_ui_colours
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 184


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
                           B    89    
0048CB 110000FF            B    90    				ld de,hw_palette
0048CF 01200000            B    91    				ld bc,16*2
0048D3 EDB0                B    92    				ldir
0048D5 AF                  B    93    				xor a							0048D6 C9                  B    94    				ret
                           B    95    
                           B    96    
                           B    97    ;----------------------------------------------
                           B    98    
0048D7                     B    99    hwsc_clear_screen
                           B   100    
0048D7 21004080            B   101    				ld hl,charmap_addr				0048DB 3620                B   102    				ld (hl),32						0048DD 23                  B   103    				inc hl
0048DE CD FD 48 00         B   104    				call get_fill_attr
0048E2 77                  B   105    				ld (hl),a
0048E3 23                  B   106    				inc hl
0048E4 EB                  B   107    				ex de,hl
0048E5 21004080            B   108    				ld hl,charmap_addr
0048E9 ED4B 7C 6D 00       B   109    				ld bc,(charmap_size)
0048EE 0B                  B   110    				dec bc
0048EF 0B                  B   111    				dec bc
0048F0 EDB0                B   112    				ldir
                           B   113    				
0048F2 01000000            B   114    				ld bc,0
0048F6 ED43 14 6E 00       B   115    				ld (cursor_y),bc
0048FB AF                  B   116    				xor a							0048FC C9                  B   117    				ret
                           B   118    				
                           B   119    				
0048FD D5                  B   120    get_fill_attr	push de
0048FE 3A A5 6B 00         B   121    				ld a,(current_pen)
004902 E60F                B   122    				and 0fh
004904 5F                  B   123    				ld e,a
004905 3A A7 6B 00         B   124    				ld a,(background_colour)
004909 0F                  B   125    				rrca
00490A 0F                  B   126    				rrca
00490B 0F                  B   127    				rrca
00490C 0F                  B   128    				rrca
00490D E6F0                B   129    				and 0f0h
00490F B3                  B   130    				or e
004910 D1                  B   131    				pop de
004911 C9                  B   132    				ret
                           B   133    				
                           B   134    
                           B   135    ;----------------------------------------------
                           B   136    
004912                     B   137    hwsc_scroll_up	
                           B   138    				
004912 C5                  B   139    				push bc
004913 D5                  B   140    				push de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 185


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
004914 E5                  B   141    				push hl
                           B   142    
004915 2A 7C 6D 00         B   143    				ld hl,(charmap_size)
004919 ED5B D2 6B 00       B   144    				ld de,(charmap_columns)
00491E AF                  B   145    				xor a
00491F ED52                B   146    				sbc hl,de
004921 ED52                B   147    				sbc hl,de						004923 E5                  B   148    				push hl
004924 C1                  B   149    				pop bc							004925 21004080            B   150    				ld hl,charmap_addr
004929 E5                  B   151    				push hl
00492A 19                  B   152    				add hl,de
00492B 19                  B   153    				add hl,de
00492C D1                  B   154    				pop de
00492D EDB0                B   155    				ldir
                           B   156    				
00492F EB                  B   157    				ex de,hl						004930 E5                  B   158    				push hl
004931 3620                B   159    				ld (hl),32
004933 23                  B   160    				inc hl
004934 CD FD 48 00         B   161    				call get_fill_attr
004938 77                  B   162    				ld (hl),a
004939 2A D2 6B 00         B   163    				ld hl,(charmap_columns)
00493D 2B                  B   164    				dec hl
00493E 29                  B   165    				add hl,hl
00493F E5                  B   166    				push hl
004940 C1                  B   167    				pop bc
004941 E1                  B   168    				pop hl
004942 E5                  B   169    				push hl
004943 D1                  B   170    				pop de
004944 13                  B   171    				inc de
004945 13                  B   172    				inc de
004946 EDB0                B   173    				ldir
                           B   174    				
004948 E1                  B   175    				pop hl
004949 D1                  B   176    				pop de
00494A C1                  B   177    				pop bc
00494B AF                  B   178    				xor a							00494C C9                  B   179    				ret
                           B   180    
                           B   181    
                           B   182    ;----------------------------------------------
                           B   183    
00494D                     B   184    hwsc_plot_char
                           B   185    
                           B   186    ; Set:
                           B   187    ; ----
                           B   188    ; A = ascii char
                           B   189    ; B = x character coordinate 
                           B   190    ; C = y character coordinate
                           B   191    
00494D E5                  B   192    				push hl							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 186


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
00494E D5                  B   193    				push de
00494F F5                  B   194    				push af
                           B   195    
004950 3A CF 6B 00         B   196    				ld a,(charmap_rows)				004954 3D                  B   197    				dec a
004955 B9                  B   198    				cp c							004956 38 08               B   199    				jr c,win_err
004958 3A D2 6B 00         B   200    				ld a,(charmap_columns)
00495C 3D                  B   201    				dec a
00495D B8                  B   202    				cp b
00495E 30 07               B   203    				jr nc,win_ok
004960 F1                  B   204    win_err			pop af
004961 D1                  B   205    				pop de
004962 E1                  B   206    				pop hl
004963 3E88                B   207    				ld a,88h						004965 B7                  B   208    				or a
004966 C9                  B   209    				ret
                           B   210    				
004967 2A D2 6B 00         B   211    win_ok			ld hl,(charmap_columns)			00496B 61                  B   212    				ld h,c
00496C ED6C                B   213    				mlt hl
00496E 11000000            B   214    				ld de,0
004972 58                  B   215    				ld e,b
004973 19                  B   216    				add hl,de
004974 29                  B   217    				add hl,hl
004975 11004080            B   218    				ld de,charmap_addr
004979 19                  B   219    				add hl,de
00497A F1                  B   220    				pop af
00497B 77                  B   221    				ld (hl),a
00497C 23                  B   222    				inc hl
00497D 3A A5 6B 00         B   223    				ld a,(current_pen)
004981 77                  B   224    				ld (hl),a
004982 D1                  B   225    				pop de
004983 E1                  B   226    				pop hl
004984 AF                  B   227    				xor a
004985 C9                  B   228    				ret
                           B   229    				
                           B   230    				
                           B   231    ;----------------------------------------------
                           B   232    
004986                     B   233    hwsc_remove_cursor
                           B   234    
004986 3A CB 6B 00         B   235    				ld a,(cursor_present)			00498A B7                  B   236    				or a
00498B C8                  B   237    				ret z
00498C ED4B 14 6E 00       B   238    				ld bc,(cursor_y)
004991 CD F4 49 00         B   239    				call hwsc_get_charmap_addr_xy
004995 3A CA 6B 00         B   240    				ld a,(char_under_cursor)
004999 77                  B   241    				ld (hl),a
00499A AF                  B   242    				xor a
00499B 32 CB 6B 00         B   243    				ld (cursor_present),a
00499F C9                  B   244    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 187


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
                           B   245    
                           B   246    
0049A0                     B   247    hwsc_draw_cursor
                           B   248    								
0049A0 3A CB 6B 00         B   249    				ld a,(cursor_present)			0049A4 B7                  B   250    				or a
0049A5 C0                  B   251    				ret nz
0049A6 3C                  B   252    				inc a
0049A7 32 CB 6B 00         B   253    				ld (cursor_present),a
                           B   254    				
0049AB ED4B 14 6E 00       B   255    				ld bc,(cursor_y)
0049B0 CD F4 49 00         B   256    				call hwsc_get_charmap_addr_xy
0049B4 7E                  B   257    				ld a,(hl)						0049B5 32 CA 6B 00         B   258    				ld (char_under_cursor),a		0049B9 36FF                B   259    				ld (hl),ffh						                           B   260    				
0049BB 11400000            B   261    				ld de,64						0049BF 57                  B   262    				ld d,a
0049C0 ED5C                B   263    				mlt de
0049C2 FD210000 80         B   264    				ld iy,vram_a_addr				0049C7 FD19                B   265    				add iy,de						                           B   266    				
0049C9 21400000            B   267    				ld hl,64
0049CD 3A CD 6B 00         B   268    				ld a,(cursor_image_char)
0049D1 67                  B   269    				ld h,a
0049D2 ED6C                B   270    				mlt hl
0049D4 11000080            B   271    				ld de,vram_a_addr
0049D8 19                  B   272    				add hl,de
                           B   273    				
0049D9 DD21C03F 80         B   274    				ld ix,vram_a_addr+03fc0h
0049DE 11080000            B   275    				ld de,8
0049E2 0608                B   276    				ld b,8
0049E4 FD7E00              B   277    cur_loop		ld a,(iy)						0049E7 AE                  B   278    				xor (hl)						0049E8 DD7700              B   279    				ld (ix),a						0049EB FD19                B   280    				add iy,de
0049ED DD19                B   281    				add ix,de
0049EF 19                  B   282    				add hl,de
0049F0 10 F2               B   283    				djnz cur_loop
                           B   284    				
0049F2 AF                  B   285    				xor a
0049F3 C9                  B   286    				ret
                           B   287    				
                           B   288    
                           B   289    ;----------------------------------------------
                           B   290    
0049F4                     B   291    hwsc_get_charmap_addr_xy
                           B   292    
                           B   293    ; returns address of charmap in xHL for charact
                           B   294    ; and attrmap in xDE
                           B   295    				
0049F4 2A D2 6B 00         B   296    				ld hl,(charmap_columns)			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 188


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
0049F8 61                  B   297    				ld h,c
0049F9 ED6C                B   298    				mlt hl
0049FB 11000000            B   299    				ld de,0
0049FF 58                  B   300    				ld e,b
004A00 19                  B   301    				add hl,de
004A01 29                  B   302    				add hl,hl
004A02 11004080            B   303    				ld de,charmap_addr
004A06 19                  B   304    				add hl,de
004A07 E5                  B   305    				push hl
004A08 D1                  B   306    				pop de
004A09 13                  B   307    				inc de
004A0A AF                  B   308    				xor a
004A0B C9                  B   309    				ret
                           B   310    								
                           B   311    ;----------------------------------------------
                           B   312    
004A0C                     B   313    hwsc_chars_left
                           B   314    
                           B   315    ; moves characters (in character map) on the cu
                           B   316    
004A0C E5                  B   317    				push hl
004A0D D5                  B   318    				push de
004A0E C5                  B   319    				push bc
                           B   320    				
004A0F 2A D2 6B 00         B   321    				ld hl,(charmap_columns)
004A13 3A 14 6E 00         B   322    				ld a,(cursor_y)
004A17 67                  B   323    				ld h,a
004A18 ED6C                B   324    				mlt hl
004A1A 11000000            B   325    				ld de,0
004A1E 58                  B   326    				ld e,b
004A1F 19                  B   327    				add hl,de
004A20 29                  B   328    				add hl,hl
004A21 11004080            B   329    				ld de,charmap_addr
004A25 19                  B   330    				add hl,de
                           B   331    				
004A26 3A D2 6B 00         B   332    				ld a,(charmap_columns)
004A2A 90                  B   333    				sub b
004A2B CB27                B   334    				sla a
004A2D 01000000            B   335    				ld bc,0
004A31 4F                  B   336    				ld c,a
004A32 E5                  B   337    				push hl
004A33 D1                  B   338    				pop de
004A34 1B                  B   339    				dec de
004A35 1B                  B   340    				dec de
004A36 EDB0                B   341    				ldir
                           B   342    				
004A38 3E20                B   343    				ld a,32						;pu
004A3A 12                  B   344    				ld (de),a
004A3B 13                  B   345    				inc de
004A3C CD FD 48 00         B   346    				call get_fill_attr
004A40 12                  B   347    				ld (de),a
                           B   348    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 189


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
004A41 C1                  B   349    				pop bc
004A42 D1                  B   350    				pop de
004A43 E1                  B   351    				pop hl
004A44 C9                  B   352    				ret
                           B   353    
                           B   354    
                           B   355    ;----------------------------------------------
                           B   356    
                           B   357    
004A45                     B   358    hwsc_chars_right
                           B   359    
                           B   360    ; moves characters on current line right from c
                           B   361    
004A45 C5                  B   362    				push bc
004A46 D5                  B   363    				push de
004A47 E5                  B   364    				push hl
                           B   365    	
004A48 21 15 6E 00         B   366    				ld hl,cursor_x				
004A4C 3A D2 6B 00         B   367    				ld a,(charmap_columns)
004A50 3D                  B   368    				dec a
004A51 BE                  B   369    				cp (hl)			
004A52 28 30               B   370    				jr z,chright_end
004A54 46                  B   371    				ld b,(hl)
                           B   372    				
004A55 2A D2 6B 00         B   373    				ld hl,(charmap_columns)
004A59 3A 14 6E 00         B   374    				ld a,(cursor_y)
004A5D 3C                  B   375    				inc a							004A5E 67                  B   376    				ld h,a
004A5F ED6C                B   377    				mlt hl
004A61 29                  B   378    				add hl,hl
004A62 11004080            B   379    				ld de,charmap_addr
004A66 19                  B   380    				add hl,de					
004A67 2B                  B   381    				dec hl							004A68 E5                  B   382    				push hl
004A69 D1                  B   383    				pop de							004A6A 2B                  B   384    				dec hl
004A6B 2B                  B   385    				dec hl							004A6C 3A D2 6B 00         B   386    				ld a,(charmap_columns)
004A70 90                  B   387    				sub b
004A71 3D                  B   388    				dec a
004A72 CB27                B   389    				sla a
004A74 01000000            B   390    				ld bc,0
004A78 4F                  B   391    				ld c,a							004A79 EDB8                B   392    				lddr
004A7B 23                  B   393    				inc hl							004A7C 3620                B   394    				ld (hl),32
004A7E 23                  B   395    				inc hl
004A7F CD FD 48 00         B   396    				call get_fill_attr
004A83 77                  B   397    				ld (hl),a
                           B   398    							
004A84 E1                  B   399    chright_end		pop hl	
004A85 D1                  B   400    				pop de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 190


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_video_code.asm
004A86 C1                  B   401    				pop bc
004A87 C9                  B   402    				ret
                           B   403    
                           B   404    ;----------------------------------------------
                           B   405    
                           B   406    
004A88                     B   407    hwsc_charline_to_command_string	
                           B   408    				
                           B   409    				
004A88 2A D2 6B 00         B   410    				ld hl,(charmap_columns)			004A8C 3A 14 6E 00         B   411    				ld a,(cursor_y)
004A90 67                  B   412    				ld h,a
004A91 ED6C                B   413    				mlt hl
004A93 29                  B   414    				add hl,hl
004A94 11004080            B   415    				ld de,charmap_addr
004A98 19                  B   416    				add hl,de
004A99 11 32 6E 00         B   417    				ld de,commandstring
004A9D 0650                B   418    				ld b,max_buffer_chars			004A9F 7E                  B   419    copy_to_cmdline	ld a,(hl)
004AA0 12                  B   420    				ld (de),a
004AA1 13                  B   421    				inc de
004AA2 23                  B   422    				inc hl
004AA3 23                  B   423    				inc hl
004AA4 10 F9               B   424    				djnz copy_to_cmdline
004AA6 C9                  B   425    				ret
                           B   426    
                           B   427    ;----------------------------------------------
                           B   428    
                           B   429    
004AA7 C5                  B   430    hwsc_wait_vrt	push bc
                           B   431    
004AA8 0E01                B   432    				ld c,1
004AAA ED0909              B   433    				out0 (port_clear_flags),c
                           B   434    
004AAD 0E01                B   435    				ld c,port_hw_flags
004AAF ED7420              B   436    ewaitvrtlp1		tstio 1<<vrt
004AB2 28 FB               B   437    				jr z,ewaitvrtlp1
                           B   438    				
004AB4 C1                  B   439    				pop bc
004AB5 BF                  B   440    				cp a							004AB6 C9                  B   441    				ret
                           B   442    
                           B   443    
                           B   444    ;----------------------------------------------
                           B   445    
                           B     0    	include		'ez80p_misc_code.asm'
                           B     1    ;----------------------------------
                           B     2    ;Misc eZ80p specific routines v0.06
                           B     3    ;----------------------------------
                           B     4    
004AB7                     B     5    hwsc_default_hw_settings
                           B     6    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 191


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B     7    ; Set up eZ80 Wait states
                           B     8    
004AB7 3E48                B     9    					ld a,01001000b				004AB9 ED39AA              B    10    					out0 (CS0_CTL),a
004ABC 3E00                B    11    					ld a,000h					004ABE ED39A8              B    12    					out0 (CS0_LBR),a
004AC1 3EFF                B    13    					ld a,0ffh	
004AC3 ED39A9              B    14    					out0 (CS0_UBR),a			                           B    15    
004AC6 3E58                B    16    					ld a,01011000b
004AC8 ED39AD              B    17    					out0 (CS1_CTL),a			004ACB 3E00                B    18    					ld a,0
004ACD ED39AB              B    19    					out0 (CS1_LBR),a			                           B    20    
                           B    21    ;set up eZ80 GPIO ports
                           B    22    
004AD0 3EFF                B    23    					ld a,0ffh
004AD2 ED399F              B    24    					out0 (PC_DDR),a				004AD5 AF                  B    25    					xor a
004AD6 ED39A0              B    26    					out0 (PC_ALT1),a
004AD9 ED39A1              B    27    					out0 (PC_ALT2),a
                           B    28    					
004ADC 3EFF                B    29    					ld a,0ffh					004ADE ED39A3              B    30    					out0 (PD_DDR),a				004AE1 AF                  B    31    					xor a	
004AE2 ED39A4              B    32    					out0 (PD_ALT1),a			004AE5 3E0F                B    33    					ld a,00fh				
004AE7 ED39A5              B    34    					out0 (PD_ALT2),a			                           B    35    
                           B    36    ;set up eZ80 timer
                           B    37    
004AEA ED3892              B    38    					in0 a,(TMR_ISS)
004AED E6FC                B    39    					and 11111100b
004AEF F601                B    40    					or  00000001b
004AF1 ED3992              B    41    					out0 (TMR_ISS),a			                           B    42    					
004AF4 AF                  B    43    					xor a
004AF5 C9                  B    44    					ret
                           B    45    
                           B    46    
                           B    47    ;----------------------------------------------
                           B    48    
004AF6 AF                  B    49    hwsc_reset_sprites	xor a
004AF7 320118FF            B    50    					ld (sprite_control),a		004AFB 3E04                B    51    					ld a,4
004AFD 320718FF            B    52    					ld (sprite_gen_stop_pos),a	                           B    53    					
004B01 210008FF            B    54    					ld hl,hw_sprite_registers	004B05 01000800            B    55    					ld bc,2048
004B09 AF                  B    56    					xor a
004B0A CD 13 17 00         B    57    					call os_bchl_memfill
004B0E C9                  B    58    					ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 192


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B    59    					
                           B    60    ;----------------------------------------------
                           B    61    
                           B    62    
004B0F                     B    63    hwsc_update_pointer_sprite
                           B    64    					
004B0F 3A 72 6F 00         B    65    					ld a,(os_pointer_enable)	004B13 E601                B    66    					and 1
004B15 C8                  B    67    					ret z
                           B    68    
004B16 DDE5                B    69    					push ix
004B18 DD21F808 FF         B    70    					ld ix,hw_sprite_registers+(
004B1D 2A 64 6F 00         B    71    					ld hl,(mouse_abs_x)
004B21 01000100            B    72    					ld bc,x_display_offset
004B25 09                  B    73    					add hl,bc
004B26 DD7500              B    74    					ld (ix),l
004B29 DD7401              B    75    					ld (ix+1),h
004B2C 2A 67 6F 00         B    76    					ld hl,(mouse_abs_y)
004B30 01000200            B    77    					ld bc,y_display_offset
004B34 09                  B    78    					add hl,bc
004B35 DD7502              B    79    					ld (ix+2),l
004B38 DD7403              B    80    					ld (ix+3),h
004B3B ED4B 76 6F 00       B    81    					ld bc,(os_pointer_height)
004B40 DD7104              B    82    					ld (ix+4),c
004B43 DD7005              B    83    					ld (ix+5),b
004B46 ED4B 73 6F 00       B    84    					ld bc,(os_pointer_definitio
004B4B DD7106              B    85    					ld (ix+6),c
004B4E DD7007              B    86    					ld (ix+7),b
004B51 DDE1                B    87    					pop ix
004B53 C9                  B    88    					ret
                           B    89    
                           B    90    
                           B    91    ;----------------------------------------------
                           B    92    				
                           B    93    
004B54 11000000            B    94    hwsc_get_version	ld de,0
004B58 0610                B    95    					ld b,16
004B5A 78                  B    96    gethwvlp			ld a,b
004B5B 3D                  B    97    					dec a
004B5C ED3908              B    98    					out0 (port_selector),a		004B5F DB01                B    99    					in a,(port_hw_flags)		004B61 CB27                B   100    					sla a
004B63 CB13                B   101    					rl e
004B65 CB12                B   102    					rl d
004B67 10 F1               B   103    					djnz gethwvlp				                           B   104    									
004B69 21400000            B   105    					ld hl,prose_version
004B6D BF                  B   106    					cp a						004B6E C9                  B   107    					ret
                           B   108    
                           B   109    
                           B   110    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 193


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   111    ;----------------------------------------------
                           B   112    ; Timer0 related 
                           B   113    ;----------------------------------------------
                           B   114    
004B6F                     B   115    hwsc_time_delay
                           B   116    
                           B   117    ; set DE to 32768Hz ticks to wait
                           B   118    
004B6F CD 7B 4B 00         B   119    					call hwsc_set_timeout
004B73 CD 8C 4B 00         B   120    twaitlp				call hwsc_test_timeout
004B77 28 FA               B   121    					jr z,twaitlp
004B79 AF                  B   122    					xor a						004B7A C9                  B   123    					ret			
                           B   124    
                           B   125    ;----------------------------------------------
                           B   126    
                           B   127    ; Set DE to 32768 Hz ticks to allow before time
                           B   128    
004B7B 7B                  B   129    hwsc_set_timeout	ld a,e						004B7C ED3981              B   130    					out0 (TMR0_RR_L),a			004B7F 7A                  B   131    					ld a,d
004B80 ED3982              B   132    					out0 (TMR0_RR_H),a			004B83 3E03                B   133    					ld a,00000011b				004B85 ED3980              B   134    					out0 (TMR0_CTL),a			004B88 ED3880              B   135    					in0 a,(TMR0_CTL)			004B8B C9                  B   136    					ret
                           B   137    			
004B8C ED3880              B   138    hwsc_test_timeout	in0 a,(TMR0_CTL)			004B8F CB7F                B   139    					bit 7,a
004B91 C9                  B   140    					ret
                           B   141    			
                           B   142    ;----------------------------------------------
                           B   143    
004B92                     B   144    hwsc_read_rtc
004B92 D5                  B   145    					push de
004B93 C5                  B   146    					push bc
004B94 0EE0                B   147    hwsc_rtc_rlp		ld c,RTC_SEC
004B96 0608                B   148    					ld b,8
004B98 21 60 6D 00         B   149    					ld hl,time_data
004B9C ED92                B   150    					inimr						004B9E 0EE0                B   151    					ld c,RTC_SEC
004BA0 0600                B   152    					ld b,0
004BA2 1E08                B   153    					ld e,8
004BA4 21 60 6D 00         B   154    					ld hl,time_data
004BA8 ED78                B   155    timevloop			in a,(bc)					004BAA BE                  B   156    					cp (hl)						004BAB 20 E7               B   157    					jr nz,hwsc_rtc_rlp			004BAD 23                  B   158    					inc hl
004BAE 0C                  B   159    					inc c
004BAF 1D                  B   160    					dec e
004BB0 20 F6               B   161    					jr nz,timevloop
004BB2 21 60 6D 00         B   162    					ld hl,time_data
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 194


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004BB6 C1                  B   163    					pop bc
004BB7 D1                  B   164    					pop de
004BB8 BF                  B   165    					cp a						004BB9 C9                  B   166    					ret
                           B   167    
                           B   168    
004BBA                     B   169    hwsc_write_rtc	
                           B   170    
                           B   171    ; set HL to location of BCD data for RTC: sec/m
                           B   172    
004BBA E5                  B   173    					push hl
004BBB C5                  B   174    					push bc
004BBC 3E21                B   175    					ld a,00100001b				004BBE ED39ED              B   176    					out0 (RTC_CTRL),a
004BC1 0EE0                B   177    					ld c,RTC_SEC
004BC3 0608                B   178    					ld b,8
004BC5 ED93                B   179    					otimr
004BC7 3E20                B   180    					ld a,00100000b				004BC9 ED39ED              B   181    					out0 (RTC_CTRL),a
004BCC C1                  B   182    					pop bc
004BCD E1                  B   183    					pop hl
004BCE BF                  B   184    					cp a						004BCF C9                  B   185    					ret	
                           B   186    
                           B   187    ;----------------------------------------------
                           B   188    ; Timer1 related 
                           B   189    ;----------------------------------------------
                           B   190    
004BD0                     B   191    os_init_msec_counter
                           B   192    
                           B   193    ; set E = 1 enable, E = 0 disable
                           B   194    
                           B   195    ; 1 tick = 50MHz/4, EG:  Reload value = 12500, 
                           B   196    			
004BD0 E5                  B   197    				push hl
                           B   198    
004BD1 AF                  B   199    				xor a
004BD2 ED3983              B   200    				out0 (TMR1_CTL),a				                           B   201    				
004BD5 CB43                B   202    				bit 0,e
004BD7 28 2B               B   203    				jr z,disable_tmr1
                           B   204    				
004BD9 21 CF 45 00         B   205    				ld hl,prt1_irq_handler
004BDD 22740000            B   206    				ld (074h),hl
                           B   207    				
004BE1 ED3892              B   208    				in0 a,(TMR_ISS)
004BE4 E6F3                B   209    				and 11110011b
004BE6 ED3992              B   210    				out0 (TMR_ISS),a
                           B   211    				
004BE9 21D43000            B   212    				ld hl,30d4h
004BED ED2185              B   213    				out0 (TMR1_RR_H),h
004BF0 ED2984              B   214    				out0 (TMR1_RR_L),l
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 195


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   215    
004BF3 21000000            B   216    				ld hl,0
004BF7 22 82 6D 00         B   217    				ld (seconds_counter),hl
004BFB 22 7F 6D 00         B   218    				ld (milliseconds_counter),hl
                           B   219    
004BFF 3E53                B   220    				ld a,01010011b
004C01 ED3983              B   221    				out0 (TMR1_CTL),a				                           B   222    			
004C04 E1                  B   223    disable_tmr1	pop hl
004C05 AF                  B   224    				xor a
004C06 C9                  B   225    				ret
                           B   226    
                           B   227    
                           B   228    
004C07                     B   229    os_read_msec_counter
                           B   230    			
004C07 F3                  B   231    			di
004C08 ED5B 7F 6D 00       B   232    			ld de,(milliseconds_counter)
004C0D 2A 82 6D 00         B   233    			ld hl,(seconds_counter)
004C11 FB                  B   234    			ei
004C12 AF                  B   235    			xor a
004C13 C9                  B   236    			ret
                           B   237    			
                           B   238    
                           B   239    ;----------------------------------------------
                           B   240    ; INIT KEYBOARD ROUTINE 
                           B   241    ;----------------------------------------------
                           B   242    
                           B   243    ; ZF set and A = 0 if all OK, else error code i
                           B   244    
004C14                     B   245    init_keyboard
                           B   246    
004C14 11004000            B   247    			ld de,16384							004C18 CD 6F 4B 00         B   248    			call hwsc_time_delay
004C1C F3                  B   249    			di
004C1D CD D2 4C 00         B   250    			call purge_keyboard
004C21 CD 2B 4C 00         B   251    			call rs_keyboard
004C25 FB                  B   252    			ei
004C26 D0                  B   253    			ret nc
004C27 3E8B                B   254    			ld a,08bh							004C29 B7                  B   255    			or a
004C2A C9                  B   256    			ret
                           B   257    			
                           B   258    			
004C2B                     B   259    rs_keyboard
                           B   260    
004C2B 3EFF                B   261    			ld a,0ffh
004C2D CD 4A 4C 00         B   262    			call write_to_keyboard
004C31 30 04               B   263    			jr nc,kb_connected
004C33 3E8A                B   264    			ld a,08ah							004C35 B7                  B   265    			or a
004C36 C9                  B   266    			ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 196


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   267    
004C37                     B   268    kb_connected
                           B   269    			
004C37 0605                B   270    			ld b,5
004C39 C5                  B   271    kb_initlp	push bc
004C3A CD B6 4C 00         B   272    			call wait_kb_byte					004C3E C1                  B   273    			pop bc
004C3F D8                  B   274    			ret c
004C40 FEAA                B   275    			cp 0aah
004C42 28 04               B   276    			jr z,kb_postok
004C44 10 F3               B   277    			djnz kb_initlp						004C46 37                  B   278    			scf									004C47 C9                  B   279    			ret
                           B   280    			
                           B   281    			
004C48 AF                  B   282    kb_postok	xor a
004C49 C9                  B   283    			ret
                           B   284    	
                           B   285    	
                           B   286    ;----------------------------------------------
                           B   287    				
004C4A                     B   288    write_to_keyboard
                           B   289    
                           B   290    ; Put byte to send to keyboard in A
                           B   291    
004C4A 4F                  B   292    			ld c,a								004C4B 3E01                B   293    			ld a,01b							004C4D ED3907              B   294    			out0 (port_ps2_ctrl),a
                           B   295    
004C50 110A0000            B   296    			ld de,10
004C54 CD 6F 4B 00         B   297    			call hwsc_time_delay				                           B   298    
004C58 3E03                B   299    			ld a,11b
004C5A ED3907              B   300    			out0 (port_ps2_ctrl),a				                           B   301    			
004C5D 3E02                B   302    			ld a,10b
004C5F ED3907              B   303    			out0 (port_ps2_ctrl),a				                           B   304    			
004C62 CD 32 4E 00         B   305    			call wait_kb_clk_high
                           B   306    			
004C66 1601                B   307    			ld d,1								004C68 0608                B   308    			ld b,8								004C6A CD 05 4E 00         B   309    kdoloop		call wait_kb_clk_low	
004C6E D8                  B   310    			ret c
004C6F AF                  B   311    			xor a
004C70 CBCF                B   312    			set 1,a
004C72 CB41                B   313    			bit 0,c
004C74 28 03               B   314    			jr z,kdbzero
004C76 CB8F                B   315    			res 1,a
004C78 14                  B   316    			inc d
004C79 ED3907              B   317    kdbzero		out0 (port_ps2_ctrl),a				004C7C CD 32 4E 00         B   318    			call wait_kb_clk_high
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 197


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004C80 D8                  B   319    			ret c
004C81 CB19                B   320    			rr c
004C83 10 E5               B   321    			djnz kdoloop
                           B   322    
004C85 CD 05 4E 00         B   323    			call wait_kb_clk_low
004C89 D8                  B   324    			ret c
004C8A AF                  B   325    			xor a
004C8B CB42                B   326    			bit 0,d
004C8D 20 02               B   327    			jr nz,kparone
004C8F CBCF                B   328    			set 1,a
004C91 ED3907              B   329    kparone		out0 (port_ps2_ctrl),a				004C94 CD 32 4E 00         B   330    			call wait_kb_clk_high
004C98 D8                  B   331    			ret c
                           B   332    			
004C99 CD 05 4E 00         B   333    			call wait_kb_clk_low
004C9D D8                  B   334    			ret c
004C9E AF                  B   335    			xor a
004C9F ED3907              B   336    			out0 (port_ps2_ctrl),a				                           B   337    
004CA2 CD 01 4E 00         B   338    			call wait_kb_data_low				004CA6 D8                  B   339    			ret c
004CA7 CD 05 4E 00         B   340    			call wait_kb_clk_low				004CAB D8                  B   341    			ret c
                           B   342    				
004CAC CD 2E 4E 00         B   343    			call wait_kb_data_high				004CB0 D8                  B   344    			ret c
004CB1 CD 32 4E 00         B   345    			call wait_kb_clk_high				004CB5 C9                  B   346    			ret 
                           B   347    
                           B   348    
                           B   349    ;----------------------------------------------
                           B   350    
                           B   351    
004CB6                     B   352    wait_kb_byte
                           B   353    
004CB6 11008000            B   354    			ld de,8000h
004CBA CD 7B 4B 00         B   355    			call hwsc_set_timeout				                           B   356    
004CBE ED3807              B   357    wait_kloop	in0 a,(port_ps2_ctrl)
004CC1 CB67                B   358    			bit 4,a
004CC3 20 08               B   359    			jr nz,rec_kbyte
                           B   360    			
004CC5 CD 8C 4B 00         B   361    			call hwsc_test_timeout
004CC9 28 F3               B   362    			jr z,wait_kloop
004CCB 37                  B   363    			scf									004CCC C9                  B   364    			ret
                           B   365    			
004CCD ED3802              B   366    rec_kbyte	in0 a,(port_keyboard_data)			004CD0 B7                  B   367    			or a
004CD1 C9                  B   368    			ret
                           B   369    
                           B   370    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 198


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   371    ;----------------------------------------------
                           B   372    
004CD2                     B   373    purge_keyboard
                           B   374    			
004CD2 ED3807              B   375    			in0 a,(port_ps2_ctrl)
004CD5 CB67                B   376    			bit 4,a
004CD7 C8                  B   377    			ret z
004CD8 ED3802              B   378    			in0 a,(port_keyboard_data)			004CDB 18 F5               B   379    			jr purge_keyboard
                           B   380    
                           B   381    
                           B   382    
                           B   383    ;----------------------------------------------
                           B   384    ; INIT MOUSE ROUTINE 
                           B   385    ;----------------------------------------------
                           B   386    
                           B   387    ; ZF set and A = 0 if all OK, else error code i
                           B   388    
004CDD                     B   389    init_mouse		
004CDD F3                  B   390    			di
004CDE CD F6 4D 00         B   391    			call purge_mouse
004CE2 CD EC 4C 00         B   392    			call rs_mouse
004CE6 FB                  B   393    			ei
004CE7 D0                  B   394    			ret nc
004CE8 3E8B                B   395    			ld a,08bh							004CEA B7                  B   396    			or a
004CEB C9                  B   397    			ret
                           B   398    
                           B   399    
004CEC                     B   400    rs_mouse
004CEC 3EFF                B   401    			ld a,0ffh							004CEE CD 6E 4D 00         B   402    			call write_to_mouse		
004CF2 30 04               B   403    			jr nc,mouse_connected
004CF4 3E8A                B   404    			ld a,08ah							004CF6 B7                  B   405    			or a
004CF7 C9                  B   406    			ret
                           B   407    
                           B   408    
004CF8                     B   409    mouse_connected
                           B   410    
004CF8 0605                B   411    			ld b,5
004CFA C5                  B   412    ms_initlp	push bc
004CFB CD DA 4D 00         B   413    			call wait_mouse_byte				004CFF C1                  B   414    			pop bc
004D00 D8                  B   415    			ret c
004D01 FEAA                B   416    			cp 0aah
004D03 28 04               B   417    			jr z,ms_postok
004D05 10 F3               B   418    			djnz ms_initlp
004D07 18 43               B   419    			jr bad_mouse
                           B   420    			
004D09 CD DA 4D 00         B   421    ms_postok	call wait_mouse_byte				004D0D D8                  B   422    			ret c
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 199


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004D0E B7                  B   423    			or a
004D0F 20 3B               B   424    			jr nz,bad_mouse						                           B   425    			
004D11 3E03                B   426    			ld a,3
004D13 32 57 6F 00         B   427    			ld (mouse_packet_size),a
                           B   428    
004D17 21 20 6C 00         B   429    			ld hl,intellimouse_seq
004D1B 0606                B   430    			ld b,6
004D1D CD 50 4D 00         B   431    			call mouse_sequence
004D21 D8                  B   432    			ret c
                           B   433    			
004D22 3EF2                B   434    			ld a,0f2h
004D24 CD 5F 4D 00         B   435    			call write_mouse_wait_ack			004D28 D8                  B   436    			ret c
004D29 CD DA 4D 00         B   437    			call wait_mouse_byte				004D2D D8                  B   438    			ret c
004D2E 32 56 6F 00         B   439    			ld (mouse_id),a
004D32 B7                  B   440    			or a								004D33 28 0A               B   441    			jr z,standard_mouse
004D35 FE03                B   442    			cp 3
004D37 20 13               B   443    			jr nz,bad_mouse						004D39 3E04                B   444    			ld a,4
004D3B 32 57 6F 00         B   445    			ld (mouse_packet_size),a
                           B   446    
004D3F                     B   447    standard_mouse
                           B   448    		
004D3F 21 26 6C 00         B   449    			ld hl,mouse_settings_seq
004D43 0606                B   450    			ld b,6
004D45 CD 50 4D 00         B   451    			call mouse_sequence
004D49 D8                  B   452    			ret c
004D4A AF                  B   453    			xor a								004D4B C9                  B   454    			ret
                           B   455    
                           B   456    
004D4C 3E89                B   457    bad_mouse	ld a,089h							004D4E B7                  B   458    			or a
004D4F C9                  B   459    			ret
                           B   460    
                           B   461    
004D50                     B   462    mouse_sequence
                           B   463    
004D50 7E                  B   464    mseqlp		ld a,(hl)
004D51 E5                  B   465    			push hl
004D52 C5                  B   466    			push bc
004D53 CD 5F 4D 00         B   467    			call write_mouse_wait_ack
004D57 C1                  B   468    			pop bc
004D58 E1                  B   469    			pop hl
004D59 D8                  B   470    			ret c
004D5A 23                  B   471    			inc hl
004D5B 10 F3               B   472    			djnz mseqlp
004D5D AF                  B   473    			xor a
004D5E C9                  B   474    			ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 200


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   475    
                           B   476    
004D5F                     B   477    write_mouse_wait_ack
                           B   478    			
004D5F CD 6E 4D 00         B   479    			call write_to_mouse
004D63 D8                  B   480    			ret c
004D64 CD DA 4D 00         B   481    			call wait_mouse_byte				004D68 D8                  B   482    			ret c
004D69 FEFA                B   483    			cp 0fah								004D6B C8                  B   484    			ret z
004D6C 37                  B   485    			scf
004D6D C9                  B   486    			ret
                           B   487    			
                           B   488    ;----------------------------------------------
                           B   489    				
004D6E                     B   490    write_to_mouse
                           B   491    
                           B   492    ; Put byte to send to mouse in A
                           B   493    
004D6E 4F                  B   494    			ld c,a								004D6F 3E04                B   495    			ld a,0100b							004D71 ED3907              B   496    			out0 (port_ps2_ctrl),a
                           B   497    
004D74 110A0000            B   498    			ld de,10
004D78 CD 6F 4B 00         B   499    			call hwsc_time_delay				                           B   500    
004D7C 3E0C                B   501    			ld a,1100b
004D7E ED3907              B   502    			out0 (port_ps2_ctrl),a				                           B   503    			
004D81 3E08                B   504    			ld a,1000b
004D83 ED3907              B   505    			out0 (port_ps2_ctrl),a				                           B   506    			
004D86 CD 3A 4E 00         B   507    			call wait_mouse_clk_high
                           B   508    			
004D8A 1601                B   509    			ld d,1								004D8C 0608                B   510    			ld b,8								004D8E CD 0D 4E 00         B   511    mdoloop		call wait_mouse_clk_low	
004D92 D8                  B   512    			ret c
004D93 AF                  B   513    			xor a
004D94 CBDF                B   514    			set 3,a
004D96 CB41                B   515    			bit 0,c
004D98 28 03               B   516    			jr z,mdbzero
004D9A CB9F                B   517    			res 3,a
004D9C 14                  B   518    			inc d
004D9D ED3907              B   519    mdbzero		out0 (port_ps2_ctrl),a				004DA0 CD 3A 4E 00         B   520    			call wait_mouse_clk_high
004DA4 D8                  B   521    			ret c
004DA5 CB19                B   522    			rr c
004DA7 10 E5               B   523    			djnz mdoloop
                           B   524    
004DA9 CD 0D 4E 00         B   525    			call wait_mouse_clk_low
004DAD D8                  B   526    			ret c
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 201


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004DAE AF                  B   527    			xor a
004DAF CB42                B   528    			bit 0,d
004DB1 20 02               B   529    			jr nz,parone
004DB3 CBDF                B   530    			set 3,a
004DB5 ED3907              B   531    parone		out0 (port_ps2_ctrl),a				004DB8 CD 3A 4E 00         B   532    			call wait_mouse_clk_high
004DBC D8                  B   533    			ret c
                           B   534    			
004DBD CD 0D 4E 00         B   535    			call wait_mouse_clk_low
004DC1 D8                  B   536    			ret c
004DC2 AF                  B   537    			xor a
004DC3 ED3907              B   538    			out0 (port_ps2_ctrl),a				                           B   539    
004DC6 CD 09 4E 00         B   540    			call wait_mouse_data_low			004DCA D8                  B   541    			ret c
004DCB CD 0D 4E 00         B   542    			call wait_mouse_clk_low				004DCF D8                  B   543    			ret c
                           B   544    				
004DD0 CD 36 4E 00         B   545    			call wait_mouse_data_high			004DD4 D8                  B   546    			ret c
004DD5 CD 3A 4E 00         B   547    			call wait_mouse_clk_high			004DD9 C9                  B   548    			ret 
                           B   549    
                           B   550    ;----------------------------------------------
                           B   551    
                           B   552    
004DDA                     B   553    wait_mouse_byte
                           B   554    
004DDA 11008000            B   555    			ld de,8000h
004DDE CD 7B 4B 00         B   556    			call hwsc_set_timeout				                           B   557    
004DE2 ED3807              B   558    wait_mloop	in0 a,(port_ps2_ctrl)
004DE5 CB6F                B   559    			bit 5,a
004DE7 20 08               B   560    			jr nz,rec_mbyte
                           B   561    			
004DE9 CD 8C 4B 00         B   562    			call hwsc_test_timeout
004DED 28 F3               B   563    			jr z,wait_mloop
004DEF 37                  B   564    			scf									004DF0 C9                  B   565    			ret
                           B   566    			
004DF1 ED3806              B   567    rec_mbyte	in0 a,(port_mouse_data)				004DF4 B7                  B   568    			or a
004DF5 C9                  B   569    			ret
                           B   570    
                           B   571    ;----------------------------------------------
                           B   572    
004DF6                     B   573    purge_mouse
                           B   574    			
004DF6 ED3807              B   575    			in0 a,(port_ps2_ctrl)
004DF9 CB6F                B   576    			bit 5,a
004DFB C8                  B   577    			ret z
004DFC ED3806              B   578    			in0 a,(port_mouse_data)			; r
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 202


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004DFF 18 F5               B   579    			jr purge_mouse
                           B   580    
                           B   581    
                           B   582    ;----------------------------------------------
                           B   583    
                           B   584    
004E01                     B   585    wait_kb_data_low
                           B   586    
004E01 3E02                B   587    			ld a,2
004E03 18 0A               B   588    			jr test_lo_ps2
                           B   589    			
004E05                     B   590    wait_kb_clk_low
                           B   591    
004E05 3E01                B   592    			ld a,1
004E07 18 06               B   593    			jr test_lo_ps2			
                           B   594    
004E09                     B   595    wait_mouse_data_low
                           B   596    
004E09 3E08                B   597    			ld a,8
004E0B 18 02               B   598    			jr test_lo_ps2
                           B   599    
004E0D                     B   600    wait_mouse_clk_low
                           B   601    
004E0D 3E04                B   602    			ld a,4
                           B   603    
004E0F C5                  B   604    test_lo_ps2	push bc
004E10 D5                  B   605    			push de
004E11 4F                  B   606    			ld c,a
004E12 11004000            B   607    			ld de,04000h					; a
004E16 CD 7B 4B 00         B   608    			call hwsc_set_timeout
                           B   609    
004E1A CD 8C 4B 00         B   610    nkb_lw		call hwsc_test_timeout			; t
004E1E 28 04               B   611    			jr z,nkb_lnto
004E20 D1                  B   612    			pop de
004E21 C1                  B   613    			pop bc
004E22 37                  B   614    			scf								; c
004E23 C9                  B   615    			ret
004E24 ED3807              B   616    nkb_lnto	in0 a,(port_ps2_ctrl)
004E27 A1                  B   617    			and c
004E28 20 F0               B   618    			jr nz,nkb_lw
                           B   619    					
004E2A D1                  B   620    			pop de
004E2B C1                  B   621    			pop bc
004E2C AF                  B   622    			xor a
004E2D C9                  B   623    			ret					
                           B   624    
                           B   625    
                           B   626    
                           B   627    
004E2E                     B   628    wait_kb_data_high
                           B   629    
004E2E 3E02                B   630    			ld a,2
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 203


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004E30 18 0A               B   631    			jr test_hi_ps2
                           B   632    			
004E32                     B   633    wait_kb_clk_high
                           B   634    
004E32 3E01                B   635    			ld a,1
004E34 18 06               B   636    			jr test_hi_ps2
                           B   637    
                           B   638    
004E36                     B   639    wait_mouse_data_high
                           B   640    			
004E36 3E08                B   641    			ld a,8
004E38 18 02               B   642    			jr test_hi_ps2
                           B   643    			 
004E3A                     B   644    wait_mouse_clk_high
                           B   645    
004E3A 3E04                B   646    			ld a,4
                           B   647    
004E3C C5                  B   648    test_hi_ps2	push bc
004E3D D5                  B   649    			push de
004E3E 4F                  B   650    			ld c,a
004E3F 11004000            B   651    			ld de,04000h					; a
004E43 CD 7B 4B 00         B   652    			call hwsc_set_timeout
                           B   653    
004E47 CD 8C 4B 00         B   654    nkb_hw		call hwsc_test_timeout			; t
004E4B 28 04               B   655    			jr z,nkb_hnto
004E4D D1                  B   656    			pop de
004E4E C1                  B   657    			pop bc
004E4F 37                  B   658    			scf								; c
004E50 C9                  B   659    			ret
004E51 ED3807              B   660    nkb_hnto	in0 a,(port_ps2_ctrl)
004E54 A1                  B   661    			and c
004E55 28 F0               B   662    			jr z,nkb_hw
                           B   663    					
004E57 D1                  B   664    			pop de
004E58 C1                  B   665    			pop bc
004E59 AF                  B   666    			xor a							; c
004E5A C9                  B   667    			ret
                           B   668    
                           B   669    
                           B   670    ;==============================================
                           B   671    
004E5B                     B   672    hwsc_play_audio
                           B   673    
                           B   674    ; set HL register to location of an audio data 
                           B   675    
                           B   676    ; 0 - start 
                           B   677    ; 3 - length
                           B   678    ; 6 - loop start
                           B   679    ; 9 - loop length
                           B   680    ; c - frequency constant
                           B   681    ; e - volume
                           B   682    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 204


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   683    ; set C register to set channels wave is to pla
                           B   684    
004E5B 3E81                B   685    				ld a,81h
004E5D ED390A              B   686    				out0 (port_hw_enable),a			                           B   687    				
004E60 E5                  B   688    				push hl
004E61 E5                  B   689    				push hl
004E62 FDE1                B   690    				pop iy
                           B   691    
004E64 79                  B   692    				ld a,c
004E65 69                  B   693    				ld l,c
004E66 328014FF            B   694    				ld (hw_audio_registers+80h),a	                           B   695    				
004E6A DD210014 FF         B   696    				ld ix,hw_audio_registers
004E6F 0608                B   697    				ld b,8
004E71 CB39                B   698    audchanloop		srl c
004E73 30 21               B   699    				jr nc,not_this_chan
                           B   700    				
004E75 FD1700              B   701    				ld de,(iy)
004E78 DD1F00              B   702    				ld (ix),de						                           B   703    
004E7B FD1703              B   704    				ld de,(iy+3)
004E7E DD1F04              B   705    				ld (ix+04h),de					                           B   706    				
004E81 FD170C              B   707    				ld de,(iy+0ch)
004E84 DD1F08              B   708    				ld (ix+08h),de					                           B   709    				
004E87 FD7E0E              B   710    				ld a,(iy+0eh)
004E8A DD770C              B   711    				ld (ix+0ch),a					                           B   712    				
004E8D AF                  B   713    				xor a
004E8E DD770E              B   714    				ld (ix+0eh),a
                           B   715    				
004E91 3E03                B   716    				ld a,011b
004E93 DD770F              B   717    				ld (ix+0fh),a					                           B   718    				
004E96 ED3210              B   719    not_this_chan	lea ix,ix+10h			
004E99 10 D6               B   720    				djnz audchanloop
                           B   721    						
004E9B AF                  B   722    				xor a
004E9C 328014FF            B   723    				ld (hw_audio_registers+80h),a	                           B   724    				
004EA0 11050000            B   725    				ld de,5
004EA4 CD 6F 4B 00         B   726    				call hwsc_time_delay
                           B   727    				
004EA8 7D                  B   728    				ld a,l
004EA9 328014FF            B   729    				ld (hw_audio_registers+80h),a	                           B   730    				
004EAD DD210014 FF         B   731    				ld ix,hw_audio_registers
004EB2 0608                B   732    				ld b,8
004EB4 CB3D                B   733    audchanloop2	srl l
004EB6 30 15               B   734    				jr nc,not_this_chan2
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 205


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
                           B   735    						
004EB8 FD1706              B   736    				ld de,(iy+6)
004EBB DD1F00              B   737    				ld (ix+0h),de					                           B   738    				
004EBE FD1709              B   739    				ld de,(iy+9)
004EC1 DD1F04              B   740    				ld (ix+4h),de					                           B   741    								
004EC4 AF                  B   742    				xor a
004EC5 DD770E              B   743    				ld (ix+0eh),a
                           B   744    				
004EC8 3E00                B   745    				ld a,000b
004ECA DD770F              B   746    				ld (ix+0fh),a					                           B   747    				
004ECD ED3210              B   748    not_this_chan2	lea ix,ix+10h			
004ED0 10 E2               B   749    				djnz audchanloop2
                           B   750    						
004ED2 AF                  B   751    				xor a
004ED3 328014FF            B   752    				ld (hw_audio_registers+80h),a
                           B   753    				
004ED7 E1                  B   754    				pop hl
004ED8 C9                  B   755    				ret
                           B   756    
                           B   757    
                           B   758    ;----------------------------------------------
                           B   759    
004ED9                     B   760    audio_reg_wait	
                           B   761    
004ED9 3E01                B   762    				ld a,1
004EDB 320314FF            B   763    				ld (hw_audio_registers+3),a		                           B   764    				
004EDF ED3801              B   765    wait_audreg		in0 a,(port_hw_flags)			004EE2 E640                B   766    				and 040h
004EE4 28 F9               B   767    				jr z,wait_audreg				004EE6 AF                  B   768    				xor a
004EE7 C9                  B   769    				ret
004EE8 C9                  B   770    				ret
                           B   771    
                           B   772    
                           B   773    ;----------------------------------------------
                           B   774    				
004EE9                     B   775    hwsc_disable_audio
                           B   776    
004EE9 3E01                B   777    				ld a,01h
004EEB ED390A              B   778    				out0 (port_hw_enable),a			004EEE AF                  B   779    				xor a
004EEF C9                  B   780    				ret
                           B   781    				
                           B   782    ;----------------------------------------------
                           B   783    
004EF0                     B   784    hwsc_get_joysticks
                           B   785    
004EF0 ED389E              B   786    				in0 a,(PC_DR)				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 206


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\ez80p_misc_code.asm
004EF3 2F                  B   787    				cpl
004EF4 47                  B   788    				ld b,a
004EF5 E60F                B   789    				and 0fh
004EF7 5F                  B   790    				ld e,a
004EF8 78                  B   791    				ld a,b
004EF9 0F                  B   792    				rrca
004EFA 0F                  B   793    				rrca
004EFB 0F                  B   794    				rrca
004EFC 0F                  B   795    				rrca
004EFD E60F                B   796    				and 0fh
004EFF 57                  B   797    				ld d,a
                           B   798    				
004F00 ED38A2              B   799    				in0 a,(PD_DR)	
004F03 CB67                B   800    				bit 4,a						; f
004F05 20 02               B   801    				jr nz,noj1b1
004F07 CBEA                B   802    				set 5,d
                           B   803    
004F09 CB6F                B   804    noj1b1			bit 5,a						; f
004F0B 20 02               B   805    				jr nz,noj1b0
004F0D CBE2                B   806    				set 4,d
                           B   807    				
004F0F CB77                B   808    noj1b0			bit 6,a						; f
004F11 20 02               B   809    				jr nz,noj0b1
004F13 CBEB                B   810    				set 5,e
                           B   811    
004F15 CB7F                B   812    noj0b1			bit 7,a						; f
004F17 20 02               B   813    				jr nz,noj0b0
004F19 CBE3                B   814    				set 4,e
                           B   815    
004F1B AF                  B   816    noj0b0			xor a
004F1C C9                  B   817    				ret
                           B   818    				
                           B   819    				
                           B   820    ;----------------------------------------------
                           B   821    			
                           B   822    				
                           B   823    				
                           A  3870    
                           B     0    	include		'prose_keyboard_routines.asm'	                           B     1    ;----------------------------------------------
                           B     2    ;PROSE KEYBOARD/MOUSE ROUTINES V0.04 (ADL mode)
                           B     3    ;----------------------------------------------
                           B     4    
004F1D                     B     5    os_wait_key_press
                           B     6    
                           B     7    ; Busy waits for a keypress.
                           B     8    ; Handles the following modifier keys (key_mod_
                           B     9    ; Returns scancode in A and ASCII code in B (B=
                           B    10    ; (ASCII code is modifed by shift / alt key sta
                           B    11    
                           B    12    
004F1D D5                  B    13    				push de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 207


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_keyboard_routines.asm
004F1E 51                  B    14    				ld d,c
004F1F E5                  B    15    				push hl
                           B    16    				
004F20 CD 8A 4F 00         B    17    wait_kbuf		call get_kb_buffer_indexes		004F24 BE                  B    18    				cp (hl)							004F25 28 F9               B    19    				jr z,wait_kbuf		
                           B    20    			
004F27 01000000            B    21    new_key			ld bc,0							004F2B 4F                  B    22    				ld c,a
004F2C 21 2F 6F 00         B    23    				ld hl,scancode_buffer	
004F30 09                  B    24    				add hl,bc
004F31 7E                  B    25    				ld a,(hl)						                           B    26    
004F32 0E10                B    27    				ld c,16
004F34 09                  B    28    				add hl,bc						004F35 4F                  B    29    				ld c,a							004F36 7E                  B    30    				ld a,(hl)						                           B    31    
004F37 1E00                B    32    				ld e,0							004F39 21 61 6A 00         B    33    				ld hl,unshifted_keymap			                           B    34    
004F3D CB4F                B    35    				bit 1,a
004F3F 28 04               B    36    				jr z,not_ctrl					004F41 1E60                B    37    				ld e,96							004F43 18 16               B    38    				jr got_keymap					                           B    39    							
004F45 CB47                B    40    not_ctrl		bit 0,a
004F47 20 04               B    41    				jr nz,shifted
004F49 CB67                B    42    				bit 4,a
004F4B 28 06               B    43    				jr z,not_shifted
004F4D 21 C3 6A 00         B    44    shifted			ld hl,shifted_keymap			004F51 18 08               B    45    				jr got_keymap
                           B    46    				
004F53 CB5F                B    47    not_shifted		bit 3,a
004F55 28 04               B    48    				jr z,got_keymap	
004F57 21 25 6B 00         B    49    				ld hl,alted_keymap				                           B    50    
004F5B 79                  B    51    got_keymap		ld a,c							004F5C FE62                B    52    				cp 062h
004F5E 30 07               B    53    				jr nc,gotkdone
004F60 09                  B    54    				add hl,bc						004F61 7E                  B    55    				ld a,(hl)						004F62 93                  B    56    				sub a,e							004F63 30 01               B    57    				jr nc,subkey_ok	
004F65 AF                  B    58    				xor a							004F66 47                  B    59    subkey_ok		ld b,a
                           B    60    				
004F67 3A 50 6F 00         B    61    gotkdone		ld a,(key_buf_rd_idx)			004F6B 3C                  B    62    				inc a							004F6C E60F                B    63    				and 15
004F6E 32 50 6F 00         B    64    				ld (key_buf_rd_idx),a			004F72 79                  B    65    				ld a,c							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 208


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_keyboard_routines.asm
004F73 E1                  B    66    				pop hl
004F74 4A                  B    67    				ld c,d
004F75 D1                  B    68    				pop de
004F76 BF                  B    69    				cp a							004F77 C9                  B    70    				ret
                           B    71    			
                           B    72    		
                           B    73    ;----------------------------------------------
                           B    74    			
004F78                     B    75    os_get_key_press
                           B    76    				
                           B    77    ; Gets a keycode on-the-fly - If one is availab
                           B    78    ; On return, ZF is set if there is a new scanco
                           B    79    ; (ASCII code is modifed by shift key status), 
                           B    80    			
                           B    81    			
004F78 D5                  B    82    				push de
004F79 51                  B    83    				ld d,c
004F7A E5                  B    84    				push hl
004F7B CD 8A 4F 00         B    85    				call get_kb_buffer_indexes		004F7F BE                  B    86    				cp (hl)							004F80 20 A5               B    87    				jr nz,new_key					004F82 3E81                B    88    				ld a,81h			
004F84 47                  B    89    				ld b,a
004F85 B7                  B    90    				or a
004F86 E1                  B    91    				pop hl
004F87 4A                  B    92    				ld c,d
004F88 D1                  B    93    				pop de
004F89 C9                  B    94    				ret
                           B    95    			
                           B    96    ;----------------------------------------------
                           B    97    			
004F8A                     B    98    get_kb_buffer_indexes
                           B    99    			
                           B   100    			
004F8A 21 4F 6F 00         B   101    				ld hl,key_buf_wr_idx			004F8E 3A 50 6F 00         B   102    				ld a,(key_buf_rd_idx)			004F92 C9                  B   103    				ret
                           B   104    			
                           B   105    		
                           B   106    ;----------------------------------------------
                           B     0    	include		'prose_serial_routines.asm'
                           B     1    ;**********************************************
                           B     2    ; PROSE Serial File Transfer Routines V0.05 (AD
                           B     3    ;**********************************************
                           B     4    
                           B     5    ;----------------------------------------------
                           B     6    ; .---------------------.
                           B     7    ; ! Receive file header !
                           B     8    ; '---------------------'
                           B     9    ;
                           B    10    ; Before calling set:-
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 209


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
                           B    11    ;
                           B    12    ; HL = Filename ("*" if dont care)
                           B    13    ;  A = Time out in seconds
                           B    14    ;
                           B    15    ; If zero flag set, all OK. IX returns location
                           B    16    ;    Else A=$84 = memory address out of range, 
                           B    17    ;           $87 = Filename mismatch, $86 = chec
                           B    18    ;----------------------------------------------
                           B    19    	
                           B    20    
004F93                     B    21    serial_get_header
                           B    22    
004F93 32 FD 6B 00         B    23    				ld (serial_timeout),a			004F97 22 E7 6B 00         B    24    				ld (serial_fn_addr),hl
004F9B CD 2C 48 00         B    25    				call hwsc_flush_serial_buffer	                           B    26    
004F9F CD 82 50 00         B    27    				call s_getblock					004FA3 28 0C               B    28    				jr z,s_gbfhok					004FA5 F5                  B    29    				push af							004FA6 3A 1E 6C 00         B    30    				ld a,(serial_transfer_started)
004FAA B7                  B    31    				or a							004FAB C4 E9 50 00         B    32    				call nz,s_badack				004FAF F1                  B    33    				pop af
004FB0 C9                  B    34    				ret
                           B    35    	
004FB1 21 12 6C 00         B    36    s_gbfhok		ld hl,serial_header_id			004FB5 11140700            B    37    				ld de,serial_buffer+20			004FB9 060C                B    38    				ld b,12
004FBB CD CD 13 00         B    39    				call os_compare_strings
004FBF 20 0F               B    40    				jr nz,s_nfhdr
004FC1 06E0                B    41    				ld b,256-32						004FC3 21200700            B    42    				ld hl,serial_buffer+32
004FC7 7E                  B    43    s_chdr			ld a,(hl)
004FC8 23                  B    44    				inc hl
004FC9 B7                  B    45    				or a
004FCA 20 04               B    46    				jr nz,s_nfhdr
004FCC 10 F9               B    47    				djnz s_chdr
004FCE 18 08               B    48    				jr s_fhcsok
                           B    49    				
004FD0 CD E9 50 00         B    50    s_nfhdr			call s_badack					004FD4 3E85                B    51    				ld a,085h						004FD6 B7                  B    52    				or a
004FD7 C9                  B    53    				ret
                           B    54    		
004FD8 21100700            B    55    s_fhcsok		ld hl,serial_buffer+16			004FDC 11 0E 6C 00         B    56    				ld de,serial_fileheader+16
004FE0 01040000            B    57    				ld bc,4
004FE4 EDB0                B    58    				ldir
                           B    59    				
004FE6 21000700            B    60    				ld hl,serial_buffer
004FEA 11 FE 6B 00         B    61    				ld de,serial_fileheader			004FEE 0610                B    62    				ld b,16							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 210


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
004FF0 7E                  B    63    s_tuclp			ld a,(hl)						004FF1 B7                  B    64    				or a
004FF2 28 0B               B    65    				jr z,s_ffhswz	
004FF4 CD 07 14 00         B    66    				call os_uppercasify
004FF8 12                  B    67    				ld (de),a
004FF9 23                  B    68    				inc hl
004FFA 13                  B    69    				inc de
004FFB 10 F3               B    70    				djnz s_tuclp
004FFD 18 04               B    71    				jr s_tucdone
004FFF 12                  B    72    s_ffhswz		ld (de),a
005000 13                  B    73    				inc de
005001 10 FC               B    74    				djnz s_ffhswz		
                           B    75    	
005003 2A E7 6B 00         B    76    s_tucdone		ld hl,(serial_fn_addr)			005007 7E                  B    77    				ld a,(hl)
005008 FE2A                B    78    				cp '*'
00500A 28 14               B    79    				jr z,s_rffns					00500C 11 FE 6B 00         B    80    				ld de,serial_fileheader
005010 0610                B    81    				ld b,16
005012 CD CD 13 00         B    82    				call os_compare_strings
005016 28 08               B    83    				jr z,s_rffns
005018 CD E9 50 00         B    84    s_rfnbad		call s_badack
00501C 3E87                B    85    				ld a,087h						00501E B7                  B    86    				or a
00501F C9                  B    87    				ret
                           B    88    				
005020 DD21 FE 6B 00       B    89    s_rffns			ld ix,serial_fileheader			005025 AF                  B    90    				xor a
005026 C9                  B    91    				ret
                           B    92    
005027 F5                  B    93    s_fail			push af				
005028 CD E9 50 00         B    94    				call s_badack		 
00502C F1                  B    95    				pop af
00502D C9                  B    96    				ret
                           B    97    	
                           B    98    ;----------------------------------------------
                           B    99    ; .-------------------.
                           B   100    ; ! Receive file data !
                           B   101    ; '-------------------'
                           B   102    ;
                           B   103    ; Serial_get_header must be called first!
                           B   104    ;
                           B   105    ; Set:
                           B   106    ;
                           B   107    ; xHL = Address to load to [23:0]
                           B   108    ;
                           B   109    ; On return, if Zero flag is set, all OK (IX = 
                           B   110    ; Else A =  $84 = memory address out of range
                           B   111    ;           $85 = comms error
                           B   112    ;----------------------------------------------
                           B   113    
00502E                     B   114    serial_receive_file
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 211


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
                           B   115    
00502E 3E0A                B   116    				ld a,10							005030 32 FD 6B 00         B   117    				ld (serial_timeout),a
005034 E5                  B   118    				push hl
005035 CD D8 50 00         B   119    				call s_goodack					005039 DDE1                B   120    				pop ix							00503B ED5B 0E 6C 00       B   121    				ld de,(serial_fileheader+16)	                           B   122    
005040 CD 82 50 00         B   123    s_gbloop		call s_getblock
005044 20 E1               B   124    				jr nz,s_fail
005046 0E00                B   125    				ld c,0							005048 FD210007 00         B   126    				ld iy,serial_buffer
00504D FD7E00              B   127    s_rfloop		ld a,(iy)
005050 DD7700              B   128    				ld (ix),a						005053 1B                  B   129    				dec de							005054 21000000            B   130    				ld hl,0
005058 AF                  B   131    				xor a
005059 ED5A                B   132    				adc hl,de						00505B 28 1A               B   133    				jr z,s_rfabr					00505D C5                  B   134    				push bc
00505E 01010000            B   135    				ld bc,1
005062 DD09                B   136    				add ix,bc						005064 C1                  B   137    				pop bc
005065 30 05               B   138    				jr nc,s_nbt
005067 3E84                B   139    				ld a,84h						005069 B7                  B   140    				or a
00506A 18 BB               B   141    				jr s_fail
00506C FD23                B   142    s_nbt			inc iy
00506E 0D                  B   143    				dec c
00506F 20 DC               B   144    				jr nz,s_rfloop
005071 CD D8 50 00         B   145    				call s_goodack					005075 18 C9               B   146    				jr s_gbloop
                           B   147    			
005077 CD D8 50 00         B   148    s_rfabr			call s_goodack					00507B DD21 FE 6B 00       B   149    				ld ix,serial_fileheader			005080 AF                  B   150    				xor a							005081 C9                  B   151    				ret
                           B   152    			
                           B   153    ;----------------------------------------------
                           B   154    
005082                     B   155    s_getblock
                           B   156    
                           B   157    ; carry set on return if timed out
                           B   158    
005082 AF                  B   159    				xor a
005083 32 1E 6C 00         B   160    				ld (serial_transfer_started),a	005087 E5                  B   161    				push hl							005088 D5                  B   162    				push de
005089 C5                  B   163    				push bc
00508A 21000700            B   164    				ld hl,serial_buffer				00508E 0600                B   165    				ld b,0
005090 D9                  B   166    				exx
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 212


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
005091 21FFFF00            B   167    				ld hl,0ffffh					005095 D9                  B   168    				exx
005096 CD D6 47 00         B   169    s_lgb			call receive_serial_byte
00509A 20 38               B   170    				jr nz,s_gberr					00509C F5                  B   171    				push af
00509D 3E01                B   172    				ld a,1
00509F 32 1E 6C 00         B   173    				ld (serial_transfer_started),a
0050A3 F1                  B   174    				pop af
0050A4 77                  B   175    				ld (hl),a
0050A5 D9                  B   176    				exx
0050A6 AC                  B   177    				xor h							0050A7 67                  B   178    				ld h,a			
0050A8 0608                B   179    				ld b,8
0050AA 4029                B   180    rxcrcbyte		add.sis hl,hl					0050AC 30 08               B   181    				jr nc,rxcrcnext
0050AE 7C                  B   182    				ld a,h
0050AF EE10                B   183    				xor 10h
0050B1 67                  B   184    				ld h,a
0050B2 7D                  B   185    				ld a,l
0050B3 EE21                B   186    				xor 21h
0050B5 6F                  B   187    				ld l,a
0050B6 10 F2               B   188    rxcrcnext		djnz rxcrcbyte
0050B8 D9                  B   189    				exx
0050B9 23                  B   190    				inc hl
0050BA 10 DA               B   191    				djnz s_lgb
0050BC D9                  B   192    				exx								                           B   193    			
0050BD CD D6 47 00         B   194    				call receive_serial_byte		0050C1 20 11               B   195    				jr nz,s_gberr
0050C3 4F                  B   196    				ld c,a
0050C4 CD D6 47 00         B   197    				call receive_serial_byte
0050C8 20 0A               B   198    				jr nz,s_gberr		
0050CA 47                  B   199    				ld b,a
                           B   200    				
0050CB AF                  B   201    				xor a							0050CC 52ED42              B   202    				sbc.s hl,bc						0050CF 28 03               B   203    				jr z,s_gberr
                           B   204    			
0050D1 3E86                B   205    				ld a,86h						0050D3 B7                  B   206    				or a							0050D4 C1                  B   207    s_gberr			pop bc
0050D5 D1                  B   208    				pop de
0050D6 E1                  B   209    				pop hl
0050D7 C9                  B   210    				ret
                           B   211    				
                           B   212    ;----------------------------------------------
                           B   213    
0050D8 C5                  B   214    s_goodack		push bc
0050D9 014F4B00            B   215    				ld bc,04b4fh					0050DD 79                  B   216    ackbytes		ld a,c
0050DE CD 11 48 00         B   217    				call send_serial_byte
0050E2 78                  B   218    				ld a,b
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 213


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
0050E3 CD 11 48 00         B   219    				call send_serial_byte
0050E7 C1                  B   220    				pop bc
0050E8 C9                  B   221    				ret
                           B   222    
0050E9 C5                  B   223    s_badack		push bc
0050EA 01585800            B   224    				ld bc,05858h					0050EE 18 ED               B   225    				jr ackbytes
                           B   226    
0050F0 C5                  B   227    s_holdack		push bc
0050F1 01575700            B   228    				ld bc,05757h					0050F5 18 E6               B   229    				jr ackbytes
                           B   230    				
                           B   231    ;==============================================
                           B   232    
                           B   233    ; .-----------.
                           B   234    ; ! Send file !
                           B   235    ; '-----------'
                           B   236    
                           B   237    ; Before calling set:-
                           B   238    
                           B   239    ;  xHL   = filename
                           B   240    ;  xDE   = length of file
                           B   241    ;  xIX   = Start address [23:0]
                           B   242    
                           B   243    ; On return, if zero flag is set, all OK. Else:
                           B   244    ; $81 = Save length is zero
                           B   245    ; $84 = memory address out of range
                           B   246    ; $85 = comms error
                           B   247    
                           B   248    
0050F7                     B   249    serial_send_file
                           B   250    			
0050F7 3E01                B   251    				ld a,1							0050F9 32 FD 6B 00         B   252    				ld (serial_timeout),a
                           B   253    			
0050FD DD22 E1 6B 00       B   254    				ld (serial_ez80_address),ix
005102 ED53 0E 6C 00       B   255    				ld (serial_fileheader+10h),de	005107 E5                  B   256    				push hl
005108 21000000            B   257    				ld hl,0
00510C AF                  B   258    				xor a
00510D ED5A                B   259    				adc hl,de
00510F 20 05               B   260    				jr nz,s_flok
005111 E1                  B   261    				pop hl
005112 3E81                B   262    				ld a,081h						005114 B7                  B   263    				or a							005115 C9                  B   264    				ret
                           B   265    			
005116 21 FE 6B 00         B   266    s_flok			ld hl,serial_fileheader			00511A 01100000            B   267    				ld bc,16
00511E AF                  B   268    				xor a
00511F CD 13 17 00         B   269    				call os_bchl_memfill
005123 E1                  B   270    				pop hl							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 214


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
005124 11 FE 6B 00         B   271    				ld de,serial_fileheader
005128 0610                B   272    				ld b,16
00512A CD EC 13 00         B   273    				call os_copy_ascii_run
                           B   274    				
00512E 21 12 6C 00         B   275    				ld hl,serial_header_id			005132 11 12 6C 00         B   276    				ld de,serial_fileheader+014h
005136 010C0000            B   277    				ld bc,12		
00513A EDB0                B   278    				ldir
                           B   279    			
00513C DD21 FE 6B 00       B   280    				ld ix,serial_fileheader			005141 11200000            B   281    				ld de,32
005145 CD 7B 51 00         B   282    				call s_makeblock			
005149 C0                  B   283    				ret nz
00514A CD B3 51 00         B   284    				call s_sendblock
00514E C0                  B   285    				ret nz
00514F CD E0 51 00         B   286    				call s_waitack					005153 C0                  B   287    				ret nz							                           B   288    				
005154 DD2A E1 6B 00       B   289    				ld ix,(serial_ez80_address)
005159 ED5B 0E 6C 00       B   290    				ld de,(serial_fileheader+16)	00515E CD 7B 51 00         B   291    s_sbloop		call s_makeblock				005162 38 16               B   292    				jr c,s_rerr
005164 CD B3 51 00         B   293    				call s_sendblock				005168 38 10               B   294    				jr c,s_rerr	
00516A CD E0 51 00         B   295    				call s_waitack					00516E 38 0A               B   296    				jr c,s_rerr
005170 21000000            B   297    				ld hl,0
005174 AF                  B   298    				xor a
005175 ED5A                B   299    				adc hl,de
005177 20 E5               B   300    				jr nz,s_sbloop					005179 AF                  B   301    				xor a							00517A C9                  B   302    s_rerr			ret
                           B   303    
                           B   304    ;----------------------------------------------
                           B   305    
00517B                     B   306    s_makeblock
                           B   307    
                           B   308    ; set xIX = src addr
                           B   309    ; xDE = byte count
                           B   310    ; a=0 on return if all ok	
                           B   311    
00517B 21000700            B   312    				ld hl,serial_buffer				00517F 01000100            B   313    				ld bc,256						005183 AF                  B   314    				xor a							005184 CD 13 17 00         B   315    				call os_bchl_memfill			                           B   316    				
005188 0600                B   317    				ld b,0							00518A FD210007 00         B   318    				ld iy,serial_buffer	
00518F DD7E00              B   319    s_sloop			ld a,(ix)
005192 FD7700              B   320    				ld (iy),a
005195 1B                  B   321    				dec de							005196 21000000            B   322    				ld hl,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 215


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
00519A AF                  B   323    				xor a
00519B ED5A                B   324    				adc hl,de
00519D 28 12               B   325    				jr z,s_mbend	
00519F FD23                B   326    				inc iy							0051A1 C5                  B   327    				push bc
0051A2 01010000            B   328    				ld bc,1
0051A6 DD09                B   329    				add ix,bc						0051A8 C1                  B   330    				pop bc							0051A9 20 04               B   331    				jr nz,s_sbok
0051AB 3E84                B   332    				ld a,84h						0051AD B7                  B   333    				or a
0051AE C9                  B   334    				ret
0051AF 10 DE               B   335    s_sbok			djnz s_sloop
0051B1 AF                  B   336    s_mbend			xor a
0051B2 C9                  B   337    				ret
                           B   338    
                           B   339    
                           B   340    
0051B3                     B   341    s_sendblock
                           B   342    
0051B3 E5                  B   343    				push hl
0051B4 D5                  B   344    				push de							0051B5 C5                  B   345    				push bc				
0051B6 21000700            B   346    				ld hl,serial_buffer			
0051BA 1E00                B   347    				ld e,0
0051BC 7E                  B   348    s_sblklp		ld a,(hl)
0051BD CD 11 48 00         B   349    				call send_serial_byte
0051C1 23                  B   350    				inc hl
0051C2 1D                  B   351    				dec e
0051C3 20 F7               B   352    				jr nz,s_sblklp
0051C5 11000700            B   353    				ld de,serial_buffer
0051C9 01000000            B   354    				ld bc,0
0051CD CD B9 16 00         B   355    				call crc_checksum
0051D1 7D                  B   356    				ld a,l
0051D2 CD 11 48 00         B   357    				call send_serial_byte
0051D6 7C                  B   358    				ld a,h
0051D7 CD 11 48 00         B   359    				call send_serial_byte
0051DB AF                  B   360    				xor a
0051DC C1                  B   361    s_popall		pop bc
0051DD D1                  B   362    				pop de
0051DE E1                  B   363    				pop hl
0051DF C9                  B   364    				ret
                           B   365    	
                           B   366    
0051E0                     B   367    s_waitack
0051E0 E5                  B   368    				push hl
0051E1 D5                  B   369    				push de
0051E2 C5                  B   370    				push bc
0051E3 CD D6 47 00         B   371    				call receive_serial_byte		0051E7 20 F3               B   372    				jr nz,s_popall
0051E9 47                  B   373    				ld b,a
0051EA CD D6 47 00         B   374    				call receive_serial_byte
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 216


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_serial_routines.asm
0051EE 20 EC               B   375    				jr nz,s_popall
0051F0 4F                  B   376    				ld c,a
0051F1 264F                B   377    				ld h,'O'
0051F3 2E4B                B   378    				ld l,'K'
0051F5 AF                  B   379    				xor a
0051F6 52ED42              B   380    				sbc.s hl,bc						0051F9 28 E1               B   381    				jr z,s_popall					                           B   382    			
0051FB 3E85                B   383    				ld a,085h						0051FD B7                  B   384    				or a
0051FE 18 DC               B   385    				jr s_popall
                           B   386    
                           B   387    	
                           B   388    ;----------------------------------------------
                           B     0    	include		'prose_fat16_code_v0C.asm'
                           B     1    ;----------------------------------------------
                           B     2    ; eZ80 FAT16 File System code for PROSE by Phil
                           B     3    ;----------------------------------------------
                           B     4    ;
                           B     5    ; Changes:
                           B     6    ;
                           B     7    ; 0.0C - FS_HL_TO_FILENAME uppercasifies the st
                           B     8    ; 0.0B - Bugfix, typo in "fs_adjust_fp_tl_so" -
                           B     9    ;      - Thanks to Mike ("X Y") for bringing th
                           B    10    ; 0.0A - ?
                           B    11    ; 0.09 - Format command now formats based solel
                           B    12    ;		 and "current driver"
                           B    13    ;        If the paritition is an MBR type, the 
                           B    14    ;      - "Get partition info" looks at each par
                           B    15    ;
                           B    16    ; 0.08 - Speeded up reading of files (pre-calc 
                           B    17    ;        All routines return with ZF not set if
                           B    18    ; 0.07 - Made compatible with v1.10 drivers (ZF
                           B    19    ; 0.06 - Fixed "fs_get_volume_label"
                           B    20    ; 0.05 - Fixed format command
                           B    21    ; 0.04 - File system error codes are now in the
                           B    22    ; 0.03 - ADL mode
                           B    23    ; 0.02 - removed references to banks, added 24 
                           B    24    ; 0.01 - first version based on FLOS routines v
                           B    25    ;
                           B    26    ; Known limitations:
                           B    27    ; ------------------
                           B    28    ; If a disk full error is returned during a fil
                           B    29    ; Allows a file to be created in root even if t
                           B    30    ;        
                           B    31    ;----------------------------------------------
                           B    32    ;
                           B    33    ; All routines return carry clear / zero flag s
                           B    34    ;
                           B    35    ; If carry set there was a driver error, A = Er
                           B    36    ; Check for "carry set" first!
                           B    37    ; If carry clear, check zero flag. If not set: 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 217


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B    38    ;
                           B    39    ;					$c1  - Disk full
                           B    40    ;					$c2  - file not found
                           B    41    ;             	    $c3  - (root) dir table is 
                           B    42    ;					$c4  - directory requested 
                           B    43    ;             	    $c5  - cant delete dir, it 
                           B    44    ;					$c6  - not a file
                           B    45    ;					$c7  - file length is zero
                           B    46    ;              	    $c8  - out of memory
                           B    47    ;					$c9  - filename already exi
                           B    48    ;					$ca  - already at root dire
                           B    49    ;                  	$cb  - directory not found
                           B    50    ;					$cc  - requested bytes beyo
                           B    51    ;					$cd  - invalid filename
                           B    52    ;					$ce  - unknown/incorrect di
                           B    53    ;					$cf  - invalid volume
                           B    54    ;                 	$d0  - device not present	                           B    55    ;					$d1  - directory not found	                           B    56    ;                 	$d2  - end of directory lis
                           B    57    ;                 	$d3  - device does not use 
                           B    58    ;                  	$d4  - cant find volume lab
                           B    59    ;                   $d5  - sector out of range
                           B    60    
                           B    61    ;----------------------------------------------
                           B    62    ; Main routines called by external programs
                           B    63    ;----------------------------------------------
                           B    64    
005200                     B    65    fs_format_partition
                           B    66    
                           B    67    ; Formats a FAT16 partition based on:
                           B    68    
                           B    69    ; "partition_base" LBA (32bit, absolute: all fo
                           B    70    ; "partition_size" in sectors (24bit - will be 
                           B    71    ; Set HL to label location
                           B    72    
005200 11 90 60 00         B    73    				ld de,fs_sought_filename		005204 CD 4A 5F 00         B    74    				call fs_clear_filename
005208 060B                B    75    				ld b,11
00520A CD EC 13 00         B    76    				call os_copy_ascii_run
                           B    77    
00520E CD 54 5D 00         B    78    				call fs_clear_sector_buffer		005212 11000000            B    79    				ld de,0							005216 CD 6A 53 00         B    80    form_ws			call set_lba_and_write_sector
00521A D8                  B    81    				ret c
00521B 13                  B    82    				inc de
00521C 7A                  B    83    				ld a,d
00521D FE03                B    84    				cp 3
00521F 20 F5               B    85    				jr nz,form_ws
                           B    86    	
005221 21 3A 60 00         B    87    				ld hl,bootsector_stub			005225 11000800            B    88    				ld de,sector_buffer				005229 013F0000            B    89    				ld bc,03fh
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 218


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00522D EDB0                B    90    				ldir
                           B    91    	
00522F 2A F6 60 00         B    92    				ld hl,(partition_size)
005233 1100003F            B    93    				ld de,3f0000h
005237 AF                  B    94    				xor a
005238 ED52                B    95    				sbc hl,de				
00523A 38 05               B    96    				jr c,fs_fssok					00523C ED53 F6 60 00       B    97    fs_truncs		ld (partition_size),de
                           B    98    				
005241 3A F8 60 00         B    99    fs_fssok		ld a,(partition_size+2)
005245 21800000            B   100    				ld hl,080h						005249 29                  B   101    fs_fcls			add hl,hl
00524A BC                  B   102    				cp h
00524B 30 FC               B   103    				jr nc,fs_fcls
                           B   104    
00524D DD210008 00         B   105    				ld ix,sector_buffer
005252 DD740D              B   106    				ld (ix+0dh),h					                           B   107    				
005255 ED5B F6 60 00       B   108    				ld de,(partition_size)
00525A 3A F8 60 00         B   109    				ld a,(partition_size+2)
00525E 4F                  B   110    				ld c,a							00525F B7                  B   111    				or a							005260 20 08               B   112    				jr nz,ts_dword					005262 DD7313              B   113    				ld (ix+13h),e					005265 DD7214              B   114    				ld (ix+14h),d
005268 18 07               B   115    				jr ts_done
00526A DD1F20              B   116    ts_dword		ld (ix+20h),de					00526D DD362300            B   117    				ld (ix+23h),0
                           B   118    
005271 7C                  B   119    ts_done			ld a,h							005272 21000000            B   120    				ld hl,0				
005276 CB3F                B   121    ffatslp1		srl a	
005278 28 0C               B   122    				jr z,fatsc1						00527A CB39                B   123    				srl c				
00527C CB1A                B   124    				rr d
00527E CB1B                B   125    				rr e
005280 CB1C                B   126    				rr h
005282 CB1D                B   127    				rr l
005284 18 F0               B   128    				jr ffatslp1
005286 0608                B   129    fatsc1			ld b,8
005288 CB39                B   130    ffatslp2		srl c							00528A CB1A                B   131    				rr d
00528C CB1B                B   132    				rr e
00528E CB1C                B   133    				rr h
005290 CB1D                B   134    				rr l
005292 10 F4               B   135    				djnz ffatslp2
005294 7C                  B   136    				ld a,h
005295 B5                  B   137    				or l
005296 28 01               B   138    				jr z,gotfatsize					005298 13                  B   139    				inc de
                           B   140    	
005299 DD7316              B   141    gotfatsize		ld (ix+16h),e					Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 219


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00529C DD7217              B   142    				ld (ix+17h),d
00529F 21000000            B   143    				ld hl,0
0052A3 6B                  B   144    				ld l,e
0052A4 62                  B   145    				ld h,d
0052A5 22 8A 60 00         B   146    				ld (fs_sectors_per_fat),hl
                           B   147    				
0052A9 010055AA            B   148    				ld bc,0aa5500h
0052AD ED43FD09 00         B   149    				ld (sector_buffer+1fdh),bc		0052B2 11000000            B   150    				ld de,0
0052B6 CD 6A 53 00         B   151    				call set_lba_and_write_sector	0052BA D8                  B   152    				ret c
                           B   153    				
0052BB 11000000            B   154    				ld de,0
0052BF DD5E0E              B   155    				ld e,(ix+0eh)					0052C2 DD560F              B   156    				ld d,(ix+0fh)					                           B   157    				
0052C5 CD 54 5D 00         B   158    				call fs_clear_sector_buffer		0052C9 DD3600FF            B   159    				ld (ix+0),0ffh
0052CD DD3601F8            B   160    				ld (ix+1),0f8h
0052D1 DD3602FF            B   161    				ld (ix+2),0ffh
0052D5 DD3603FF            B   162    				ld (ix+3),0ffh
0052D9 CD 6A 53 00         B   163    				call set_lba_and_write_sector	0052DD D8                  B   164    				ret c
                           B   165    
0052DE EB                  B   166    				ex de,hl
0052DF ED5B 8A 60 00       B   167    				ld de,(fs_sectors_per_fat)	
0052E4 19                  B   168    				add hl,de
0052E5 EB                  B   169    				ex de,hl
0052E6 CD 6A 53 00         B   170    				call set_lba_and_write_sector 	0052EA D8                  B   171    				ret c	
                           B   172    
0052EB CD 54 5D 00         B   173    				call fs_clear_sector_buffer		0052EF D5                  B   174    				push de	
0052F0 21 90 60 00         B   175    				ld hl,fs_sought_filename
0052F4 11000800            B   176    				ld de,sector_buffer
0052F8 010B0000            B   177    				ld bc,11
0052FC EDB0                B   178    				ldir							0052FE D1                  B   179    				pop de							0052FF DD360B08            B   180    				ld (ix+0bh),8					005303 DD361821            B   181    				ld (ix+018h),021h				                           B   182    				
005307 EB                  B   183    				ex de,hl
005308 ED5B 8A 60 00       B   184    				ld de,(fs_sectors_per_fat)		00530D 19                  B   185    				add hl,de
00530E EB                  B   186    				ex de,hl
00530F CD 6A 53 00         B   187    				call set_lba_and_write_sector	005313 D8                  B   188    				ret c	
                           B   189    						
                           B   190    
005314 21 F9 60 00         B   191    				ld hl,partition_base			005318 7E                  B   192    				ld a,(hl)
005319 23                  B   193    				inc hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 220


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00531A B6                  B   194    				or (hl)
00531B 23                  B   195    				inc hl
00531C B6                  B   196    				or (hl)
00531D 23                  B   197    				inc hl
00531E B6                  B   198    				or (hl)
00531F 28 47               B   199    				jr z,format_done				                           B   200    
005321 CD 89 53 00         B   201    				call fs_read_mbr				005325 D8                  B   202    				ret c
005326 DD21BE09 00         B   203    				ld ix,sector_buffer+1beh
00532B 0E00                B   204    				ld c,0
00532D 0604                B   205    fs_lanp			ld b,4
00532F ED1208              B   206    				lea de,ix+8
005332 21 F9 60 00         B   207    				ld hl,partition_base
005336 1A                  B   208    fs_fpart		ld a,(de)
005337 BE                  B   209    				cp (hl)
005338 28 0D               B   210    				jr z,fs_chkpaddrlp
00533A ED3210              B   211    				lea ix,ix+16					00533D 0C                  B   212    				inc c
00533E 79                  B   213    				ld a,c
00533F FE04                B   214    				cp 4
005341 20 EA               B   215    				jr nz,fs_lanp				
005343 3ECE                B   216    				ld a,0ceh						005345 B7                  B   217    				or a
005346 C9                  B   218    				ret
005347 13                  B   219    fs_chkpaddrlp	inc de
005348 23                  B   220    				inc hl
005349 10 EB               B   221    				djnz fs_fpart					                           B   222    				
00534B DD7E04              B   223    				ld a,(ix+4)						00534E FE0E                B   224    				cp 0eh
005350 28 16               B   225    				jr z,format_done				005352 DD36040E            B   226    				ld (ix+4),0eh
005356 21000000            B   227    				ld hl,0							00535A AF                  B   228    				xor a
00535B 22 10 6E 00         B   229    				ld (sector_lba0),hl				00535F 32 13 6E 00         B   230    				ld (sector_lba0+3),a			005363 CD 01 60 00         B   231    				call fs_write_sector
005367 D8                  B   232    				ret c
                           B   233    
005368 AF                  B   234    format_done		xor a							005369 C9                  B   235    				ret				
                           B   236    				
                           B   237    
                           B   238    				
                           B   239    
                           B   240    
00536A                     B   241    set_lba_and_write_sector
                           B   242    
00536A E5                  B   243    				push hl
00536B D5                  B   244    				push de
00536C C5                  B   245    				push bc
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 221


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00536D 2A F9 60 00         B   246    				ld hl,(partition_base)
005371 3A FC 60 00         B   247    				ld a,(partition_base+3)
005375 0600                B   248    				ld b,0
005377 19                  B   249    				add hl,de
005378 88                  B   250    				adc a,b
005379 22 10 6E 00         B   251    				ld (sector_lba0),hl				00537D 32 13 6E 00         B   252    				ld (sector_lba0+3),a			005381 CD 01 60 00         B   253    				call fs_write_sector
005385 C1                  B   254    				pop bc
005386 D1                  B   255    				pop de
005387 E1                  B   256    				pop hl
005388 C9                  B   257    				ret
                           B   258    
                           B   259    
                           B   260    
005389 21000000            B   261    fs_read_mbr		ld hl,0
00538D AF                  B   262    				xor a
00538E 22 10 6E 00         B   263    				ld (sector_lba0),hl				005392 32 13 6E 00         B   264    				ld (sector_lba0+3),a			005396 CD D8 5F 00         B   265    				call fs_read_sector
00539A C9                  B   266    				ret
                           B   267    				
                           B   268    
                           B   269    
                           B   270    ;----------------------------------------------
                           B   271    
00539B                     B   272    fs_get_partition_info
                           B   273    
                           B   274    ; Set A to partition: $00 to $03
                           B   275    ; On return: If A = $00, IX = Address of reques
                           B   276    ;            If A = $d3, no partition table is 
                           B   277    ;            If A = $ce, Disk format is bad 
                           B   278    ;            If A = $cf, No (or unknown,non-FAT
                           B   279    ;            If carry flag set, there was a har
                           B   280    
                           B   281    				
00539B CD 89 53 00         B   282    				call fs_read_mbr				00539F D8                  B   283    				ret c
                           B   284    			
0053A0 CD DD 53 00         B   285    				call fs_check_fat_sig			0053A4 20 44               B   286    				jr nz,formbad
                           B   287    			
0053A6 CD CE 53 00         B   288    				call check_fat16_id				0053AA 20 04               B   289    				jr nz,mbr_at_zero				0053AC 3ED3                B   290    				ld a,0d3h						0053AE B7                  B   291    				or a
0053AF C9                  B   292    				ret
                           B   293    
0053B0 11100000            B   294    mbr_at_zero		ld de,16
0053B4 3A 5C 6D 00         B   295    				ld a,(partition_temp)
0053B8 57                  B   296    				ld d,a
0053B9 ED5C                B   297    				mlt de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 222


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0053BB DD21BE09 00         B   298    				ld ix,sector_buffer+01beh
0053C0 DD19                B   299    				add ix,de
0053C2 DDCB0456            B   300    				bit 2,(ix+4)					0053C6 20 04               B   301    				jr nz,formok					0053C8 3ECF                B   302    				ld a,0cfh						0053CA B7                  B   303    				or a
0053CB C9                  B   304    				ret
                           B   305    				
0053CC AF                  B   306    formok			xor a							0053CD C9                  B   307    				ret
                           B   308    					
                           B   309    
                           B   310    
                           B   311    
0053CE                     B   312    check_fat16_id
                           B   313    		
0053CE 21360800            B   314    				ld hl,sector_buffer+036h		0053D2 11 B5 65 00         B   315    				ld de,fat16_txt			
0053D6 0605                B   316    				ld b,5
0053D8 CD CD 13 00         B   317    				call os_compare_strings
0053DC C9                  B   318    				ret
                           B   319    				
                           B   320    ;----------------------------------------------
                           B   321    
                           B   322    
0053DD                     B   323    fs_check_fat_sig
                           B   324    
0053DD 2AFE0900            B   325    				ld hl,(sector_buffer+01feh)		0053E1 1155AA00            B   326    				ld de,0aa55h
0053E5 AF                  B   327    				xor a
0053E6 52ED52              B   328    				sbc.s hl,de						0053E9 C9                  B   329    				ret
                           B   330    			
                           B   331    			
                           B   332    			
0053EA 3ECE                B   333    formbad			ld a,0ceh						0053EC B7                  B   334    				or a
0053ED C9                  B   335    				ret
                           B   336    
                           B   337    ;----------------------------------------------
                           B   338    
                           B   339    
0053EE                     B   340    fs_check_disk_format
                           B   341    
                           B   342    ; ensures disk is FAT16, sets up constants..
                           B   343    	
0053EE C5                  B   344    				push bc
0053EF D5                  B   345    				push de
0053F0 E5                  B   346    				push hl
0053F1 CD F9 53 00         B   347    				call go_checkf
0053F5 E1                  B   348    				pop hl
0053F6 D1                  B   349    				pop de
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 223


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0053F7 C1                  B   350    				pop bc
0053F8 C9                  B   351    				ret
                           B   352    				
0053F9 CD C0 54 00         B   353    go_checkf		call fs_read_partition_bootsect
0053FD D8                  B   354    				ret c
0053FE B7                  B   355    				or a
0053FF C0                  B   356    				ret nz
                           B   357    				
005400 CD DD 53 00         B   358    				call fs_check_fat_sig			005404 20 E4               B   359    				jr nz,formbad		
                           B   360    			
005406 CD CE 53 00         B   361    				call check_fat16_id				00540A 20 DE               B   362    				jr nz,formbad
                           B   363    			
00540C DD210008 00         B   364    				ld ix,sector_buffer
005411 DD270B              B   365    				ld hl,(ix+0bh)					005414 11000200            B   366    				ld de,512						005418 AF                  B   367    				xor a
005419 52ED52              B   368    				sbc.s hl,de						00541C 20 CC               B   369    				jr nz,formbad
                           B   370    			
00541E DD7E0D              B   371    				ld a,(ix+0dh)					005421 32 79 60 00         B   372    				ld (fs_cluster_size),a
005425 CB27                B   373    				sla a
005427 32 7B 60 00         B   374    				ld (fs_bytes_per_cluster+1),a
                           B   375    							
00542B 21000000            B   376    				ld hl,0
00542F DD6E0E              B   377    				ld l,(ix+0eh)					005432 DD660F              B   378    				ld h,(ix+0fh)
005435 22 7D 60 00         B   379    				ld (fs_fat1_position),hl		005439 11000000            B   380    				ld de,0
00543D DD5E16              B   381    				ld e,(ix+16h)					005440 DD5617              B   382    				ld d,(ix+17h)
005443 ED53 8A 60 00       B   383    				ld (fs_sectors_per_fat),de
005448 19                  B   384    				add hl,de
005449 22 80 60 00         B   385    				ld (fs_fat2_position),hl		00544D 19                  B   386    				add hl,de
00544E 22 83 60 00         B   387    				ld (fs_root_dir_position),hl 	005452 EB                  B   388    				ex de,hl
005453 DD6E11              B   389    				ld l,(ix+11h)					005456 DD6612              B   390    				ld h,(ix+12h)					005459 7C                  B   391    				ld a,h
00545A B5                  B   392    				or l
00545B 28 8D               B   393    				jr z,formbad					00545D 29                  B   394    				add hl,hl						00545E 29                  B   395    				add hl,hl						00545F 29                  B   396    				add hl,hl
005460 29                  B   397    				add hl,hl
005461 EB                  B   398    				ex de,hl
005462 7A                  B   399    				ld a,d
005463 32 89 60 00         B   400    				ld (fs_root_dir_sectors),a		005467 01000000            B   401    				ld bc,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 224


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00546B 4A                  B   402    				ld c,d
00546C 09                  B   403    				add hl,bc				
00546D 22 86 60 00         B   404    				ld (fs_data_area),hl			                           B   405    												005471 21000000            B   406    				ld hl,0
005475 01000000            B   407    				ld bc,0
005479 DD4E22              B   408    				ld c,(ix+022h)					00547C DD4623              B   409    				ld b,(ix+023h)
00547F DD6E13              B   410    				ld l,(ix+013h)					005482 DD6614              B   411    				ld h,(ix+014h)
005485 7C                  B   412    				ld a,h							005486 B5                  B   413    				or l
005487 20 06               B   414    				jr nz,got_tsfbs
005489 DD6E20              B   415    				ld l,(ix+020h)					00548C DD6621              B   416    				ld h,(ix+021h)
00548F ED5B 86 60 00       B   417    got_tsfbs 		ld de,(fs_data_area)
005494 AF                  B   418    				xor a							005495 52ED52              B   419    				sbc.s hl,de						005498 30 02               B   420    				jr nc,nomxcb
00549A 520B                B   421    				dec.s bc
00549C 3A 79 60 00         B   422    nomxcb			ld a,(fs_cluster_size)
0054A0 CB3F                B   423    fmaxcl			srl a
0054A2 28 08               B   424    				jr z,got_cmaxc					0054A4 CB39                B   425    				srl c				
0054A6 CB1C                B   426    				rr h
0054A8 CB1D                B   427    				rr l
0054AA 18 F4               B   428    				jr fmaxcl
0054AC E5                  B   429    got_cmaxc		push hl							0054AD 11F0FF00            B   430    				ld de,0fff0h
0054B1 AF                  B   431    				xor a
0054B2 52ED52              B   432    				sbc.s hl,de						0054B5 38 02               B   433    				jr c,cmaxok
0054B7 E1                  B   434    				pop hl
0054B8 D5                  B   435    				push de
0054B9 E1                  B   436    cmaxok			pop hl
0054BA 22 8D 60 00         B   437    				ld (fs_max_data_clusters),hl
0054BE AF                  B   438    				xor a
0054BF C9                  B   439    				ret				
                           B   440    
                           B   441    ;----------------------------------------------
                           B   442    
0054C0                     B   443    fs_read_partition_bootsector
                           B   444    
0054C0 CD 27 1C 00         B   445    				call fs_calc_volume_offset		0054C4 21 59 6C 00         B   446    				ld hl,volume_mount_list
0054C8 19                  B   447    				add hl,de
0054C9 7E                  B   448    				ld a,(hl)
0054CA B7                  B   449    				or a							0054CB 20 04               B   450    				jr nz,fs_volpre
0054CD 3ECF                B   451    				ld a,0cfh						0054CF B7                  B   452    				or a
0054D0 C9                  B   453    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 225


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B   454    			
0054D1 11080000            B   455    fs_volpre		ld de,8							0054D5 19                  B   456    				add hl,de
0054D6 11 10 6E 00         B   457    				ld de,sector_lba0
0054DA 01040000            B   458    				ld bc,4
0054DE EDB0                B   459    				ldir
0054E0 CD D8 5F 00         B   460    				call fs_read_sector
0054E4 C9                  B   461    				ret	
                           B   462    
                           B   463    ;----------------------------------------------
                           B   464    
0054E5                     B   465    fs_calc_free_space
                           B   466    
                           B   467    ;returns free space in KB in HL:DE
                           B   468    
0054E5 ED5B 8D 60 00       B   469    				ld de,(fs_max_data_clusters)
0054EA 13                  B   470    				inc de
0054EB 13                  B   471    				inc de							0054EC D5                  B   472    				push de
0054ED DDE1                B   473    				pop ix
                           B   474    			
0054EF AF                  B   475    				xor a
0054F0 32 D2 60 00         B   476    cfs_lp2			ld (fs_working_sector),a
0054F4 2A 7D 60 00         B   477    				ld hl,(fs_fat1_position)
0054F8 CD AE 5F 00         B   478    				call set_abs_lba_and_read_secto
0054FC D8                  B   479    				ret c
                           B   480    				
0054FD 21000800            B   481    				ld hl,sector_buffer
005501 0600                B   482    				ld b,0
005503 AF                  B   483    cfs_lp1			xor a
005504 B6                  B   484    				or a,(hl)						005505 23                  B   485    				inc hl							005506 20 03               B   486    				jr nz,cfs_ciu					005508 B6                  B   487    				or a,(hl)
005509 28 02               B   488    				jr z,cfs_ddcc
00550B DD2B                B   489    cfs_ciu			dec ix							00550D 23                  B   490    cfs_ddcc		inc hl
00550E 1B                  B   491    				dec de
00550F 7A                  B   492    				ld a,d
005510 B3                  B   493    				or e
005511 28 09               B   494    				jr z,cfs_ok						005513 10 EE               B   495    				djnz cfs_lp1
005515 3A D2 60 00         B   496    				ld a,(fs_working_sector)
005519 3C                  B   497    				inc a
00551A 18 D4               B   498    				jr cfs_lp2
                           B   499    				
00551C 3A 79 60 00         B   500    cfs_ok			ld a,(fs_cluster_size)			005520 CB3F                B   501    cltoslp			srl a
005522 28 04               B   502    				jr z,powdone
005524 DD29                B   503    				add ix,ix
005526 18 F8               B   504    				jr cltoslp	
005528 FD21 2C 6E 00       B   505    powdone			ld iy,xrr_temp
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 226


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00552D FD3E00              B   506    				ld (iy),ix						005530 FDCB023E            B   507    				srl (iy+2)
005534 FDCB011E            B   508    				rr (iy+1)
005538 FDCB001E            B   509    				rr (iy+0)						00553C FD1700              B   510    				ld de,(iy)						00553F AF                  B   511    				xor a
005540 C9                  B   512    				ret
                           B   513    
                           B   514    ;----------------------------------------------
                           B   515    
005541                     B   516    fs_change_dir_command
                           B   517    
                           B   518    ; INPUT: HL = directory name ascii (zero/space 
                           B   519    			
                           B   520    			
005541 CD 68 5D 00         B   521    				call fs_find_filename			005545 D8                  B   522    				ret c							005546 FEC2                B   523    				cp 0c2h							005548 20 04               B   524    				jr nz,founddir
00554A 3ED1                B   525    				ld a,0d1h						00554C B7                  B   526    				or a
00554D C9                  B   527    				ret
                           B   528    
00554E DDCB0B66            B   529    founddir		bit 4,(ix+0bh)
005552 20 04               B   530    				jr nz,fs_isadir
005554 3EC4                B   531    				ld a,0c4h
005556 B7                  B   532    				or a
005557 C9                  B   533    				ret
                           B   534    				
005558 11000000            B   535    fs_isadir		ld de,0
00555C DD5E1A              B   536    				ld e,(ix+01ah)
00555F DD561B              B   537    				ld d,(ix+01bh)					005562 CD F9 1B 00         B   538    				call fs_update_dir_cluster
005566 AF                  B   539    				xor a
005567 C9                  B   540    				ret
                           B   541    
                           B   542    
                           B   543    ;----------------------------------------------
                           B   544    	
                           B   545    	
005568                     B   546    fs_goto_root_dir_command
                           B   547    
005568 D5                  B   548    				push de
005569 11000000            B   549    				ld de,0
00556D CD F9 1B 00         B   550    				call fs_update_dir_cluster
005571 D1                  B   551    				pop de
005572 AF                  B   552    				xor a
005573 C9                  B   553    				ret
                           B   554    
                           B   555    ;----------------------------------------------
                           B   556    	
                           B   557    	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 227


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005574                     B   558    fs_parent_dir_command
                           B   559    
005574 CD ED 1B 00         B   560    				call fs_get_dir_cluster
005578 7A                  B   561    				ld a,d
005579 B3                  B   562    				or e
00557A 20 04               B   563    				jr nz,pdnaroot
00557C 3ECA                B   564    				ld a,0cah						00557E B7                  B   565    				or a
00557F C9                  B   566    				ret
005580 212E2E20            B   567    pdnaroot		ld hl,0202e2eh					005584 22 90 60 00         B   568    				ld (fs_sought_filename),hl		005588 21 93 60 00         B   569    				ld hl,fs_sought_filename+3		00558C 3E20                B   570    				ld a,32
00558E 01080000            B   571    				ld bc,8
005592 CD 13 17 00         B   572    				call os_bchl_memfill
005596 18 A9               B   573    				jr fs_change_dir_command
                           B   574    				
                           B   575    		
                           B   576    ;----------------------------------------------
                           B   577    		
005598                     B   578    fs_open_file_command
                           B   579    
                           B   580    ; INPUT: xHL = filename ascii (zero/space termi
                           B   581    ; OUTPUT: C:xDE  = File length
                           B   582    ;            HL  = Start cluster of file
                           B   583    ;            Internal vars (file pointer reset 
                           B   584    
                           B   585    			
005598 CD 68 5D 00         B   586    				call fs_find_filename			00559C D8                  B   587    				ret c							00559D C0                  B   588    				ret nz							                           B   589    								
00559E 3EC6                B   590    				ld a,0c6h						0055A0 DDCB0B66            B   591    				bit 4,(ix+0bh)
0055A4 C0                  B   592    				ret nz
                           B   593    
0055A5 AF                  B   594    				xor a
0055A6 32 E6 60 00         B   595    				ld (fs_filepointer_valid),a		0055AA 21000000            B   596    				ld hl,0
0055AE 22 B4 60 00         B   597    				ld (fs_file_pointer),hl			0055B2 32 B7 60 00         B   598    				ld (fs_file_pointer+3),a		0055B6 22 F2 60 00         B   599    				ld (fs_sector_last_read_lba0),h
0055BA 32 F5 60 00         B   600    				ld (fs_sector_last_read_lba0+3)
                           B   601    
0055BE DD171C              B   602    				ld de,(ix+01ch)
0055C1 D5                  B   603    				push de
0055C2 E1                  B   604    				pop hl
0055C3 DD4E1F              B   605    				ld c,(ix+01fh)					0055C6 ED53 B8 60 00       B   606    				ld (fs_file_length),de			0055CB 79                  B   607    				ld a,c
0055CC 32 BB 60 00         B   608    				ld (fs_file_length+3),a			0055D0 B7                  B   609    				or a							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 228


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0055D1 28 04               B   610    				jr z,fs_dflsm					0055D3 21FFFFFF            B   611    				ld hl,0ffffffh
0055D7 22 C0 60 00         B   612    fs_dflsm		ld (fs_file_transfer_length),hl
                           B   613    				
0055DB 21000000            B   614    				ld hl,0
0055DF DD6E1A              B   615    				ld l,(ix+01ah)		
0055E2 DD661B              B   616    				ld h,(ix+01bh)
0055E5 22 C3 60 00         B   617    				ld (fs_file_start_cluster),hl	                           B   618    				
0055E9 AF                  B   619    				xor a
0055EA C9                  B   620    				ret
                           B   621    
                           B   622    
                           B   623    ;----------------------------------------------
                           B   624    
0055EB                     B   625    fs_read_data_command		
                           B   626    
                           B   627    ;*******************************************
                           B   628    ;*** 'fs_open_file' must be called first ***
                           B   629    ;*******************************************
                           B   630    		
0055EB CD 2A 57 00         B   631    fs_load			call fs_test_transfer_length	0055EF 20 04               B   632    				jr nz,fs_btrok
                           B   633    
0055F1 3EC7                B   634    fs_fliz			ld a,0c7h						0055F3 B7                  B   635    				or a
0055F4 C9                  B   636    				ret
                           B   637    			 
0055F5 2A C9 60 00         B   638    fs_btrok		ld hl,(fs_ez80_address)			0055F9 22 CC 60 00         B   639    				ld (fs_ez80_working_address),hl
                           B   640    			
0055FD 2A B4 60 00         B   641    				ld hl,(fs_file_pointer)			005601 3A B7 60 00         B   642    				ld a,(fs_file_pointer+3)		005605 11010000            B   643    				ld de,1							005609 19                  B   644    				add hl,de
00560A CE00                B   645    				adc a,0
00560C 4F                  B   646    				ld c,a
00560D EB                  B   647    				ex de,hl						00560E 2A B8 60 00         B   648    				ld hl,(fs_file_length)			005612 3A BB 60 00         B   649    				ld a,(fs_file_length+3)			005616 B7                  B   650    				or a							005617 ED52                B   651    				sbc hl,de						005619 99                  B   652    				sbc a,c
00561A DA 7B 56 00         B   653    				jp c,fs_rd_eof
                           B   654    					
00561E 3A E6 60 00         B   655    fs_fpok			ld a,(fs_filepointer_valid)		005622 B7                  B   656    				or a							005623 20 46               B   657    				jr nz,fs_get_sector_if_necessar
                           B   658    			
005625 3E01                B   659    seek_strt		ld a,1
005627 32 E6 60 00         B   660    				ld (fs_filepointer_valid),a
00562B 2A C3 60 00         B   661    				ld hl,(fs_file_start_cluster)	Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 229


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00562F 22 C6 60 00         B   662    				ld (fs_file_working_cluster),hl
                           B   663    			
005633 3A B7 60 00         B   664    				ld a,(fs_file_pointer+3)		005637 2A B4 60 00         B   665    				ld hl,(fs_file_pointer)			00563B ED4B 7A 60 00       B   666    fs_fpblp		ld bc,(fs_bytes_per_cluster)
005640 AF                  B   667    				xor a
005641 ED42                B   668    				sbc hl,bc						005643 DE00                B   669    				sbc a,0
005645 38 14               B   670    				jr c,fs_fpgbo
005647 E5                  B   671    				push hl				
005648 2A C6 60 00         B   672    				ld hl,(fs_file_working_cluster)
00564C CD 80 5E 00         B   673    				call get_fat_entry_for_cluster
005650 30 02               B   674    				jr nc,fs_ghok					005652 E1                  B   675    				pop hl
005653 C9                  B   676    				ret
005654 22 C6 60 00         B   677    fs_ghok			ld (fs_file_working_cluster),hl
005658 E1                  B   678    				pop hl
005659 18 E0               B   679    				jr fs_fpblp
                           B   680    			
00565B 09                  B   681    fs_fpgbo		add hl,bc						00565C 7C                  B   682    				ld a,h
00565D CB3F                B   683    				srl a							00565F 32 E7 60 00         B   684    				ld (fs_sector_pos_cnt),a
005663 7C                  B   685    				ld a,h
005664 E601                B   686    				and 01h
005666 67                  B   687    				ld h,a
005667 22 CF 60 00         B   688    				ld (fs_in_sector_offset),hl		                           B   689    
                           B   690    				
                           B   691    
00566B                     B   692    fs_get_sector_if_necessary
                           B   693    				
00566B CD 2A 57 00         B   694    				call fs_test_transfer_length	00566F 28 64               B   695    				jr z,fs_read_done	
                           B   696    				
005671 2A C6 60 00         B   697    				ld hl,(fs_file_working_cluster)
005675 CD 1F 5C 00         B   698    				call fs_compare_hl_fff8			005679 38 04               B   699    				jr c,fs_rd_noteof		
00567B 3ECC                B   700    fs_rd_eof		ld a,0cch						00567D B7                  B   701    				or a
00567E C9                  B   702    				ret
                           B   703    				
00567F 2A C6 60 00         B   704    fs_rd_noteof	ld hl,(fs_file_working_cluster)
005683 3A E7 60 00         B   705    				ld a,(fs_sector_pos_cnt)		005687 CD 57 5F 00         B   706    				call cluster_and_offset_to_lba
00568B CD 1D 60 00         B   707    				call fs_is_same_sector_in_buffe
00568F 28 05               B   708    				jr z,fs_same_sector
005691 CD D8 5F 00         B   709    				call fs_read_sector				005695 D8                  B   710    				ret c							                           B   711    			
005696 21000200            B   712    fs_same_sector	ld hl,512
00569A ED5B CF 60 00       B   713    				ld de,(fs_in_sector_offset)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 230


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00569F AF                  B   714    				xor a
0056A0 ED52                B   715    				sbc hl,de						0056A2 E5                  B   716    				push hl
0056A3 C1                  B   717    				pop bc							                           B   718    				
0056A4 ED5B C0 60 00       B   719    				ld de,(fs_file_transfer_length)
0056A9 AF                  B   720    				xor a
0056AA ED52                B   721    				sbc hl,de
0056AC 38 02               B   722    				jr c,fs_got_bc					0056AE D5                  B   723    				push de							0056AF C1                  B   724    				pop bc
                           B   725    
0056B0 21000800            B   726    fs_got_bc		ld hl,sector_buffer
0056B4 ED5B CF 60 00       B   727    				ld de,(fs_in_sector_offset)		0056B9 19                  B   728    				add hl,de
0056BA ED5B CC 60 00       B   729    				ld de,(fs_ez80_working_address)
0056BF C5                  B   730    				push bc
0056C0 EDB0                B   731    				ldir							0056C2 ED53 CC 60 00       B   732    				ld (fs_ez80_working_address),de
0056C7 C1                  B   733    				pop bc
0056C8 CD FE 56 00         B   734    				call fs_adjust_fp_tl_so
0056CC 2A CF 60 00         B   735    				ld hl,(fs_in_sector_offset)
0056D0 7C                  B   736    				ld a,h
0056D1 FE02                B   737    				cp 02h							0056D3 28 02               B   738    				jr z,fs_new_sec
0056D5 AF                  B   739    fs_read_done	xor a
0056D6 C9                  B   740    				ret
                           B   741    
0056D7 21000000            B   742    fs_new_sec		ld hl,0
0056DB 22 CF 60 00         B   743    				ld (fs_in_sector_offset),hl		0056DF 21 E7 60 00         B   744    				ld hl,fs_sector_pos_cnt			0056E3 34                  B   745    				inc (hl)
0056E4 3A 79 60 00         B   746    				ld a,(fs_cluster_size)
0056E8 BE                  B   747    				cp (hl)
0056E9 20 80               B   748    				jr nz,fs_get_sector_if_necessar
                           B   749    				
0056EB 3600                B   750    				ld (hl),0						0056ED 2A C6 60 00         B   751    				ld hl,(fs_file_working_cluster)
0056F1 CD 80 5E 00         B   752    				call get_fat_entry_for_cluster	0056F5 D8                  B   753    				ret c							0056F6 22 C6 60 00         B   754    				ld (fs_file_working_cluster),hl
0056FA C3 6B 56 00         B   755    				jr fs_get_sector_if_necessary
                           B   756    
                           B   757    ;----------------------------------------------
                           B   758    
0056FE                     B   759    fs_adjust_fp_tl_so
                           B   760    
                           B   761    ; advance / reduce by BC
                           B   762    
0056FE C5                  B   763    				push bc
0056FF E5                  B   764    				push hl
005700 2A B4 60 00         B   765    				ld hl,(fs_file_pointer)			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 231


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005704 09                  B   766    				add hl,bc
005705 22 B4 60 00         B   767    				ld (fs_file_pointer),hl			005709 3A B7 60 00         B   768    				ld a,(fs_file_pointer+3)		00570D CE00                B   769    				adc a,0
00570F 32 B7 60 00         B   770    				ld (fs_file_pointer+3),a		                           B   771    				
005713 2A C0 60 00         B   772    				ld hl,(fs_file_transfer_length)
005717 AF                  B   773    				xor a
005718 ED42                B   774    				sbc hl,bc
00571A 22 C0 60 00         B   775    				ld (fs_file_transfer_length),hl
                           B   776    				
00571E 2A CF 60 00         B   777    				ld hl,(fs_in_sector_offset)
005722 09                  B   778    				add hl,bc
005723 22 CF 60 00         B   779    				ld (fs_in_sector_offset),hl
                           B   780    				
005727 E1                  B   781    				pop hl
005728 C1                  B   782    				pop bc
005729 C9                  B   783    				ret
                           B   784    				
                           B   785    				
00572A                     B   786    fs_test_transfer_length
                           B   787    				
00572A C5                  B   788    				push bc
00572B E5                  B   789    				push hl
00572C 21000000            B   790    				ld hl,0
005730 ED4B C0 60 00       B   791    				ld bc,(fs_file_transfer_length)
005735 AF                  B   792    				xor a
005736 ED4A                B   793    				adc hl,bc
005738 E1                  B   794    				pop hl
005739 C1                  B   795    				pop bc
00573A C9                  B   796    				ret
                           B   797    				
                           B   798    ;----------------------------------------------
                           B   799    
00573B                     B   800    fs_make_dir_command		
                           B   801    				
00573B CD 68 5D 00         B   802    				call fs_find_filename			00573F D8                  B   803    				ret c
005740 FEC2                B   804    				cp 0c2h							005742 28 04               B   805    				jr z,mdirfnde
005744 3EC9                B   806    				ld a,0c9h						005746 B7                  B   807    				or a
005747 C9                  B   808    				ret
                           B   809    			
005748 CD 2C 5C 00         B   810    mdirfnde		call fs_find_free_cluster		00574C D8                  B   811    				ret c							00574D C0                  B   812    				ret nz							                           B   813    							
00574E 2A D6 60 00         B   814    				ld hl,(fs_free_cluster)
005752 22 D9 60 00         B   815    				ld (fs_new_file_cluster),hl
                           B   816    			
005756 CD 7D 5C 00         B   817    				call fs_find_free_dir_entry		Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 232


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
00575A D8                  B   818    				ret c							00575B C0                  B   819    				ret nz							                           B   820    			
00575C DDE5                B   821    				push ix							00575E D1                  B   822    				pop de
00575F 21 90 60 00         B   823    				ld hl,fs_sought_filename
005763 010B0000            B   824    				ld bc,11
005767 EDB0                B   825    				ldir
005769 AF                  B   826    				xor a							00576A 0615                B   827    				ld b,21
00576C 12                  B   828    clrdiren		ld (de),a
00576D 13                  B   829    				inc de
00576E 10 FC               B   830    				djnz clrdiren
005770 DD360B10            B   831    				ld (ix+0bh),010h				005774 DD361821            B   832    				ld (ix+018h),021h				005778 ED5B D9 60 00       B   833    				ld de,(fs_new_file_cluster)
00577D DD731A              B   834    				ld (ix+01ah),e					005780 DD721B              B   835    				ld (ix+01bh),d
005783 CD 01 60 00         B   836    				call fs_write_sector			005787 D8                  B   837    				ret c							                           B   838    				
005788 CD 54 5D 00         B   839    				call fs_clear_sector_buffer
00578C DD210008 00         B   840    				ld ix,sector_buffer				005791 DD36002E            B   841    				ld (ix+00h),02eh				005795 DD360120            B   842    				ld (ix+01h),020h
005799 DD36202E            B   843    				ld (ix+020h),02eh
00579D DD36212E            B   844    				ld (ix+021h),02eh
0057A1 DD360B10            B   845    				ld (ix+0bh),010h
0057A5 DD362B10            B   846    				ld (ix+02bh),010h
0057A9 ED5B D9 60 00       B   847    				ld de,(fs_new_file_cluster)		0057AE DD731A              B   848    				ld (ix+01ah),e
0057B1 DD721B              B   849    				ld (ix+01bh),d
0057B4 CD ED 1B 00         B   850    				call fs_get_dir_cluster			0057B8 DD733A              B   851    				ld (ix+03ah),e
0057BB DD723B              B   852    				ld (ix+03bh),d
0057BE DD361821            B   853    				ld (ix+018h),021h				0057C2 DD363821            B   854    				ld (ix+038h),021h				0057C6 0609                B   855    				ld b,9
0057C8 DD360220            B   856    mndelp			ld (ix+002h),32
0057CC DD362220            B   857    				ld (ix+022h),32
0057D0 DD23                B   858    				inc ix
0057D2 10 F4               B   859    				djnz mndelp
0057D4 2A D9 60 00         B   860    				ld hl,(fs_new_file_cluster)		0057D8 AF                  B   861    				xor a
0057D9 CD 57 5F 00         B   862    				call cluster_and_offset_to_lba
0057DD CD 01 60 00         B   863    				call fs_write_sector
0057E1 D8                  B   864    				ret c							                           B   865    			
0057E2 CD 54 5D 00         B   866    				call fs_clear_sector_buffer		0057E6 AF                  B   867    				xor a
0057E7 3C                  B   868    wroslp			inc a
0057E8 32 D2 60 00         B   869    				ld (fs_working_sector),a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 233


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0057EC 21 79 60 00         B   870    				ld hl,fs_cluster_size
0057F0 BE                  B   871    				cp (hl)
0057F1 28 13               B   872    				jr z,allsclr
0057F3 2A D9 60 00         B   873    				ld hl,(fs_new_file_cluster)
0057F7 CD 57 5F 00         B   874    				call cluster_and_offset_to_lba
0057FB CD 01 60 00         B   875    				call fs_write_sector
0057FF D8                  B   876    				ret c
005800 3A D2 60 00         B   877    				ld a,(fs_working_sector)
005804 18 E1               B   878    				jr wroslp
                           B   879    			
005806 2A D9 60 00         B   880    allsclr			ld hl,(fs_new_file_cluster)		00580A 11FFFF00            B   881    				ld de,0ffffh
00580E CD AC 5E 00         B   882    				call update_fat_entry_for_clust
005812 AF                  B   883    				xor a
005813 C9                  B   884    				ret
                           B   885    
                           B   886    
                           B   887    
                           B   888    ;----------------------------------------------
                           B   889    
005814                     B   890    fs_delete_dir_command
                           B   891    
005814 CD 68 5D 00         B   892    				call fs_find_filename			005818 D8                  B   893    				ret c
005819 28 04               B   894    				jr z,ddc_gotd
00581B 3ED1                B   895    				ld a,0d1h						00581D B7                  B   896    				or a
00581E C9                  B   897    				ret
                           B   898    				
00581F DDCB0B66            B   899    ddc_gotd		bit 4,(ix+0bh)					005823 20 04               B   900    				jr nz,okdeldir
005825 3EC4                B   901    				ld a,0c4h						005827 B7                  B   902    				or a
005828 C9                  B   903    				ret
                           B   904    				
005829 DD22 DC 60 00       B   905    okdeldir		ld (fs_fname_in_sector_addr),ix
00582E CD B6 5F 00         B   906    				call backup_sector_lba
005832 DD6E1A              B   907    				ld l,(ix+01ah)					005835 DD661B              B   908    				ld h,(ix+01bh)
                           B   909    				
005838 3A 79 60 00         B   910    fs_ddecl		ld a,(fs_cluster_size)
00583C 47                  B   911    				ld b,a							00583D 0E00                B   912    				ld c,0			
00583F 79                  B   913    fs_cne2 		ld a,c
005840 CD 57 5F 00         B   914    				call cluster_and_offset_to_lba
005844 CD D8 5F 00         B   915    				call fs_read_sector
005848 D8                  B   916    				ret c							                           B   917    				
005849 C5                  B   918    				push bc
00584A 0610                B   919    				ld b,16							00584C DD210008 00         B   920    				ld ix,sector_buffer
005851 11200000            B   921    				ld de,020h
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 234


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005855 DD7E00              B   922    fs_cne1			ld a,(ix)
005858 B7                  B   923    				or a
005859 28 0D               B   924    				jr z,fs_chnde
00585B FEE5                B   925    				cp 0e5h
00585D 28 09               B   926    				jr z,fs_chnde
00585F FE2E                B   927    				cp '.'
005861 28 05               B   928    				jr z,fs_chnde
005863 C1                  B   929    				pop bc
005864 3EC5                B   930    				ld a,0c5h						005866 B7                  B   931    				or a
005867 C9                  B   932    				ret
                           B   933    			
005868 DD19                B   934    fs_chnde		add ix,de
00586A 10 E9               B   935    				djnz fs_cne1
00586C C1                  B   936    				pop bc
00586D 0C                  B   937    				inc c
00586E 10 CF               B   938    				djnz fs_cne2
                           B   939    			
005870 CD 80 5E 00         B   940    				call get_fat_entry_for_cluster	005874 D8                  B   941    				ret c
005875 CD 1F 5C 00         B   942    				call fs_compare_hl_fff8
005879 38 BD               B   943    				jr c,fs_ddecl
                           B   944    			
00587B CD CB 5F 00         B   945    dir_empty		call restore_sector_lba			00587F CD D8 5F 00         B   946    				call fs_read_sector
005883 D8                  B   947    				ret c							005884 2A DC 60 00         B   948    				ld hl,(fs_fname_in_sector_addr)
005888 36E5                B   949    fs_delco		ld (hl),0e5h					00588A CD 01 60 00         B   950    				call fs_write_sector
00588E D8                  B   951    				ret c
                           B   952    			
00588F E5                  B   953    				push hl
005890 DDE1                B   954    				pop ix
005892 DD6E1A              B   955    				ld l,(ix+01ah)
005895 DD661B              B   956    				ld h,(ix+01bh)
005898 22 D3 60 00         B   957    				ld (fs_working_cluster),hl
00589C 7C                  B   958    				ld a,h							00589D B5                  B   959    				or l							00589E C8                  B   960    				ret z							                           B   961    				
00589F 2A D3 60 00         B   962    clrfatlp		ld hl,(fs_working_cluster)
0058A3 CD 80 5E 00         B   963    				call get_fat_entry_for_cluster
0058A7 D8                  B   964    				ret c
0058A8 EB                  B   965    				ex de,hl
                           B   966    				
0058A9 2A D3 60 00         B   967    				ld hl,(fs_working_cluster)
0058AD ED53 D3 60 00       B   968    				ld (fs_working_cluster),de
0058B2 11000000            B   969    				ld de,0
0058B6 CD AC 5E 00         B   970    				call update_fat_entry_for_clust
0058BA D8                  B   971    				ret c
                           B   972    				
0058BB CD 1F 5C 00         B   973    				call fs_compare_hl_fff8			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 235


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0058BF 38 DE               B   974    				jr c,clrfatlp
0058C1 AF                  B   975    				xor a
0058C2 C9                  B   976    				ret
                           B   977    
                           B   978    
                           B   979    ;----------------------------------------------
                           B   980    
0058C3                     B   981    fs_create_file_command
                           B   982    
                           B   983    ; Note: As per FAT standard, creating a file (0
                           B   984    ; only a directory entry (FAT is only updated w
                           B   985    
0058C3 CD 68 5D 00         B   986    				call fs_find_filename			0058C7 D8                  B   987    				ret c
0058C8 FEC2                B   988    				cp 0c2h							0058CA 28 04               B   989    				jr z,mfilefnde
                           B   990    				
0058CC 3EC9                B   991    				ld a,0c9h						0058CE B7                  B   992    				or a
0058CF C9                  B   993    				ret
                           B   994    			
0058D0 CD 7D 5C 00         B   995    mfilefnde		call fs_find_free_dir_entry		0058D4 D8                  B   996    				ret c							0058D5 C0                  B   997    				ret nz							                           B   998    			
0058D6 DDE5                B   999    				push ix							0058D8 D1                  B  1000    				pop de
0058D9 21 90 60 00         B  1001    				ld hl,fs_sought_filename
0058DD 010B0000            B  1002    				ld bc,11
0058E1 EDB0                B  1003    				ldir
0058E3 AF                  B  1004    				xor a							0058E4 0615                B  1005    				ld b,21
0058E6 12                  B  1006    clrfnen			ld (de),a
0058E7 13                  B  1007    				inc de
0058E8 10 FC               B  1008    				djnz clrfnen
0058EA DD361821            B  1009    				ld (ix+018h),021h				0058EE CD 01 60 00         B  1010    				call fs_write_sector			0058F2 D8                  B  1011    				ret c							0058F3 AF                  B  1012    				xor a
0058F4 C9                  B  1013    				ret								                           B  1014    
                           B  1015    
                           B  1016    ;----------------------------------------------
                           B  1017    
0058F5                     B  1018    fs_write_bytes_to_file_command
                           B  1019    	
                           B  1020    ; *********************************************
                           B  1021    ; * set up: fs_file_transfer_length (new data),
                           B  1022    ; * before calling                             
                           B  1023    ; *********************************************
                           B  1024    
                           B  1025    				
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 236


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0058F5 ED5B C0 60 00       B  1026    				ld de,(fs_file_transfer_length)
0058FA 21000000            B  1027    				ld hl,0
0058FE AF                  B  1028    				xor a
0058FF ED5A                B  1029    				adc hl,de
005901 CA F1 55 00         B  1030    				jp z,fs_fliz					                           B  1031    				 
005905 CD 68 5D 00         B  1032    				call fs_find_filename			005909 D8                  B  1033    				ret c							00590A FEC2                B  1034    				cp 0c2h				
00590C 20 02               B  1035    				jr nz,fs_fetwt					00590E B7                  B  1036    				or a
00590F C9                  B  1037    				ret
005910 DDCB0B66            B  1038    fs_fetwt		bit 4,(ix+0bh)					005914 28 04               B  1039    				jr z,fs_oknad					005916 3EC6                B  1040    				ld a,0c6h						005918 B7                  B  1041    				or a
005919 C9                  B  1042    				ret
                           B  1043    
00591A CD B6 5F 00         B  1044    fs_oknad		call backup_sector_lba
00591E DD22 DC 60 00       B  1045    				ld (fs_fname_in_sector_addr),ix
                           B  1046    
005923 DD311C              B  1047    				ld iy,(ix+01ch)					005926 DD7E1F              B  1048    				ld a,(ix+01fh)
005929 FD22 BC 60 00       B  1049    				ld (fs_existing_file_length),iy
00592E 32 BF 60 00         B  1050    				ld (fs_existing_file_length+3),
005932 ED5B C0 60 00       B  1051    				ld de,(fs_file_transfer_length)
005937 FD19                B  1052    				add iy,de						005939 CE00                B  1053    				adc a,0
00593B DD3E1C              B  1054    				ld (ix+01ch),iy					00593E DD771F              B  1055    				ld (ix+01fh),a					005941 30 04               B  1056    				jr nc,nfsizeok
005943 3EC7                B  1057    				ld a,0c7h						005945 B7                  B  1058    				or a
005946 C9                  B  1059    				ret
                           B  1060    
005947 11000000            B  1061    nfsizeok		ld de,0
00594B DD5E1A              B  1062    				ld e,(ix+01ah)					00594E DD561B              B  1063    				ld d,(ix+01bh)					005951 ED53 C6 60 00       B  1064    				ld (fs_file_working_cluster),de
005956 CD 01 60 00         B  1065    				call fs_write_sector			00595A D8                  B  1066    				ret c
00595B 7A                  B  1067    				ld a,d
00595C B3                  B  1068    				or e
00595D 20 35               B  1069    				jr nz,apenclch					                           B  1070    				
00595F CD 2C 5C 00         B  1071    				call fs_find_free_cluster		005963 D8                  B  1072    				ret c
005964 C0                  B  1073    				ret nz
005965 2A D6 60 00         B  1074    				ld hl,(fs_free_cluster)
005969 22 C6 60 00         B  1075    				ld (fs_file_working_cluster),hl
00596D 11FFFF00            B  1076    				ld de,0ffffh
005971 CD AC 5E 00         B  1077    				call update_fat_entry_for_clust
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 237


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005975 D8                  B  1078    				ret c
                           B  1079    			
005976 CD CB 5F 00         B  1080    				call restore_sector_lba			00597A CD D8 5F 00         B  1081    				call fs_read_sector
00597E D8                  B  1082    				ret c
00597F DD2A DC 60 00       B  1083    				ld ix,(fs_fname_in_sector_addr)
005984 ED5B C6 60 00       B  1084    				ld de,(fs_file_working_cluster)
005989 DD731A              B  1085    				ld (ix+01ah),e
00598C DD721B              B  1086    				ld (ix+01bh),d
00598F CD 01 60 00         B  1087    				call fs_write_sector			005993 D8                  B  1088    				ret c
                           B  1089    				
                           B  1090    					
005994 2A C6 60 00         B  1091    apenclch		ld hl,(fs_file_working_cluster)
005998 CD 80 5E 00         B  1092    				call get_fat_entry_for_cluster
00599C D8                  B  1093    				ret c
00599D CD 1F 5C 00         B  1094    				call fs_compare_hl_fff8
0059A1 30 1C               B  1095    				jr nc,atlclif
0059A3 22 C6 60 00         B  1096    				ld (fs_file_working_cluster),hl
0059A7 01000000            B  1097    				ld bc,0
0059AB 3A 79 60 00         B  1098    				ld a,(fs_cluster_size)
0059AF CB27                B  1099    				sla a
0059B1 47                  B  1100    				ld b,a
0059B2 2A BC 60 00         B  1101    				ld hl,(fs_existing_file_length)
0059B6 AF                  B  1102    				xor a							0059B7 ED42                B  1103    				sbc hl,bc						0059B9 22 BC 60 00         B  1104    				ld (fs_existing_file_length),hl
0059BD 18 D5               B  1105    				jr apenclch
                           B  1106    				
0059BF ED4B BC 60 00       B  1107    atlclif			ld bc,(fs_existing_file_length)
0059C4 CB38                B  1108    				srl b				
0059C6 48                  B  1109    				ld c,b							0059C7 3A 79 60 00         B  1110    				ld a,(fs_cluster_size)
0059CB 91                  B  1111    				sub c
0059CC 47                  B  1112    				ld b,a							0059CD 28 79               B  1113    				jr z,fs_sfncl					                           B  1114    				
0059CF 2A C6 60 00         B  1115    				ld hl,(fs_file_working_cluster)
0059D3 79                  B  1116    				ld a,c
0059D4 CD 57 5F 00         B  1117    				call cluster_and_offset_to_lba
0059D8 CD D8 5F 00         B  1118    				call fs_read_sector
0059DC D8                  B  1119    				ret c
0059DD C5                  B  1120    				push bc							                           B  1121    				
0059DE 11000000            B  1122    				ld de,0
0059E2 3A BC 60 00         B  1123    				ld a,(fs_existing_file_length)
0059E6 5F                  B  1124    				ld e,a
0059E7 3A BD 60 00         B  1125    				ld a,(fs_existing_file_length+1
0059EB E601                B  1126    				and 1
0059ED 57                  B  1127    				ld d,a							0059EE 21000200            B  1128    				ld hl,512	
0059F2 AF                  B  1129    				xor a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 238


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0059F3 ED52                B  1130    				sbc hl,de						0059F5 E5                  B  1131    				push hl
0059F6 C1                  B  1132    				pop bc							0059F7 21000800            B  1133    				ld hl,sector_buffer
0059FB 19                  B  1134    				add hl,de
0059FC EB                  B  1135    				ex de,hl						0059FD 7C                  B  1136    				ld a,h			
0059FE B5                  B  1137    				or l
0059FF 20 04               B  1138    				jr nz,fs_dcsb					005A01 CD 54 5D 00         B  1139    fs_dbfil		call fs_clear_sector_buffer
005A05 2A C9 60 00         B  1140    fs_dcsb			ld hl,(fs_ez80_address)			005A09 EDA0                B  1141    fs_cbsb			ldi								005A0B 7C                  B  1142    				ld a,h							005A0C B5                  B  1143    				or l
005A0D 20 0D               B  1144    				jr nz,fs_srcadok
005A0F 22 C9 60 00         B  1145    				ld (fs_ez80_address),hl
005A13 3A CB 60 00         B  1146    				ld a,(fs_ez80_address+2)
005A17 B7                  B  1147    				or a
005A18 CA 87 5A 00         B  1148    				jp z,fs_mem_error
005A1C CD E0 5E 00         B  1149    fs_srcadok		call transfer_length_countdown
005A20 28 54               B  1150    				jr z,fs_lbof					005A22 78                  B  1151    fs_sadok		ld a,b							005A23 B1                  B  1152    				or c
005A24 20 E3               B  1153    				jr nz,fs_cbsb					                           B  1154    
005A26 22 C9 60 00         B  1155    				ld (fs_ez80_address),hl			005A2A C1                  B  1156    				pop bc							005A2B 79                  B  1157    				ld a,c
005A2C 2A C6 60 00         B  1158    				ld hl,(fs_file_working_cluster)
005A30 CD 57 5F 00         B  1159    				call cluster_and_offset_to_lba
005A34 CD 01 60 00         B  1160    				call fs_write_sector			005A38 D8                  B  1161    				ret c							005A39 0C                  B  1162    				inc c							005A3A 05                  B  1163    				dec b
005A3B 28 0B               B  1164    				jr z,fs_sfncl					005A3D C5                  B  1165    fs_sfns			push bc				
005A3E 01000200            B  1166    				ld bc,512						005A42 11000800            B  1167    				ld de,sector_buffer				005A46 18 B9               B  1168    				jr fs_dbfil						                           B  1169    				
005A48 CD 2C 5C 00         B  1170    fs_sfncl		call fs_find_free_cluster		005A4C D8                  B  1171    				ret c							005A4D C0                  B  1172    				ret nz							005A4E 2A C6 60 00         B  1173    				ld hl,(fs_file_working_cluster)
005A52 ED5B D6 60 00       B  1174    				ld de,(fs_free_cluster)
005A57 CD AC 5E 00         B  1175    				call update_fat_entry_for_clust
005A5B D8                  B  1176    				ret c
005A5C 2A D6 60 00         B  1177    				ld hl,(fs_free_cluster)
005A60 22 C6 60 00         B  1178    				ld (fs_file_working_cluster),hl
005A64 11FFFF00            B  1179    				ld de,0ffffh
005A68 CD AC 5E 00         B  1180    				call update_fat_entry_for_clust
005A6C D8                  B  1181    				ret c
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 239


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005A6D 3A 79 60 00         B  1182    				ld a,(fs_cluster_size)
005A71 47                  B  1183    				ld b,a							005A72 0E00                B  1184    				ld c,0							005A74 18 C7               B  1185    				jr fs_sfns						                           B  1186    				
005A76 C1                  B  1187    fs_lbof			pop bc
005A77 79                  B  1188    				ld a,c							005A78 2A C6 60 00         B  1189    				ld hl,(fs_file_working_cluster)
005A7C CD 57 5F 00         B  1190    				call cluster_and_offset_to_lba
005A80 CD 01 60 00         B  1191    				call fs_write_sector	
005A84 D8                  B  1192    				ret c
005A85 AF                  B  1193    				xor a							005A86 C9                  B  1194    				ret
                           B  1195    
                           B  1196    
005A87 3EC8                B  1197    fs_mem_error	ld a,0c8h						005A89 C1                  B  1198    fs_flerr		pop bc
005A8A B7                  B  1199    				or a							005A8B C9                  B  1200    				ret			
                           B  1201    
                           B  1202    ;----------------------------------------------
                           B  1203    
005A8C                     B  1204    fs_erase_file_command
                           B  1205    
                           B  1206    
005A8C CD 68 5D 00         B  1207    				call fs_find_filename			005A90 D8                  B  1208    				ret c
005A91 C0                  B  1209    				ret nz
                           B  1210    				
005A92 DDCB0B66            B  1211    				bit 4,(ix+0bh)					005A96 28 04               B  1212    				jr z,okdelf
005A98 3EC6                B  1213    				ld a,0c6h						005A9A B7                  B  1214    				or a
005A9B C9                  B  1215    				ret
                           B  1216    				
005A9C DDE5                B  1217    okdelf			push ix
005A9E E1                  B  1218    				pop hl
005A9F C3 88 58 00         B  1219    				jp fs_delco						                           B  1220    					
                           B  1221    
                           B  1222    ;----------------------------------------------
                           B  1223    
                           B  1224    
005AA3                     B  1225    fs_rename_command
                           B  1226    
005AA3 CD 68 5D 00         B  1227    				call fs_find_filename			005AA7 D8                  B  1228    				ret c							005AA8 FEC2                B  1229    				cp 0c2h							005AAA 28 04               B  1230    				jr z,fs_nfnok					005AAC 3EC9                B  1231    				ld a,0c9h						005AAE B7                  B  1232    				or a
005AAF C9                  B  1233    				ret
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 240


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B  1234    			
005AB0 21 90 60 00         B  1235    fs_nfnok		ld hl,fs_sought_filename		005AB4 11 A8 60 00         B  1236    				ld de,fs_filename_buffer
005AB8 010B0000            B  1237    				ld bc,11
005ABC EDB0                B  1238    				ldir
005ABE 21 9C 60 00         B  1239    				ld hl,fs_alt_filename			005AC2 11 90 60 00         B  1240    				ld de,fs_sought_filename
005AC6 010B0000            B  1241    				ld bc,11
005ACA EDB0                B  1242    				ldir
005ACC CD 68 5D 00         B  1243    				call fs_find_filename			005AD0 D8                  B  1244    				ret c
005AD1 FEC2                B  1245    				cp 0c2h
005AD3 C8                  B  1246    				ret z							                           B  1247    				
005AD4 DDE5                B  1248    				push ix
005AD6 D1                  B  1249    				pop de
005AD7 21 A8 60 00         B  1250    				ld hl,fs_filename_buffer	 	005ADB 010B0000            B  1251    				ld bc,11
005ADF EDB0                B  1252    				ldir							005AE1 CD 01 60 00         B  1253    				call fs_write_sector			                           B  1254    				
005AE5 AF                  B  1255    fs_rndone		xor a
005AE6 C9                  B  1256    				ret
                           B  1257    				
                           B  1258    
                           B  1259    ;----------------------------------------------
                           B  1260    
                           B  1261    
005AE7                     B  1262    fs_goto_first_dir_entry
                           B  1263    
005AE7 CD ED 1B 00         B  1264    				call fs_get_dir_cluster
005AEB ED53 DF 60 00       B  1265    				ld (fs_dir_entry_cluster),de
005AF0 AF                  B  1266    				xor a
005AF1 32 E5 60 00         B  1267    				ld (fs_dir_entry_sector),a		005AF5 11000000            B  1268    				ld de,0
005AF9 ED53 E2 60 00       B  1269    				ld (fs_dir_entry_line_offset),d
                           B  1270    				
                           B  1271    
                           B  1272    
005AFE                     B  1273    fs_get_dir_entry
                           B  1274    
                           B  1275    ; No input parameters.
                           B  1276    ;
                           B  1277    ; Returns HL    = Location of null terminated f
                           B  1278    ;         IX:IY = Length of file (if applicable
                           B  1279    ;         B     = File flag (1 = directory, 0 =
                           B  1280    ;         A     = Error code
                           B  1281    ;         Carry = Set if hardware error encount
                           B  1282    
                           B  1283    
005AFE 3A E5 60 00         B  1284    				ld a,(fs_dir_entry_sector)		005B02 4F                  B  1285    				ld c,a
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 241


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005B03 2A DF 60 00         B  1286    				ld hl,(fs_dir_entry_cluster)	005B07 CD 57 5F 00         B  1287    				call cluster_and_offset_to_lba
                           B  1288    			
005B0B 7C                  B  1289    				ld a,h							005B0C B5                  B  1290    				or l							005B0D 20 09               B  1291    				jr nz,nr_read					005B0F 2A 83 60 00         B  1292    				ld hl,(fs_root_dir_position)	005B13 79                  B  1293    				ld a,c
005B14 CD 9D 5F 00         B  1294    				call set_absolute_lba
                           B  1295    				
005B18 CD D8 5F 00         B  1296    nr_read			call fs_read_sector				005B1C D8                  B  1297    				ret c							                           B  1298    				
005B1D ED5B E2 60 00       B  1299    				ld de,(fs_dir_entry_line_offset
005B22 DD210008 00         B  1300    dscan_int_loop	ld ix,sector_buffer
005B27 DD19                B  1301    				add ix,de
005B29 DD7E00              B  1302    ds_int_loop		ld a,(ix)
005B2C B7                  B  1303    				or a							005B2D 28 0E               B  1304    				jr z,fs_dir_entry_free		
005B2F FEE5                B  1305    				cp 0e5h							005B31 28 0A               B  1306    				jr z,fs_dir_entry_free	
005B33 FE05                B  1307    				cp 05h							005B35 28 06               B  1308    				jr z,fs_dir_entry_free	
005B37 DDCB0B5E            B  1309    				bit 3,(ix+0bh)					005B3B 28 0D               B  1310    				jr z,fs_dir_entry_in_use		                           B  1311    
005B3D                     B  1312    fs_dir_entry_free
                           B  1313    
005B3D EB                  B  1314    				ex de,hl
005B3E 11200000            B  1315    				ld de,32
005B42 19                  B  1316    				add hl,de
005B43 EB                  B  1317    				ex de,hl
005B44 CB4A                B  1318    				bit 1,d
005B46 28 DA               B  1319    				jr z,dscan_int_loop
005B48 18 54               B  1320    				jr dscan_new_sect
                           B  1321    
005B4A                     B  1322    fs_dir_entry_in_use
                           B  1323    				
005B4A ED53 E2 60 00       B  1324    				ld (fs_dir_entry_line_offset),d
005B4F DDE5                B  1325    				push ix
005B51 E1                  B  1326    				pop hl
005B52 CD 13 12 00         B  1327    				call os_clear_output_line
005B56 0608                B  1328    				ld b,8							005B58 11 84 6E 00         B  1329    				ld de,output_line
005B5C 7E                  B  1330    dcopyn			ld a,(hl)
005B5D FE20                B  1331    				cp ' '							005B5F 28 02               B  1332    				jr z,digchar
005B61 12                  B  1333    				ld (de),a
005B62 13                  B  1334    				inc de
005B63 23                  B  1335    digchar			inc hl
005B64 10 F6               B  1336    				djnz dcopyn
005B66 7E                  B  1337    				ld a,(hl)						Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 242


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005B67 FE20                B  1338    				cp ' '							005B69 28 0A               B  1339    				jr z,dirnoex
005B6B 3E2E                B  1340    				ld a,'.'						005B6D 12                  B  1341    				ld (de),a
005B6E 13                  B  1342    				inc de	
005B6F 01030000            B  1343    				ld bc,3							005B73 EDB0                B  1344    				ldir
005B75 AF                  B  1345    dirnoex			xor a 
005B76 12                  B  1346    				ld (de),a						                           B  1347    				
005B77 47                  B  1348    				ld b,a
005B78 DDCB0B66            B  1349    				bit 4,(ix+0bh)					005B7C 28 01               B  1350    				jr z,fs_fniaf		
005B7E 04                  B  1351    				inc b							005B7F DD171C              B  1352    fs_fniaf		ld de,(ix+01ch)					005B82 DD4E1F              B  1353    				ld c,(ix+01fh)
005B85 21 84 6E 00         B  1354    				ld hl,output_line				005B89 AF                  B  1355    				xor a
005B8A C9                  B  1356    				ret
                           B  1357    
                           B  1358    
                           B  1359    
                           B  1360    
005B8B                     B  1361    fs_goto_next_dir_entry
                           B  1362    
005B8B 11200000            B  1363    				ld de,32
005B8F 2A E2 60 00         B  1364    				ld hl,(fs_dir_entry_line_offset
005B93 19                  B  1365    				add hl,de
005B94 22 E2 60 00         B  1366    				ld (fs_dir_entry_line_offset),h
005B98 CB4C                B  1367    				bit 1,h
005B9A CA FE 5A 00         B  1368    				jp z,fs_get_dir_entry
                           B  1369    
005B9E 21000000            B  1370    dscan_new_sect	ld hl,0				
005BA2 22 E2 60 00         B  1371    				ld (fs_dir_entry_line_offset),h
                           B  1372    			
005BA6 21 E5 60 00         B  1373    				ld hl,fs_dir_entry_sector
005BAA 34                  B  1374    				inc (hl)						                           B  1375    			
005BAB ED5B DF 60 00       B  1376    				ld de,(fs_dir_entry_cluster)
005BB0 7A                  B  1377    				ld a,d
005BB1 B3                  B  1378    				or e							005BB2 20 0B               B  1379    				jr nz,nonroot2
005BB4 3A 89 60 00         B  1380    				ld a,(fs_root_dir_sectors)
005BB8 BE                  B  1381    				cp (hl)
005BB9 28 23               B  1382    				jr z,endofdir			
005BBB C3 FE 5A 00         B  1383    				jp fs_get_dir_entry
                           B  1384    												005BBF 3A 79 60 00         B  1385    nonroot2		ld a,(fs_cluster_size)		
005BC3 BE                  B  1386    				cp (hl)							005BC4 C2 FE 5A 00         B  1387    				jp nz,fs_get_dir_entry
005BC8 3600                B  1388    				ld (hl),0						005BCA 2A DF 60 00         B  1389    				ld hl,(fs_dir_entry_cluster)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 243


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005BCE CD 80 5E 00         B  1390    				call get_fat_entry_for_cluster
005BD2 22 DF 60 00         B  1391    				ld (fs_dir_entry_cluster),hl
005BD6 CD 1F 5C 00         B  1392    				call fs_compare_hl_fff8			005BDA DA FE 5A 00         B  1393    				jp c,fs_get_dir_entry
                           B  1394    	
005BDE 3ED2                B  1395    endofdir		ld a,0d2h
005BE0 B7                  B  1396    				or a							005BE1 C9                  B  1397    				ret	
                           B  1398    				
                           B  1399    ;----------------------------------------------
                           B  1400    
005BE2                     B  1401    fs_get_volume_label
                           B  1402    
                           B  1403    
                           B  1404    ; On return HL = volume label
                           B  1405    
                           B  1406    
005BE2 2A 83 60 00         B  1407    				ld hl,(fs_root_dir_position)
005BE6 0E00                B  1408    				ld c,0
005BE8 AF                  B  1409    gvl_nrsec		xor a
005BE9 CD AE 5F 00         B  1410    				call set_abs_lba_and_read_secto
005BED D8                  B  1411    				ret c
005BEE 0610                B  1412    				ld b,16							005BF0 DD210008 00         B  1413    				ld ix,sector_buffer
005BF5 DD7E0B              B  1414    find_vl			ld a,(ix+0bh)
005BF8 FE08                B  1415    				cp 08h
005BFA 28 1A               B  1416    				jr z,got_label
005BFC ED3220              B  1417    				lea ix,ix+32					005BFF 10 F4               B  1418    				djnz find_vl					005C01 23                  B  1419    				inc hl
005C02 0C                  B  1420    				inc c
005C03 3A 89 60 00         B  1421    				ld a,(fs_root_dir_sectors)		005C07 B9                  B  1422    				cp c							005C08 20 DE               B  1423    				jr nz,gvl_nrsec
                           B  1424    			
005C0A CD C0 54 00         B  1425    				call fs_read_partition_bootsect
005C0E D8                  B  1426    				ret c
005C0F B7                  B  1427    				or a
005C10 C0                  B  1428    				ret nz
005C11 DD212B08 00         B  1429    				ld ix,sector_buffer+02bh
                           B  1430    				
005C16 DD360B00            B  1431    got_label		ld (ix+0bh),0					005C1A DDE5                B  1432    				push ix
005C1C E1                  B  1433    				pop hl
005C1D AF                  B  1434    				xor a
005C1E C9                  B  1435    				ret
                           B  1436    				
                           B  1437    				
                           B  1438    ;----------------------------------------------
                           B  1439    ; Internal subroutines
                           B  1440    ;----------------------------------------------
                           B  1441    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 244


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005C1F                     B  1442    fs_compare_hl_fff8
                           B  1443    
                           B  1444    ;INPUT HL = value to compare with fff8
                           B  1445    ;OUTPUT CARRY set if < $fff8, ZERO FLAG set if 
                           B  1446    	
                           B  1447    	
005C1F E5                  B  1448    				push hl
005C20 D5                  B  1449    				push de
005C21 11F8FF00            B  1450    				ld de,0fff8h			
005C25 B7                  B  1451    				or a							005C26 52ED52              B  1452    				sbc.s hl,de						005C29 D1                  B  1453    				pop de
005C2A E1                  B  1454    				pop hl
005C2B C9                  B  1455    				ret
                           B  1456    
                           B  1457    ;----------------------------------------------
                           B  1458    
                           B  1459    
005C2C                     B  1460    fs_find_free_cluster
                           B  1461    	
005C2C DD210000 00         B  1462    				ld ix,0							005C31 ED5B 7D 60 00       B  1463    				ld de,(fs_fat1_position)		005C36 AF                  B  1464    				xor a				
005C37 32 D2 60 00         B  1465    fs_ffcl2		ld (fs_working_sector),a	
005C3B D5                  B  1466    				push de
005C3C E1                  B  1467    				pop hl
005C3D 3A D2 60 00         B  1468    				ld a,(fs_working_sector)
005C41 CD AE 5F 00         B  1469    				call set_abs_lba_and_read_secto
005C45 D8                  B  1470    				ret c
005C46 21000800            B  1471    				ld hl,sector_buffer
005C4A 0600                B  1472    				ld b,0
005C4C 7E                  B  1473    fs_ffcl1		ld a,(hl)						005C4D 23                  B  1474    				inc hl
005C4E B6                  B  1475    				or (hl)
005C4F 23                  B  1476    				inc hl
005C50 28 14               B  1477    				jr z,fs_gotfc
005C52 DD23                B  1478    				inc ix
005C54 10 F6               B  1479    				djnz fs_ffcl1
                           B  1480    				
005C56 2A 8A 60 00         B  1481    				ld hl,(fs_sectors_per_fat)
005C5A 3A D2 60 00         B  1482    				ld a,(fs_working_sector)		005C5E 3C                  B  1483    				inc a				
005C5F BD                  B  1484    				cp l		
005C60 20 D5               B  1485    				jr nz,fs_ffcl2					005C62 3EC1                B  1486    fs_dfull		ld a,c1h						005C64 B7                  B  1487    				or a							005C65 C9                  B  1488    				ret
                           B  1489    			
005C66 DDE5                B  1490    fs_gotfc		push ix							005C68 E1                  B  1491    				pop hl							005C69 2B                  B  1492    				dec hl							005C6A 2B                  B  1493    				dec hl							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 245


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005C6B ED5B 8D 60 00       B  1494    				ld de,(fs_max_data_clusters)
005C70 AF                  B  1495    				xor a
005C71 52ED52              B  1496    				sbc.s hl,de						005C74 30 EC               B  1497    				jr nc,fs_dfull
                           B  1498    			
005C76 DD22 D6 60 00       B  1499    				ld (fs_free_cluster),ix
005C7B AF                  B  1500    				xor a
005C7C C9                  B  1501    				ret
                           B  1502    	
                           B  1503    	
                           B  1504    ;----------------------------------------------
                           B  1505    	
                           B  1506    	
005C7D                     B  1507    fs_find_free_dir_entry
                           B  1508    
                           B  1509    
                           B  1510    ; OUTPUT IX start of 32 byte dir entry in secto
                           B  1511    
                           B  1512    			
005C7D CD ED 1B 00         B  1513    				call fs_get_dir_cluster			005C81 EB                  B  1514    				ex de,hl
005C82 22 C6 60 00         B  1515    ffenxtclu		ld (fs_file_working_cluster),hl
005C86 AF                  B  1516    				xor a
005C87 32 D2 60 00         B  1517    				ld (fs_working_sector),a
                           B  1518    			
005C8B 2A 83 60 00         B  1519    ffenxtsec		ld hl,(fs_root_dir_position)	005C8F 3A D2 60 00         B  1520    				ld a,(fs_working_sector)
005C93 CD 9D 5F 00         B  1521    				call set_absolute_lba
                           B  1522    				
005C97 CD ED 1B 00         B  1523    				call fs_get_dir_cluster			005C9B 7A                  B  1524    				ld a,d
005C9C B3                  B  1525    				or e
005C9D 28 0C               B  1526    				jr z,at_rootd
005C9F 2A C6 60 00         B  1527    				ld hl,(fs_file_working_cluster)
005CA3 3A D2 60 00         B  1528    				ld a,(fs_working_sector)
005CA7 CD 57 5F 00         B  1529    				call cluster_and_offset_to_lba
                           B  1530    				
005CAB CD D8 5F 00         B  1531    at_rootd		call fs_read_sector
005CAF D8                  B  1532    				ret c
005CB0 0610                B  1533    				ld b,16							005CB2 11200000            B  1534    				ld de,32
005CB6 DD210008 00         B  1535    				ld ix,sector_buffer
005CBB DD7E00              B  1536    scdirfe			ld a,(ix)						005CBE B7                  B  1537    				or a
005CBF 28 65               B  1538    				jr z,got_fde
005CC1 FEE5                B  1539    				cp 0e5h
005CC3 28 61               B  1540    				jr z,got_fde
005CC5 DD19                B  1541    				add ix,de						005CC7 10 F2               B  1542    				djnz scdirfe					                           B  1543    				
005CC9 21 D2 60 00         B  1544    				ld hl,fs_working_sector			005CCD 34                  B  1545    				inc (hl)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 246


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B  1546    				
005CCE CD ED 1B 00         B  1547    				call fs_get_dir_cluster			005CD2 7A                  B  1548    				ld a,d
005CD3 B3                  B  1549    				or e
005CD4 20 0B               B  1550    				jr nz,ffenotroo
005CD6 3A 89 60 00         B  1551    				ld a,(fs_root_dir_sectors)		005CDA BE                  B  1552    				cp (hl)							005CDB 20 AE               B  1553    				jr nz,ffenxtsec
005CDD 3EC3                B  1554    fenotfnd		ld a,0c3h						005CDF B7                  B  1555    				or a
005CE0 C9                  B  1556    				ret
                           B  1557    			
005CE1 3A 79 60 00         B  1558    ffenotroo		ld a,(fs_cluster_size)			005CE5 BE                  B  1559    				cp (hl)
005CE6 20 A3               B  1560    				jr nz,ffenxtsec
005CE8 2A C6 60 00         B  1561    				ld hl,(fs_file_working_cluster)
005CEC CD 80 5E 00         B  1562    				call get_fat_entry_for_cluster	005CF0 D8                  B  1563    				ret c
005CF1 CD 1F 5C 00         B  1564    				call fs_compare_hl_fff8			005CF5 38 8B               B  1565    				jr c,ffenxtclu
                           B  1566    			
005CF7 CD 2C 5C 00         B  1567    				call fs_find_free_cluster		005CFB D8                  B  1568    				ret c							005CFC C0                  B  1569    				ret nz							005CFD ED5B D6 60 00       B  1570    				ld de,(fs_free_cluster)
005D02 2A C6 60 00         B  1571    				ld hl,(fs_file_working_cluster)
005D06 CD AC 5E 00         B  1572    				call update_fat_entry_for_clust
005D0A D8                  B  1573    				ret c
005D0B EB                  B  1574    				ex de,hl						005D0C 11FFFF00            B  1575    				ld de,0ffffh
005D10 CD AC 5E 00         B  1576    				call update_fat_entry_for_clust
005D14 D8                  B  1577    				ret c
                           B  1578    			
005D15 2A D6 60 00         B  1579    				ld hl,(fs_free_cluster)			005D19 CD 28 5D 00         B  1580    				call fs_clear_cluster			005D1D D8                  B  1581    				ret c
005D1E 2A D6 60 00         B  1582    				ld hl,(fs_free_cluster)			005D22 C3 82 5C 00         B  1583    				jp ffenxtclu					                           B  1584    			
005D26 AF                  B  1585    got_fde			xor a
005D27 C9                  B  1586    				ret
                           B  1587    					
                           B  1588    
                           B  1589    ;----------------------------------------------
                           B  1590    
005D28                     B  1591    fs_clear_cluster
                           B  1592    
                           B  1593    ;INPUT HL = cluster to clear
                           B  1594    
005D28 22 D3 60 00         B  1595    				ld (fs_working_cluster),hl
                           B  1596    			
005D2C CD 54 5D 00         B  1597    				call fs_clear_sector_buffer
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 247


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B  1598    					
005D30 AF                  B  1599    				xor a				
005D31 32 D2 60 00         B  1600    				ld (fs_working_sector),a		005D35 3A D2 60 00         B  1601    wipeclulp		ld a,(fs_working_sector)		005D39 2A D3 60 00         B  1602    				ld hl,(fs_working_cluster)		005D3D CD 57 5F 00         B  1603    				call cluster_and_offset_to_lba	005D41 CD 01 60 00         B  1604    				call fs_write_sector
005D45 D8                  B  1605    				ret c
005D46 21 D2 60 00         B  1606    				ld hl,fs_working_sector
005D4A 34                  B  1607    				inc (hl)
005D4B 3A 79 60 00         B  1608    				ld a,(fs_cluster_size)
005D4F BE                  B  1609    				cp (hl)
005D50 20 E3               B  1610    				jr nz,wipeclulp
005D52 AF                  B  1611    				xor a
005D53 C9                  B  1612    				ret
                           B  1613    			
                           B  1614    			
005D54                     B  1615    fs_clear_sector_buffer
                           B  1616    			
005D54 E5                  B  1617    				push hl
005D55 D5                  B  1618    				push de
005D56 C5                  B  1619    				push bc
005D57 21000800            B  1620    				ld hl,sector_buffer			
005D5B 01000200            B  1621    				ld bc,512				
005D5F AF                  B  1622    				xor a				
005D60 CD 13 17 00         B  1623    				call os_bchl_memfill	
005D64 C1                  B  1624    				pop bc
005D65 D1                  B  1625    				pop de
005D66 E1                  B  1626    				pop hl
005D67 C9                  B  1627    				ret
                           B  1628    				
                           B  1629    
                           B  1630    	
                           B  1631    ;----------------------------------------------
                           B  1632    	
005D68                     B  1633    fs_find_filename
                           B  1634    
005D68 AF                  B  1635    				xor a
                           B  1636    
005D69                     B  1637    fs_search	
                           B  1638    				
005D69 32 ED 60 00         B  1639    				ld (fs_search_type),a
                           B  1640    			
                           B  1641    ; OUTPUT IX start of 32 byte dir entry
                           B  1642    			
005D6D CD ED 1B 00         B  1643    				call fs_get_dir_cluster
005D71 ED53 C6 60 00       B  1644    ffnnxtclu		ld (fs_file_working_cluster),de
005D76 AF                  B  1645    				xor a
005D77 32 D2 60 00         B  1646    				ld (fs_working_sector),a
                           B  1647    			
005D7B 2A 83 60 00         B  1648    ffnnxtsec		ld hl,(fs_root_dir_position)	005D7F 3A D2 60 00         B  1649    				ld a,(fs_working_sector)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 248


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005D83 CD 9D 5F 00         B  1650    				call set_absolute_lba
                           B  1651    				
005D87 CD ED 1B 00         B  1652    				call fs_get_dir_cluster			005D8B 7A                  B  1653    				ld a,d
005D8C B3                  B  1654    				or e
005D8D 28 0C               B  1655    				jr z,at_rootd2
005D8F 2A C6 60 00         B  1656    				ld hl,(fs_file_working_cluster)
005D93 3A D2 60 00         B  1657    				ld a,(fs_working_sector)
005D97 CD 57 5F 00         B  1658    				call cluster_and_offset_to_lba	                           B  1659    				
005D9B CD D8 5F 00         B  1660    at_rootd2		call fs_read_sector
005D9F D8                  B  1661    				ret c
005DA0 0E10                B  1662    				ld c,16							005DA2 DD210008 00         B  1663    				ld ix,sector_buffer
005DA7 DDE5                B  1664    ndirentr		push ix
005DA9 D1                  B  1665    				pop de
005DAA 3A ED 60 00         B  1666    				ld a,(fs_search_type)
005DAE B7                  B  1667    				or a
005DAF 28 1E               B  1668    				jr z,fs_ststr
                           B  1669    			
005DB1 DD7E00              B  1670    				ld a,(ix)						005DB4 FE80                B  1671    				cp 080h							005DB6 30 35               B  1672    				jr nc,fnnotsame
005DB8 FE20                B  1673    				cp 020h
005DBA 38 31               B  1674    				jr c,fnnotsame
005DBC ED5B EA 60 00       B  1675    				ld de,(fs_stash_dir_block)		005DC1 DD7E1A              B  1676    				ld a,(ix+01ah)
005DC4 BB                  B  1677    				cp e
005DC5 20 26               B  1678    				jr nz,fnnotsame
005DC7 DD7E1B              B  1679    				ld a,(ix+01bh)
005DCA BA                  B  1680    				cp d
005DCB 28 1E               B  1681    				jr z,fs_found
005DCD 18 1E               B  1682    				jr fnnotsame
                           B  1683    				
005DCF FD21 90 60 00       B  1684    fs_ststr		ld iy,fs_sought_filename		005DD4 060B                B  1685    				ld b,11							005DD6 1A                  B  1686    cmpfnlp			ld a,(de)						005DD7 CD 07 14 00         B  1687    				call os_uppercasify				005DDB 6F                  B  1688    				ld l,a
005DDC FD7E00              B  1689    				ld a,(iy)
005DDF CD 07 14 00         B  1690    				call os_uppercasify
005DE3 BD                  B  1691    				cp l				
005DE4 20 07               B  1692    				jr nz,fnnotsame
005DE6 FD23                B  1693    				inc iy
005DE8 13                  B  1694    				inc de
005DE9 10 EB               B  1695    				djnz cmpfnlp
005DEB AF                  B  1696    fs_found		xor a							005DEC C9                  B  1697    				ret
                           B  1698    			
005DED 11200000            B  1699    fnnotsame		ld de,32						005DF1 DD19                B  1700    				add ix,de
005DF3 0D                  B  1701    				dec c
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 249


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005DF4 20 B1               B  1702    				jr nz,ndirentr					                           B  1703    				
005DF6 21 D2 60 00         B  1704    				ld hl,fs_working_sector			005DFA 34                  B  1705    				inc (hl)
                           B  1706    				
005DFB CD ED 1B 00         B  1707    				call fs_get_dir_cluster			005DFF 7A                  B  1708    				ld a,d
005E00 B3                  B  1709    				or e
005E01 20 0D               B  1710    				jr nz,notrootdir
005E03 3A 89 60 00         B  1711    				ld a,(fs_root_dir_sectors)		005E07 BE                  B  1712    				cp (hl)							005E08 C2 7B 5D 00         B  1713    				jp nz,ffnnxtsec
005E0C 3EC2                B  1714    fnnotfnd		ld a,0c2h						005E0E B7                  B  1715    				or a
005E0F C9                  B  1716    				ret
                           B  1717    			
005E10                     B  1718    notrootdir
                           B  1719    				
005E10 3A 79 60 00         B  1720    				ld a,(fs_cluster_size)			005E14 BE                  B  1721    				cp (hl)
005E15 C2 7B 5D 00         B  1722    				jp nz,ffnnxtsec
                           B  1723    				
005E19 2A C6 60 00         B  1724    				ld hl,(fs_file_working_cluster)
005E1D CD 80 5E 00         B  1725    				call get_fat_entry_for_cluster
005E21 D8                  B  1726    				ret c
005E22 CD 1F 5C 00         B  1727    				call fs_compare_hl_fff8			005E26 30 E4               B  1728    				jr nc,fnnotfnd					005E28 EB                  B  1729    				ex de,hl						005E29 C3 71 5D 00         B  1730    				jp ffnnxtclu					                           B  1731    				
                           B  1732    
                           B  1733    ;----------------------------------------------
                           B  1734    
005E2D                     B  1735    fs_hl_to_alt_filename
                           B  1736    
005E2D 11 9C 60 00         B  1737    				ld de,fs_alt_filename
005E31 18 04               B  1738    				jr hltofngo
                           B  1739    
                           B  1740    
005E33                     B  1741    fs_hl_to_filename
                           B  1742    
                           B  1743    ;INPUT: HL = address of filename (null / space 
                           B  1744    ;OUTPUT HL = address of first character after f
                           B  1745    ;        C = number of characters in filename
                           B  1746    
005E33 11 90 60 00         B  1747    				ld de,fs_sought_filename
005E37 CD 4A 5F 00         B  1748    hltofngo		call fs_clear_filename			005E3B D5                  B  1749    				push de			
005E3C DDE1                B  1750    				pop ix							                           B  1751    				
005E3E 0E00                B  1752    				ld c,0
005E40 0608                B  1753    				ld b,8
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 250


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005E42 7E                  B  1754    csfnlp2			ld a,(hl)						005E43 B7                  B  1755    				or a
005E44 C8                  B  1756    				ret z							005E45 FE20                B  1757    				cp 32
005E47 C8                  B  1758    				ret z							005E48 FE2F                B  1759    				cp 02fh
005E4A C8                  B  1760    				ret z							005E4B FE2E                B  1761    				cp '.'
005E4D 28 1A               B  1762    				jr z,dofn_ext					005E4F CD 07 14 00         B  1763    				call os_uppercasify
005E53 12                  B  1764    				ld (de),a
005E54 13                  B  1765    				inc de
005E55 23                  B  1766    				inc hl
005E56 0C                  B  1767    				inc c							005E57 10 E9               B  1768    				djnz csfnlp2					005E59 7E                  B  1769    find_ext		ld a,(hl)
005E5A FE2E                B  1770    				cp '.'							005E5C 28 0B               B  1771    				jr z,dofn_ext	
005E5E FE20                B  1772    				cp ' '							005E60 C8                  B  1773    				ret z
005E61 FE2F                B  1774    				cp 02fh
005E63 C8                  B  1775    				ret z
005E64 B7                  B  1776    				or a
005E65 C8                  B  1777    				ret z
005E66 23                  B  1778    				inc hl
005E67 18 F0               B  1779    				jr find_ext
                           B  1780    				
005E69 23                  B  1781    dofn_ext		inc hl							005E6A 0603                B  1782    				ld b,3				
005E6C 7E                  B  1783    fnextlp			ld a,(hl)						005E6D B7                  B  1784    				or a
005E6E C8                  B  1785    				ret z							005E6F FE20                B  1786    				cp 32
005E71 C8                  B  1787    				ret z
005E72 CD 07 14 00         B  1788    				call os_uppercasify
005E76 DD7708              B  1789    				ld (ix+8),a
005E79 DD23                B  1790    				inc ix
005E7B 23                  B  1791    				inc hl
005E7C 0C                  B  1792    				inc c
005E7D 10 ED               B  1793    				djnz fnextlp
005E7F C9                  B  1794    				ret
                           B  1795    				
                           B  1796    ;----------------------------------------------
                           B  1797    
                           B  1798    
005E80                     B  1799    get_fat_entry_for_cluster
                           B  1800    
                           B  1801    ; INPUT: HL = cluster in question, OUTPUT: HL =
                           B  1802    
005E80 C5                  B  1803    				push bc
005E81 D5                  B  1804    				push de
005E82 01000000            B  1805    				ld bc,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 251


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005E86 4D                  B  1806    				ld c,l
005E87 7C                  B  1807    				ld a,h
005E88 2A 7D 60 00         B  1808    				ld hl,(fs_fat1_position)
005E8C CD AE 5F 00         B  1809    				call set_abs_lba_and_read_secto
005E90 38 17               B  1810    				jr c,hwerr
005E92 DDE5                B  1811    				push ix
005E94 DD210008 00         B  1812    				ld ix,sector_buffer
005E99 DD09                B  1813    				add ix,bc
005E9B DD09                B  1814    				add ix,bc
005E9D 21000000            B  1815    				ld hl,0
005EA1 DD6E00              B  1816    				ld l,(ix)
005EA4 DD6601              B  1817    				ld h,(ix+1)
005EA7 DDE1                B  1818    				pop ix
005EA9 D1                  B  1819    hwerr			pop de
005EAA C1                  B  1820    				pop bc
005EAB C9                  B  1821    				ret
                           B  1822    
                           B  1823    
                           B  1824    ;----------------------------------------------
                           B  1825    
                           B  1826    
005EAC                     B  1827    update_fat_entry_for_cluster
                           B  1828    
                           B  1829    ; INPUT: HL = cluster in question
                           B  1830    ;        DE = new value to put in FAT tables
                           B  1831    			
005EAC C5                  B  1832    				push bc
005EAD E5                  B  1833    				push hl
005EAE 01000000            B  1834    				ld bc,0
005EB2 4D                  B  1835    				ld c,l
005EB3 7C                  B  1836    				ld a,h
005EB4 2A 7D 60 00         B  1837    				ld hl,(fs_fat1_position)		005EB8 CD CC 5E 00         B  1838    				call fat_upd
005EBC 38 0B               B  1839    				jr c,fup_end
                           B  1840    			
005EBE E1                  B  1841    				pop hl
005EBF E5                  B  1842    				push hl
005EC0 7C                  B  1843    				ld a,h
005EC1 2A 80 60 00         B  1844    				ld hl,(fs_fat2_position)		005EC5 CD CC 5E 00         B  1845    				call fat_upd
005EC9 E1                  B  1846    fup_end			pop hl
005ECA C1                  B  1847    				pop bc
005ECB C9                  B  1848    				ret
                           B  1849    			
                           B  1850    			
005ECC CD AE 5F 00         B  1851    fat_upd			call set_abs_lba_and_read_secto
005ED0 38 0D               B  1852    				jr c,ufehwerr
005ED2 21000800            B  1853    				ld hl,sector_buffer
005ED6 09                  B  1854    				add hl,bc
005ED7 09                  B  1855    				add hl,bc
005ED8 73                  B  1856    				ld (hl),e
005ED9 23                  B  1857    				inc hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 252


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005EDA 72                  B  1858    				ld (hl),d
005EDB CD 01 60 00         B  1859    				call fs_write_sector
005EDF C9                  B  1860    ufehwerr		ret
                           B  1861    				
                           B  1862    	
                           B  1863    ;----------------------------------------------
                           B  1864    
005EE0                     B  1865    transfer_length_countdown
                           B  1866    
005EE0 E5                  B  1867    				push hl							005EE1 C5                  B  1868    				push bc
                           B  1869    			
005EE2 0604                B  1870    				ld b,4
005EE4 21 B4 60 00         B  1871    				ld hl,fs_file_pointer			005EE8 34                  B  1872    fpinclp			inc (hl)
005EE9 20 03               B  1873    				jr nz,fs_fpino
005EEB 23                  B  1874    				inc hl
005EEC 10 FA               B  1875    				djnz fpinclp
                           B  1876    				
005EEE 2A C0 60 00         B  1877    fs_fpino		ld hl,(fs_file_transfer_length)
005EF2 2B                  B  1878    				dec hl
005EF3 22 C0 60 00         B  1879    				ld (fs_file_transfer_length),hl
005EF7 01000000            B  1880    				ld bc,0
005EFB B7                  B  1881    				or a
005EFC ED4A                B  1882    				adc hl,bc						                           B  1883    				
005EFE C1                  B  1884    				pop bc
005EFF E1                  B  1885    				pop hl
005F00 C9                  B  1886    				ret
                           B  1887    
                           B  1888    ;----------------------------------------------
                           B  1889    
005F01                     B  1890    fs_get_current_dir_name
                           B  1891    
                           B  1892    ;returns current dir name - location at HL
                           B  1893    
005F01 CD ED 1B 00         B  1894    				call fs_get_dir_cluster			005F05 7A                  B  1895    				ld a,d
005F06 B3                  B  1896    				or e
005F07 20 10               B  1897    				jr nz,fs_dnnr
005F09 21 32 6C 00         B  1898    				ld hl,vol_txt+1					005F0D 3A 2D 6C 00         B  1899    				ld a,(current_volume)
005F11 C630                B  1900    				add a,030h
005F13 32 35 6C 00         B  1901    				ld (vol_txt+4),a
005F17 AF                  B  1902    				xor a
005F18 C9                  B  1903    				ret
                           B  1904    					
005F19 ED53 EA 60 00       B  1905    fs_dnnr			ld (fs_stash_dir_block),de
005F1E CD 74 55 00         B  1906    				call fs_parent_dir_command		005F22 D8                  B  1907    				ret c
005F23 B7                  B  1908    				or a
005F24 C0                  B  1909    				ret nz
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 253


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005F25 3E01                B  1910    				ld a,1
005F27 CD 69 5D 00         B  1911    				call fs_search					005F2B D8                  B  1912    				ret c
005F2C C0                  B  1913    				ret nz
                           B  1914    					
005F2D DDE5                B  1915    fs_gdbn			push ix
005F2F E1                  B  1916    				pop hl
005F30 060B                B  1917    				ld b,11							005F32 7E                  B  1918    ntdirn			ld a,(hl)
005F33 FE20                B  1919    				cp ' '
005F35 28 03               B  1920    				jr z,rdirfsp
005F37 23                  B  1921    				inc hl
005F38 10 F8               B  1922    rdirnsp			djnz ntdirn
                           B  1923    				
005F3A 3600                B  1924    rdirfsp			ld (hl),0
005F3C DDE5                B  1925    				push ix
005F3E ED5B EA 60 00       B  1926    				ld de,(fs_stash_dir_block)
005F43 CD F9 1B 00         B  1927    				call fs_update_dir_cluster		005F47 E1                  B  1928    				pop hl	
005F48 AF                  B  1929    				xor a							005F49 C9                  B  1930    				ret
                           B  1931    
                           B  1932    			
                           B  1933    ;----------------------------------------------
                           B  1934    
005F4A                     B  1935    fs_clear_filename
                           B  1936    
005F4A D5                  B  1937    				push de							005F4B C5                  B  1938    				push bc
005F4C 060C                B  1939    				ld b,12
005F4E 3E20                B  1940    				ld a,' '
005F50 12                  B  1941    clrfnlp			ld (de),a
005F51 13                  B  1942    				inc de
005F52 10 FC               B  1943    				djnz clrfnlp
005F54 C1                  B  1944    				pop bc
005F55 D1                  B  1945    				pop de
005F56 C9                  B  1946    				ret
                           B  1947    				
                           B  1948    ;----------------------------------------------
                           B  1949    
                           B  1950    
005F57                     B  1951    cluster_and_offset_to_lba
                           B  1952    
                           B  1953    ; INPUT: HL = cluster, A = sector offset, OUTPU
                           B  1954    
005F57 C5                  B  1955    				push bc
005F58 D5                  B  1956    				push de
005F59 E5                  B  1957    				push hl
005F5A DDE5                B  1958    				push ix
                           B  1959    
005F5C 2B                  B  1960    				dec hl							005F5D 2B                  B  1961    				dec hl							Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 254


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005F5E 11000000            B  1962    				ld de,0							005F62 01000000            B  1963    				ld bc,0
005F66 5F                  B  1964    				ld e,a
005F67 3A 79 60 00         B  1965    				ld a,(fs_cluster_size)			005F6B CB3F                B  1966    caotllp			srl a
005F6D 28 03               B  1967    				jr z,clusdone
005F6F 29                  B  1968    				add hl,hl						005F70 18 F9               B  1969    				jr caotllp
                           B  1970    			
005F72 ED4B 86 60 00       B  1971    clusdone		ld bc,(fs_data_area)			005F77 09                  B  1972    				add hl,bc						005F78 19                  B  1973    				add hl,de						                           B  1974    				
005F79 E5                  B  1975    add_ptn_offset	push hl							005F7A CD 27 1C 00         B  1976    				call fs_calc_volume_offset
005F7E DD21 59 6C 00       B  1977    				ld ix,volume_mount_list
005F83 DD19                B  1978    				add ix,de
005F85 E1                  B  1979    				pop hl
005F86 DD0708              B  1980    				ld bc,(ix+08h)					005F89 DD7E0B              B  1981    				ld a,(ix+0bh)
005F8C 09                  B  1982    				add hl,bc
005F8D CE00                B  1983    				adc a,0
005F8F 22 10 6E 00         B  1984    				ld (sector_lba0),hl				005F93 32 13 6E 00         B  1985    				ld (sector_lba3),a				                           B  1986    				
005F97 DDE1                B  1987    				pop ix
005F99 E1                  B  1988    				pop hl
005F9A D1                  B  1989    				pop de
005F9B C1                  B  1990    				pop bc
005F9C C9                  B  1991    				ret
                           B  1992    				
                           B  1993    
                           B  1994    ;----------------------------------------------
                           B  1995    
005F9D                     B  1996    set_absolute_lba
                           B  1997    
                           B  1998    ; set A to sector offset, HL to sectors from st
                           B  1999    
005F9D C5                  B  2000    				push bc							005F9E D5                  B  2001    				push de							005F9F E5                  B  2002    				push hl							005FA0 DDE5                B  2003    				push ix							005FA2 01000000            B  2004    				ld bc,0
005FA6 11000000            B  2005    				ld de,0
005FAA 5F                  B  2006    				ld e,a
005FAB 19                  B  2007    				add hl,de
005FAC 18 CB               B  2008    				jr add_ptn_offset		
                           B  2009    				
                           B  2010    
005FAE                     B  2011    set_abs_lba_and_read_sector
                           B  2012    
005FAE CD 9D 5F 00         B  2013    				call set_absolute_lba
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 255


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
005FB2 C3 D8 5F 00         B  2014    				jp fs_read_sector
                           B  2015    				
                           B  2016    ;----------------------------------------------
                           B  2017    
                           B  2018    
005FB6                     B  2019    backup_sector_lba
                           B  2020    
005FB6 C5                  B  2021    				push bc
005FB7 D5                  B  2022    				push de
005FB8 E5                  B  2023    				push hl
005FB9 21 10 6E 00         B  2024    				ld hl,sector_lba0
005FBD 11 EE 60 00         B  2025    				ld de,fs_backed_up_sector_lba0
005FC1 01040000            B  2026    lbabur			ld bc,4
005FC5 EDB0                B  2027    				ldir
005FC7 E1                  B  2028    				pop hl
005FC8 D1                  B  2029    				pop de
005FC9 C1                  B  2030    				pop bc
005FCA C9                  B  2031    				ret
                           B  2032    
                           B  2033    
005FCB                     B  2034    restore_sector_lba
                           B  2035    
005FCB C5                  B  2036    				push bc
005FCC D5                  B  2037    				push de
005FCD E5                  B  2038    				push hl
005FCE 21 EE 60 00         B  2039    				ld hl,fs_backed_up_sector_lba0
005FD2 11 10 6E 00         B  2040    				ld de,sector_lba0
005FD6 18 E9               B  2041    				jr lbabur	
                           B  2042    					
                           B  2043    ;----------------------------------------------
                           B  2044    
005FD8                     B  2045    fs_read_sector
                           B  2046    			
005FD8 C5                  B  2047    				push bc
005FD9 D5                  B  2048    				push de
005FDA E5                  B  2049    				push hl
005FDB DDE5                B  2050    				push ix
005FDD FDE5                B  2051    				push iy
005FDF 01040000            B  2052    				ld bc,04h						005FE3 CD 12 60 00         B  2053    				call sector_access_redirect
005FE7 2A 10 6E 00         B  2054    secaccend		ld hl,(sector_lba0)
005FEB 22 F2 60 00         B  2055    				ld (fs_sector_last_read_lba0),h
005FEF 3A 13 6E 00         B  2056    				ld a,(sector_lba0+3)
005FF3 32 F5 60 00         B  2057    				ld (fs_sector_last_read_lba0+3)
005FF7 FDE1                B  2058    				pop iy
005FF9 DDE1                B  2059    				pop ix
005FFB E1                  B  2060    				pop hl
005FFC D1                  B  2061    				pop de
005FFD C1                  B  2062    				pop bc
005FFE C8                  B  2063    				ret z							005FFF 37                  B  2064    				scf								006000 C9                  B  2065    				ret								Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 256


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
                           B  2066    
                           B  2067    
006001                     B  2068    fs_write_sector	
                           B  2069    				
006001 C5                  B  2070    				push bc
006002 D5                  B  2071    				push de
006003 E5                  B  2072    				push hl
006004 DDE5                B  2073    				push ix
006006 FDE5                B  2074    				push iy
006008 01080000            B  2075    				ld bc,08h						00600C CD 12 60 00         B  2076    				call sector_access_redirect
006010 18 D5               B  2077    				jr secaccend
                           B  2078    
                           B  2079    
                           B  2080    
006012                     B  2081    sector_access_redirect
                           B  2082    
                           B  2083    	
006012 3A 2E 6C 00         B  2084    				ld a,(current_driver)			006016 CD BF 1B 00         B  2085    				call locate_driver_base			00601A EB                  B  2086    				ex de,hl
00601B 09                  B  2087    				add hl,bc						00601C E9                  B  2088    				jp (hl)
                           B  2089    
                           B  2090    ;----------------------------------------------
                           B  2091    
00601D                     B  2092    fs_is_same_sector_in_buffer
                           B  2093    				
00601D E5                  B  2094    				push hl
00601E D5                  B  2095    				push de
00601F 2A 10 6E 00         B  2096    				ld hl,(sector_lba0)
006023 ED5B F2 60 00       B  2097    				ld de,(fs_sector_last_read_lba0
006028 AF                  B  2098    				xor a
006029 ED52                B  2099    				sbc hl,de
00602B 20 0A               B  2100    				jr nz,fs_notsamsec
00602D 3A 13 6E 00         B  2101    				ld a,(sector_lba0+3)
006031 6F                  B  2102    				ld l,a
006032 3A F5 60 00         B  2103    				ld a,(fs_sector_last_read_lba0+
006036 BD                  B  2104    				cp l
006037 D1                  B  2105    fs_notsamsec	pop de
006038 E1                  B  2106    				pop hl
006039 C9                  B  2107    				ret
                           B  2108    
                           B  2109    ;----------------------------------------------
                           B  2110    	
00603A                     B  2111    bootsector_stub
                           B  2112    
00603A EB3C904D 53444F53   B  2113    				db  0EBh,03Ch,090h,04Dh,053h,04
006042 352E3000 02004000 
00604A 02000200 00F8F200   B  2114    				db  002h,000h,002h,000h,000h,0F
006052 3F00FF00 00000000 
00605A 00000000 000029C4   B  2115    				db  000h,000h,000h,000h,000h,00
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 257


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
006062 E636984E 4F204E41 
00606A 4D452020 20204641   B  2116    				db  04Dh,045h,020h,020h,020h,02
006072 54313620 2020C3 
                           B  2117    
                           B  2118    ;----------------------------------------------
                           B  2119    
006079 00                  B  2120    fs_cluster_size				db 0
00607A 000000              B  2121    fs_bytes_per_cluster		dw24 0
00607D 000000              B  2122    fs_fat1_position			dw24 0		; offse
006080 000000              B  2123    fs_fat2_position			dw24 0		; offse
006083 000000              B  2124    fs_root_dir_position		dw24 0		; offse
006086 000000              B  2125    fs_data_area				dw24 0		; offse
006089 00                  B  2126    fs_root_dir_sectors			db 0
                           B  2127    
00608A 000000              B  2128    fs_sectors_per_fat			dw24 0
00608D 000000              B  2129    fs_max_data_clusters		dw24 0
                           B  2130    
006090 00 00 00 00 00 00   B  2131    fs_sought_filename			blkb 12,0
006096 00 00 00 00 00 00 
00609C 00 00 00 00 00 00   B  2132    fs_alt_filename				blkb 12,0
0060A2 00 00 00 00 00 00 
0060A8 00 00 00 00 00 00   B  2133    fs_filename_buffer			blkb 12,0
0060AE 00 00 00 00 00 00 
                           B  2134    
0060B4 00000000            B  2135    fs_file_pointer				dw 0,0		; 32 bi
0060B8 00000000            B  2136    fs_file_length				dw 0,0		; 32 bi
0060BC 00000000            B  2137    fs_existing_file_length 	dw 0,0		; 32 bi
                           B  2138    
0060C0 000000              B  2139    fs_file_transfer_length		dw24 0		; 24 bi
                           B  2140    
0060C3 000000              B  2141    fs_file_start_cluster		dw24 0
0060C6 000000              B  2142    fs_file_working_cluster		dw24 0
                           B  2143    
0060C9 000000              B  2144    fs_ez80_address				dw24 0
0060CC 000000              B  2145    fs_ez80_working_address		dw24 0
                           B  2146    
0060CF 000000              B  2147    fs_in_sector_offset			dw24 0
0060D2 00                  B  2148    fs_working_sector			db 0
                           B  2149    
0060D3 000000              B  2150    fs_working_cluster			dw24 0
0060D6 000000              B  2151    fs_free_cluster				dw24 0
0060D9 000000              B  2152    fs_new_file_cluster			dw24 0
                           B  2153    
0060DC 000000              B  2154    fs_fname_in_sector_addr		dw24 0
                           B  2155    
0060DF 000000              B  2156    fs_dir_entry_cluster		dw24 0
0060E2 000000              B  2157    fs_dir_entry_line_offset	dw24 0
0060E5 00                  B  2158    fs_dir_entry_sector			db 0
                           B  2159    
0060E6 00                  B  2160    fs_filepointer_valid		db 0
0060E7 000000              B  2161    fs_sector_pos_cnt			dw24 0
                           B  2162    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 258


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_fat16_code_v0C.asm
0060EA 000000              B  2163    fs_stash_dir_block	 		dw24 0
                           B  2164    
0060ED 00                  B  2165    fs_search_type				db 0
                           B  2166    
0060EE 00000000            B  2167    fs_backed_up_sector_lba0	db 0,0,0,0
                           B  2168    
0060F2 00000000            B  2169    fs_sector_last_read_lba0	db 0,0,0,0
                           B  2170    
0060F6 000000              B  2171    partition_size				dw24 0			;24
0060F9 00000000            B  2172    partition_base				db 0,0,0,0		;32
                           B  2173    
                           B  2174    ;----------------------------------------------
                           B  2175    
                           A  3874    
                           A  3875    ;----------------------------------------------
                           A  3876    ; OS Data 
                           A  3877    ;----------------------------------------------
                           A  3878    
                           A  3879    
                           B     0    	include		'prose_data.asm'				                           B     1    ;**************
                           B     2    ;* PROSE DATA *
                           B     3    ;**************
                           B     4    
                           B     5    ;----------------------------------------------
                           B     6    ; kernal routine locations
                           B     7    ;----------------------------------------------
                           B     8    
0060FD                     B     9    kernal_table
                           B    10    
0060FD B21900              B    11    	dw24 ext_mount_volumes			;00		
006100 581900              B    12    	dw24 os_get_device_info			;01		
006103 1A1800              B    13    	dw24 os_check_volume_format		;02		
006106 481C00              B    14    	dw24 ext_change_volume			;03		
006109 6B1900              B    15    	dw24 os_get_volume_info			;04		
00610C 251800              B    16    	dw24 ext_format					;05		
00610F 4C1800              B    17    	dw24 ext_make_dir				;06		
006112 5A1800              B    18    	dw24 ext_change_dir				;07		
006115 681800              B    19    	dw24 os_parent_dir				;08		
006118 6E1800              B    20    	dw24 os_root_dir				;09		
00611B B41800              B    21    	dw24 ext_delete_dir				;0a		
00611E AE1700              B    22    	dw24 ext_find_file				;0b		
006121 C81700              B    23    	dw24 ext_set_file_pointer		;0c		
006124 C11700              B    24    	dw24 os_set_load_length			;0d		
006127 DB1700              B    25    	dw24 ext_read_bytes_from_file	;0e		
00612A 741800              B    26    	dw24 ext_erase_file				;0f		
00612D 9A1800              B    27    	dw24 ext_rename_file			;10		
006130 EA1700              B    28    	dw24 ext_create_file			;11		
006133 FB1700              B    29    	dw24 ext_write_bytes_to_file	;12		
006136 161C00              B    30    	dw24 fs_get_total_sectors		;13		
006139 821800              B    31    	dw24 os_goto_first_dir_entry	;14		 
00613C 881800              B    32    	dw24 os_get_dir_entry			;15		
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 259


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
00613F 8E1800              B    33    	dw24 os_goto_next_dir_entry		;16		
006142 C41800              B    34    	dw24 ext_read_sector			;17		
006145 F21800              B    35    	dw24 ext_write_sector			;18		
006148 831C00              B    36    	dw24 ext_file_sector_list		;19		
00614B ED1B00              B    37    	dw24 fs_get_dir_cluster			;1a		
00614E F91B00              B    38    	dw24 fs_update_dir_cluster		;1b		
006151 941800              B    39    	dw24 os_get_current_dir_name	;1c		
                           B    40    
006154 1D4F00              B    41    	dw24 os_wait_key_press			;1d		
006157 784F00              B    42    	dw24 os_get_key_press			;1e		
00615A D51600              B    43    	dw24 os_get_key_mod_flags		;1f		
                           B    44    
00615D 791900              B    45    	dw24 ext_serial_get_header		;20		
006160 861900              B    46    	dw24 ext_serial_receive_file	;21		 
006163 8F1900              B    47    	dw24 ext_serial_send_file		;22		 
006166 A11900              B    48    	dw24 ext_serial_tx				;23		
006169 A81900              B    49    	dw24 ext_serial_rx				;24		
                           B    50    
00616C F51000              B    51    	dw24 ext_print_string			;25		
00616F D74800              B    52    	dw24 hwsc_clear_screen			;26		
006172 A74A00              B    53    	dw24 hwsc_wait_vrt				;27		
006175 B11500              B    54    	dw24 os_set_cursor_position		;28		
006178 E81B00              B    55    	dw24 ext_plot_char				;29		
00617B 1B1700              B    56    	dw24 ext_set_pen				;2a		
00617E 281700              B    57    	dw24 ext_background_colours		;2b		
006181 A04900              B    58    	dw24 hwsc_draw_cursor			;2c		
006184 221700              B    59    	dw24 os_get_pen					;2d		
006187 124900              B    60    	dw24 hwsc_scroll_up				;2e		
00618A 614800              B    61    	dw24 os_set_video_hw_regs		;2f		
00618D DB1600              B    62    	dw24 os_get_vmode				;30			006190 F44900              B    63    	dw24 hwsc_get_charmap_addr_xy	;31		
006193 D11500              B    64    	dw24 os_get_cursor_position		;32		 
                           B    65    
006196 F81C00              B    66    	dw24 ext_set_envar				;33		
006199 B81C00              B    67    	dw24 ext_get_envar				;34		
00619C 521D00              B    68    	dw24 ext_delete_envar			;35		
                           B    69    
00619F 271600              B    70    	dw24 os_init_mouse				;36			0061A2 991600              B    71    	dw24 os_get_mouse_position		;37		
0061A5 701600              B    72    	dw24 os_get_mouse_motion		;38		
                           B    73    
0061A8 6F4B00              B    74    	dw24 hwsc_time_delay			;39		
0061AB C51300              B    75    	dw24 ext_compare_strings		;3a		
0061AE 441200              B    76    	dw24 ext_hexbyte_to_ascii		;3b		
0061B1 791200              B    77    	dw24 ext_ascii_to_hexword		;3c		
0061B4 CE1200              B    78    	dw24 ext_user_input				;3d		
                           B    79    
0061B7 544B00              B    80    	dw24 hwsc_get_version			;3e		
0061BA 9B1500              B    81    	dw24 os_dont_store_registers	;3f		
0061BD D83A00              B    82    	dw24 os_cmd_unused				;40 		0061C0 924B00              B    83    	dw24 hwsc_read_rtc				;41     
0061C3 BA4B00              B    84    	dw24 hwsc_write_rtc				;42		 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 260


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
0061C6 A31D00              B    85    	dw24 os_get_keymap_location		;43		 
0061C9 D93A00              B    86    	dw24 os_get_mem_base			;44
0061CC A91D00              B    87    	dw24 ext_play_audio				;45
0061CF E94E00              B    88    	dw24 hwsc_disable_audio			;46
0061D2 F04E00              B    89    	dw24 hwsc_get_joysticks			;47
0061D5 EB1600              B    90    	dw24 ext_set_vmode				;48
0061D8 821100              B    91    	dw24 ext_set_cursor_image		;49
0061DB 864900              B    92    	dw24 hwsc_remove_cursor			;4a
0061DE C03600              B    93    	dw24 char_to_font				;4b
0061E1 9F1C00              B    94    	dw24 os_get_disk_sector_ptr		;4c
0061E4 7B4B00              B    95    	dw24 hwsc_set_timeout			;4d
0061E7 8C4B00              B    96    	dw24 hwsc_test_timeout			;4e
                           B    97    	
0061EA F93A00              B    98    	dw24 ext_set_pointer			;4f
0061ED 7D3C00              B    99    	dw24 os_allocate_ram			;50
0061F0 A83C00              B   100    	dw24 os_deallocate_ram			;51
0061F3 E93A00              B   101    	dw24 os_get_mem_top				;52
0061F6 D04B00              B   102    	dw24 os_init_msec_counter		;53
0061F9 074C00              B   103    	dw24 os_read_msec_counter		;54
0061FC 8E3D00              B   104    	dw24 ext_parse_path				;55
                           B   105    	
                           B   106    ;----------------------------------------------
                           B   107    ; Non-packed Text Strings
                           B   108    ;----------------------------------------------
                           B   109    
0061FF 50524F53 4520666F   B   110    welcome_message			db "PROSE for EZ80P by 
006207 7220455A 38305020 
00620F 62792050 68696C20 
006217 52757374 6F6E2032 
00621F 3031310B 0B00 
006225 44726976 65733A0B   B   111    storage_txt				db "Drives:",11,0
00622D 00 
00622E 53544152 5455502E   B   112    startup_script_fn		db "STARTUP.PBF",0
006236 50424600 
00623A 2400                B   113    os_hex_prefix_txt		db "$",0
00623C 50524F53 45205665   B   114    os_version_txt			db "PROSE Ver: $",0		006244 723A2024 00 
006249 414D4F45 42412056   B   115    hw_version_txt			db "AMOEBA Ver: $",0
006251 65723A20 2400 
006257 202F2000            B   116    fwd_slash_txt			db " / ",0
00625B 4C6F6164 696E672E   B   117    loading_txt				db "Loading..",11,0
006263 2E0B00 
006266 53617669 6E672E2E   B   118    saving_txt				db "Saving..",11,0
00626E 0B00 
006270 2E657A70 2000       B   119    ezp_txt					db ".ezp",32,0
006276 2E706266 2000       B   120    pbf_txt					db ".pbf",32,0
00627C 0B4D6F72 653F0B0B   B   121    os_more_txt				db 11,"More?",11,11,0
006284 00 
006285 52656769 73746572   B   122    nmi_freeze_txt			db "Register Dump:"
00628D 2044756D 703A 
006293 0B0B00              B   123    crlfx2_txt				db 11,11,0
006296 7800                B   124    rep_char_txt			db "x",0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 261


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006298 20746F20 00         B   125    to_txt					db " to ",0
00629D 4552524F 5200       B   126    error_txt				db "ERROR",0
0062A3 494620              B   127    if_command_txt			db "IF "
0062A6 454E4420            B   128    end_command_txt			db "END "
0062AA 4F532052 45515549   B   129    hw_warn_txt1			db "OS REQUIRES AMOEBA 
0062B2 52455320 414D4F45 
0062BA 42412056 3A 
0062BF 2D2D2D2D 00         B   130    hw_warn_txt2			db "----",0
0062C4 54686973 2077696C   B   131    pmq_txt					db "This will overwrite
0062CC 6C206F76 65727772 
0062D4 69746520 70726F74 
0062DC 65637465 64205241 
0062E4 4D2E2043 6F6E7469 
0062EC 6E756520 28792F6E 
0062F4 293F200B 00 
0062F9 4F555478 7800       B   132    envar_out_n_txt			db "OUTxx",0
0062FF 50415448 00         B   133    path_txt				db "PATH",0
006304 564F4C78 3A2000     B   134    chvol_txt				db "VOLx: ",0
00630B 474F544F 2000       B   135    goto_txt				db "GOTO ",0
006311 56414C20 00         B   136    val_txt					db "VAL ",0
                           B   137    
                           B   138    ;----------------------------------------------
                           B   139    ; Packed text section
                           B   140    ;----------------------------------------------
                           B   141    
006316 00444542 5547       B   142    dictionary				db 0,"DEBUG"			00631C 002D2D2D 2D2D       B   143    						db 0,"-----"			006322 00494F              B   144    						db 0,"IO"				006325 002D2D              B   145    						db 0,"--"				006328 004D4953 43         B   146    						db 0,"MISC"				00632D 002D2D2D 2D         B   147    						db 0,"----"				006332 00616464 72         B   148    						db 0,"addr"				006337 0050524F 5345       B   149    						db 0,"PROSE"			00633D 00612062 2063       B   150    						db 0,"a b c"			006343 00416464 72657373   B   151    						db 0,"Address"			00634B 00427974 6573       B   152    						db 0,"Bytes"			006351 00457865 63757461   B   153    						db 0,"Executable"		006359 626C65 
00635C 0048756E 74         B   154    						db 0,"Hunt"				006361 0046696C 6C         B   155    						db 0,"Fill"				006366 00476F74 6F         B   156    						db 0,"Goto"				                           B   157    						
00636B 0053686F 77         B   158    						db 0,"Show"				006370 00435055            B   159    						db 0,"CPU"				006374 00526567 69737465   B   160    						db 0,"Registers"		00637C 7273 
00637E 004173              B   161    						db 0,"As"				006381 00415343 4949       B   162    						db 0,"ASCII"			006387 00436C65 6172       B   163    						db 0,"Clear"			00638D 00536372 65656E     B   164    						db 0,"Screen"			006394 00446973 61737365   B   165    						db 0,"Disassemble"		00639C 6D626C65 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 262


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
0063A0 00537769 746368     B   166    						db 0,"Switch"			0063A7 00436F70 79         B   167    						db 0,"Copy"				0063AC 00446576 696365     B   168    						db 0,"Device"			0063B3 00436861 6E6765     B   169    						db 0,"Change"			0063BA 00447269 7665       B   170    						db 0,"Drive"			0063C0 00446972            B   171    						db 0,"Dir"				0063C4 002F                B   172    						db 0,"/"				0063C6 00666E              B   173    						db 0,"fn"				                           B   174    						
0063C9 0044656C 657465     B   175    						db 0,"Delete"			0063D0 0046696C 65         B   176    						db 0,"File"				0063D5 00496E66 6F         B   177    						db 0,"Info"				0063DA 00564F4C 783A       B   178    						db 0,"VOLx:"			0063E0 004D616B 65         B   179    						db 0,"Make"				0063E5 0052656D 6F756E74   B   180    						db 0,"Remount"			0063ED 00537461 7274       B   181    						db 0,"Start"			0063F3 00576172 6E696E67   B   182    						db 0,"Warning!"			0063FB 21 
0063FC 00416C6C            B   183    						db 0,"All"				006400 0052656D 6F7665     B   184    						db 0,"Remove"			006407 0052656E 616D65     B   185    						db 0,"Rename"			00640E 004F72              B   186    						db 0,"Or"				006411 00526563 65697665   B   187    						db 0,"Receive"			006419 00536176 65         B   188    						db 0,"Save"				00641E 00547261 6E736D69   B   189    						db 0,"Transmit"			006426 74 
006427 004C6F61 64         B   190    						db 0,"Load"				                           B   191    						
00642C 004F532F 4857       B   192    						db 0,"OS/HW"			006432 00566572 73696F6E   B   193    						db 0,"Version"			00643A 0070656E 20706170   B   194    						db 0,"pen paper"		006442 6572 
006444 803A                B   195    						db 80h,":"				006446 813E                B   196    						db 81h,">"				006448 82534F55 4E44       B   197    						db 82h,"SOUND"			00644E 00566F6C 756D6573   B   198    						db 0,"Volumes"			006456 8343                B   199    						db 83h,"C"				006458 844344              B   200    						db 84h,"CD"				00645B 85434C53            B   201    						db 85h,"CLS"			00645F 8650454E            B   202    						db 86h,"PEN"			006463 8744                B   203    						db 87h,"D"				006465 8844454C            B   204    						db 88h,"DEL"			006469 89444952            B   205    						db 89h,"DIR"			00646D 8A48                B   206    						db 8ah,"H"				00646F 8B46                B   207    						db 8bh,"F"				                           B   208    						
006471 004F6E              B   209    						db 0,"On"				006474 8C464F52 4D4154     B   210    						db 8ch,"FORMAT"			00647B 0047                B   211    						db 0,"G"				00647D 8D4C42              B   212    						db 8dh,"LB"				006480 8E4D                B   213    						db 8eh,"M"				006482 8F4D4F55 4E54       B   214    						db 8fh,"MOUNT"			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 263


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006488 004265              B   215    						db 0,"Be"				00648B 9052                B   216    						db 90h,"R"				00648D 915244              B   217    						db 91h,"RD"				006490 92524E              B   218    						db 92h,"RN"				006493 935258              B   219    						db 93h,"RX"				006496 945342              B   220    						db 94h,"SB"				006499 9554                B   221    						db 95h,"T"				00649B 965458              B   222    						db 96h,"TX"				00649E 97564552 53         B   223    						db 97h,"VERS"			0064A3 00577269 7465       B   224    						db 0,"Write"			                           B   225    						
0064A9 004D656D 6F7279     B   226    						db 0,"Memory"			0064B0 00227478 7422       B   227    						db 0,22h,"txt",22h		0064B6 0057696C 6C         B   228    						db 0,"Will"				0064BB 00526174 65         B   229    						db 0,"Rate"				0064C0 0061                B   230    						db 0,"a"				0064C2 00507265 70         B   231    						db 0,"Prep"				0064C7 984D44              B   232    						db 98h,"MD"				0064CA 00447269 766573     B   233    						db 0,"Drives"			0064D1 006F6C64 666E       B   234    						db 0,"oldfn"			0064D7 006E6577 666E       B   235    						db 0,"newfn"			0064DD 006C656E            B   236    						db 0,"len"				0064E1 00436F6C 6F757273   B   237    						db 0,"Colours"			0064E9 993F                B   238    						db 99h,"?"				0064EB 00436F6D 6D616E64   B   239    						db 0,"Commands"			0064F3 73 
0064F4 0020                B   240    						db 0," "				0064F6 002D                B   241    						db 0,"-"				                           B   242    						
0064F8 00566F6C 756D65     B   243    						db 0,"Volume"			0064FF 0046756C 6C         B   244    						db 0,"Full"				006504 004E6F74            B   245    						db 0,"Not"				006508 00466F75 6E64       B   246    						db 0,"Found"			00650E 004C656E 677468     B   247    						db 0,"Length"			006515 005A6572 6F         B   248    						db 0,"Zero"				00651A 004F7574            B   249    						db 0,"Out"				00651E 004F66              B   250    						db 0,"Of"				006521 0052616E 6765       B   251    						db 0,"Range"			006527 00416C72 65616479   B   252    						db 0,"Already"			00652F 00457869 737473     B   253    						db 0,"Exists"			006536 004174              B   254    						db 0,"At"				006539 00526F6F 74         B   255    						db 0,"Root"				00653E 004D6973 6D617463   B   256    						db 0,"Mismatch"			006546 68 
006547 00526571 75657374   B   257    						db 0,"Request"			00654F 00446174 61         B   258    						db 0,"Data"				                           B   259    				
006554 00454F46            B   260    						db 0,"EOF"				006558 00416674 6572       B   261    						db 0,"After"			00655E 00556E6B 6E6F776E   B   262    						db 0,"Unknown"			006566 00436F6D 6D616E64   B   263    						db 0,"Command"			00656E 00426164            B   264    						db 0,"Bad"				Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 264


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006572 00486578            B   265    						db 0,"Hex"				006576 004E6F              B   266    						db 0,"No"				006579 0041626F 72746564   B   267    						db 0,"Aborted"			006581 00507265 73656E74   B   268    						db 0,"Present"			006589 00436865 636B7375   B   269    						db 0,"Checksum"			006591 6D 
006592 004C6F61 646564     B   270    						db 0,"Loaded"			006599 00436F6D 6D73       B   271    						db 0,"Comms"			00659F 00457272 6F72       B   272    						db 0,"Error"			0065A5 00417267 756D656E   B   273    						db 0,"Arguments"		0065AD 7473 
0065AF 004C6F73 74         B   274    						db 0,"Lost"				                           B   275    						
0065B4 00                  B   276    						db 0
0065B5 46415431 36         B   277    fat16_txt				db "FAT16"				                           B   278    
0065BA 00536572 69616C     B   279    						db 0,"Serial"			0065C1 0054696D 65         B   280    						db 0,"Time"				0065C6 00466F6E 74         B   281    						db 0,"Font"				0065CB 00546F6F            B   282    						db 0,"Too"				0065CF 004C6F6E 67         B   283    						db 0,"Long"				0065D4 00446573 74696E61   B   284    						db 0,"Destination"		0065DC 74696F6E 
0065E0 0053656C 65637465   B   285    						db 0,"Selected"			0065E8 64 
0065E9 00496E76 616C6964   B   286    						db 0,"Invalid"			0065F1 004D6973 73696E67   B   287    						db 0,"Missing"			0065F9 004F4B              B   288    						db 0,"OK"				0065FC 004F53              B   289    						db 0,"OS"				0065FF 0050726F 74656374   B   290    						db 0,"Protected"		006607 6564 
006609 0041                B   291    						db 0,"A"				00660B 004973              B   292    						db 0,"Is"				00660E 00456D70 7479       B   293    						db 0,"Empty"			006614 00456E64            B   294    						db 0,"End"				                           B   295    						
006618 0024                B   296    						db 0,"$"
00661A 7878                B   297    hex_byte_txt			db "xx"					                           B   298    						
00661C 00417070 656E64     B   299    						db 0,"Append"			006623 003F                B   300    						db 0,"?"				006625 0024                B   301    						db 0,"$"				006627 00417761 6974696E   B   302    						db 0,"Awaiting"			00662F 67 
006630 00526563 65697669   B   303    						db 0,"Receiving"		006638 6E67 
00663A 0053656E 64696E67   B   304    						db 0,"Sending"			006642 000B                B   305    						db 0,11					006644 002E2E              B   306    						db 0,".."				006647 004E616D 65         B   307    						db 0,"Name"				00664C 00204279 746573     B   308    						db 0," Bytes"			006653 00507265 7373       B   309    						db 0,"Press"			Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 265


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006659 00416E79            B   310    						db 0,"Any"				00665D 004B6579            B   311    						db 0,"Key"				006661 00456E74 6572       B   312    						db 0,"Enter"			006667 9A454348 4F         B   313    						db 9ah,"ECHO"			                           B   314    				
00666C 0052756E            B   315    						db 0,"Run"				006670 00536372 697074     B   316    						db 0,"Script"			006677 00594553            B   317    yes_txt					db 0,"YES" 				00667B 00546F              B   318    						db 0,"To"				00667E 00536574            B   319    						db 0,"Set"				006682 00436F6E 74696E75   B   320    						db 0,"Continue"			00668A 65 
00668B 004E6F6E 65         B   321    						db 0,"None"				006690 00447269 766572     B   322    						db 0,"Driver"			006697 9B3C                B   323    						db 9bh,"<"				006699 004E6577 6572       B   324    						db 0,"Newer"			00669F 00526571 75697265   B   325    						db 0,"Required"			0066A7 64 
0066A8 00465047 4120636F   B   326    						db 0,"FPGA config"		0066B0 6E666967 
0066B4 00556E63 68616E67   B   327    						db 0,"Unchanged"		0066BC 6564 
0066BE 006C6F63 206C656E   B   328    						db 0,"loc len [per vol 
0066C6 205B7065 7220766F 
0066CE 6C206368 616E7320 
0066D6 6C6F6F70 3F5D20 
0066DD 003E3E55 6E757365   B   329    						db 0,">>Unused<<"		0066E5 643C3C 
0066E8 0070616C 65747465   B   330    						db 0,"palette"			                           B   331    						
0066F0 003F3F3F            B   332    						db 0,"???"				0066F4 00456E61 626C65     B   333    						db 0,"Enable"			0066FB 004B6579 626F6172   B   334    						db 0,"Keyboard"			006703 64 
006704 00446574 65637465   B   335    						db 0,"Detected"			00670C 64 
00670D 004D6F75 7365       B   336    						db 0,"Mouse"			006713 00536563 746F72     B   337    						db 0,"Sector"			00671A 00496E63 6F727265   B   338    						db 0,"Incorrect"		006722 6374 
006724 9E564D4F 4445       B   339    						db 9eh,"VMODE"			00672A 00566964 656F       B   340    						db 0,"Video"			006730 004D6F64 65         B   341    						db 0,"Mode"				006735 9F464F4E 54         B   342    						db 9fh,"FONT"			00673A 00416E64            B   343    						db 0,"And"				00673E 00536176 696E67     B   344    						db 0,"Saving"			006745 00556E73 7570706F   B   345    						db 0,"Unsupported"		00674D 72746564 
006751 A0534554            B   346    						db 0a0h,"SET"			006755 005B7661 723D7374   B   347    						db 0,"[var=string]"		00675D 72696E67 5D 
                           B   348    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 266


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006762 00456E76 6172       B   349    						db 0,"Envar"			006768 A1445A              B   350    						db 0a1h,"DZ"			00676B 0041444C            B   351    						db 0,"ADL"				00676F 005A3830            B   352    						db 0,"Z80"				006773 00506C61 79         B   353    						db 0,"Play"				006778 00417564 696F       B   354    						db 0,"Audio"			00677E A2415641 494C       B   355    						db 0a2h,"AVAIL"			006784 00467265 65         B   356    						db 0,"Free"				006789 0043616E 6E6F74     B   357    						db 0,"Cannot"			006790 00416C6C 6F636174   B   358    						db 0,"Allocate"			006798 65 
006799 00416C6C 6F636174   B   359    						db 0,"Allocated"		0067A1 6564 
0067A3 A34649              B   360    						db 0a3h,"FI"			0067A6 00546578 74         B   361    						db 0,"Text"				0067AB 00466F72 6D6174     B   362    						db 0,"Format"			0067B2 004F7665 72777269   B   363    						db 0,"Overwrite"		0067BA 7465 
                           B   364    						
0067BC 0001                B   365    						db 0,1					                           B   366    
                           B   367    
                           B   368    
                           B   369    
                           B   370    
0067BE 2199696A 5F916F92   B   371    save_append_msg			db 021h,099h,069h,06ah,
0067C6 9700 
0067C8 2199696A 5FCE9297   B   372    overwrite_msg			db 021h,099h,069h,06ah,
0067D0 00 
0067D1 2F0A9300            B   373    os_loadaddress_msg 		db 02fh,00ah,093h,0		0067D5 21649300            B   374    os_filesize_msg			db 021h,064h,093h,0		0067D9 94219700            B   375    ser_rec_msg				db 094h,021h,097h,0		0067DD 956F9897 00         B   376    ser_rec2_msg			db 095h,06fh,098h,097h,
0067E2 966F9897 00         B   377    ser_send_msg			db 096h,06fh,098h,097h,
0067E7 9521BBBC 989700     B   378    ser_recsave_msg			db 095h,021h,0bbh,0bch,
0067EE A77C9097 00         B   379    hw_err_msg				db 0a7h,07ch,090h,097h,
0067F3 607C00              B   380    disk_err_msg			db 060h,07ch,0			0067F6 A1779797 00         B   381    script_aborted_msg		db 0a1h,077h,097h,097h,
0067FB 76B2B397 00         B   382    no_keyboard_msg			db 076h,0b2h,0b3h,097h,
                           B   383    
006800 9700                B   384    packed_help1				db 097h,0
006802 0100                B   385    							db 001h,0			006804 0200                B   386    							db 002h,0			006806 3307095F 4F500B00   B   387    							db 033h,007h,009h,0
00680E 3407515F 4F1400     B   388    							db 034h,007h,051h,0
006815 37070707 5F195000   B   389    							db 037h,007h,007h,0
00681D 3B075FC2 1700       B   390    							db 03bh,007h,05fh,0
006823 C1075FC3 1700       B   391    							db 0c1h,007h,05fh,0
006829 3F070754 5F0E5000   B   392    							db 03fh,007h,007h,0
006831 42075F0F 0A00       B   393    							db 042h,007h,05fh,0
006837 3E070709 5F0D5000   B   394    							db 03eh,007h,007h,0
00683F 44075F10 500B00     B   395    							db 044h,007h,05fh,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 267


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006846 475F1011 1200       B   396    							db 047h,05fh,010h,0
00684C 4C075F10 50131400   B   397    							db 04ch,007h,05fh,0
                           B   398    	
006854 9700                B   399    							db 097h,0
006856 0300                B   400    							db 003h,0			006858 0400                B   401    							db 004h,0			00685A 38231E1D 5F1B601E   B   402    							db 038h,023h,01eh,0
006862 1D00 
006864 3C1F5F20 2100       B   403    							db 03ch,01fh,05fh,0
00686A 3D5F101D 00         B   404    							db 03dh,05fh,010h,0
00686F CB1F5F21 2200       B   405    							db 0cbh,01fh,05fh,0
006875 411A995F 551C00     B   406    							db 041h,01ah,099h,0
00687C 431F075F 2F2100     B   407    							db 043h,01fh,007h,0
006883 561D5F24 1D00       B   408    							db 056h,01dh,05fh,0
006889 455F2557 00         B   409    							db 045h,05fh,025h,0
00688E 481D5F29 1D00       B   410    							db 048h,01dh,05fh,0
006894 4958595F 2A2100     B   411    							db 049h,058h,059h,0
00689B 4A1F075F 2C2100     B   412    							db 04ah,01fh,007h,0
0068A2 4B1F075A 5F2D2100   B   413    							db 04bh,01fh,007h,0
0068AA 4D1F075A 5F2E2100   B   414    							db 04dh,01fh,007h,0
0068B2 235F1860 00         B   415    							db 023h,05fh,018h,0
                           B   416    
0068B7 9700                B   417    							db 097h,0
0068B9 0500                B   418    							db 005h,0			0068BB 0600                B   419    							db 006h,0			0068BD C65F10C7 5000       B   420    							db 0c6h,05fh,010h,0
0068C3 395F1516 00         B   421    							db 039h,05fh,015h,0
0068C8 9F515F10 CC00       B   422    							db 09fh,051h,05fh,0
0068CE BA1F5F1B 8200       B   423    							db 0bah,01fh,05fh,0
0068D4 3A325F09 1B5B00     B   424    							db 03ah,032h,05fh,0
0068DB BEBF5FA4 C000       B   425    							db 0beh,0bfh,05fh,0
0068E1 35AD5FC4 5013C500   B   426    							db 035h,0adh,05fh,0
0068E9 4E5F1030 3100       B   427    							db 04eh,05fh,010h,0
0068EF B7095F1B B8B900     B   428    							db 0b7h,09h,5fh,01b
0068F6 5C5F105D 00         B   429    							db 05ch,05fh,010h,0
0068FB 9700                B   430    							db 097h,0
0068FD FF                  B   431    							db 0ffh
                           B   432    
                           B   433    
                           B   434    
                           B   435    
0068FE B51E00              B   436    os_cmd_locs					dw24 os_cmd_colon	006901 D32E00              B   437    							dw24 os_cmd_gtr		006904 D33700              B   438    							dw24 os_cmd_sound	006907 BB1D00              B   439    							dw24 os_cmd_c		00690A 281E00              B   440    							dw24 os_cmd_cd		00690D AF1E00              B   441    							dw24 os_cmd_cls		006910 203600              B   442    							dw24 os_cmd_pen		006913 CF1E00              B   443    							dw24 os_cmd_d		                           B   444    					
006916 302A00              B   445    							dw24 os_cmd_del		006919 542A00              B   446    							dw24 os_cmd_dir		Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 268


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
00691C 012E00              B   447    							dw24 os_cmd_h		00691F AA2B00              B   448    							dw24 os_cmd_f		006922 D22B00              B   449    							dw24 os_cmd_format	006925 072F00              B   450    							dw24 os_cmd_lb		006928 B82F00              B   451    							dw24 os_cmd_m		00692B BA3500              B   452    							dw24 os_cmd_remount
                           B   453    
00692E 263000              B   454    							dw24 os_cmd_r		006931 573100              B   455    							dw24 os_cmd_rd		006934 7B3100              B   456    							dw24 os_cmd_rn		006937 3B3200              B   457    							dw24 os_cmd_rx		00693A AC3100              B   458    							dw24 os_cmd_sb		00693D 663500              B   459    							dw24 os_cmd_t		006940 FA3400              B   460    							dw24 os_cmd_tx		006943 C63500              B   461    							dw24 os_cmd_vers	                           B   462    							
006946 023000              B   463    							dw24 os_cmd_md		006949 AF2E00              B   464    							dw24 os_cmd_help	00694C AB3A00              B   465    							dw24 os_cmd_echo	00694F 1E3600              B   466    							dw24 os_cmd_ltn		006952 D83A00              B   467    							dw24 os_cmd_unused	006955 D83A00              B   468    							dw24 os_cmd_unused	006958 443600              B   469    							dw24 os_cmd_vmode	00695B 543600              B   470    							dw24 os_cmd_font	                           B   471    							
00695E EB3600              B   472    							dw24 os_cmd_set		006961 C63700              B   473    							dw24 os_cmd_dz		006964 6A3800              B   474    							dw24 os_cmd_avail	006967 FC3800              B   475    							dw24 os_cmd_fi		                           B   476    							
                           B   477    								
00696A 00                  B   478    packed_msg_list				db 0				                           B   479    		
00696B 606100              B   480    							db 060h,061h,0		00696E 21626300            B   481    							db 021h,062h,063h,0
006972 1D6100              B   482    							db 01dh,061h,0		006975 628C1D00            B   483    							db 062h,08ch,01dh,0
006979 1D8D628E 00         B   484    							db 01dh,08dh,062h,0
00697E 628C2100            B   485    							db 062h,08ch,021h,0
006982 21648D65 00         B   486    							db 021h,064h,08dh,0
006987 0A666768 00         B   487    							db 00ah,066h,067h,0
00698C 2199696A 00         B   488    							db 021h,099h,069h,0
006991 696B6C00            B   489    							db 069h,06bh,06ch,0
                           B   490    					
006995 727300              B   491    							db 072h,073h,0		006998 877500              B   492    							db 087h,075h,0		00699B 76219900            B   493    							db 076h,021h,099h,0
                           B   494    					
00699F 87B500              B   495    							db 087h,0b5h,0		0069A2 797400              B   496    							db 079h,074h,0		0069A5 9A7A00              B   497    bytes_loaded_msg			db 09ah,07ah,0		0069A8 7B7C00              B   498    							db 07bh,07ch,0		Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 269


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
0069AB 747D00              B   499    							db 074h,07dh,0		                           B   500    
0069AE 72CD00              B   501    format_err_msg				db 072h,0cdh,0		                           B   502    
0069B1 816600              B   503    							db 081h,066h,0		0069B4 21998384 00         B   504    							db 021h,099h,083h,0
0069B9 76260A00            B   505    							db 076h,026h,00ah,0
0069BD 76216400            B   506    							db 076h,021h,064h,0
0069C1 2D7700              B   507    							db 02dh,077h,0		0069C4 2D7C6B85 00         B   508    							db 02dh,07ch,06bh,0
0069C9 628C080C 00         B   509    							db 062h,08ch,08h,0c
0069CE A9316708 AA00       B   510    							db 0a9h,031h,067h,0
0069D4 768F0A00            B   511    							db 076h,08fh,00ah,0
0069D8 76850A00            B   512    							db 076h,085h,00ah,0
                           B   513    					
0069DC 746800              B   514    							db 074h,068h,0		0069DF 887D00              B   515    							db 088h,07dh,0		0069E2 8900                B   516    ok_msg						db 089h,0			                           B   517    					
0069E4 876000              B   518    							db 087h,060h,0		0069E7 1A627800            B   519    							db 01ah,062h,078h,0
                           B   520    					
0069EB 1D626300            B   521    							db 01dh,062h,063h,0
0069EF 7700                B   522    							db 077h,0			                           B   523    					
0069F1 21996D00            B   524    							db 021h,099h,06dh,0
0069F5 8A508B00            B   525    							db 08ah,050h,08bh,0
0069F9 6F71706E 00         B   526    							db 06fh,071h,070h,0
0069FE 763600              B   527    no_vols_msg					db 076h,036h,0		006A01 97A66300            B   528    none_found_msg				db 097h,0a6h,063h,0
                           B   529    							
006A05 B62100              B   530    							db 0b6h,021h,0		006A08 A9316708 AA00       B   531    							db 0a9h,031h,067h,0
006A0E 21AC00              B   532    							db 021h,0ach,0		                           B   533    							
006A11 766F00              B   534    							db 076h,06fh,0		006A14 746F00              B   535    							db 074h,06fh,0		006A17 66676800            B   536    							db 066h,067h,068h,0
006A1B BD1A00              B   537    							db 0bdh,01ah,0		006A1E 1A62B300            B   538    							db 01ah,062h,0b3h,0
006A22 1A7C00              B   539    							db 01ah,07ch,0		006A25 A17C00              B   540    							db 0a1h,07ch,0		006A28 C8C95000            B   541    							db 0c8h,0c9h,050h,0
006A2C CA508B00            B   542    							db 0cah,050h,08bh,0
006A30 B8508B00            B   543    							db 0b8h,050h,08bh,0
006A34 C0626300            B   544    							db 0c0h,062h,063h,0
                           B   545    							
006A38 FF                  B   546    							db 0ffh				                           B   547    
                           B   548    ;----------------------------------------------
                           B   549    
006A39                     B   550    kernal_error_code_translation
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 270


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
                           B   551    
006A39 242D2E14 08110F2A   B   552    					db 24h,2dh,2eh,14h, 08h,11h
006A41 2F303132 331F3437 
                           B   553    					
006A49                     B   554    fs_error_code_translation
                           B   555    
006A49 00010203 04050607   B   556    					db 00h,01h,02h,03h, 04h,05h
006A51 08090A23 270D1321 
006A59 22232425 260E0000   B   557    					db 22h,23h,24h,25h, 26h,0eh
                           B   558    
                           B   559    
                           B   560    ;----------------------------------------------
                           B   561    ; Scancode to ASCII keymaps
                           B   562    ;----------------------------------------------
                           B   563    
                           C     0    include	'UK_keymap.asm'
006A61                     C     1    keymap:
006A61 00000000 00000000   C     2                    db 000h,000h,000h,000h,000h,000
006A69 00000000 00006000 
006A71 00000000 00713100   C     3                    db 000h,000h,000h,000h,000h,071
006A79 00007A73 61773200 
006A81 00637864 65343300   C     4                    db 000h,063h,078h,064h,065h,034
006A89 00207666 74723500 
006A91 006E6268 67793600   C     5                    db 000h,06Eh,062h,068h,067h,079
006A99 00006D6A 75373800 
006AA1 002C6B69 6F303900   C     6                    db 000h,02Ch,06Bh,069h,06Fh,030
006AA9 002E2F6C 3B702D00 
006AB1 00002700 5B3D0000   C     7                    db 000h,000h,027h,000h,05Bh,03D
006AB9 0000005D 00230000 
006AC1 005C0000 00000000   C     8                    db 000h,05Ch,000h,000h,000h,000
006AC9 00000000 00000000 
006AD1 AC000000 00000051   C     9                    db 0ACh,000h,000h,000h,000h,000
006AD9 21000000 5A534157 
006AE1 22000043 58444524   C    10                    db 022h,000h,000h,043h,058h,044
006AE9 A3000020 56465452 
006AF1 2500004E 42484759   C    11                    db 025h,000h,000h,04Eh,042h,048
006AF9 5E000000 4D4A5526 
006B01 2A00003C 4B494F29   C    12                    db 02Ah,000h,000h,03Ch,04Bh,049
006B09 2800003E 3F4C3A50 
006B11 5F000000 40007B2B   C    13                    db 05Fh,000h,000h,000h,040h,000
006B19 00000000 007D007E 
006B21 0000007C 00000000   C    14                    db 000h,000h,000h,07Ch,000h,000
006B29 00000000 00000000 
006B31 00000000 00000000   C    15                    db 000h,000h,000h,000h,000h,000
006B39 00000000 00000000 
006B41 00000000 00000000   C    16                    db 000h,000h,000h,000h,000h,000
006B49 00000000 00000000 
006B51 00000000 00000000   C    17                    db 000h,000h,000h,000h,000h,000
006B59 00000000 00000000 
006B61 00000000 00000000   C    18                    db 000h,000h,000h,000h,000h,000
006B69 00000000 00000000 
006B71 00000000 00000000   C    19                    db 000h,000h,000h,000h,000h,000
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 271


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\UK_keymap.asm
006B79 00000000 00000000 
006B81 00000000 0000       C    20                    db 000h,000h,000h,000h,000h,000
                           B   565    
       00006A61            B   566    unshifted_keymap equ keymap+00h
       00006AC3            B   567    shifted_keymap   equ keymap+62h
       00006B25            B   568    alted_keymap	 equ keymap+c4h
                           B   569    
                           B   570    ;----------------------------------------------
                           B   571    
006B87 0506040C 030B830A   B   572    function_key_list	db 05h,06h,04h,0ch,03h,0bh,
006B8F 01 
                           B   573    		
006B90 46782E43 4D4400     B   574    fkey_filename		db "Fx.CMD",0
                           B   575    
006B97 4B45594D 41505300   B   576    keymaps_txt			db "KEYMAPS",0
                           B   577    
                           B   578    ;----------------------------------------------
                           B   579    
006B9F 00                  B   580    ui_index				db 0				; u
006BA0 00                  B   581    ui_maxchars				db 0				; "
006BA1 000000              B   582    ui_string_addr			dw24 0				; "
                           B   583    
                           B   584    ;----------------------------------------------
                           B   585    ; OS Display parameters
                           B   586    ;----------------------------------------------
                           B   587    
006BA4 00                  B   588    video_mode				db 0
006BA5 0700                B   589    current_pen				dw 07h				; C
006BA7 0000                B   590    background_colour		dw 00h				; F
                           B   591    
006BA9 00000F00 000F0F0F   B   592    pen_palette				dw 0000h,000fh,0f00h,0f
006BB1 F000FF00 F00FFF0F 
006BB9 55059909 CC0C710F   B   593    						dw 0555h,0999h,0ccch,0f
006BC1 7F00F80D 4008880F 
                           B   594    
006BC9 00                  B   595    plotchar_colour			db 0				; c
                           B   596    
006BCA 00                  B   597    char_under_cursor		db 0			
006BCB 00                  B   598    cursor_present			db 0				; 1
006BCC 00                  B   599    overwrite_mode			db 0
006BCD 00                  B   600    cursor_image_char		db 0
                           B   601    
                           B   602    ;----------------------------------------------
                           B   603    
006BCE                     B   604    display_parameters
                           B   605    
006BCE 00                  B   606    video_doubling			db 0
006BCF 000000              B   607    charmap_rows			dw24 0					006BD2 000000              B   608    charmap_columns			dw24 0				
                           B   609    
                           B   610    ;----------------------------------------------
                           B   611    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 272


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006BD5                     B   612    vmode_parameter_list
                           B   613    
006BD5 00503C              B   614    				db 00b, 80,60	; vmode 0 (vide
006BD8 01501E              B   615    				db 01b, 80,30	; vmode 1
006BDB 02283C              B   616    				db 10b, 40,60	; vmode 2	
006BDE 03281E              B   617    				db 11b, 40,30	; vmode 3
                           B   618    				
                           B   619    ;==============================================
                           B   620    ;  Serial Routine Data
                           B   621    ;==============================================
                           B   622    
006BE1 000000              B   623    serial_ez80_address		dw24 0
006BE4 000000              B   624    serial_file_length		dw24 0
006BE7 000000              B   625    serial_fn_addr			dw24 0
006BEA 00 00 00 00 00 00   B   626    serial_filename			blkb 18,0		
006BF0 00 00 00 00 00 00 
006BF6 00 00 00 00 00 00 
006BFC 00                  B   627    serial_fn_length		db 0
006BFD 00                  B   628    serial_timeout			db 0
                           B   629    
006BFE 00 00 00 00 00 00   B   630    serial_fileheader		blkb 20,0
006C04 00 00 00 00 00 00 
006C0A 00 00 00 00 00 00 
006C10 00 00 
006C12 5A383050 2E464845   B   631    serial_header_id		db "Z80P.FHEADER"		006C1A 41444552 
006C1E 00                  B   632    serial_transfer_started	db 0
                           B   633    
006C1F 00                  B   634    anim_wait_count			db 0
                           B   635    
                           B   636    ;==============================================
                           B   637    
006C20 F3C8                B   638    intellimouse_seq	db 0f3h,200
006C22 F364                B   639    					db 0f3h,100
006C24 F350                B   640    					db 0f3h,80
                           B   641    
006C26 E803                B   642    mouse_settings_seq	db 0e8h,default_resolution
006C28 E6                  B   643    					db default_scaling
006C29 F364                B   644    					db 0f3h,default_sample_rate
006C2B F4                  B   645    					db 0f4h
                           B   646    					
                           B   647    ;----------------------------------------------
                           B   648    ; FILE SYSTEM RELATED VARIABLES
                           B   649    ;----------------------------------------------
                           B   650    
006C2C 00                  B   651    boot_drive			db 0
                           B   652    
006C2D 00                  B   653    current_volume		db 0
                           B   654    	
006C2E 00                  B   655    current_driver		db 0			;normally u
                           B   656    
006C2F 00                  B   657    device_count		db 0			;IE: the nu
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 273


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
                           B   658    
006C30 00                  B   659    volume_count		db 0
                           B   660    				
006C31 20564F4C 303A00     B   661    vol_txt				db " VOL0:",0	;space pref
006C38 44455630 3A00       B   662    dev_txt				db "DEV0:",0
                           B   663    
006C3E 000000              B   664    sector_rd_wr_addr	dw24 0
                           B   665    
                           B   666    
                           B   667    ;==============================================
                           B   668    
006C41                     B   669    volume_dir_clusters
                           B   670    
006C41 00 00 00 00 00 00   B   671    					blkb max_volumes*3,0
006C47 00 00 00 00 00 00 
006C4D 00 00 00 00 00 00 
006C53 00 00 00 00 00 00 
                           B   672    	
006C59                     B   673    volume_mount_list
                           B   674    
006C59 00 00 00 00 00 00   B   675    					blkb max_volumes*16,0
006C5F 00 00 00 00 00 00 
006C65 00 00 00 00 00 00 
006C6B 00 00 00 00 00 00 
006C71 00 00 00 00 00 00 
006C77 00 00 00 00 00 00 
006C7D 00 00 00 00 00 00 
006C83 00 00 00 00 00 00 
006C89 00 00 00 00 00 00 
006C8F 00 00 00 00 00 00 
006C95 00 00 00 00 00 00 
006C9B 00 00 00 00 00 00 
006CA1 00 00 00 00 00 00 
006CA7 00 00 00 00 00 00 
006CAD 00 00 00 00 00 00 
006CB3 00 00 00 00 00 00 
006CB9 00 00 00 00 00 00 
006CBF 00 00 00 00 00 00 
006CC5 00 00 00 00 00 00 
006CCB 00 00 00 00 00 00 
006CD1 00 00 00 00 00 00 
006CD7 00 00 
                           B   676    
                           B   677    ; Each entry is 16 bytes in the form:
                           B   678    
                           B   679    ; OFFSETS
                           B   680    ; -------
                           B   681    ; $00 - Volume is present (0/1)
                           B   682    ; $01 - Volume's host driver number (1 byte)	                           B   683    ; $02 - [reserved]
                           B   684    ; $03 - [reserved]
                           B   685    ; $04 - Volume's capacity in sectors (3 bytes)
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 274


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
                           B   686    ; $07 - Partition number on host drive (0/1/2/3
                           B   687    ; $08 - Offset in sectors from MBR to partition
                           B   688    ; $0c - [reserved]
                           B   689    ; $0d - [reserved]	
                           B   690    ; $0e - [reserved]
                           B   691    ; $0f - [reserved]
                           B   692    
                           B   693    ;==============================================
                           B   694    
006CD9                     B   695    host_device_hardware_info
                           B   696    
006CD9 00 00 00 00 00 00   B   697    					blkb 32*4,0
006CDF 00 00 00 00 00 00 
006CE5 00 00 00 00 00 00 
006CEB 00 00 00 00 00 00 
006CF1 00 00 00 00 00 00 
006CF7 00 00 00 00 00 00 
006CFD 00 00 00 00 00 00 
006D03 00 00 00 00 00 00 
006D09 00 00 00 00 00 00 
006D0F 00 00 00 00 00 00 
006D15 00 00 00 00 00 00 
006D1B 00 00 00 00 00 00 
006D21 00 00 00 00 00 00 
006D27 00 00 00 00 00 00 
006D2D 00 00 00 00 00 00 
006D33 00 00 00 00 00 00 
006D39 00 00 00 00 00 00 
006D3F 00 00 00 00 00 00 
006D45 00 00 00 00 00 00 
006D4B 00 00 00 00 00 00 
006D51 00 00 00 00 00 00 
006D57 00 00 
                           B   698    
                           B   699    ; Each entry is 32 bytes..
                           B   700    ;
                           B   701    ; OFFSETS
                           B   702    ; -------
                           B   703    ; $00 - Device driver number
                           B   704    ; $01 - Device's TOTAL capacity in sectors (4 b
                           B   705    ; $05 - Zero terminated hardware name (22 ASCII
                           B   706    ; (remaining bytes to $1F currently unused)
                           B   707    
                           B   708    ;----------------------------------------------
                           B   709    
006D59 000000              B   710    dhwn_temp_pointer		dw24 0
                           B   711    
006D5C 00                  B   712    partition_temp			db 0
006D5D 00                  B   713    vols_on_device_temp		db 0
006D5E 00                  B   714    sys_driver_backup		db 0
006D5F 00                  B   715    os_quiet_mode			db 0
                           B   716    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 275


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
                           B   717    ;----------------------------------------------
                           B   718    
006D60 00 00 00 00 00 00   B   719    time_data				blkb	7,0
006D66 00 
                           B   720    
006D67 00                  B   721    frozen					db 0
006D68 01                  B   722    first_run				db 1
006D69 01                  B   723    devices_connected		db 1					                           B   724    
                           B   725    ;----------------------------------------------
                           B   726    
006D6A 307300              B   727    free_sysram_base		dw24 os_max_addr
006D6D FFFF07              B   728    free_sysram_top			dw24 sysram_addr+sysram
                           B   729    
006D70 000080              B   730    free_vram_a_base		dw24 vram_a_addr
006D73 FFFF87              B   731    free_vram_a_top			dw24 vram_a_addr+7ffffh
                           B   732    
006D76 0000C0              B   733    free_vram_b_base		dw24 vram_b_addr
006D79 FFFFC7              B   734    free_vram_b_top			dw24 vram_b_addr+7ffffh
                           B   735    
006D7C 000000              B   736    charmap_size			dw24 0
                           B   737    
                           B   738    ;----------------------------------------------
                           B   739    
006D7F 000000              B   740    milliseconds_counter	dw24 0
006D82 000000              B   741    seconds_counter			dw24 0
                           B   742    
                           B   743    ;----------------------------------------------
                           B   744    
006D85 00                  B   745    store_a1				db 0		
006D86 000000              B   746    store_bc1				dw24 0
006D89 000000              B   747    store_de1				dw24 0
006D8C 000000              B   748    store_hl1				dw24 0
006D8F 00                  B   749    store_a2				db 0
006D90 000000              B   750    store_bc2				dw24 0
006D93 000000              B   751    store_de2				dw24 0
006D96 000000              B   752    store_hl2				dw24 0
006D99 000000              B   753    store_ix				dw24 0
006D9C 000000              B   754    store_iy				dw24 0
006D9F 000000              B   755    store_pc				dw24 0		;only relev
006DA2 000000              B   756    store_spl				dw24 0
006DA5 0000                B   757    store_sps				dw 0
006DA7 00                  B   758    store_mbase				db 0
006DA8 00                  B   759    store_f	 				db 0
006DA9 00                  B   760    store_adl				db 0
                           B   761    
                           B   762    ;----------------------------------------------
006DAA                     B   763    os_variables
                           B   764    ;----------------------------------------------
                           B   765    
006DAA 000000              B   766    kernal_ix_cache			dw24 0
                           B   767    
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 276


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006DAD 00                  B   768    store_registers			db 0
006DAE 000000              B   769    com_start_addr			dw24 0
                           B   770    
006DB1 00 00 00 00 00 00   B   771    temp_string				blkb max_buffer_chars+2
006DB7 00 00 00 00 00 00 
006DBD 00 00 00 00 00 00 
006DC3 00 00 00 00 00 00 
006DC9 00 00 00 00 00 00 
006DCF 00 00 00 00 00 00 
006DD5 00 00 00 00 00 00 
006DDB 00 00 00 00 00 00 
006DE1 00 00 00 00 00 00 
006DE7 00 00 00 00 00 00 
006DED 00 00 00 00 00 00 
006DF3 00 00 00 00 00 00 
006DF9 00 00 00 00 00 00 
006DFF 00 00 00 00 
006E03 00 00 00 00 00 00   B   772    script_fn				blkb 13,0
006E09 00 00 00 00 00 00 
006E0F 00 
                           B   773    
006E10 00                  B   774    sector_lba0				db 0			; keep 
006E11 00                  B   775    sector_lba1				db 0
006E12 00                  B   776    sector_lba2				db 0
006E13 00                  B   777    sector_lba3				db 0
                           B   778    
                           B   779    ;----------------------------------------------
                           B   780    
006E14 000000              B   781    cursor_pos				dw24 0			; 3rd b
                           B   782    
       00006E14            B   783    cursor_y 				equ cursor_pos
       00006E15            B   784    cursor_x 				equ cursor_pos+1
                           B   785    						
006E17 00                  B   786    cursorflashtimer		db 0
006E18 00                  B   787    cursor_status			db 0
006E19 00                  B   788    os_linecount			db 0
                           B   789    		
006E1A 000000              B   790    mem_mon_addr			dw24 0
006E1D 000000              B   791    cmdop_start_address		dw24 0
006E20 000000              B   792    cmdop_end_address		dw24 0
006E23 000000              B   793    copy_dest_address		dw24 0
006E26 000000              B   794    hex_address				dw24 0
                           B   795    
006E29 000000              B   796    find_hexstringascii 	dw24 0
006E2C 000000              B   797    xrr_temp				dw24 0
006E2F 00                  B   798    temphex					db 0
006E30 00                  B   799    fillbyte				db 0 
006E31 00                  B   800    ui_im_cache				db 0
                           B   801    
006E32 00 00 00 00 00 00   B   802    commandstring			blkb max_buffer_chars+2
006E38 00 00 00 00 00 00 
006E3E 00 00 00 00 00 00 
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 277


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006E44 00 00 00 00 00 00 
006E4A 00 00 00 00 00 00 
006E50 00 00 00 00 00 00 
006E56 00 00 00 00 00 00 
006E5C 00 00 00 00 00 00 
006E62 00 00 00 00 00 00 
006E68 00 00 00 00 00 00 
006E6E 00 00 00 00 00 00 
006E74 00 00 00 00 00 00 
006E7A 00 00 00 00 00 00 
006E80 00 00 00 00 
006E84 00 00 00 00 00 00   B   803    output_line				blkb max_buffer_chars+2
006E8A 00 00 00 00 00 00 
006E90 00 00 00 00 00 00 
006E96 00 00 00 00 00 00 
006E9C 00 00 00 00 00 00 
006EA2 00 00 00 00 00 00 
006EA8 00 00 00 00 00 00 
006EAE 00 00 00 00 00 00 
006EB4 00 00 00 00 00 00 
006EBA 00 00 00 00 00 00 
006EC0 00 00 00 00 00 00 
006EC6 00 00 00 00 00 00 
006ECC 00 00 00 00 00 00 
006ED2 00 00 00 00 
                           B   804    				
006ED6 000000              B   805    os_args_loc				dw24 0
006ED9 000000              B   806    os_args_pos_cache		dw24 0
                           B   807    
006EDC 000000              B   808    os_dir_block_cache  	dw24 0
006EDF 000000              B   809    os_extcmd_jmp_addr		dw24 0
                           B   810    
006EE2 000000              B   811    script_orig_dir			dw24 0
006EE5 000000              B   812    script_dir				dw24 0
006EE8 000000              B   813    script_file_offset		dw24 0
006EEB 000000              B   814    script_length			dw24 0
                           B   815    
006EEE 00                  B   816    script_flags			db 0
006EEF 00                  B   817    if_condition			db 0
                           B   818    
006EF0 000000              B   819    path_parse_loc			dw24 0
                           B   820    
006EF3 000000              B   821    original_dir			dw24 0 
006EF6 00                  B   822    original_vol		 	db 0
                           B   823    		
006EF7 00 00 00 00 00 00   B   824    if_name_txt				blkb max_if_chars+2,0
006EFD 00 00 00 00 00 00 
006F03 00 00 00 00 00 00 
006F09 00 00 00 00 00 00   B   825    if_value_txt			blkb max_if_chars+2,0
006F0F 00 00 00 00 00 00 
006F15 00 00 00 00 00 00 
006F1B 00 00 00 00 00 00   B   826    if_label_txt			blkb max_if_chars+2,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 278


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006F21 00 00 00 00 00 00 
006F27 00 00 00 00 00 00 
                           B   827    
                           B   828    
006F2D 0000                B   829    char_to_print			db 0,0	; zero terminat
                           B   830    
                           B   831    ;----------------------------------------------
                           B   832    ; Keyboard buffer and registers
                           B   833    ;----------------------------------------------
                           B   834    
006F2F 00 00 00 00 00 00   B   835    scancode_buffer			blkb 32,0
006F35 00 00 00 00 00 00 
006F3B 00 00 00 00 00 00 
006F41 00 00 00 00 00 00 
006F47 00 00 00 00 00 00 
006F4D 00 00 
                           B   836    
006F4F 00                  B   837    key_buf_wr_idx			db 0
006F50 00                  B   838    key_buf_rd_idx			db 0
006F51 00                  B   839    key_release_mode		db 0		
006F52 00                  B   840    not_currently_used		db 0
006F53 00                  B   841    key_mod_flags			db 0
006F54 00                  B   842    current_scancode		db 0
006F55 00                  B   843    current_asciicode		db 0
                           B   844    
                           B   845    ;----------------------------------------------
                           B   846    ; Mouse related registers
                           B   847    ;----------------------------------------------
                           B   848    
006F56 00                  B   849    mouse_id				db 0
006F57 00                  B   850    mouse_packet_size		db 0
                           B   851    
006F58 00 00 00 00         B   852    mouse_packet			blkb 4,0			; t
006F5C 00                  B   853    mouse_packet_index		db 0				;
006F5D 00                  B   854    mouse_buttons			db 0				;
006F5E 000000              B   855    mouse_disp_x			dw24 0				; c
006F61 000000              B   856    mouse_disp_y			dw24 0				; c
006F64 000000              B   857    mouse_abs_x				dw24 0
006F67 000000              B   858    mouse_abs_y				dw24 0
006F6A 00                  B   859    mouse_wheel				db 0				; m
006F6B 00                  B   860    mouse_updated			db 0
                           B   861    
006F6C 800200              B   862    mouse_window_size_x		dw24 640			; n
006F6F E00100              B   863    mouse_window_size_y		dw24 480			; i
                           B   864    
006F72 00                  B   865    os_pointer_enable		db 0
006F73 000000              B   866    os_pointer_definition	dw24 0				
006F76 000000              B   867    os_pointer_height		dw24 0
006F79 00                  B   868    os_pointer_palette		db 0
                           B   869    
                           B   870    ;----------------------------------------------
       00006E14            B   871    first_os_var			equ cursor_y
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 279


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\prose_data.asm
006F7A 00                  B   872    last_os_var				db 0
                           B   873    ;----------------------------------------------
                           B   874    
                           B   875    ;==============================================
                           B   876    ; Default environment variables
                           B   877    ;==============================================
                           B   878    
006F7B 4552524F 523D3030   B   879    default_envars			db "ERROR=00",0
006F83 00 
006F84 50415448 3D434F4D   B   880    						db "PATH=COMMANDS UTILS
006F8C 4D414E44 53205554 
006F94 494C5300 
006F98 FF                  B   881    						db 0ffh
006F99 000000              B   882    envar_top_loc			dw24 0 					                           B   883    
                           B   884    ;==============================================
                           B   885    
                           B     0    	include		'phil_font_packed.asm'			006F9C                     B     1    packed_font_start
006F9C 010100FF 01000918   B     2    				db 001h,001h,000h,0FFh,001h,000
006FA4 3C3C1800 181800EE 
006FAC EE660100 056C6CFE   B     3                    db 0EEh,066h,001h,000h,005h,06C
006FB4 6CFE6C6C 00187EE0 
006FBC 7C0EFC18 00C6CE1C   B     4                    db 07Ch,00Eh,0FCh,018h,000h,0C6
006FC4 3870E6C6 0078ECEC 
006FCC 78EDEE7D 000C1C18   B     5                    db 078h,0EDh,0EEh,07Dh,000h,00C
006FD4 01000518 30016003 
006FDC 30180030 18010C03   B     6                    db 030h,018h,000h,030h,018h,001
006FE4 18300010 5438FE38 
006FEC 54100000 18187E18   B     7                    db 054h,010h,000h,000h,018h,018
006FF4 18010007 38387001 
006FFC 00037E01 00091818   B     8                    db 000h,003h,07Eh,001h,000h,009
007004 0000060E 1C3870E0 
00700C 007CE6EE FEF6E67C   B     9                    db 000h,07Ch,0E6h,0EEh,0FEh,0F6
007014 00387801 38047C00 
00701C 7CEE0E7C E0E0FE00   B    10                    db 07Ch,0EEh,00Eh,07Ch,0E0h,0E0
007024 FE0C180C 0ECE7C00 
00702C 1E3E76E6 FF060600   B    11                    db 01Eh,03Eh,076h,0E6h,0FFh,006
007034 FEE0FC01 0E03FC00 
00703C 7EE0FC01 E6037C00   B    12                    db 07Eh,0E0h,0FCh,001h,0E6h,003
007044 FE060C18 01380300 
00704C 7CE6E67C E6E67C00   B    13                    db 07Ch,0E6h,0E6h,07Ch,0E6h,0E6
007054 7C01CE03 7E0E7C01 
00705C 00031818 00181801   B    14                    db 000h,003h,018h,018h,000h,018
007064 00033030 00303060 
00706C 0E1C3870 381C0E01   B    15                    db 00Eh,01Ch,038h,070h,038h,01C
007074 00037E00 7E010003 
00707C 70381C0E 1C387000   B    16                    db 070h,038h,01Ch,00Eh,01Ch,038
007084 7CEE0E3C 38003800 
00708C 7CE601EE 03E07C00   B    17                    db 07Ch,0E6h,001h,0EEh,003h,0E0
007094 7CE6E6FE 01E60300 
00709C FCE6E6FC E6E6FC00   B    18                    db 0FCh,0E6h,0E6h,0FCh,0E6h,0E6
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 280


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\phil_font_packed.asm
0070A4 7CE601E0 03E67C00 
0070AC FC01E605 FC00FEE0   B    19                    db 0FCh,001h,0E6h,005h,0FCh,000
0070B4 E0F8E0E0 FE00FEE0 
0070BC E0F801E0 03007CE6   B    20                    db 0E0h,0F8h,001h,0E0h,003h,000
0070C4 E0EEE6E6 7C0001E6 
0070CC 03FE01E6 03007C01   B    21                    db 003h,0FEh,001h,0E6h,003h,000
0070D4 38057C00 7E011C04 
0070DC DC7800E6 ECF8EC01   B    22                    db 0DCh,078h,000h,0E6h,0ECh,0F8
0070E4 E6030001 E006FE00 
0070EC C6EEFED6 01C60300   B    23                    db 0C6h,0EEh,0FEh,0D6h,001h,0C6
0070F4 E6F6FEFE EEE6E600 
0070FC 7C01E605 7C00FC01   B    24                    db 07Ch,001h,0E6h,005h,07Ch,000
007104 E603FCE0 E0007C01 
00710C E603EAEC 7600FC01   B    25                    db 0E6h,003h,0EAh,0ECh,076h,000
007114 E603FCE6 E6007CEE 
00711C E07C0EEE 7C00FE01   B    26                    db 0E0h,07Ch,00Eh,0EEh,07Ch,000
007124 38060001 E6067C00 
00712C 01E60574 380001C6   B    27                    db 001h,0E6h,005h,074h,038h,000
007134 04D6FE6C 00E6E66C 
00713C 3874E6E6 0001E604   B    28                    db 038h,074h,0E6h,0E6h,000h,001
007144 7E06FC00 FE0E1C38 
00714C 70E0FE00 3C013005   B    29                    db 070h,0E0h,0FEh,000h,03Ch,001
007154 3C00C0E0 70381C0E 
00715C 06007801 18057800   B    30                    db 006h,000h,078h,001h,018h,005
007164 10386CC6 01000BFE 
00716C 381C0100 087C067E   B    31                    db 038h,01Ch,001h,000h,008h,07C
007174 E67E0000 E0E0FCE6 
00717C E6FC0100 037C01E0   B    32                    db 0E6h,0FCh,001h,000h,003h,07C
007184 037C0000 06067EE6 
00718C E67E0100 037CE6FE   B    33                    db 0E6h,07Eh,001h,000h,003h,07C
007194 E07C0000 3E70FC01 
00719C 70030100 037EE6E6   B    34                    db 070h,003h,001h,000h,003h,07E
0071A4 7E067C00 E0E0FC01 
0071AC E6030000 38007838   B    35                    db 0E6h,003h,000h,000h,038h,000
0071B4 387C0000 1C00011C 
0071BC 047800E0 EEECF8EC   B    36                    db 004h,078h,000h,0E0h,0EEh,0EC
0071C4 EE000078 0138047C 
0071CC 010003EC FED6C6C6   B    37                    db 001h,000h,003h,0ECh,0FEh,0D6
0071D4 010003FC 01E60401 
0071DC 00037C01 E6037C01   B    38                    db 000h,003h,07Ch,001h,0E6h,003
0071E4 0003FCE6 E6FCE0E0 
0071EC 00007EE6 E67E0606   B    39                    db 000h,000h,07Eh,0E6h,0E6h,07E
0071F4 0000DCE6 01E00301 
0071FC 00037EF0 7C1EFC00   B    40                    db 000h,003h,07Eh,0F0h,07Ch,01E
007204 00387E01 38031E01 
00720C 000301E6 047E0100   B    41                    db 000h,003h,001h,0E6h,004h,07E
007214 0301E603 6C380100 
00721C 03E2EAFE 7C340100   B    42                    db 003h,0E2h,0EAh,0FEh,07Ch,034
007224 03E67C38 7CE60100 
00722C 0301E603 7E0CF800   B    43                    db 003h,001h,0E6h,003h,07Eh,00C
007234 00FE1C38 70FE003C 
00723C 30306030 303C0001   B    44                    db 030h,030h,060h,030h,030h,03C
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 281


PC     Object              I  Line    Source E:\My_Own_Files\Coding\ez80p\Code\PROSE\src\phil_font_packed.asm
007244 18070078 18180C18 
00724C 18780033 7ECC0100   B    45                    db 018h,078h,000h,033h,07Eh,0CC
007254 0501FE07 0100FF01 
00725C 001A1C3A 70FC70F2   B    46                    db 000h,01Ah,01Ch,03Ah,070h,0FC
007264 BC010029 7CC6BAA2 
00726C BAC67C01 00147E06   B    47                    db 0BAh,0C6h,07Ch,001h,000h,014
007274 060100FF 0100FF01 
00727C 009C                B    48                    db 000h,09Ch
00727E                     B    49    packed_font_end
                           A  3882    
                           A  3883    
       00000014            A  3884    default_pointer_height equ 20
                           A  3885    
                           B     0    	include		'default_pointer_packed.asm'	00727E                     B     1    default_pointer:
00727E 03010103 000E0301   B     2                    db 003h,001h,001h,003h,000h,00E
007286 0303000D 01020101 
00728E 03000C01 02020101   B     3                    db 003h,000h,00Ch,001h,002h,002
007296 03000B01 03020301 
00729E 0103000A 01030204   B     4                    db 001h,003h,000h,00Ah,001h,003
0072A6 01010300 09010302 
0072AE 05010103 00080103   B     5                    db 005h,001h,001h,003h,000h,008
0072B6 02060101 03000701 
0072BE 03020701 01030006   B     6                    db 003h,002h,007h,001h,001h,003
0072C6 01030208 01010300 
0072CE 05010302 09010103   B     7                    db 005h,001h,003h,002h,009h,001
0072D6 00040103 020A0101 
0072DE 03000301 03020603   B     8                    db 003h,000h,003h,001h,003h,002
0072E6 01060300 03010302 
0072EE 03010202 01010300   B     9                    db 003h,001h,002h,002h,001h,001
0072F6 07010202 01000102 
0072FE 02010300 07010201   B    10                    db 002h,001h,003h,000h,007h,001
007306 00000102 02010103 
00730E 00060101 03000401   B    11                    db 000h,006h,001h,001h,003h,000
007316 02020103 000C0102 
00731E 02010103 000C0301   B    12                    db 002h,001h,001h,003h,000h,00C
007326 04030015 
                           A  3887    
00732A 0102                A  3888    default_pointer_colours	db 1,2					00732C 0000FF0F            A  3889    						dw 000h,0fffh
                           A  3890    
                           A  3891    ;==============================================
                           A  3892    	
007330 00                  A  3893    os_max_addr		db 0							                           A  3894    	
                           A  3895    
                           A  3896    ;==============================================
                           A  3897    
                           A  3898    				end	
                           A  3899    				
                           A  3900    ;==============================================
                           A  3901    	
Zilog eZ80 Macro Assembler Version 4.1 (10060805)15-Jan-12     21:29:39     page: 282


PC     Object              I  Line    Source 


Errors: 0
Warnings: 0
Lines Assembled: 14257
