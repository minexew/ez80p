; Zilog eZ80 ANSI C Compiler Release 3.3
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_VideoMem:
	DW24	8409088
_PaletteMem:
	DW24	16711680
_mossa_giocata:
	DL	0
_mossa_in_analisi:
	DL	0
	SEGMENT BSS
_scac:
	DS	400
_oldscac:
	DS	400
_PosScac:
	DS	600
	SEGMENT DATA
_col_prof:
	DW	0
	DB	0
_nmossa:
	DL	0
_effe:
	DF	0.0
_prof:
	DL	0
_livello:
	DL	4
	SEGMENT BSS
_ramo:
	DS	28
_possibili:
	DS	400
_ap:
	DS	64
	SEGMENT DATA
_cont:
	DL	0
	SEGMENT BSS
_TxtPnt:
	DS	3
_Snd:
	DS	3
_Click:
	DS	15
_Chs1:
	DS	15
_Chs2:
	DS	15
_mSelect:
	DS	3
_mWhite:
	DS	3
_mBlack:
	DS	3
_mNormal:
	DS	3
_mHard:
	DS	3
_Think:
	DS	3
_wPlay:
	DS	3
_bPlay:
	DS	3
_wSel:
	DS	3
_rSel:
	DS	3
_bsel:
	DS	3
_wPiece:
	DS	3
_bPiece:
	DS	3
_Bianchi:
	DS	18
_Neri:
	DS	18
	SEGMENT DATA
_mColore:
	DB	0
_mLivello:
	DB	0
	SEGMENT BSS
_chAbort:
	DS	1
	SEGMENT DATA
_DeleteBack:
	DB	0
	SEGMENT BSS
_gScanCode:
	DS	1
_BufKey:
	DS	1
_Mossa1:
	DS	2
_Mossa2:
	DS	2
_User:
	DS	5
_PlayerColor:
	DS	1
;    1	/*
;    2	
;    3	Chess Figth. A chess game cpu vs human developed by Enzo Antonio Calogiuri for eZ80P fans :-)
;    4	
;    5	*/
;    6	
;    7	#include <Stdlib.h>
;    8	#include <String.h>
;    9	
;   10	#include "PROSE_Header.h"
;   11	
;   12	#include "screen.h"
;   13	#include "game.h"
;   14	
;   15	typedef struct {
;   16		char *loc;
;   17		int len;
;   18		char *looploc;
;   19		int looplen;
;   20		unsigned short period;
;   21		unsigned char volume;
;   22	} SndRec;
;   23	
;   24	static char *TxtPnt;
;   25	static SndRec *Snd;
;   26	
;   27	static SndRec Click, Chs1, Chs2;
;   28	
;   29	void WaitKeyPress(void);
;   30	unsigned char GetKeyScanCode(void);
;   31	unsigned char ReadScancode(void);
;   32	void print(const char *txt);
;   33	void Disable_Audio(void);
;   34	void Play_Raw_Audio(const SndRec *S);
;   35	
;   36	void MyMain(void);
;   37	/*------------------------------------------------------------------------------------------------------------------------*/
;   38	
;   39	typedef struct{
;   40		char ri, co;
;   41		char *Img;
;   42	} PlSel;
;   43	
;   44	char *mSelect, *mWhite, *mBlack, *mNormal, *mHard, *Think, *wPlay, *bPlay;
;   45	char *wSel, *rSel, *bsel, *wPiece, *bPiece;
;   46	char *Bianchi[6], *Neri[6];
;   47	char mColore = 0, mLivello = 0, chAbort, DeleteBack = 0;
;   48	unsigned char gScanCode, BufKey;
;   49	char Mossa1[2], Mossa2[2];
;   50	PlSel User;
;   51	char PlayerColor;
	SEGMENT CODE
;   52	
;   53	
;   54	void Load_Components(void);
;   55	void Draw_Image(int PosX, int PosY, int W, int H, char *ImgBuf);
;   56	void Draw_Trans_Image(int PosX, int PosY, int W, int H, char *ImgBuf, unsigned char Trans);
;   57	void Fill_Rectangle(int PosX, int PosY, int W, int H, unsigned char col);
;   58	char MainMenu(void);
;   59	
;   60	void Crea_Mossa(void);
;   61	
;   62	void Show_End_Screen(char win);
;   63	
;   64	void Free_All_Mem(void);
;   65	/*------------------------------------------------------------------------------------------------------------------------*/
;   66	
;   67	void main(void)
;   68	{
_main:
;   69		INIT_HARDWARE;
PB_DR		equ 09Ah
PB_DDR		equ 09Bh
PB_ALT1		equ 09Ch
PB_ALT2		equ 09Dh
PC_DR		equ 09Eh
PC_DDR		equ 09Fh
PC_ALT1		equ 0A0h
PC_ALT2		equ 0A1h
PD_DR		equ 0A2h
PD_DDR		equ 0A3h
PD_ALT1		equ 0A4h
PD_ALT2		equ 0A5h
UART0_RBR	equ 0C0h
UART0_THR	equ 0C0h
UART0_BRG_L	equ 0C0h
UART0_BRG_H	equ 0C1h
UART0_IER	equ 0C1h
UART0_FCTL	equ 0C2h
UART0_LCTL	equ 0C3h
UART0_MCTL	equ 0C4h
UART0_LSR	equ 0C5h
UART0_MSR	equ 0C6h
CS0_LBR		equ 0A8h
CS0_UBR		equ 0A9h
CS0_CTL		equ 0AAh
CS1_LBR		equ 0ABh
CS1_UBR		equ 0ACh
CS1_CTL		equ 0ADh
CS2_LBR		equ 0AEh
CS2_UBR		equ 0AFh
CS2_CTL		equ 0B0h
CS3_LBR		equ 0B1h
CS3_UBR		equ 0B2h
CS3_CTL		equ 0B3h
TMR0_CTL		equ 080h
TMR0_DR_L	equ 081h
TMR0_RR_L	equ 081h
TMR0_DR_H	equ 082h
TMR0_RR_H	equ 082h
TMR_ISS		equ 092h
RTC_CTRL		equ 0EDh
RTC_ACTRL	equ 0ECh
RTC_SEC		equ 0E0h
RTC_MIN		equ 0E1h
RTC_HRS		equ 0E2h
RTC_DOW		equ 0E3h
RTC_DOM		equ 0E4h
RTC_MON		equ 0E5h
RTC_YR		equ 0E6h
RTC_CEN		equ 0E7h
port_pic_data		equ 000h
port_pic_ctrl		equ 001h
port_hw_flags		equ 001h
port_sdc_ctrl		equ 002h
port_keyboard_data	equ 002h
port_sdc_data		equ 003h
port_memory_paging	equ 004h
port_irq_ctrl		equ 005h
port_nmi_ack			equ 006h
port_ps2_ctrl		equ 007h
port_selector		equ 008h
port_mouse_data		equ 006h
port_clear_flags		equ 009h
sdc_power			equ 0h
sdc_cs				equ 1h
sdc_speed			equ 2h
sdc_serializer_busy	equ 4h
vrt					equ 5h
sysram_addr			equ 0000000h
vram_a_addr			equ 0800000h
vram_b_addr			equ 0C00000h
hw_palette			equ 0ff0000h
hw_sprite_registers	equ 0ff0800h
hw_video_parameters	equ 0ff1000h
hw_audio_registers	equ 0ff1400h
hw_video_settings	equ 0ff1800h
tilemap_parameters	equ hw_video_parameters + 00h
bitmap_parameters	equ hw_video_parameters + 20h
video_control		equ hw_video_settings + 00h
sprite_control		equ hw_video_settings + 01h
bgnd_palette_select	equ hw_video_settings + 02h
sprite_palette_select	equ hw_video_settings + 03h
right_border_position	equ hw_video_settings + 04h
os_start			equ 0A00h
prose_return		equ os_start + 14h
prose_kernal		equ os_start + 20h
;   70		INIT_KJT;
kr_mount_volumes			equ 00h
kr_get_device_info		equ 01h
kr_check_volume_format	equ 02h
kr_change_volume			equ 03h
kr_get_volume_info		equ 04h
kr_format_device			equ 05h
kr_make_dir				equ 06h
kr_change_dir			equ 07h
kr_parent_dir			equ 08h
kr_root_dir				equ 09h
kr_delete_dir			equ 0Ah
kr_find_file				equ 0Bh
kr_set_file_pointer		equ 0Ch
kr_set_load_length		equ 0Dh
kr_read_file				equ 0Eh
kr_erase_file			equ 0Fh
kr_rename_file			equ 10h
kr_create_file			equ 11h
kr_write_file			equ 12h
kr_get_total_sectors		equ 13h
kr_dir_list_first_entry	equ 14h
kr_dir_list_get_entry	equ 15h
kr_dir_list_next_entry	equ 16h
kr_read_sector			equ 17h
kr_write_sector			equ 18h
kr_file_sector_list		equ 19h
kr_get_dir_cluster		equ 1Ah
kr_set_dir_cluster		equ 1Bh
kr_get_dir_name			equ 1Ch
kr_wait_key				equ 1Dh
kr_get_key				equ 1Eh
kr_get_key_mod_flags		equ 1Fh
kr_serial_receive_header	equ 20h
kr_serial_receive_file	equ 21h
kr_serial_send_file		equ 22h
kr_serial_tx_byte		equ 23h
kr_serial_rx_byte		equ 24h
kr_print_string			equ 25h
kr_clear_screen			equ 26h
kr_wait_vrt				equ 27h
kr_set_cursor_position	equ 28h
kr_plot_char				equ 29h
kr_set_pen				equ 2Ah
kr_background_colours	equ 2Bh
kr_draw_cursor			equ 2Ch
kr_get_pen				equ 2Dh
kr_scroll_up				equ 2Eh
kr_os_display			equ 2Fh
kr_get_display_size		equ 30h
kr_get_charmap_addr_xy	equ 31h
kr_get_cursor_position	equ 32h
kr_set_envar				equ 33h
kr_get_envar				equ 34h
kr_delete_envar			equ 35h
kr_set_mouse_window		equ 36h
kr_get_mouse_position	equ 37h
kr_get_mouse_motion		equ 38h
kr_time_delay			equ 39h
kr_compare_strings		equ 3Ah
kr_hex_byte_to_ascii		equ 3Bh
kr_ascii_to_hex_word		equ 3Ch
kr_get_string			equ 3Dh
kr_get_version			equ 3Eh
kr_dont_store_registers	equ 3Fh
kr_get_font_info			equ 40h
kr_read_rtc				equ 41h
kr_write_rtc				equ 42h
kr_get_keymap_location	equ 43h
kr_play_audio			equ 45h
kr_disable_audio			equ 46h
;   71		
;   72		CREATE_HEADER;
jr skip_header
db 'PRO'
mb_loc dw24 10000h
dw24 0
dw 0
dw 0
db 1
skip_header
;   73		
;   74		MyMain();	
	CALL	_MyMain
;   75		
;   76		QUIT_TO_PROSE;
xor a
jp.lil prose_return
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_MyMain                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_MainFile:
	DS	3
_MainDest:
	DS	3
_MainFileSize:
	DS	3
_Palette:
	DS	512
	SEGMENT CODE
_Set_320_240_Mode:
push ix
ld a, 0110b
ld (video_control), a
ld a, 0
ld (bgnd_palette_select), a
ld a, 99
ld (right_border_position), a
ld ix, bitmap_parameters
ld hl, 1024 * 20
ld (ix), hl
ld (ix+04h), 1
ld (ix+08h), 0
ld (ix+0ch), 0
ld (ix+10h), 0 + (320 / 8) - 1
ld hl, (_VideoMem)
ld (hl), 0
push hl
pop de
inc de
ld bc, 320*240
dec bc
ldir
pop ix
	RET	


;**************************** _Set_320_240_Mode ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_Load_Raw_Data:
	CALL	__frameset0
	LD	BC,(IX+6)
	LD	(_MainFile),BC
	LD	BC,(IX+9)
	LD	(_MainDest),BC
	LD	BC,(IX+12)
	LD	(_MainFileSize),BC
push ix
ld hl, (_MainFile)
ld a, kr_find_file
call.lil prose_kernal
pop ix
jr nz, FileError
push ix
ld de, (_MainFileSize)
ld a, kr_set_load_length
call.lil prose_kernal
pop ix
push ix
ld hl, (_MainDest)
ld a, kr_read_file
call.lil prose_kernal
jr nz, FileError
pop ix
FileError:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Load_Raw_Data ***************************
;Name                         Addr/Register   Size   Type
;_MainFileSize                       STATIC      3   variable
;_MainDest                           STATIC      3   variable
;_MainFile                           STATIC      3   variable
;Size                                 IX+12      3   parameter
;Dest                                  IX+9      3   parameter
;FName                                 IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_BlackOut:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,_Palette
	ADD	HL,BC
	LD	(HL),0
	INC	HL
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,256
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__4
	JP	PE,L_4
	JR	L__5
L__4:
	JP	PO,L_4
L__5:
	LD	BC,512
	PUSH	BC
	LD	BC,_Palette
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _BlackOut ***************************
;Name                         Addr/Register   Size   Type
;_PaletteMem                         STATIC      3   variable
;_memcpy                             IMPORT  -----   function
;_Palette                            STATIC    512   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_PutPixel:
	CALL	__frameset0
	LD	HL,(IX+9)
	LD	A,8
	CALL	__ishl_b
	LD	DE,HL
	LD	HL,(IX+9)
	LD	BC,(IX+6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+6),HL
	LD	BC,(_VideoMem)
	ADD	HL,BC
	LD	A,(IX+12)
	LD	(HL),A
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PutPixel ***************************
;Name                         Addr/Register   Size   Type
;_VideoMem                           STATIC      3   variable
;col                                  IX+12      1   parameter
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_apertura:
	LD	HL,-119
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
	LD	BC,_ap
	LD	(IX+-9),BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IX+-9)
	ADD	HL,DE
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	DE,0
	LD	(IY),DE
	LD	(IY+3),0
	LD	(IY+4),DE
	LD	(IY+7),0
	LD	HL,(IX+-9)
	LD	DE,BC
	ADD	HL,DE
	LD	IY,HL
	LD	DE,0
	LD	(IY),DE
	LD	(IY+3),0
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+4
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_13:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__9
	JP	PE,L_11
	JR	L__10
L__9:
	JP	PO,L_11
L__10:
	LD	BC,200
	LD	HL,_scac
	ADD	HL,BC
	LD	(IX+-57),HL
	LD	BC,_ap
	LD	(IX+-54),BC
	LD	IY,(IX+-57)
	LD	HL,(IY+8)
	LD	E,(IY+11)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-92),HL
	LD	HL,(IY+16)
	LD	(IX+-89),E
	LD	E,(IY+19)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-92)
	LD	E,(IX+-89)
	CALL	__ladd
	LD	BC,5254
	XOR	A,A
	CALL	__ladd
	LD	(_ap),HL
	LD	A,E
	LD	IY,_scac
	LEA	BC,IY+120
	LD	(_ap+3),A
	LD	(IX+-21),BC
	LD	HL,(IY+84)
	LD	E,(IY+87)
	XOR	A,A
	LD	BC,1000000
	CALL	__lmuls
	LD	(IX+-88),HL
	LD	IY,(IX+-21)
	LD	HL,(IY+12)
	LD	(IX+-85),E
	LD	E,(IY+15)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-88)
	LD	E,(IX+-85)
	CALL	__ladd
	LD	BC,2133
	XOR	A,A
	CALL	__ladd
	LD	IY,_ap
	LD	(IY+4),HL
	LD	HL,_scac
	LD	BC,160
	ADD	HL,BC
	LD	(IY+7),E
	LD	(IX+-51),HL
	LD	IY,(IX+-51)
	LEA	BC,IY+8
	LD	(IX+-36),BC
	LD	IY,(IX+-36)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-51)
	LD	(IX+-62),HL	; spill
	LEA	HL,IY+16
	LD	(IX+-84),HL	; spill
	LD	HL,(IX+-62)	; unspill
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-62),HL	; spill
	LD	HL,(IX+-84)	; unspill
	LD	(IX+-33),HL
	LD	HL,(IX+-62)	; unspill
	LD	IY,(IX+-33)
	LD	(IX+-81),E
	LD	(IX+-80),HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-80)
	LD	E,(IX+-81)
	CALL	__ladd
	LD	BC,4244
	XOR	A,A
	CALL	__ladd
	LD	(IX+-65),HL	; spill
	LD	IY,(IX+-54)
	LD	HL,(IX+-65)	; unspill
	LD	(IY+8),HL
	LD	HL,_scac
	LD	(IX+-58),H	; spill
	LD	(IX+-59),E	; spill
	LD	H,(IX+-58)	; unspill
	LD	BC,280
	ADD	HL,BC
	LD	(IX+-58),H	; spill
	LD	H,(IX+-59)	; unspill
	LD	(IY+11),H
	LD	H,(IX+-58)	; unspill
	LD	(IX+-48),HL
	LD	IY,(IX+-48)
	LEA	BC,IY+4
	LD	(IX+-45),BC
	LD	IY,(IX+-45)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-95),HL
	LD	HL,_scac
	LD	BC,240
	ADD	HL,BC
	LD	(IX+-42),HL
	LD	IY,(IX+-42)
	LEA	BC,IY+12
	LD	(IX+-39),BC
	LD	IY,(IX+-39)
	LD	(IX+-96),E
	LD	E,(IY+3)
	LD	HL,(IY)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-95)
	LD	E,(IX+-96)
	CALL	__ladd
	LD	BC,7163
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-54)
	LD	(IY+12),HL
	LD	(IY+15),E
	LD	(IY+16),HL
	LD	(IY+19),E
	LD	HL,(IX+-65)	; unspill
	LD	(IY+20),HL
	LD	H,(IX+-59)	; unspill
	LD	(IY+23),H
	LD	IY,(IX+-48)
	LEA	BC,IY+8
	LD	(IX+-30),BC
	LD	IY,(IX+-30)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-99),HL
	LD	IY,(IX+-48)
	LD	HL,(IY+12)
	LD	(IX+-100),E
	LD	E,(IY+15)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-99)
	LD	E,(IX+-100)
	CALL	__ladd
	LD	BC,7273
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-54)
	LD	(IY+24),HL
	LD	(IY+27),E
	LD	IY,(IX+-42)
	LD	HL,(IY+4)
	LD	E,(IY+7)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-101),E
	LD	(IX+-104),HL
	LD	IY,(IX+-30)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-104)
	LD	E,(IX+-101)
	CALL	__ladd
	LD	BC,6172
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-54)
	LD	(IY+28),HL
	LD	(IY+31),E
	LD	BC,_ap+32
	LD	(IX+-27),BC
	LD	IY,(IX+-51)
	LEA	BC,IY+28
	LD	(IX+-18),BC
	LD	IY,(IX+-18)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-51)
	LD	(IX+-62),HL	; spill
	LEA	HL,IY+20
	LD	(IX+-107),HL	; spill
	LD	HL,(IX+-62)	; unspill
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-62),HL	; spill
	LD	HL,(IX+-107)	; unspill
	LD	(IX+-15),HL
	LD	HL,(IX+-62)	; unspill
	LD	IY,(IX+-15)
	LD	(IX+-108),E
	LD	(IX+-111),HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-111)
	LD	E,(IX+-108)
	CALL	__ladd
	LD	BC,4745
	XOR	A,A
	CALL	__ladd
	LD	(IX+-68),HL	; spill
	LD	IY,_ap
	LD	HL,(IX+-68)	; unspill
	LD	(IY+32),HL
	LD	(IX+-69),E	; spill
	LD	(IY+35),E
	LD	IY,(IX+-57)
	LEA	BC,IY+28
	LD	(IX+-24),BC
	LD	IY,(IX+-24)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-72),HL
	LD	IY,(IX+-57)
	LD	HL,(IY+24)
	LD	(IX+-73),E
	LD	E,(IY+27)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,(IX+-73)
	LD	BC,(IX+-72)
	CALL	__ladd
	LD	BC,5756
	XOR	A,A
	CALL	__ladd
	LD	IY,_ap
	LD	(IY+36),HL
	LD	(IY+39),E
	LD	IY,(IX+-57)
	LD	HL,(IY+20)
	LD	E,(IY+23)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,(IX+-73)
	LD	BC,(IX+-72)
	CALL	__ladd
	LD	BC,5755
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-27)
	LD	(IY+8),HL
	LD	(IY+11),E
	LD	IY,(IX+-21)
	LEA	BC,IY+24
	LD	(IX+-12),BC
	LD	IY,(IX+-12)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	IY,_scac
	LEA	IY,IY+80
	LD	(IX+-76),HL
	LD	HL,(IY+32)
	LD	(IX+-77),E
	LD	E,(IY+35)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	A,(IX+-77)
	LD	BC,(IX+-76)
	CALL	__ladd
	LD	BC,2836
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-27)
	LD	(IY+12),HL
	LD	(IY+15),E
	LD	HL,(IX+-68)	; unspill
	LD	(IY+16),HL
	LD	H,(IX+-69)	; unspill
	LD	(IY+19),H
	LD	IY,(IX+-21)
	LD	HL,(IY+28)
	LD	E,(IY+31)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	A,(IX+-77)
	LD	BC,(IX+-76)
	CALL	__ladd
	LD	BC,3736
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-27)
	LD	(IY+20),HL
	LD	(IY+23),E
	LD	IY,(IX+-48)
	LD	HL,(IY+28)
	LD	E,(IY+31)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-114),HL
	LD	HL,(IY+24)
	LD	(IX+-115),E
	LD	E,(IY+27)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-114)
	LD	E,(IX+-115)
	CALL	__ladd
	LD	BC,7776
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-27)
	LD	(IY+24),HL
	LD	(IY+27),E
	LD	IY,(IX+-48)
	LD	HL,(IY+32)
	LD	E,(IY+35)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-118),HL
	LD	IY,(IX+-42)
	LD	HL,(IY+24)
	LD	(IX+-119),E
	LD	E,(IY+27)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-118)
	LD	E,(IX+-119)
	CALL	__ladd
	LD	BC,7866
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-27)
	LD	(IY+28),HL
	LD	(IY+31),E
	LD	SP,IX
	POP	IX
	RET	


;**************************** _apertura ***************************
;Name                         Addr/Register   Size   Type
;_scac                               STATIC    400   variable
;_ap                                 STATIC     64   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 125 (bytes)
;       Spill Code: 27 (instruction)


_raccogli:
	CALL	__frameset0
	LD	A,(_cont+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_cont)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_possibili
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	A,(_cont+3)
	LD	E,A
	LD	A,1
	LD	HL,(_cont)
	CALL	__ladd_b
	LD	(_cont),HL
	LD	A,E
	LD	(_cont+3),A
	LD	E,A
	XOR	A,A
	LD	HL,(_cont)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_possibili
	ADD	HL,BC
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _raccogli ***************************
;Name                         Addr/Register   Size   Type
;_cont                               STATIC      4   variable
;_possibili                          STATIC    400   variable
;m                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_vincitore:
	LD	HL,-18
	CALL	__frameset
	LD	BC,0
	LD	(IX+-12),BC
	LD	(IX+-15),BC
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_28
L_26:
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_25
L_23:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-3)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_22
	LD	(IX+-12),BC
	JR	L_24
L_22:
	LD	IY,(IX+-9)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_24
	LD	BC,1
	LD	(IX+-15),BC
L_24:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_25:
	LD	BC,(IX+-6)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__19
	JP	PE,L_23
	JR	L__20
L__19:
	JP	PO,L_23
L__20:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_28:
	LD	BC,(IX+-3)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__21
	JP	PE,L_26
	JR	L__22
L__21:
	JP	PO,L_26
L__22:
	LD	BC,0
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_32
	LD	A,1
	JR	L_34
L_32:
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_33
	LD	A,2
	JR	L_34
L_33:
	XOR	A,A
L_34:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _vincitore ***************************
;Name                         Addr/Register   Size   Type
;_scac                               STATIC    400   variable
;G_0                                  IX-18      3   variable
;ner                                  IX-15      3   variable
;bian                                 IX-12      3   variable
;G_1                                   IX-9      3   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


_inizializza:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(_mossa_giocata),BC
	XOR	A,A
	LD	(_mossa_giocata+3),A
	LD	(_mossa_in_analisi),BC
	XOR	A,A
	LD	(_mossa_in_analisi+3),A
	LD	(_effe),BC
	XOR	A,A
	LD	(_effe+3),A
	LD	(_prof),BC
	XOR	A,A
	LD	(_prof+3),A
	LD	(IX+-3),BC
	JR	L_37
L_35:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_ramo
	ADD	HL,BC
	LD	BC,13107200
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),66
	LD	HL,(IX+-3)
	INC	HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_ramo
	ADD	HL,BC
	LD	BC,13107200
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),194
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
L_37:
	LD	BC,7
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__25
	JP	PE,L_35
	JR	L__26
L__25:
	JP	PO,L_35
L__26:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _inizializza ***************************
;Name                         Addr/Register   Size   Type
;_ramo                               STATIC     28   variable
;_prof                               STATIC      4   variable
;_effe                               STATIC      4   variable
;_mossa_in_analisi                   STATIC      4   variable
;_mossa_giocata                      STATIC      4   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_sceglimossa:
	LD	HL,-58
	CALL	__frameset
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-17),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-6),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,1000000
	XOR	A,A
	CALL	__ldivu
	LD	BC,100
	XOR	A,A
	CALL	__lremu
	LD	(IX+-3),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-10),HL
	LD	(IX+-7),E
	LD	(IX+-46),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-14),HL
	LD	(IX+-11),E
	LD	(IX+-49),HL
	LD	HL,(IX+-17)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-17)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-20),HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-31),HL
	LD	HL,(IX+-20)
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-31)
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	HL,(HL)
	CALL	__seqcase
L__28:
	DW	12
	DW	1
	DB	0
	DW24	L_50	

	DW24	L_48	

	DW24	L_47	

	DW24	L_46	

	DW24	L_49	

	DW24	L_45	

	DW24	L_44	

	DW24	L_42	

	DW24	L_41	

	DW24	L_40	

	DW24	L_43	

	DW24	L_39	

	DW24	L_83	

L_39:
	LD	HL,8388608
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_40:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_41:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_42:
	LD	HL,2097152
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_43:
	LD	HL,10485760
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_44:
	LD	HL,2359296
	LD	E,66
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_45:
	LD	HL,8388608
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_46:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_47:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_48:
	LD	HL,2097152
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_49:
	LD	HL,10485760
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_83
L_50:
	LD	HL,2359296
	LD	E,66
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_83:
	LD	A,(_nmossa+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_nmossa)
	LD	BC,13
	CALL	__lcmps
	JP	P,L__124
	JP	PE,L_90
	JR	L__125
L__124:
	JP	PO,L_90
L__125:
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_90
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_81
	LD	BC,3
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_55
	LD	BC,6
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_55
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_55
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_60
L_55:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_60
	LD	BC,1
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_60
	LD	HL,5033165
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_60:
	LD	BC,1
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_65
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_65
	LD	HL,3355443
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_65:
	LD	BC,4
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_62
	LD	HL,(IX+-14)
	LD	E,(IX+-11)
	LD	BC,5
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_90
L_62:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
	LD	BC,2
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_90
L_81:
	LD	BC,3
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_69
	LD	BC,6
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_69
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_69
	LD	BC,7
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_74
L_69:
	LD	BC,10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_74
	LD	BC,8
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_74
	LD	HL,5033165
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_74:
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	LD	BC,8
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_79
	LD	BC,9
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_79
	LD	HL,3355443
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_79:
	LD	BC,4
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_76
	LD	BC,5
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
L_76:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
	LD	BC,7
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_90:
	LD	HL,53
	LD	E,0
	LD	BC,(_nmossa)
	LD	A,(_nmossa+3)
	CALL	__lcmps
	JP	P,L__126
	JP	PE,L_97
	JR	L__127
L__126:
	JP	PO,L_97
L__127:
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_97
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_89
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_97
L_89:
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_88
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_97
L_88:
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_97:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__62
	LD	A,1
	JR	L__63
L__62:
	XOR	A,A
L__63:
	LD	(IX+-26),A
	LD	(IX+-28),A
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_96
	LD	BC,8
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_96
	LD	HL,(IX+-25)
	LD	BC,2
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,(_effe)
	LD	A,(_effe+3)
	LD	HL,1048576
	LD	E,65
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_98
L_96:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_94
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_94
	LD	HL,(IX+-25)
	LD	BC,8
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,(_effe)
	LD	A,(_effe+3)
	LD	HL,1048576
	LD	E,65
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_98
L_94:
	LD	BC,(IX+-3)
	CALL	__itol
	LD	IY,(IX+-25)
	LD	(IY),BC
	LD	(IY+3),A
L_98:
	LD	BC,(IX+-14)
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-40),HL
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	LD	A,(_livello+3)
	LD	BC,(_livello)
	CALL	__lcmps
	JR	NZ,L_121
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__70
	LD	A,1
	JR	L__71
L__70:
	XOR	A,A
L__71:
	LD	(IX+-21),A
	LD	(IX+-27),A
	LD	A,(IX+-21)
	OR	A,A
	JR	NZ,L_101
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-37),HL
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fcmp
	JP	M,L_102
L_101:
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_154
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-37),HL
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	A,(_effe+3)
	LD	E,A
	LD	IY,HL
	LD	HL,(_effe)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fcmp
	JP	P,L_154
L_102:
	LD	HL,(IX+-37)
	LD	BC,(_effe)
	LD	A,(_effe+3)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	JR	L_154
L_121:
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	LD	(_prof),HL
	LD	A,E
	LD	(_prof+3),A
	LD	HL,(_col_prof)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_105
	LD	BC,1
	LD	(_col_prof),BC
	JR	L_106
L_105:
	LD	(_col_prof),BC
L_106:
	LD	BC,0
	PUSH	BC
	CALL	_calcolamosse
	POP	BC
	LD	A,(_prof+3)
	LD	E,A
	LD	A,255
	LD	HL,(_prof)
	LD	BC,16777215
	CALL	__ladd
	LD	(_prof),HL
	LD	A,E
	LD	(_prof+3),A
	LD	HL,(_col_prof)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_109
	LD	BC,1
	LD	(_col_prof),BC
	JR	L_116
L_109:
	LD	(_col_prof),BC
L_116:
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__79
	LD	A,1
	JR	L__80
L__79:
	XOR	A,A
L__80:
	LD	(IX+-22),A
	OR	A,A
	JR	NZ,L_112
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-34),HL
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-43),HL
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	A,(_prof+3)
	LD	E,A
	LD	(IX+-58),HL
	LD	HL,(_prof)
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,(IX+-58)
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fcmp
	JP	M,L_115
L_112:
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_119
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-34),HL
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	(IX+-43),HL
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	A,(_prof+3)
	LD	E,A
	LD	IY,HL
	LD	HL,(_prof)
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__fcmp
	JP	P,L_119
L_115:
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_114
	LD	BC,(_mossa_in_analisi)
	LD	A,(_mossa_in_analisi+3)
	LD	(_mossa_giocata),BC
	LD	(_mossa_giocata+3),A
L_114:
	LD	HL,(IX+-34)
	LD	BC,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	HL,(IX+-43)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
L_119:
	LD	A,(IX+-22)
	LD	(IX+-21),A
	LD	A,(IX+-22)
	LD	(IX+-27),A
	LD	A,(IX+-22)
	OR	A,A
	JR	NZ,L_118
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	BC,13107200
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),66
	JR	L_154
L_118:
	LD	A,(_prof+3)
	LD	E,A
	LD	A,1
	LD	HL,(_prof)
	CALL	__ladd_b
	XOR	A,A
	LD	BC,4
	CALL	__lmuls
	LD	BC,_ramo
	ADD	HL,BC
	LD	BC,13107200
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),194
L_154:
	LD	A,(_nmossa+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_nmossa)
	LD	BC,13
	CALL	__lcmps
	JP	P,L_161
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_161
	LD	A,(IX+-21)
	LD	(IX+-27),A
	OR	A,A
	JR	NZ,L_152
	LD	BC,3
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_126
	LD	BC,6
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_126
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_126
	LD	BC,3
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_131
L_126:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_131
	LD	BC,1
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_131
	LD	HL,5033165
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_131:
	LD	BC,1
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_136
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_136
	LD	HL,3355443
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_136:
	LD	BC,4
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_133
	LD	BC,5
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_161
L_133:
	LD	A,(IX+-26)
	LD	(IX+-28),A
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_161
	LD	BC,2
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_161
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_161
L_152:
	LD	BC,3
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_140
	LD	BC,6
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_140
	LD	BC,7
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_140
	LD	BC,6
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_145
L_140:
	LD	BC,10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_145
	LD	BC,8
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_145
	LD	HL,5033165
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_145:
	LD	BC,8
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_150
	LD	BC,9
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_150
	LD	HL,3355443
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_150:
	LD	BC,4
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_147
	LD	BC,5
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_161
L_147:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_161
	LD	BC,7
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_161
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_161:
	LD	HL,53
	LD	E,0
	LD	BC,(_nmossa)
	LD	A,(_nmossa+3)
	CALL	__lcmps
	JP	P,L_162
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_prof)
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_162
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_160
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_162
L_160:
	LD	A,(IX+-27)
	OR	A,A
	JR	NZ,L_159
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_162
L_159:
	LD	HL,6710886
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_162:
	LD	BC,(IX+-3)
	CALL	__itol
	LD	IY,(IX+-40)
	LD	(IY),BC
	LD	(IY+3),A
	LD	HL,(IX+-20)
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-55),HL
	LD	BC,(IX+-31)
	LD	HL,(IX+-55)
	ADD	HL,BC
	LD	(IX+-52),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	XOR	A,A
	LD	BC,10000
	CALL	__ldivu
	LD	BC,100
	XOR	A,A
	CALL	__lremu
	LD	IY,(IX+-52)
	LD	(IY),HL
	LD	(IY+3),E
	LD	HL,(IX+-52)
	LD	HL,(HL)
	CALL	__seqcase
L__119:
	DW	12
	DW	1
	DB	0
	DW24	L_174	

	DW24	L_172	

	DW24	L_171	

	DW24	L_170	

	DW24	L_173	

	DW24	L_169	

	DW24	L_168	

	DW24	L_166	

	DW24	L_165	

	DW24	L_164	

	DW24	L_167	

	DW24	L_163	

	DW24	L_177	

L_163:
	LD	HL,8388608
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_164:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_165:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_166:
	LD	HL,2097152
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_167:
	LD	HL,10485760
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_168:
	LD	HL,2359296
	LD	E,66
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_169:
	LD	HL,8388608
	LD	E,63
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_170:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_171:
	LD	HL,4194304
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_172:
	LD	HL,2097152
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_173:
	LD	HL,10485760
	LD	E,64
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
	JR	L_177
L_174:
	LD	HL,2359296
	LD	E,66
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_177:
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_180
	LD	BC,8
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_180
	LD	HL,1048576
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fsub
	LD	(_effe),BC
	LD	(_effe+3),A
L_180:
	LD	BC,12
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_181
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_181
	LD	HL,1048576
	LD	E,65
	LD	BC,(_effe)
	LD	A,(_effe+3)
	CALL	__fadd
	LD	(_effe),BC
	LD	(_effe+3),A
L_181:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _sceglimossa ***************************
;Name                         Addr/Register   Size   Type
;_mossa_giocata                      STATIC      4   variable
;_mossa_in_analisi                   STATIC      4   variable
;_calcolamosse                       STATIC  -----   function
;_ramo                               STATIC     28   variable
;_livello                            STATIC      4   variable
;_col_prof                           STATIC      3   variable
;_prof                               STATIC      4   variable
;_nmossa                             STATIC      4   variable
;_effe                               STATIC      4   variable
;_scac                               STATIC    400   variable
;m_d1000_m10                          IX-49      3   variable
;m_d100_m10                           IX-46      3   variable
;G_12                                 IX-43      3   variable
;G_18                                 IX-40      3   variable
;G_10                                 IX-37      3   variable
;G_11                                 IX-34      3   variable
;G_20                                 IX-31      3   variable
;G_21                                 IX-28      1   variable
;G_16                                 IX-27      1   variable
;G_15                                 IX-26      1   variable
;G_5                                  IX-25      3   variable
;G_13                                 IX-22      1   variable
;G_14                                 IX-21      1   variable
;G_19                                 IX-20      3   variable
;m_d10_m10                            IX-17      3   variable
;G_2                                  IX-14      4   variable
;G_3                                  IX-10      4   variable
;m_m10                                 IX-6      3   variable
;m_d1M_m100                            IX-3      3   variable
;m                                     IX+6      4   parameter


; Stack Frame Size: 70 (bytes)
;       Spill Code: 0 (instruction)


_Set_PosScac:
	LD	HL,-15
	CALL	__frameset
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_189
L_187:
	LD	BC,1
	LD	(IX+-3),BC
	LD	HL,(IX+-6)
	LD	BC,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	LD	(IX+-9),HL
	JR	L_186
L_184:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_PosScac
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	BC,(IX+-9)
	LD	HL,(IX+-15)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	BC,(IX+-3)
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+11
	LD	IY,(IX+-12)
	LD	(IY+0),BC
	LD	BC,(IX+-6)
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,187
	OR	A,A
	SBC	HL,BC
	LD	(IY+3),HL
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_186:
	LD	BC,(IX+-3)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L_184
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_189:
	LD	BC,(IX+-6)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__131
	JP	PE,L_187
	JR	L__132
L__131:
	JP	PO,L_187
L__132:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Set_PosScac ***************************
;Name                         Addr/Register   Size   Type
;_PosScac                            STATIC    600   variable
;O_52                                  IX-9      3   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_posiniz:
	LD	HL,-42
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_198
L_196:
	LD	BC,0
	LD	(IX+-6),BC
	LD	HL,(IX+-3)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-9),HL
	JR	L_195
L_193:
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(IX+-9)
	LD	DE,_scac
	ADD	HL,DE
	ADD	HL,BC
	LD	DE,0
	LD	(HL),DE
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	HL,(IX+-9)
	LD	DE,_oldscac
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,16777215
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),255
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_195:
	LD	BC,10
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L__138
	JP	PE,L_193
	JR	L__139
L__138:
	JP	PO,L_193
L__139:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_198:
	LD	BC,10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__140
	JP	PE,L_196
	JR	L__141
L__140:
	JP	PO,L_196
L__141:
	LD	IY,_scac
	LEA	HL,IY+44
	LD	BC,5
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LEA	HL,IY+84
	LD	BC,4
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	HL,_scac+124
	LD	(IX+-30),HL	; spill
	LD	BC,3
	LD	HL,(IX+-30)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-30)	; unspill
	INC	HL
	LD	(IX+-30),HL	; spill
	INC	HL
	LD	(IX+-30),HL	; spill
	INC	HL
	LD	(IX+-30),HL	; spill
	LD	BC,160
	LD	HL,_scac
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-30)	; unspill
	LD	(HL),0
	LEA	HL,IY+4
	LD	(IX+-33),HL	; spill
	LD	BC,2
	LD	HL,(IX+-33)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-33)	; unspill
	INC	HL
	LD	(IX+-33),HL	; spill
	INC	HL
	LD	(IX+-33),HL	; spill
	INC	HL
	LD	(IX+-33),HL	; spill
	LD	HL,_scac
	LD	BC,200
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-33)	; unspill
	LD	(HL),0
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-36),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	BC,1
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-36)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-36)	; unspill
	INC	HL
	LD	(IX+-36),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-36)	; unspill
	INC	HL
	LD	(IX+-36),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-36)	; unspill
	INC	HL
	LD	(IX+-36),HL	; spill
	LD	HL,_scac
	LD	BC,240
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-36)	; unspill
	LD	(HL),0
	LEA	HL,IY+4
	LD	(IX+-39),HL	; spill
	LD	BC,3
	LD	HL,(IX+-39)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-39)	; unspill
	INC	HL
	LD	(IX+-39),HL	; spill
	INC	HL
	LD	(IX+-39),HL	; spill
	INC	HL
	LD	(IX+-39),HL	; spill
	LD	HL,_scac
	LD	BC,280
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-39)	; unspill
	LD	(HL),0
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LEA	HL,IY+4
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	BC,4
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-42)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-42)	; unspill
	INC	HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-42)	; unspill
	INC	HL
	LD	(IX+-42),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-42)	; unspill
	INC	HL
	LD	(IX+-42),HL	; spill
	LD	HL,_scac
	LD	BC,320
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-42)	; unspill
	LD	(HL),0
	LEA	HL,IY+4
	LD	BC,5
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_203
L_201:
	LD	HL,(IX+-3)
	LD	BC,(IX+-3)
	LD	DE,6
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+8
	LD	(HL),DE
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_203:
	LD	BC,(IX+-3)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__142
	JP	PE,L_201
	JR	L__143
L__142:
	JP	PO,L_201
L__143:
	LD	IY,_scac
	LEA	HL,IY+72
	LD	BC,11
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LEA	HL,IY+112
	LD	BC,10
	LD	(HL),BC
	INC	HL
	INC	HL
	LEA	IY,IY+120
	INC	HL
	LD	(HL),0
	LEA	HL,IY+32
	LD	(IX+-15),HL	; spill
	LD	BC,9
	LD	HL,(IX+-15)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-15)	; unspill
	INC	HL
	LD	(IX+-15),HL	; spill
	INC	HL
	LD	(IX+-15),HL	; spill
	INC	HL
	LD	(IX+-15),HL	; spill
	LD	BC,160
	LD	HL,_scac
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-15)	; unspill
	LD	(HL),0
	LEA	HL,IY+32
	LD	(IX+-18),HL	; spill
	LD	BC,8
	LD	HL,(IX+-18)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-18)	; unspill
	INC	HL
	LD	(IX+-18),HL	; spill
	INC	HL
	LD	(IX+-18),HL	; spill
	INC	HL
	LD	(IX+-18),HL	; spill
	LD	HL,_scac
	LD	BC,200
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-18)	; unspill
	LD	(HL),0
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LEA	HL,IY+32
	LD	(IX+-21),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	BC,7
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-21)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-21)	; unspill
	INC	HL
	LD	(IX+-21),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-21)	; unspill
	INC	HL
	LD	(IX+-21),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-21)	; unspill
	INC	HL
	LD	(IX+-21),HL	; spill
	LD	HL,_scac
	LD	BC,240
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-21)	; unspill
	LD	(HL),0
	LEA	HL,IY+32
	LD	(IX+-24),HL	; spill
	LD	BC,9
	LD	HL,(IX+-24)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-24)	; unspill
	INC	HL
	LD	(IX+-24),HL	; spill
	INC	HL
	LD	(IX+-24),HL	; spill
	INC	HL
	LD	(IX+-24),HL	; spill
	LD	HL,_scac
	LD	BC,280
	ADD	HL,BC
	LD	IY,HL
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-24)	; unspill
	LD	(HL),0
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LEA	HL,IY+32
	LD	(IX+-27),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	BC,10
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-27)	; unspill
	LD	(HL),BC
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-27)	; unspill
	INC	HL
	LD	(IX+-27),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-27)	; unspill
	INC	HL
	LD	(IX+-27),HL	; spill
	LD	HL,(IX+-12)	; unspill
	LD	(IX+-12),HL	; spill
	LD	HL,(IX+-27)	; unspill
	INC	HL
	LD	(IX+-27),HL	; spill
	LD	HL,_scac
	LD	BC,320
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-27)	; unspill
	LD	(HL),0
	LEA	HL,IY+32
	LD	BC,11
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_208
L_206:
	LD	HL,(IX+-3)
	LD	BC,(IX+-3)
	LD	DE,12
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+28
	LD	(HL),DE
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_208:
	LD	BC,(IX+-3)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__144
	JP	PE,L_206
	JR	L__145
L__144:
	JP	PO,L_206
L__145:
	CALL	_Set_PosScac
	LD	SP,IX
	POP	IX
	RET	


;**************************** _posiniz ***************************
;Name                         Addr/Register   Size   Type
;_oldscac                            STATIC    400   variable
;_scac                               STATIC    400   variable
;O_55                                  IX-9      3   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 48 (bytes)
;       Spill Code: 122 (instruction)


_stampap:
	LD	HL,-37
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	LD	(IX+-25),0
	LD	BC,8
	LD	(IX+-18),BC
	JR	L_286
L_284:
	LD	BC,1
	LD	(IX+-21),BC
	JR	L_283
L_281:
	LD	HL,(IX+-21)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-21)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-12),HL
	LD	HL,(IX+-18)
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-15),HL
	LD	HL,(IX+-12)
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-12)
	LD	BC,_oldscac
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	IY,BC
	LD	BC,(IY)
	LD	A,(IY+3)
	CALL	__lcmps
	JR	Z,L_282
	LD	BC,_scac
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	HL,(IX+-12)
	LD	DE,_oldscac
	ADD	HL,DE
	LD	DE,(IX+-15)
	ADD	HL,DE
	LD	A,(IY+3)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	HL,(IX+-21)
	LD	BC,(IX+-21)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_PosScac
	ADD	HL,BC
	LD	(IX+-31),HL
	LD	HL,(IX+-18)
	ADD	HL,HL
	LD	DE,(IX+-18)
	LD	BC,(IX+-31)
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	IY,(IX+-28)
	LD	BC,(IY+0)
	INC	BC
	LD	(IX+-9),BC
	LD	BC,(IY+3)
	INC	BC
	LD	(IX+-6),BC
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_272
	LD	BC,(IX+-9)
	DEC	BC
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,8
	CALL	__ishl_b
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,(IX+-9)
	LD	(IX+-34),DE	; spill
	LD	DE,(_VideoMem)
	LD	(IX+-37),DE	; spill
	LD	DE,(IX+-34)	; unspill
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	DE,(IX+-37)	; unspill
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+-25),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_272:
	LD	BC,_scac
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__seqcase
L__149:
	DW	13
	DW	0
	DB	0
	DW24	L_218	

	DW24	L_224	

	DW24	L_228	

	DW24	L_232	

	DW24	L_236	

	DW24	L_240	

	DW24	L_244	

	DW24	L_248	

	DW24	L_252	

	DW24	L_256	

	DW24	L_260	

	DW24	L_264	

	DW24	L_268	

	DW24	L_279	

L_218:
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_223
	LD	A,(IX+-25)
	CP	A,13
	JR	NZ,L_220
	LD	BC,(_bPiece)
	LD	(IX+-24),BC
	JR	L_221
L_220:
	LD	BC,(_wPiece)
	LD	(IX+-24),BC
L_221:
	LD	BC,(IX+-24)
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-6)
	DEC	BC
	PUSH	BC
	LD	BC,(IX+-9)
	DEC	BC
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_223:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_279
L_224:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_226
	LD	HL,_Bianchi+15
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_226:
	LD	HL,_Neri+15
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_228:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_230
	LD	HL,_Bianchi+12
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_230:
	LD	HL,_Neri+12
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_232:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_234
	LD	HL,_Bianchi+6
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_234:
	LD	HL,_Neri+6
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_236:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_238
	LD	HL,_Bianchi+3
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_238:
	LD	HL,_Neri+3
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_240:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_242
	LD	HL,_Bianchi+9
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_242:
	LD	HL,_Neri+9
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_244:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_246
	LD	BC,(_Bianchi)
	LD	(IX+-3),BC
	JR	L_279
L_246:
	LD	BC,(_Neri)
	LD	(IX+-3),BC
	JR	L_279
L_248:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_250
	LD	HL,_Neri+15
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_250:
	LD	HL,_Bianchi+15
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_252:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_254
	LD	HL,_Neri+12
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_254:
	LD	HL,_Bianchi+12
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_256:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_258
	LD	HL,_Neri+6
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_258:
	LD	HL,_Bianchi+6
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_260:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_262
	LD	HL,_Neri+3
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_262:
	LD	HL,_Bianchi+3
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_264:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_266
	LD	HL,_Neri+9
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_266:
	LD	HL,_Bianchi+9
	LD	BC,(HL)
	LD	(IX+-3),BC
	JR	L_279
L_268:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_270
	LD	BC,(_Neri)
	LD	(IX+-3),BC
	JR	L_279
L_270:
	LD	BC,(_Bianchi)
	LD	(IX+-3),BC
L_279:
	LD	BC,0
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_282
	LD	A,(IX+6)
	OR	A,A
	JR	Z,L_277
	LD	A,(IX+-25)
	CP	A,13
	JR	NZ,L_274
	LD	BC,(_bPiece)
	LD	(IX+-24),BC
	JR	L_275
L_274:
	LD	BC,(_wPiece)
	LD	(IX+-24),BC
L_275:
	LD	BC,(IX+-24)
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-6)
	DEC	BC
	PUSH	BC
	LD	BC,(IX+-9)
	DEC	BC
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_277:
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,23
	PUSH	BC
	LD	BC,22
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_Draw_Trans_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_282:
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-21),BC
L_283:
	LD	BC,9
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	JP	M,L_281
	LD	BC,(IX+-18)
	DEC	BC
	LD	(IX+-18),BC
L_286:
	LD	BC,(IX+-18)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L__170
	JP	PE,L_284
	JR	L__171
L__170:
	JP	PO,L_284
L__171:
	LD	A,(_DeleteBack)
	OR	A,A
	JR	NZ,L_289
	LD	A,1
	LD	(_DeleteBack),A
L_289:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _stampap ***************************
;Name                         Addr/Register   Size   Type
;_DeleteBack                         STATIC      1   variable
;_Draw_Trans_Image                   IMPORT  -----   function
;_Neri                               STATIC     18   variable
;_Bianchi                            STATIC     18   variable
;_mColore                            STATIC      1   variable
;_Draw_Image                         IMPORT  -----   function
;_wPiece                             STATIC      3   variable
;_bPiece                             STATIC      3   variable
;_VideoMem                           STATIC      3   variable
;_PosScac                            STATIC    600   variable
;_oldscac                            STATIC    400   variable
;_scac                               STATIC    400   variable
;Val                                  IX-25      1   variable
;pBack                                IX-24      3   variable
;let                                  IX-21      3   variable
;num                                  IX-18      3   variable
;G_23                                 IX-15      3   variable
;G_22                                 IX-12      3   variable
;PosX                                  IX-9      3   variable
;PosY                                  IX-6      3   variable
;pImg                                  IX-3      3   variable
;EraseBack                             IX+6      1   parameter


; Stack Frame Size: 46 (bytes)
;       Spill Code: 4 (instruction)


_mossaimposs:
	LD	HL,-24
	CALL	__frameset
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-6),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-15),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-9),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-18),HL
	LD	BC,(IX+-6)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	M,L_291
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__187
	JP	PE,L_294
	JR	L__188
L__187:
	JP	PO,L_294
L__188:
L_291:
	LD	HL,2
	JR	L_311
L_294:
	LD	BC,(IX+-15)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	M,L__189
	JP	PE,L_293
	JR	L__190
L__189:
	JP	PO,L_293
L__190:
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JP	P,L__191
	JP	PE,L_298
	JR	L__192
L__191:
	JP	PO,L_298
L__192:
L_293:
	LD	HL,2
	JR	L_311
L_298:
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-15)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	(IX+-24),HL
	LD	IY,(IX+-12)
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,6
	LD	E,0
	CALL	__lcmps
	JP	M,L__193
	JP	PE,L_301
	JR	L__194
L__193:
	JP	PO,L_301
L__194:
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	IY,(IX+-12)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_301
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-9)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+3)
	LD	HL,6
	LD	E,0
	CALL	__lcmps
	JP	M,L__195
	JP	PE,L_301
	JR	L__196
L__195:
	JP	PO,L_301
L__196:
	LD	HL,2
	JR	L_311
L_301:
	LD	BC,(IX+-24)
	LD	(IX+-21),BC
	LD	IY,(IX+-21)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JP	M,L__197
	JP	PE,L_304
	JR	L__198
L__197:
	JP	PO,L_304
L__198:
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-9)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JP	M,L__199
	JP	PE,L_304
	JR	L__200
L__199:
	JP	PO,L_304
L__200:
	LD	HL,2
	JR	L_311
L_304:
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-9)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,4
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_303
	LD	IY,(IX+-3)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_306
L_303:
	LD	HL,1
	JR	L_311
L_306:
	LD	IY,(IX+-21)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_309
	LD	HL,1
	JR	L_311
L_309:
	LD	IY,(IX+-3)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_308
	LD	IY,(IX+-3)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_310
L_308:
	LD	HL,1
	JR	L_311
L_310:
	OR	A,A
	SBC	HL,HL
L_311:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mossaimposs ***************************
;Name                         Addr/Register   Size   Type
;_scac                               STATIC    400   variable
;G_29                                 IX-24      3   variable
;G_33                                 IX-21      3   variable
;m_d100_m10                           IX-18      3   variable
;m_m10                                IX-15      3   variable
;G_27                                 IX-12      3   variable
;m_d1000_m10                           IX-9      3   variable
;m_d10_m10                             IX-6      3   variable
;G_31                                  IX-3      3   variable
;m                                     IX+6      4   parameter


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


_calcolamosse:
	LD	HL,-219
	CALL	__frameset
	LD	BC,1
	LD	(IX+-13),BC
	JR	L_532
L_530:
	LD	BC,1
	LD	(IX+-16),BC
	JR	L_529
L_527:
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_320
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-57),HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-57)
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	IY,(IX+-38)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,2
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_352
	LD	IY,(IX+-38)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_352
	LD	IY,(IX+-38)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,5
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_352
L_320:
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_392
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-51),HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-51)
	ADD	HL,BC
	LD	(IX+-29),HL
	LD	IY,(IX+-29)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,8
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_352
	LD	IY,(IX+-29)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_352
	LD	IY,(IX+-29)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,11
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_392
L_352:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_326:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_327
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-117),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-117)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-120),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-120)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_324
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_324:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_323
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_327
L_323:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_327:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_326
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_334:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_335
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-111),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-111)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-114),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-114)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_332
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_332:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_331
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_335
L_331:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_335:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_334
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_342:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-10)
	INC	BC
	LD	(IX+-10),BC
	LD	BC,(IX+-7)
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_343
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-105),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-105)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-108),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-108)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_340
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_340:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_339
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_343
L_339:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_343:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_342
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_350:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-10)
	DEC	BC
	LD	(IX+-10),BC
	LD	BC,(IX+-7)
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_351
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-99),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-99)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-102),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-102)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_348
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_348:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_347
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_351
L_347:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_351:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_350
L_392:
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_359
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-48),HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-48)
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	IY,(IX+-32)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,2
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_391
	LD	IY,(IX+-32)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_391
	LD	IY,(IX+-32)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,3
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_391
L_359:
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_452
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-54),HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-54)
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	IY,(IX+-35)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,8
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_391
	LD	IY,(IX+-35)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,7
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_391
	LD	IY,(IX+-35)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,9
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_452
L_391:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_365:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	INC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_366
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-93),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-93)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-96),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-96)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_363
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_363:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_362
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_366
L_362:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_366:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_365
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_373:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_374
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-87),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-87)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-90),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-90)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_371
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_371:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_370
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_374
L_370:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_374:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_373
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_381:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	INC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_382
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-81),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-81)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-84),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-84)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_379
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_379:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_378
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_382
L_378:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_382:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_381
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
L_389:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_390
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-75),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-75)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-78),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-78)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_387
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_387:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_386
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_390
L_386:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_390:
	LD	BC,0
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_389
L_452:
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_395
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,4
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_451
L_395:
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_489
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_489
L_451:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+2
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	INC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_402
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-85),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-85)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-88),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-88)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_400
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_400:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_399
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_402
L_399:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_402:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+2
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_409
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-79),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-79)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-82)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_407
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_407:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_406
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_409
L_406:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_409:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+-2
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	INC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_416
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-73),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-73)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-76),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-76)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_414
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_414:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_413
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_416
L_413:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_416:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+-2
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_423
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-67)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-70)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_421
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_421:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_420
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_423
L_420:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_423:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-10)
	LEA	IY,IY+2
	LD	(IX+-10),IY
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_430
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-61),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-61)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-64),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-64)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_428
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_428:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_427
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_430
L_427:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_430:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-10)
	LEA	IY,IY+2
	LD	(IX+-10),IY
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_437
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-55),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-55)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-58),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-58)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_435
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_435:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_434
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_437
L_434:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_437:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-10)
	LEA	IY,IY+-2
	LD	(IX+-10),IY
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_444
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-49),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-49)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-52),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-52)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_442
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_442:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_441
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_444
L_441:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_444:
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-10)
	LEA	IY,IY+-2
	LD	(IX+-10),IY
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_489
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-43),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-43)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-46),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-46)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_449
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_449:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_448
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_489
L_448:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_489:
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	(IX+-45),HL
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	(IX+-63),HL
	LD	IY,(IX+-63)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,6
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_526
	LD	BC,0
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_526
	LD	HL,(IX+-13)
	INC	HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-41),HL
	LD	BC,(IX+-22)
	LD	(IX+-45),BC
	LD	HL,(IX+-22)
	LD	BC,(IX+-41)
	ADD	HL,BC
	LD	(IX+-66),HL
	LD	IY,(IX+-66)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L__281
	LD	A,1
	JR	L__282
L__281:
	XOR	A,A
L__282:
	LD	(IX+-42),A
	OR	A,A
	JR	NZ,L_469
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_469
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-37),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-37)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-40),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-40)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_458
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_458:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_457
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_469
L_457:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_469:
	LD	BC,2
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_478
	LD	A,(IX+-42)
	OR	A,A
	JR	NZ,L_478
	LD	BC,(IX+-22)
	LD	(IX+-45),BC
	LD	IY,(IX+-13)
	LEA	BC,IY+2
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-22)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_478
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+2
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_478
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-31),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-31)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-34),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-34)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_466
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_466:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_465
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_478
L_465:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_478:
	LD	BC,(IX+-16)
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-41)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_487
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-10)
	INC	BC
	LD	(IX+-10),BC
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_487
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-25)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-28),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-28)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_475
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_475:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_474
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_487
L_474:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_487:
	LD	BC,(IX+-16)
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-41)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_526
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_526
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-19),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-19)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-22),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-22)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_484
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_484:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_483
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_526
L_483:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_526:
	LD	IY,(IX+-63)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,12
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_528
	LD	BC,1
	LD	HL,(_col_prof)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_528
	LD	BC,(IX+-45)
	LD	(IX+-60),BC
	LD	HL,(IX+-13)
	DEC	HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-25),HL
	LD	BC,(IX+-60)
	ADD	HL,BC
	LD	(IX+-69),HL
	LD	IY,(IX+-69)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L__304
	LD	A,1
	JR	L__305
L__304:
	XOR	A,A
L__305:
	LD	(IX+-26),A
	OR	A,A
	JR	NZ,L_506
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_506
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-13),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-13)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-16),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-16)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_495
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_495:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_494
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_506
L_494:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_506:
	LD	BC,7
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_515
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_515
	LD	IY,(IX+-13)
	LEA	BC,IY+-2
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-60)
	ADD	HL,BC
	LD	BC,0
	XOR	A,A
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	CALL	__lcmps
	JR	NZ,L_515
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	IY,(IX+-7)
	LEA	BC,IY+-2
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_515
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-7),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-7)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-10),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-10)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_503
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_503:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_502
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_515
L_502:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_515:
	LD	BC,(IX+-16)
	INC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_524
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-10)
	INC	BC
	LD	(IX+-10),BC
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	CALL	__itol
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mossaimposs
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_524
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-1),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-1)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-4),HL	; spill
	POP	IY
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	BC,(IY+-4)
	POP	IY
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_512
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_512:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_511
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_524
L_511:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_524:
	LD	BC,(IX+-16)
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmps
	JR	Z,L_528
	LD	BC,(IX+-16)
	LD	(IX+-10),BC
	LD	BC,(IX+-13)
	LD	(IX+-7),BC
	LD	HL,(IX+-16)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	HL,(IX+-13)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-13)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	BC,(IX+-7)
	DEC	BC
	LD	(IX+-7),BC
	LD	DE,(IX+-10)
	DEC	DE
	LD	(IX+-10),DE
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__itol
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-10)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-10)
	ADD	HL,BC
	ADD	HL,HL
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_mossaimposs
	POP	BC
	POP	BC
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	Z,L_528
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-123),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-123)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-126),HL	; spill
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-126)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(_prof)
	LD	A,(_prof+3)
	LD	E,A
	XOR	A,A
	LD	BC,0
	CALL	__lcmps
	JR	NZ,L_521
	LD	BC,(IX+-4)
	LD	(_mossa_in_analisi),BC
	LD	A,(IX+-1)
	LD	(_mossa_in_analisi+3),A
L_521:
	LD	A,(IX+6)
	OR	A,A
	JR	NZ,L_520
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sceglimossa
	POP	BC
	POP	BC
	JR	L_528
L_520:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_raccogli
	POP	BC
	POP	BC
L_528:
	LD	BC,(IX+-16)
	INC	BC
	LD	(IX+-16),BC
L_529:
	LD	BC,(IX+-16)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L_527
	LD	BC,(IX+-13)
	INC	BC
	LD	(IX+-13),BC
L_532:
	LD	BC,(IX+-13)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JP	P,L__326
	JP	PE,L_530
	JR	L__327
L__326:
	JP	PO,L_530
L__327:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _calcolamosse ***************************
;Name                         Addr/Register   Size   Type
;_raccogli                           IMPORT  -----   function
;_sceglimossa                        STATIC  -----   function
;_mossa_in_analisi                   STATIC      4   variable
;_prof                               STATIC      4   variable
;_mossaimposs                        IMPORT  -----   function
;_scac                               STATIC    400   variable
;_col_prof                           STATIC      3   variable
;G_66                                 IX-69      3   variable
;G_56                                 IX-66      3   variable
;G_63                                 IX-63      3   variable
;G_69                                 IX-60      3   variable
;G_38                                 IX-57      3   variable
;G_50                                 IX-54      3   variable
;G_42                                 IX-51      3   variable
;G_46                                 IX-48      3   variable
;G_65                                 IX-45      3   variable
;G_57                                 IX-42      1   variable
;G_60                                 IX-41      3   variable
;G_39                                 IX-38      3   variable
;G_51                                 IX-35      3   variable
;G_47                                 IX-32      3   variable
;G_43                                 IX-29      3   variable
;G_67                                 IX-26      1   variable
;G_70                                 IX-25      3   variable
;G_54                                 IX-22      3   variable
;rit                                  IX-19      3   variable
;lp                                   IX-16      3   variable
;np                                   IX-13      3   variable
;la                                   IX-10      3   variable
;na                                    IX-7      3   variable
;m                                     IX-4      4   variable
;modo                                  IX+6      1   parameter


; Stack Frame Size: 228 (bytes)
;       Spill Code: 96 (instruction)


_modifica:
	LD	HL,-36
	CALL	__frameset
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-30),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-15),HL
	LD	HL,(IX+-30)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+-30)
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-9),HL
	LD	(IX+-24),HL
	LD	HL,(IX+-9)
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-15)
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-12),HL
	LD	(IX+-18),HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,1000000
	XOR	A,A
	CALL	__ldivu
	LD	BC,100
	XOR	A,A
	CALL	__lremu
	LD	IY,(IX+-3)
	LD	(IY),HL
	LD	(IY+3),E
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,1000
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,40
	XOR	A,A
	CALL	__lmulu
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-36),HL	; spill
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,100
	XOR	A,A
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+-36)	; unspill
	ADD	HL,BC
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,6
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_538
	LD	BC,8
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_538
	LD	BC,(IX+-9)
	LD	(IX+-24),BC
	LD	BC,(IX+-12)
	LD	(IX+-18),BC
	LD	HL,(IX+-9)
	LD	BC,_scac
	ADD	HL,BC
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	BC,2
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
L_538:
	LD	BC,(IX+-24)
	LD	HL,_scac
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	BC,(IX+-18)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,12
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_539
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_539
	LD	HL,(IX+-21)
	LD	BC,8
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
L_539:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _modifica ***************************
;Name                         Addr/Register   Size   Type
;_scac                               STATIC    400   variable
;m_d10_m10                            IX-30      3   variable
;G_76                                 IX-27      3   variable
;G_74                                 IX-24      3   variable
;G_77                                 IX-21      3   variable
;G_75                                 IX-18      3   variable
;m_m10                                IX-15      3   variable
;G_73                                 IX-12      3   variable
;G_72                                  IX-9      3   variable
;m                                     IX+6      4   parameter


; Stack Frame Size: 48 (bytes)
;       Spill Code: 2 (instruction)


_acquisisci:
	LD	HL,-33
	CALL	__frameset
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,218
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(_PlayerColor)
	OR	A,A
	JR	NZ,L_541
	LD	BC,(_wPlay)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,245
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JR	L_544
L_541:
	LD	BC,(_bPlay)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,243
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_544:
	CALL	_Crea_Mossa
	LD	A,(_chAbort)
	OR	A,A
	JR	NZ,L_543
	LD	A,(_Mossa1)
	LD	IY,_Mossa1
	LD	(IX+-8),A
	LEA	HL,IX+-8
	INC	HL
	LD	A,(IY+1)
	LD	(HL),A
	LEA	IY,IX+-8
	LD	A,(_Mossa2)
	LD	HL,_Mossa2
	INC	HL
	LD	(IY+2),A
	LD	A,(HL)
	LD	(IY+3),A
	LD	A,(IX+-8)
	SEXT	HL
	LD	L,(IX+-8)
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777120
	LD	A,255
	CALL	__ladd
	LD	(IX+-24),HL
	LEA	HL,IX+-8
	INC	HL
	LD	(IX+-21),E
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777168
	LD	A,255
	CALL	__ladd
	LD	(IX+-12),HL
	LEA	HL,IY+2
	LD	(IX+-9),E
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777120
	LD	A,255
	CALL	__ladd
	LD	(IX+-16),HL
	LEA	HL,IX+-5
	LD	(IX+-13),E
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,16777168
	LD	A,255
	CALL	__ladd
	LD	(IX+-20),HL
	LD	(IX+-17),E
	LD	HL,(IX+-24)
	LD	E,(IX+-21)
	LD	BC,1000
	XOR	A,A
	CALL	__lmuls
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,100
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-16)
	LD	E,(IX+-13)
	LD	BC,10
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-24)
	LD	E,(IX+-21)
	LD	BC,40
	XOR	A,A
	CALL	__lmuls
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-30),HL	; spill
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,4
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-30)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,1000000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	HL,(IX+-16)
	LD	E,(IX+-13)
	LD	BC,40
	XOR	A,A
	CALL	__lmuls
	LD	BC,_scac
	ADD	HL,BC
	LD	(IX+-33),HL	; spill
	LD	HL,(IX+-20)
	LD	E,(IX+-17)
	LD	BC,4
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-33)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,10000
	XOR	A,A
	CALL	__lmuls
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__ladd
	LD	(IX+-4),HL
	LD	(IX+-1),E
	JR	L_545
L_543:
	OR	A,A
	SBC	HL,HL
	LD	E,0
	JR	L_548
L_545:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_controllo
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_544
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
L_548:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _acquisisci ***************************
;Name                         Addr/Register   Size   Type
;_controllo                          IMPORT  -----   function
;_scac                               STATIC    400   variable
;_Mossa2                             STATIC      2   variable
;_Mossa1                             STATIC      2   variable
;_chAbort                            STATIC      1   variable
;_Crea_Mossa                         IMPORT  -----   function
;_bPlay                              STATIC      3   variable
;_wPlay                              STATIC      3   variable
;_Draw_Image                         IMPORT  -----   function
;_PlayerColor                        STATIC      1   variable
;_Fill_Rectangle                     IMPORT  -----   function
;lp                                   IX-24      4   variable
;na                                   IX-20      4   variable
;la                                   IX-16      4   variable
;np                                   IX-12      4   variable
;s                                     IX-8      4   variable
;m                                     IX-4      4   variable


; Stack Frame Size: 39 (bytes)
;       Spill Code: 4 (instruction)


_apri:
	LD	HL,-11
	CALL	__frameset
	CALL	_rand
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,5005
	ADD	HL,BC
	PUSH	HL
	CALL	_srand
	POP	BC
	CALL	_rand
	LD	DE,HL
	LD	(IX+-10),DE
	LD	(IX+-11),D
	CALL	_rand
	LD	DE,(IX+-10)
	LD	D,(IX+-11)
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	PUSH	HL
	CALL	_srand
	POP	BC
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	(IX+-7),HL
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_559
L_557:
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_556
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	LD	HL,(IX+-3)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	Z,L__340
	LD	A,1
	JR	L__341
L__340:
	XOR	A,A
L__341:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_551
	LD	BC,_Chs2
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
L_551:
	CALL	_acquisisci
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(_chAbort)
	OR	A,A
	JR	NZ,L_560
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	LD	BC,_Chs1
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	LD	HL,(IX+-7)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_ap+32
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	LD	H,0
	LD	L,A
	PUSH	HL
	LD	BC,(IY)
	PUSH	BC
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_558
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	LD	BC,_Chs2
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	JR	L_558
L_556:
	LD	HL,(IX+-7)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_ap
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	LD	H,0
	LD	L,A
	PUSH	HL
	LD	BC,(IY)
	PUSH	BC
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	CALL	_acquisisci
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
L_558:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_559:
	LD	BC,2
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_557
L_560:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _apri ***************************
;Name                         Addr/Register   Size   Type
;_ap                                 STATIC     64   variable
;_Chs1                               STATIC     15   variable
;_chAbort                            STATIC      1   variable
;_acquisisci                         IMPORT  -----   function
;_modifica                           IMPORT  -----   function
;_Chs2                               STATIC     15   variable
;_Play_Raw_Audio                     IMPORT  -----   function
;_DeleteBack                         STATIC      1   variable
;_stampap                            IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_srand                              IMPORT  -----   function
;casuale                               IX-7      3   variable
;G_78                                  IX-4      1   variable
;i                                     IX-3      3   variable
;colore_utente                         IX+6      3   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


_controllo:
	LD	HL,-4
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	LD	(IX+-4),0
	LD	BC,1
	PUSH	BC
	LD	BC,0
	LD	(_cont),BC
	XOR	A,A
	LD	(_cont+3),A
	CALL	_calcolamosse
	POP	BC
	JR	L_563
L_564:
	LD	BC,(IX+-3)
	INC	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,_possibili
	ADD	HL,DE
	LD	IY,HL
	LD	(IX+-3),BC
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lcmpu
	JR	NZ,L_563
	LD	(IX+-4),1
	JR	L_565
L_563:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_possibili
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
	LD	BC,0
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_564
L_565:
	LD	A,(IX+-4)
;   77	}
;   78	
;   79	#include "Screen.c"
;   80	#include "game.c"
;   81	
;   82	void MyMain(void)
;   83	{
;   84		char MyMenuValue;
;   85		char app[5], winner;	
;   86		
;   87		Load_Components();
;   88		
;   89		Set_320_240_Mode();
;   90		
;   91		BlackOut();
;   92		
;   93		Load_Raw_Data("logo.raw", VideoMem, 320*240);
;   94		
;   95		Load_Raw_Data("logo.pal", PaletteMem, 512);	
;   96		
;   97		WaitKeyPress();
;   98		
;   99		Play_Raw_Audio(&Click);
;  100		
;  101	LabelMainMenu:
;  102		
;  103		MyMenuValue = MainMenu();
;  104		
;  105		if (MyMenuValue == 1)
;  106		{
;  107			DeleteBack = 0;
;  108			livello = mLivello + 1;
;  109			col_prof = bianco;
;  110			PlayerColor = mColore;
;  111			
;  112			User.ri = 6;
;  113			User.co = 0;
;  114			
;  115			BlackOut();
;  116			
;  117			Load_Raw_Data("board.raw", VideoMem, 320*240);
;  118			Load_Raw_Data("board.pal", PaletteMem, 512);
;  119			
;  120			posiniz();		
;  121			apertura();
;  122			apri(col_prof);
;  123			
;  124			if (chAbort)
;  125				goto LabelMainMenu;
;  126			
;  127			nmossa = 4;		
;  128			
;  129			while (1)
;  130			{
;  131				Fill_Rectangle(63, 221, 102, 10, 0);
;  132				
;  133				mossa_giocata = acquisisci();
;  134				
;  135				modifica(mossa_giocata);
;  136				
;  137				if (chAbort)
;  138					goto LabelMainMenu;			
;  139				
;  140				stampap(DeleteBack);
;  141				
;  142				Play_Raw_Audio(&Chs1);
;  143				
;  144				winner = vincitore();
;  145				
;  146				if (winner != 0)
;  147				{
;  148					Show_End_Screen(winner);
;  149					
;  150					goto LabelMainMenu;
;  151				}
;  152				
;  153				nmossa++;
;  154				cambiacolore
;  155				
;  156				if (PlayerColor == 0)
;  157					PlayerColor = 1;
;  158				else
;  159					PlayerColor = 0;
;  160				
;  161				Draw_Image(63, 221, 102, 10, Think);
;  162		
;  163				Fill_Rectangle(218, 75, 96, 10, 0);
;  164		
;  165				if (PlayerColor == 0)
;  166					Draw_Image(245, 75, 42, 10, wPlay);
;  167				else
;  168					Draw_Image(243, 75, 48, 10, bPlay);
;  169				
;  170				inizializza();
;  171				calcolamosse(0);
;  172				modifica(mossa_giocata);
;  173				nmossa++;
;  174				
;  175				cambiacolore
;  176				stampap(DeleteBack);
;  177				
;  178				Play_Raw_Audio(&Chs2);
;  179				
;  180				winner = vincitore();
;  181				
;  182				if (winner != 0)
;  183				{
;  184					Show_End_Screen(winner);
;  185					
;  186					goto LabelMainMenu;
;  187				}
;  188				
;  189				if (PlayerColor == 0)
;  190					PlayerColor = 1;
;  191				else
;  192					PlayerColor = 0;
;  193			}
;  194			
;  195		}
;  196		
;  197		Disable_Audio();
;  198		
;  199		Free_All_Mem();
;  200		
;  201		asm ("push ix");
;  202		asm ("ld a, kr_os_display");
;  203		asm ("call.lil prose_kernal");
;  204		asm ("ld a, kr_clear_screen");
;  205		asm ("call.lil prose_kernal");
;  206		asm ("pop ix");
;  207		
;  208		print("Chess Fight ver 1.0b for eZ80P.\n\r");
;  209		print("Programmed by Enzo Antonio Calogiuri.\n\r");
;  210		print("\n\r");
;  211	}
;  212	
;  213	void WaitKeyPress(void)
;  214	{
;  215		asm ("push ix");
;  216		asm ("ld a, kr_wait_key");
;  217		asm ("call.lil prose_kernal");
;  218		asm ("pop ix");
;  219	}
;  220	
;  221	unsigned char GetKeyScanCode(void)
;  222	{
;  223		gScanCode = 0;
;  224		
;  225		asm ("push ix");
;  226		asm ("ld a, kr_wait_key");
;  227		asm ("call.lil prose_kernal");	
;  228		asm ("ld (_gScanCode), a");	
;  229		asm ("pop ix");
;  230		
;  231		return gScanCode;
;  232	}
;  233	
;  234	unsigned char ReadScancode(void)
;  235	{
;  236		BufKey = 0;
;  237		
;  238		asm ("push ix");
;  239		asm ("ld a, kr_get_key");
;  240		asm ("call.lil prose_kernal");
;  241		asm ("jr nz, NoKeyInB");
;  242		asm ("ld (_BufKey), a");
;  243		asm ("NoKeyInB:");
;  244		asm ("pop ix");
;  245		
;  246		return BufKey;
;  247	}
;  248	
;  249	void print(const char *txt)
;  250	{
;  251		TxtPnt = txt;
;  252		
;  253		asm ("push ix");
;  254		asm ("ld hl, (_TxtPnt)");
;  255		asm ("ld a, kr_print_string");
;  256		asm ("call.lil prose_kernal");
;  257		asm ("pop ix");	
;  258	}
;  259	
;  260	void Disable_Audio(void)
;  261	{
;  262		asm ("push ix");
;  263		asm ("ld a, kr_disable_audio");
;  264		asm ("call.lil prose_kernal");
;  265		asm ("pop ix");	
;  266	}
;  267	
;  268	void Play_Raw_Audio(const SndRec *S)
;  269	{
;  270		Snd = S;
;  271		
;  272		asm ("push ix");
;  273		asm ("ld hl, (_Snd)");
;  274		asm ("ld c, 11h");
;  275		asm ("ld a, kr_play_audio");
;  276		asm ("call.lil prose_kernal");
;  277		asm ("pop ix");	
;  278	}
;  279	/*------------------------------------------------------------------------------------------------------------------------*/
;  280	
;  281	void Free_All_Mem(void)
;  282	{
;  283		int i;
;  284		
;  285		free(mSelect);
;  286		free(mWhite);
;  287		free(mBlack);
;  288		free(mNormal);
;  289		free(mHard);
;  290		free(wSel);
;  291		free(rSel);
;  292		free(bsel);	
;  293		
;  294		for (i = 0; i < 6; i++)
;  295		{
;  296			free(Bianchi[i]);
;  297			free(Neri[i]);
;  298		}
;  299		
;  300		free(wPiece);
;  301		free(bPiece);
;  302		free(Think);
;  303		free(wPlay);
;  304		free(bPlay);	
;  305	}
;  306	
;  307	void Load_Components(void)
;  308	{
;  309		int i;
;  310		
;  311		print("\n\r Loading data...\n\r");
;  312		
;  313		mSelect = (char *)malloc(16 * 15);	//240
;  314		Load_Raw_Data("msel.raw", mSelect, 16 * 15);
;  315		
;  316		mWhite = (char *)malloc(42 * 10);	//420
;  317		Load_Raw_Data("white.raw", mWhite, 42 * 10);
;  318		
;  319		mBlack = (char *)malloc(48 * 10);	//480
;  320		Load_Raw_Data("black.raw", mBlack, 48 * 10);
;  321		
;  322		mNormal = (char *)malloc(58 * 10);	//580
;  323		Load_Raw_Data("normal.raw", mNormal, 58 * 10);
;  324		
;  325		mHard = (char *)malloc(38 * 10);	//380
;  326		Load_Raw_Data("hard.raw", mHard, 38 * 10);
;  327		
;  328		wSel = (char *)malloc(25 * 25);	//625
;  329		Load_Raw_Data("bsel.raw", wSel, 25 * 25);
;  330		
;  331		rSel = (char *)malloc(25 * 25);	//625
;  332		Load_Raw_Data("rsel.raw", rSel, 25 * 25);
;  333		
;  334		bsel = (char *)malloc(25 * 25);	//625
;  335		
;  336		for (i = 0; i < 6; i++)
;  337		{
;  338			Bianchi[i] = (char *)malloc(22 * 23);
;  339			Neri[i] = (char *)malloc(22 * 23);
;  340		}
;  341		
;  342		Load_Raw_Data("bped.raw", Bianchi[0], 22 * 23);
;  343		Load_Raw_Data("bcav.raw", Bianchi[1], 22 * 23);
;  344		Load_Raw_Data("balf.raw", Bianchi[2], 22 * 23);
;  345		Load_Raw_Data("btor.raw", Bianchi[3], 22 * 23);
;  346		Load_Raw_Data("breg.raw", Bianchi[4], 22 * 23);
;  347		Load_Raw_Data("bre.raw", Bianchi[5], 22 * 23);
;  348		
;  349		Load_Raw_Data("nped.raw", Neri[0], 22 * 23);
;  350		Load_Raw_Data("ncav.raw", Neri[1], 22 * 23);
;  351		Load_Raw_Data("nalf.raw", Neri[2], 22 * 23);
;  352		Load_Raw_Data("ntor.raw", Neri[3], 22 * 23);
;  353		Load_Raw_Data("nreg.raw", Neri[4], 22 * 23);
;  354		Load_Raw_Data("nre.raw", Neri[5], 22 * 23);
;  355		
;  356		wPiece = (char *)malloc(25 * 25);	//625
;  357		Load_Raw_Data("wpiece.raw", wPiece, 25 * 25);
;  358		
;  359		bPiece = (char *)malloc(25 * 25);	//625
;  360		Load_Raw_Data("bpiece.raw", bPiece, 25 * 25);
;  361		
;  362		Think = (char *)malloc(102 * 10);
;  363		Load_Raw_Data("pthink.raw", Think, 102 * 10);
;  364		
;  365		wPlay = (char *)malloc(42 * 10);
;  366		Load_Raw_Data("pwhite.raw", wPlay, 42 * 10);
;  367		
;  368		bPlay = (char *)malloc(48 * 10);
;  369		Load_Raw_Data("pblack.raw", bPlay, 48 * 10);
;  370		
;  371		Load_Raw_Data("click.snd", (char *)0x0C00000, 9220);
;  372		
;  373		Load_Raw_Data("chs1.snd", (char *)(0x0C00000 + (1024 * 15)), 2445);
;  374		
;  375		Load_Raw_Data("chs2.snd", (char *)(0x0C00000 + (1024 * 25)), 3311);
;  376		
;  377		Click.loc = (char *)0x0C00000;
;  378		Click.len = 9220;
;  379		Click.looploc = (char *)0x0C00000;
;  380		Click.looplen = 1;
;  381		Click.period = 0x73A3;
;  382		Click.volume = 84;
;  383		
;  384		Chs1.loc = (char *)(0x0C00000 + (1024 * 15));
;  385		Chs1.len = 2445;
;  386		Chs1.looploc = (char *)(0x0C00000 + (1024 * 15));
;  387		Chs1.looplen = 1;
;  388		Chs1.period = 0x73A3;
;  389		Chs1.volume = 84;
;  390		
;  391		Chs2.loc = (char *)(0x0C00000 + (1024 * 25));
;  392		Chs2.len = 3311;
;  393		Chs2.looploc = (char *)(0x0C00000 + (1024 * 25));
;  394		Chs2.looplen = 1;
;  395		Chs2.period = 0x73A3;
;  396		Chs2.volume = 84;
;  397	}
;  398	
;  399	void Draw_Image(int PosX, int PosY, int W, int H, char *ImgBuf)
;  400	{
;  401		int x, y;
;  402		
;  403		for (y = PosY; y < PosY + H; y++)
;  404			for (x = PosX; x < PosX + W; x++)
;  405				PutPixel(x, y, *ImgBuf++);
;  406	}
;  407	
;  408	void Draw_Trans_Image(int PosX, int PosY, int W, int H, char *ImgBuf, unsigned char Trans)
;  409	{
;  410		int x, y;
;  411		
;  412		for (y = PosY; y < PosY + H; y++)
;  413			for (x = PosX; x < PosX + W; x++)
;  414			{
;  415				if (*ImgBuf != Trans)
;  416					PutPixel(x, y, *ImgBuf);
;  417				
;  418				*ImgBuf++;
;  419			}
;  420				
;  421	}
;  422	
;  423	void Fill_Rectangle(int PosX, int PosY, int W, int H, unsigned char col)
;  424	{
;  425		int x, y;
;  426		
;  427		for (y = PosY; y < PosY + H; y++)
;  428			for (x = PosX; x < PosX + W; x++)
;  429				PutPixel(x, y, col);
;  430	}
;  431	
;  432	char MainMenu(void)
;  433	{
;  434		char PosSel = 0, OldPosSel = 0;
;  435		unsigned char SKey;	
;  436		
;  437		BlackOut();
;  438		
;  439		Load_Raw_Data("menu.raw", VideoMem, 320 * 240);
;  440		Load_Raw_Data("menu.pal", PaletteMem, 512);
;  441		
;  442		if (mColore == 0)
;  443			Draw_Image(190, 94, 42, 10, mWhite);
;  444		else
;  445			Draw_Image(190, 94, 48, 10, mBlack);
;  446		
;  447		Draw_Image(105, 91, 16, 15, mSelect);
;  448		
;  449		if (mLivello == 0)
;  450			Draw_Image(190, 116, 58, 10, mNormal);
;  451		else
;  452			Draw_Image(190, 116, 38, 10, mHard);
;  453		
;  454		while (1)
;  455		{
;  456			SKey = GetKeyScanCode();
;  457			
;  458			if (SKey == 0x75)
;  459			{
;  460				PosSel -= 1;
;  461				
;  462				if (PosSel < 0)
;  463					PosSel = 3;
;  464			}
;  465			
;  466			if (SKey == 0x72)
;  467			{
;  468				PosSel += 1;
;  469				
;  470				if (PosSel > 3)
;  471					PosSel = 0;
;  472			}
;  473			
;  474			if (PosSel != OldPosSel)
;  475			{
;  476				Play_Raw_Audio(&Click);
;  477				
;  478				Fill_Rectangle(105, 91 + (OldPosSel * 22), 16, 15, 0);
;  479				
;  480				Draw_Image(105, 91 + (PosSel * 22), 16, 15, mSelect);
;  481				
;  482				OldPosSel = PosSel;
;  483			}
;  484			
;  485			if (SKey == 0x29)
;  486			{
;  487				Play_Raw_Audio(&Click);
;  488				
;  489				switch (PosSel)
;  490				{
;  491					case 		0:
;  492						
;  493						if (mColore == 0)
;  494						{
;  495							Fill_Rectangle(190, 94, 42, 10, 0);
;  496				
;  497							Draw_Image(190, 94, 48, 10, mBlack);
;  498							
;  499							mColore = 1;
;  500						}
;  501						else
;  502						{
;  503							Fill_Rectangle(190, 94, 48, 10, 0);
;  504				
;  505							Draw_Image(190, 94, 42, 10, mWhite);
;  506							
;  507							mColore = 0;
;  508						}
;  509						break;
;  510						
;  511					case		1:
;  512						if (mLivello == 0)
;  513						{
;  514							Fill_Rectangle(190, 116, 58, 10, 0);
;  515							
;  516							Draw_Image(190, 116, 38, 10, mHard);
;  517							
;  518							mLivello = 1;
;  519						}
;  520						else
;  521						{
;  522							Fill_Rectangle(190, 116, 38, 10, 0);
;  523							
;  524							Draw_Image(190, 116, 58, 10, mNormal);
;  525							
;  526							mLivello = 0;
;  527						}
;  528						break;
;  529						
;  530					case 		2:
;  531						return 1;
;  532					
;  533					case 		3:
;  534						return 2;
;  535				}
;  536			}
;  537			
;  538		}
;  539		
;  540		return 0;
;  541	}
;  542	
;  543	void Save_Back_Selection(int PosX, int PosY, unsigned char Trans)
;  544	{
;  545		unsigned char Val = VideoMem[(PosY << 8) + (PosY << 6) + PosX];
;  546		char i, j;
;  547		
;  548		memset(bsel, Val, 25 * 25);
;  549		
;  550		for (j = 1; j < 24; j++)
;  551			for (i = 1; i < 24; i++)
;  552				bsel[(j * 25) + i] = Trans;
;  553	}
;  554	
;  555	void Draw_User_Selection(PlSel *uS, char SaveBK)
;  556	{
;  557		int PosX, PosY;
;  558		
;  559		PosX = (uS->co * 25) + 11;
;  560		PosY = (uS->ri * 25) + 12;
;  561		
;  562		if (SaveBK)
;  563			Save_Back_Selection(PosX, PosY, 0);
;  564		
;  565		Draw_Trans_Image(PosX, PosY, 25, 25, uS->Img, 0);
;  566	}
;  567	
;  568	void Ottiemi_Mossa(PlSel *uS, char *OutBuf)
;  569	{
;  570		PlSel Old;
;  571		unsigned char SKey;
;  572		
;  573		OutBuf[0] = 0;
;  574		OutBuf[1] = 0;
;  575		chAbort = 0;
;  576		
;  577		Old.co = uS->co;
;  578		Old.ri = uS->ri;
;  579		Old.Img = bsel;
;  580		
;  581		Draw_User_Selection(uS, 1);
;  582		
;  583		while (1)
;  584		{
;  585			SKey = GetKeyScanCode();
;  586			
;  587			if (SKey == 0x6B)
;  588			{
;  589				uS->co--;
;  590				
;  591				if (uS->co < 0)
;  592					uS->co = 0;
;  593			}
;  594			
;  595			if (SKey == 0x74)
;  596			{
;  597				uS->co++;
;  598				
;  599				if (uS->co > 7)
;  600					uS->co = 7;
;  601			}
;  602			
;  603			if (SKey == 0x75)
;  604			{
;  605				uS->ri--;
;  606				
;  607				if (uS->ri < 0)
;  608					uS->ri = 0;
;  609			}
;  610			
;  611			if (SKey == 0x72)
;  612			{
;  613				uS->ri++;
;  614				
;  615				if (uS->ri > 7)
;  616					uS->ri = 7;
;  617			}
;  618			
;  619			if (SKey == 0x07)
;  620			{
;  621				chAbort = 1;
;  622				
;  623				Draw_User_Selection(&Old, 0);
;  624				
;  625				return;
;  626			}
;  627			
;  628			if (SKey == 0x29)
;  629			{
;  630				Draw_User_Selection(&Old, 0);
;  631				
;  632				OutBuf[0] = 'a' + uS->co;
;  633				OutBuf[1] = '8' - uS->ri;
;  634				
;  635				return;
;  636			}			
;  637			
;  638			if ((Old.co != uS->co) || (Old.ri != uS->ri))
;  639			{
;  640				Draw_User_Selection(&Old, 0);
;  641				
;  642				Draw_User_Selection(uS, 1);
;  643				
;  644				Old.co = uS->co;
;  645				Old.ri = uS->ri;
;  646			}		
;  647		}
;  648	}
;  649	
;  650	void Crea_Mossa(void)
;  651	{
;  652		User.Img = wSel;
;  653		
;  654		Ottiemi_Mossa(&User, Mossa1);
;  655		
;  656		if (!chAbort)
;  657		{
;  658			User.Img = rSel;
;  659			
;  660			Ottiemi_Mossa(&User, Mossa2);
;  661		}
;  662	}
;  663	
;  664	void Show_End_Screen(char win)
;  665	{
;  666		unsigned int i, co, ri, x, y;
;  667		
;  668		
;  669		co = ((mossa_giocata / 10) % 10);
;  670		ri = mossa_giocata % 10;
;  671		
;  672		x = PosScac[co][ri].X;
;  673		y = PosScac[co][ri].Y;
;  674		
;  675		Draw_Trans_Image(x, y, 25, 25, rSel, 0);
;  676		
;  677		for (i = 0; i < 1500000; i++);	
;  678		
;  679		for (i = 0; i < 50; i++)
;  680			ReadScancode();	
;  681		
;  682		BlackOut();
;  683		
;  684		switch (win)
;  685		{
;  686			case	1:
;  687				
;  688				Load_Raw_Data("win.raw", VideoMem, 320 * 240);
;  689				Load_Raw_Data("win.pal", PaletteMem, 512);
;  690				break;
;  691				
;  692			case	2:
;  693				
;  694				Load_Raw_Data("lose.raw", VideoMem, 320 * 240);
;  695				Load_Raw_Data("lose.pal", PaletteMem, 512);
;  696				break;
;  697		}
;  698		
;  699		WaitKeyPress();
;  700		
;  701		Play_Raw_Audio(&Click);
	LD	SP,IX
	POP	IX
	RET	


;**************************** _controllo ***************************
;Name                         Addr/Register   Size   Type
;_possibili                          STATIC    400   variable
;_calcolamosse                       STATIC  -----   function
;_cont                               STATIC      4   variable
;superato                              IX-4      1   variable
;i                                     IX-3      3   variable
;m                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


_MyMain:
	LD	HL,-7
	CALL	__frameset
	CALL	_Load_Components
	CALL	_Set_320_240_Mode
	CALL	_BlackOut
	LD	BC,76800
	PUSH	BC
	LD	BC,(_VideoMem)
	PUSH	BC
	LD	BC,L__350
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	LD	BC,L__351
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	CALL	_WaitKeyPress
	LD	BC,_Click
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
L_567:
	CALL	_MainMenu
	LD	(IX+-2),A
	CP	A,1
	JR	NZ,L_595
	XOR	A,A
	LD	(_DeleteBack),A
	LD	A,(_mLivello)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	CALL	__itol
	LD	E,A
	LD	A,1
	LD	HL,BC
	CALL	__ladd_b
	LD	(_livello),HL
	LD	A,E
	LD	(_livello+3),A
	LD	BC,0
	LD	(_col_prof),BC
	LD	A,(_mColore)
	LD	(_PlayerColor),A
	LD	A,6
	LD	(_User),A
	XOR	A,A
	LD	(_User+1),A
	CALL	_BlackOut
	LD	BC,76800
	PUSH	BC
	LD	BC,(_VideoMem)
	PUSH	BC
	LD	BC,L__353
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	LD	BC,L__354
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	CALL	_posiniz
	CALL	_apertura
	LD	BC,(_col_prof)
	PUSH	BC
	CALL	_apri
	POP	BC
	LD	A,(_chAbort)
	OR	A,A
	JR	NZ,L_567
	LD	BC,4
	LD	(_nmossa),BC
	XOR	A,A
	LD	(_nmossa+3),A
L_593:
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,102
	PUSH	BC
	LD	BC,221
	PUSH	BC
	LD	BC,63
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	CALL	_acquisisci
	LD	A,E
	LD	C,A
	LD	(_mossa_giocata),HL
	LD	(_mossa_giocata+3),A
	LD	B,0
	PUSH	BC
	LD	BC,(_mossa_giocata)
	PUSH	BC
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(_chAbort)
	OR	A,A
	JR	NZ,L_567
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	LD	BC,_Chs1
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	CALL	_vincitore
	LD	(IX+-1),A
	OR	A,A
	JR	Z,L_574
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_Show_End_Screen
	POP	BC
	JR	L_567
L_574:
	LD	A,(_nmossa+3)
	LD	E,A
	LD	A,1
	LD	HL,(_nmossa)
	CALL	__ladd_b
	LD	(_nmossa),HL
	LD	A,E
	LD	(_nmossa+3),A
	LD	HL,(_col_prof)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_576
	LD	BC,1
	LD	(_col_prof),BC
	JR	L_579
L_576:
	LD	(_col_prof),BC
L_579:
	LD	A,(_PlayerColor)
	OR	A,A
	JR	NZ,L_578
	LD	A,1
	LD	(_PlayerColor),A
	JR	L_580
L_578:
	XOR	A,A
	LD	(_PlayerColor),A
L_580:
	LD	BC,(_Think)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,102
	PUSH	BC
	LD	BC,221
	PUSH	BC
	LD	BC,63
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,218
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(_PlayerColor)
	OR	A,A
	JR	NZ,L_582
	LD	BC,(_wPlay)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,245
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JR	L_583
L_582:
	LD	BC,(_bPlay)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,243
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_583:
	CALL	_inizializza
	LD	BC,0
	PUSH	BC
	CALL	_calcolamosse
	POP	BC
	LD	A,(_mossa_giocata+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_mossa_giocata)
	PUSH	BC
	CALL	_modifica
	POP	BC
	POP	BC
	LD	A,(_nmossa+3)
	LD	E,A
	LD	A,1
	LD	HL,(_nmossa)
	CALL	__ladd_b
	LD	(_nmossa),HL
	LD	A,E
	LD	(_nmossa+3),A
	LD	HL,(_col_prof)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_586
	LD	BC,1
	LD	(_col_prof),BC
	JR	L_587
L_586:
	LD	(_col_prof),BC
L_587:
	LD	A,(_DeleteBack)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_stampap
	POP	BC
	LD	BC,_Chs2
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	CALL	_vincitore
	LD	(IX+-1),A
	OR	A,A
	JR	Z,L_591
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_Show_End_Screen
	POP	BC
	JR	L_567
L_591:
	LD	A,(_PlayerColor)
	OR	A,A
	JR	NZ,L_590
	LD	A,1
	LD	(_PlayerColor),A
	JR	L_593
L_590:
	XOR	A,A
	LD	(_PlayerColor),A
	JR	L_593
L_595:
	CALL	_Disable_Audio
	CALL	_Free_All_Mem
push ix
ld a, kr_os_display
call.lil prose_kernal
ld a, kr_clear_screen
call.lil prose_kernal
pop ix
	LD	BC,L__364
	PUSH	BC
	CALL	_print
	POP	BC
	LD	BC,L__365
	PUSH	BC
	CALL	_print
	POP	BC
	LD	BC,L__366
	PUSH	BC
	CALL	_print
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _MyMain ***************************
;Name                         Addr/Register   Size   Type
;_print                              IMPORT  -----   function
;_Free_All_Mem                       IMPORT  -----   function
;_Disable_Audio                      IMPORT  -----   function
;_Chs2                               STATIC     15   variable
;_calcolamosse                       STATIC  -----   function
;_inizializza                        IMPORT  -----   function
;_bPlay                              STATIC      3   variable
;_wPlay                              STATIC      3   variable
;_Think                              STATIC      3   variable
;_Draw_Image                         IMPORT  -----   function
;_Show_End_Screen                    IMPORT  -----   function
;_vincitore                          IMPORT  -----   function
;_Chs1                               STATIC     15   variable
;_stampap                            IMPORT  -----   function
;_modifica                           IMPORT  -----   function
;_mossa_giocata                      STATIC      4   variable
;_acquisisci                         IMPORT  -----   function
;_Fill_Rectangle                     IMPORT  -----   function
;_nmossa                             STATIC      4   variable
;_chAbort                            STATIC      1   variable
;_apri                               IMPORT  -----   function
;_apertura                           STATIC  -----   function
;_posiniz                            IMPORT  -----   function
;_User                               STATIC      5   variable
;_PlayerColor                        STATIC      1   variable
;_mColore                            STATIC      1   variable
;_col_prof                           STATIC      3   variable
;_livello                            STATIC      4   variable
;_mLivello                           STATIC      1   variable
;_DeleteBack                         STATIC      1   variable
;_MainMenu                           IMPORT  -----   function
;_Click                              STATIC     15   variable
;_Play_Raw_Audio                     IMPORT  -----   function
;_WaitKeyPress                       IMPORT  -----   function
;_PaletteMem                         STATIC      3   variable
;_VideoMem                           STATIC      3   variable
;_Load_Raw_Data                      IMPORT  -----   function
;_BlackOut                           IMPORT  -----   function
;_Set_320_240_Mode                   IMPORT  -----   function
;_Load_Components                    IMPORT  -----   function
;app                                   IX-7      5   variable
;MyMenuValue                           IX-2      1   variable
;winner                                IX-1      1   variable


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__350:
	DB	"logo.raw"
	DB	0
L__351:
	DB	"logo.pal"
	DB	0
L__353:
	DB	"board.raw"
	DB	0
L__354:
	DB	"board.pal"
	DB	0
L__364:
	DB	"Chess Fight ver 1.0b for eZ80P."
	DB	10,13,0
L__365:
	DB	"Programmed by Enzo Antonio Calogiuri."
	DB	10,13,0
L__366:
	DB	10,13,0
	SEGMENT CODE
_WaitKeyPress:
push ix
ld a, kr_wait_key
call.lil prose_kernal
pop ix
	RET	


;**************************** _WaitKeyPress ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_GetKeyScanCode:
	XOR	A,A
	LD	(_gScanCode),A
push ix
ld a, kr_wait_key
call.lil prose_kernal
ld (_gScanCode), a
pop ix
	RET	


;**************************** _GetKeyScanCode ***************************
;Name                         Addr/Register   Size   Type
;_gScanCode                          STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_ReadScancode:
	XOR	A,A
	LD	(_BufKey),A
push ix
ld a, kr_get_key
call.lil prose_kernal
jr nz, NoKeyInB
ld (_BufKey), a
NoKeyInB:
pop ix
	RET	


;**************************** _ReadScancode ***************************
;Name                         Addr/Register   Size   Type
;_BufKey                             STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_print:
	CALL	__frameset0
	LD	BC,(IX+6)
	LD	(_TxtPnt),BC
push ix
ld hl, (_TxtPnt)
ld a, kr_print_string
call.lil prose_kernal
pop ix
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print ***************************
;Name                         Addr/Register   Size   Type
;_TxtPnt                             STATIC      3   variable
;txt                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_Disable_Audio:
push ix
ld a, kr_disable_audio
call.lil prose_kernal
pop ix
	RET	


;**************************** _Disable_Audio ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_Play_Raw_Audio:
	CALL	__frameset0
	LD	BC,(IX+6)
	LD	(_Snd),BC
push ix
ld hl, (_Snd)
ld c, 11h
ld a, kr_play_audio
call.lil prose_kernal
pop ix
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Play_Raw_Audio ***************************
;Name                         Addr/Register   Size   Type
;_Snd                                STATIC      3   variable
;S                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_Free_All_Mem:
	LD	HL,-3
	CALL	__frameset
	LD	BC,(_mSelect)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_mWhite)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_mBlack)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_mNormal)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_mHard)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_wSel)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_rSel)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_bsel)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_606
L_604:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	LD	BC,_Bianchi
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	LD	BC,_Neri
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_606:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_604
	LD	BC,(_wPiece)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_bPiece)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_Think)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_wPlay)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_bPlay)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Free_All_Mem ***************************
;Name                         Addr/Register   Size   Type
;_bPlay                              STATIC      3   variable
;_wPlay                              STATIC      3   variable
;_Think                              STATIC      3   variable
;_bPiece                             STATIC      3   variable
;_wPiece                             STATIC      3   variable
;_Neri                               STATIC     18   variable
;_Bianchi                            STATIC     18   variable
;_bsel                               STATIC      3   variable
;_rSel                               STATIC      3   variable
;_wSel                               STATIC      3   variable
;_mHard                              STATIC      3   variable
;_mNormal                            STATIC      3   variable
;_mBlack                             STATIC      3   variable
;_mWhite                             STATIC      3   variable
;_mSelect                            STATIC      3   variable
;_free                               IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_Load_Components:
	LD	HL,-9
	CALL	__frameset
	LD	BC,L__376
	PUSH	BC
	CALL	_print
	POP	BC
	LD	BC,240
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_mSelect),HL
	LD	BC,240
	PUSH	BC
	LD	BC,(_mSelect)
	PUSH	BC
	LD	BC,L__377
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,420
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_mWhite),HL
	LD	BC,420
	PUSH	BC
	LD	BC,(_mWhite)
	PUSH	BC
	LD	BC,L__378
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,480
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_mBlack),HL
	LD	BC,480
	PUSH	BC
	LD	BC,(_mBlack)
	PUSH	BC
	LD	BC,L__379
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,580
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_mNormal),HL
	LD	BC,580
	PUSH	BC
	LD	BC,(_mNormal)
	PUSH	BC
	LD	BC,L__380
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,380
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_mHard),HL
	LD	BC,380
	PUSH	BC
	LD	BC,(_mHard)
	PUSH	BC
	LD	BC,L__381
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,625
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_wSel),HL
	LD	BC,625
	PUSH	BC
	LD	BC,(_wSel)
	PUSH	BC
	LD	BC,L__382
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,625
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_rSel),HL
	LD	BC,625
	PUSH	BC
	LD	BC,(_rSel)
	PUSH	BC
	LD	BC,L__383
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,625
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_bsel),HL
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_612
L_610:
	LD	BC,506
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	DE,(IX+-3)
	LD	(IX+-6),HL	; spill
	LD	HL,506
	LD	(IX+-9),HL	; spill
	LD	HL,(IX+-6)	; unspill
	LD	(IX+-6),HL	; spill
	LD	HL,(IX+-9)	; unspill
	PUSH	HL
	LD	HL,(IX+-6)	; unspill
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_Bianchi
	ADD	HL,DE
	LD	(HL),BC
	CALL	_malloc
	POP	BC
	LD	DE,HL
	LD	HL,(IX+-3)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,_Neri
	ADD	HL,BC
	LD	(HL),DE
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_612:
	LD	BC,6
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__405
	JP	PE,L_610
	JR	L__406
L__405:
	JP	PO,L_610
L__406:
	LD	BC,506
	PUSH	BC
	LD	BC,(_Bianchi)
	PUSH	BC
	LD	BC,L__385
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Bianchi+3
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__386
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Bianchi+6
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__387
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Bianchi+9
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__388
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Bianchi+12
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__389
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Bianchi+15
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__390
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,506
	PUSH	BC
	LD	BC,(_Neri)
	PUSH	BC
	LD	BC,L__391
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Neri+3
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__392
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Neri+6
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__393
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Neri+9
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__394
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Neri+12
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__395
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	HL,_Neri+15
	LD	BC,506
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,L__396
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,625
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_wPiece),HL
	LD	BC,625
	PUSH	BC
	LD	BC,(_wPiece)
	PUSH	BC
	LD	BC,L__397
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,625
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_bPiece),HL
	LD	BC,625
	PUSH	BC
	LD	BC,(_bPiece)
	PUSH	BC
	LD	BC,L__398
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1020
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_Think),HL
	LD	BC,1020
	PUSH	BC
	LD	BC,(_Think)
	PUSH	BC
	LD	BC,L__399
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,420
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_wPlay),HL
	LD	BC,420
	PUSH	BC
	LD	BC,(_wPlay)
	PUSH	BC
	LD	BC,L__400
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,480
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_bPlay),HL
	LD	BC,480
	PUSH	BC
	LD	BC,(_bPlay)
	PUSH	BC
	LD	BC,L__401
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,9220
	PUSH	BC
	LD	BC,12582912
	PUSH	BC
	LD	BC,L__402
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,2445
	PUSH	BC
	LD	BC,12598272
	PUSH	BC
	LD	BC,L__403
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,3311
	PUSH	BC
	LD	BC,12608512
	PUSH	BC
	LD	BC,L__404
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,12582912
	LD	(_Click),BC
	LD	BC,9220
	LD	(_Click+3),BC
	LD	BC,12582912
	LD	(_Click+6),BC
	LD	BC,1
	LD	(_Click+9),BC
	LD	HL,_Click+12
	LD	(HL),163
	INC	HL
	LD	(HL),115
	LD	A,84
	LD	(_Click+14),A
	LD	BC,12598272
	LD	(_Chs1),BC
	LD	BC,2445
	LD	(_Chs1+3),BC
	LD	BC,12598272
	LD	(_Chs1+6),BC
	LD	BC,1
	LD	(_Chs1+9),BC
	LD	HL,_Chs1+12
	LD	(HL),163
	INC	HL
	LD	(HL),115
	LD	(_Chs1+14),A
	LD	BC,12608512
	LD	(_Chs2),BC
	LD	BC,3311
	LD	(_Chs2+3),BC
	LD	BC,12608512
	LD	(_Chs2+6),BC
	LD	BC,1
	LD	(_Chs2+9),BC
	LD	HL,_Chs2+12
	LD	(HL),163
	INC	HL
	LD	(HL),115
	LD	(_Chs2+14),A
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Load_Components ***************************
;Name                         Addr/Register   Size   Type
;_Chs2                               STATIC     15   variable
;_Chs1                               STATIC     15   variable
;_Click                              STATIC     15   variable
;_bPlay                              STATIC      3   variable
;_wPlay                              STATIC      3   variable
;_Think                              STATIC      3   variable
;_bPiece                             STATIC      3   variable
;_wPiece                             STATIC      3   variable
;_Neri                               STATIC     18   variable
;_Bianchi                            STATIC     18   variable
;_bsel                               STATIC      3   variable
;_rSel                               STATIC      3   variable
;_wSel                               STATIC      3   variable
;_mHard                              STATIC      3   variable
;_mNormal                            STATIC      3   variable
;_mBlack                             STATIC      3   variable
;_mWhite                             STATIC      3   variable
;_Load_Raw_Data                      IMPORT  -----   function
;_mSelect                            STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_print                              IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 15 (bytes)
;       Spill Code: 6 (instruction)


	SEGMENT STRSECT
L__376:
	DB	10,13
	DB	" Loading data..."
	DB	10,13,0
L__377:
	DB	"msel.raw"
	DB	0
L__378:
	DB	"white.raw"
	DB	0
L__379:
	DB	"black.raw"
	DB	0
L__380:
	DB	"normal.raw"
	DB	0
L__381:
	DB	"hard.raw"
	DB	0
L__382:
	DB	"bsel.raw"
	DB	0
L__383:
	DB	"rsel.raw"
	DB	0
L__385:
	DB	"bped.raw"
	DB	0
L__386:
	DB	"bcav.raw"
	DB	0
L__387:
	DB	"balf.raw"
	DB	0
L__388:
	DB	"btor.raw"
	DB	0
L__389:
	DB	"breg.raw"
	DB	0
L__390:
	DB	"bre.raw"
	DB	0
L__391:
	DB	"nped.raw"
	DB	0
L__392:
	DB	"ncav.raw"
	DB	0
L__393:
	DB	"nalf.raw"
	DB	0
L__394:
	DB	"ntor.raw"
	DB	0
L__395:
	DB	"nreg.raw"
	DB	0
L__396:
	DB	"nre.raw"
	DB	0
L__397:
	DB	"wpiece.raw"
	DB	0
L__398:
	DB	"bpiece.raw"
	DB	0
L__399:
	DB	"pthink.raw"
	DB	0
L__400:
	DB	"pwhite.raw"
	DB	0
L__401:
	DB	"pblack.raw"
	DB	0
L__402:
	DB	"click.snd"
	DB	0
L__403:
	DB	"chs1.snd"
	DB	0
L__404:
	DB	"chs2.snd"
	DB	0
	SEGMENT CODE
_Draw_Image:
	LD	HL,-9
	CALL	__frameset
	LD	BC,(IX+9)
	LD	(IX+-6),BC
	JR	L_623
L_621:
	LD	BC,(IX+6)
	LD	(IX+-3),BC
	JR	L_620
L_618:
	LD	BC,(IX+18)
	LD	(IX+-9),BC
	LD	BC,(IX+18)
	INC	BC
	LD	(IX+18),BC
	LD	HL,(IX+-9)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_PutPixel
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_620:
	LD	BC,(IX+12)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__410
	JP	PE,L_618
	JR	L__411
L__410:
	JP	PO,L_618
L__411:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_623:
	LD	BC,(IX+15)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L__412
	JP	PE,L_621
	JR	L__413
L__412:
	JP	PO,L_621
L__413:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Draw_Image ***************************
;Name                         Addr/Register   Size   Type
;_PutPixel                           STATIC  -----   function
;y                                     IX-6      3   variable
;x                                     IX-3      3   variable
;ImgBuf                               IX+18      3   parameter
;H                                    IX+15      3   parameter
;W                                    IX+12      3   parameter
;PosY                                  IX+9      3   parameter
;PosX                                  IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


_Draw_Trans_Image:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+9)
	LD	(IX+-6),BC
	JR	L_635
L_633:
	LD	BC,(IX+6)
	LD	(IX+-3),BC
	JR	L_632
L_630:
	LD	HL,(IX+18)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	A,(IX+21)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_629
	LD	HL,(IX+18)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_PutPixel
	POP	BC
	POP	BC
	POP	BC
L_629:
	LD	BC,(IX+18)
	INC	BC
	LD	(IX+18),BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_632:
	LD	BC,(IX+12)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__418
	JP	PE,L_630
	JR	L__419
L__418:
	JP	PO,L_630
L__419:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_635:
	LD	BC,(IX+15)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L__420
	JP	PE,L_633
	JR	L__421
L__420:
	JP	PO,L_633
L__421:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Draw_Trans_Image ***************************
;Name                         Addr/Register   Size   Type
;_PutPixel                           STATIC  -----   function
;y                                     IX-6      3   variable
;x                                     IX-3      3   variable
;Trans                                IX+21      1   parameter
;ImgBuf                               IX+18      3   parameter
;H                                    IX+15      3   parameter
;W                                    IX+12      3   parameter
;PosY                                  IX+9      3   parameter
;PosX                                  IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


_Fill_Rectangle:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+9)
	LD	(IX+-6),BC
	JR	L_644
L_642:
	LD	BC,(IX+6)
	LD	(IX+-3),BC
	JR	L_641
L_639:
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_PutPixel
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_641:
	LD	BC,(IX+12)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__425
	JP	PE,L_639
	JR	L__426
L__425:
	JP	PO,L_639
L__426:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_644:
	LD	BC,(IX+15)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L__427
	JP	PE,L_642
	JR	L__428
L__427:
	JP	PO,L_642
L__428:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Fill_Rectangle ***************************
;Name                         Addr/Register   Size   Type
;_PutPixel                           STATIC  -----   function
;y                                     IX-6      3   variable
;x                                     IX-3      3   variable
;col                                  IX+18      1   parameter
;H                                    IX+15      3   parameter
;W                                    IX+12      3   parameter
;PosY                                  IX+9      3   parameter
;PosX                                  IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_MainMenu:
	LD	HL,-3
	CALL	__frameset
	LD	(IX+-1),0
	LD	(IX+-2),0
	CALL	_BlackOut
	LD	BC,76800
	PUSH	BC
	LD	BC,(_VideoMem)
	PUSH	BC
	LD	BC,L__430
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	LD	BC,L__431
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_647
	LD	BC,(_mWhite)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JR	L_648
L_647:
	LD	BC,(_mBlack)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_648:
	LD	BC,(_mSelect)
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,16
	PUSH	BC
	LD	BC,91
	PUSH	BC
	LD	BC,105
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(_mLivello)
	OR	A,A
	JR	NZ,L_650
	LD	BC,(_mNormal)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JR	L_671
L_650:
	LD	BC,(_mHard)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,38
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_671:
	CALL	_GetKeyScanCode
	LD	(IX+-3),A
	CP	A,117
	JR	NZ,L_655
	DEC	(IX+-1)
	LD	A,(IX+-1)
	OR	A,A
	JP	P,L_655
	LD	(IX+-1),3
L_655:
	LD	A,(IX+-3)
	CP	A,114
	JR	NZ,L_657
	INC	(IX+-1)
	LD	A,3
	CP	A,(IX+-1)
	JP	P,L__445
	JP	PE,L_657
	JR	L__446
L__445:
	JP	PO,L_657
L__446:
	LD	(IX+-1),0
L_657:
	LD	A,(IX+-1)
	CP	A,(IX+-2)
	JR	Z,L_669
	LD	BC,_Click
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	LD	BC,0
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,16
	PUSH	BC
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+91
	PUSH	BC
	LD	BC,105
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mSelect)
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,16
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+91
	PUSH	BC
	LD	BC,105
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(IX+-1)
	LD	(IX+-2),A
L_669:
	LD	A,(IX+-3)
	CP	A,41
	JR	NZ,L_671
	LD	BC,_Click
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
L__441:
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	JR	C,L_671
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__440
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__440:
	DW24	L_658	

	DW24	L_662	

	DW24	L_666	

	DW24	L_667	

L_658:
	LD	A,(_mColore)
	OR	A,A
	JR	NZ,L_660
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mBlack)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,1
	LD	(_mColore),A
	JR	L_671
L_660:
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mWhite)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,42
	PUSH	BC
	LD	BC,94
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	XOR	A,A
	LD	(_mColore),A
	JR	L_671
L_662:
	LD	A,(_mLivello)
	OR	A,A
	JR	NZ,L_664
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mHard)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,38
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,1
	LD	(_mLivello),A
	JR	L_671
L_664:
	LD	BC,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,38
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Fill_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mNormal)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,58
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,190
	PUSH	BC
	CALL	_Draw_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	XOR	A,A
	LD	(_mLivello),A
	JR	L_671
L_666:
	LD	A,1
	JR	L_674
L_667:
	LD	A,2
L_674:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _MainMenu ***************************
;Name                         Addr/Register   Size   Type
;_Fill_Rectangle                     IMPORT  -----   function
;_Click                              STATIC     15   variable
;_Play_Raw_Audio                     IMPORT  -----   function
;_GetKeyScanCode                     IMPORT  -----   function
;_mHard                              STATIC      3   variable
;_mNormal                            STATIC      3   variable
;_mLivello                           STATIC      1   variable
;_mSelect                            STATIC      3   variable
;_mBlack                             STATIC      3   variable
;_mWhite                             STATIC      3   variable
;_Draw_Image                         IMPORT  -----   function
;_mColore                            STATIC      1   variable
;_PaletteMem                         STATIC      3   variable
;_VideoMem                           STATIC      3   variable
;_Load_Raw_Data                      IMPORT  -----   function
;_BlackOut                           IMPORT  -----   function
;SKey                                  IX-3      1   variable
;OldPosSel                             IX-2      1   variable
;PosSel                                IX-1      1   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__430:
	DB	"menu.raw"
	DB	0
L__431:
	DB	"menu.pal"
	DB	0
	SEGMENT CODE
_Save_Back_Selection:
	LD	HL,-3
	CALL	__frameset
	LD	HL,(IX+9)
	LD	A,8
	CALL	__ishl_b
	LD	BC,HL
	LD	HL,(IX+9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,(_VideoMem)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-3),A
	LD	BC,625
	PUSH	BC
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(_bsel)
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-2),1
	JR	L_682
L_680:
	LD	(IX+-1),1
	JR	L_679
L_677:
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	A,(IX+12)
	ADD	HL,BC
	LD	BC,(_bsel)
	ADD	HL,BC
	LD	(HL),A
	INC	(IX+-1)
L_679:
	LD	A,(IX+-1)
	CP	A,24
	JP	M,L_677
	INC	(IX+-2)
L_682:
	LD	A,(IX+-2)
	CP	A,24
	JP	M,L__450
	JP	PE,L_680
	JR	L__451
L__450:
	JP	PO,L_680
L__451:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Save_Back_Selection ***************************
;Name                         Addr/Register   Size   Type
;_bsel                               STATIC      3   variable
;_memset                             IMPORT  -----   function
;_VideoMem                           STATIC      3   variable
;Val                                   IX-3      1   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;Trans                                IX+12      1   parameter
;PosY                                  IX+9      3   parameter
;PosX                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_Draw_User_Selection:
	LD	HL,-6
	CALL	__frameset
	LD	IY,(IX+6)
	LD	A,(IY+1)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+11
	LD	(IX+-3),BC
	LD	IY,(IX+6)
	LD	A,(IY+0)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+12
	LD	(IX+-6),IY
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_685
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_Save_Back_Selection
	POP	BC
	POP	BC
	POP	BC
L_685:
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_Draw_Trans_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Draw_User_Selection ***************************
;Name                         Addr/Register   Size   Type
;_Draw_Trans_Image                   IMPORT  -----   function
;PosY                                  IX-6      3   variable
;PosX                                  IX-3      3   variable
;SaveBK                                IX+9      1   parameter
;uS                                    IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_Ottiemi_Mossa:
	LD	HL,-6
	CALL	__frameset
	LD	HL,(IX+9)
	LD	(HL),0
	LD	HL,(IX+9)
	INC	HL
	LD	(HL),0
	XOR	A,A
	LD	(_chAbort),A
	LD	IY,(IX+6)
	LD	A,(IY+1)
	LD	(IX+-5),A
	LD	A,(IY+0)
	LD	(IX+-6),A
	LD	BC,(_bsel)
	LD	(IX+-4),BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_Draw_User_Selection
	POP	BC
	POP	BC
L_710:
	CALL	_GetKeyScanCode
	LD	(IX+-1),A
	CP	A,107
	JR	NZ,L_693
	LD	IY,(IX+6)
	LD	A,(IY+1)
	DEC	A
	LD	(IY+1),A
	LD	A,(IY+1)
	OR	A,A
	JP	P,L_693
	LD	IY,(IX+6)
	LD	(IY+1),0
L_693:
	LD	A,(IX+-1)
	CP	A,116
	JR	NZ,L_697
	LD	IY,(IX+6)
	LD	A,(IY+1)
	INC	A
	LD	(IY+1),A
	LD	A,7
	CP	A,(IY+1)
	JP	P,L__467
	JP	PE,L_697
	JR	L__468
L__467:
	JP	PO,L_697
L__468:
	LD	IY,(IX+6)
	LD	(IY+1),7
L_697:
	LD	A,(IX+-1)
	CP	A,117
	JR	NZ,L_701
	LD	IY,(IX+6)
	LD	A,(IY+0)
	DEC	A
	LD	(IY+0),A
	LD	A,(IY+0)
	OR	A,A
	JP	P,L_701
	LD	IY,(IX+6)
	LD	(IY+0),0
L_701:
	LD	A,(IX+-1)
	CP	A,114
	JR	NZ,L_703
	LD	IY,(IX+6)
	LD	A,(IY+0)
	INC	A
	LD	(IY+0),A
	LD	A,7
	CP	A,(IY+0)
	JP	P,L__469
	JP	PE,L_703
	JR	L__470
L__469:
	JP	PO,L_703
L__470:
	LD	IY,(IX+6)
	LD	(IY+0),7
L_703:
	LD	A,(IX+-1)
	CP	A,7
	JR	NZ,L_705
	LD	BC,0
	PUSH	BC
	PEA	IX+-6
	LD	A,1
	LD	(_chAbort),A
	CALL	_Draw_User_Selection
	POP	BC
	POP	BC
	JR	L_711
L_705:
	LD	A,(IX+-1)
	CP	A,41
	JR	NZ,L_708
	LD	BC,0
	PUSH	BC
	PEA	IX+-6
	CALL	_Draw_User_Selection
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	A,(IY+1)
	ADD	A,97
	LD	HL,(IX+9)
	LD	(HL),A
	LD	HL,(IX+9)
	INC	HL
	LD	A,56
	SUB	A,(IY+0)
	LD	(HL),A
	JR	L_711
L_708:
	LD	A,(IX+-5)
	LD	IY,(IX+6)
	CP	A,(IY+1)
	JR	NZ,L_707
	LD	A,(IX+-6)
	LD	IY,(IX+6)
	CP	A,(IY+0)
	JR	Z,L_710
L_707:
	LD	BC,0
	PUSH	BC
	PEA	IX+-6
	CALL	_Draw_User_Selection
	POP	BC
	POP	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_Draw_User_Selection
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	A,(IY+1)
	LD	(IX+-5),A
	LD	A,(IY+0)
	LD	(IX+-6),A
	JR	L_710
L_711:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Ottiemi_Mossa ***************************
;Name                         Addr/Register   Size   Type
;_GetKeyScanCode                     IMPORT  -----   function
;_bsel                               STATIC      3   variable
;_chAbort                            STATIC      1   variable
;Old                                   IX-6      5   variable
;SKey                                  IX-1      1   variable
;OutBuf                                IX+9      3   parameter
;uS                                    IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_Crea_Mossa:
	LD	BC,_Mossa1
	PUSH	BC
	LD	BC,_User
	PUSH	BC
	LD	BC,(_wSel)
	LD	(_User+2),BC
	CALL	_Ottiemi_Mossa
	POP	BC
	POP	BC
	LD	A,(_chAbort)
	OR	A,A
	JR	NZ,L_713
	LD	BC,_Mossa2
	PUSH	BC
	LD	BC,_User
	PUSH	BC
	LD	BC,(_rSel)
	LD	(_User+2),BC
	CALL	_Ottiemi_Mossa
	POP	BC
	POP	BC
L_713:
	RET	


;**************************** _Crea_Mossa ***************************
;Name                         Addr/Register   Size   Type
;_Mossa2                             STATIC      2   variable
;_rSel                               STATIC      3   variable
;_chAbort                            STATIC      1   variable
;_Mossa1                             STATIC      2   variable
;_User                               STATIC      5   variable
;_wSel                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


_Show_End_Screen:
	LD	HL,-21
	CALL	__frameset
	LD	A,(_mossa_giocata+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_mossa_giocata)
	LD	BC,10
	CALL	__ldivu
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	(IX+-12),HL
	LD	A,(_mossa_giocata+3)
	LD	E,A
	XOR	A,A
	LD	HL,(_mossa_giocata)
	LD	BC,10
	CALL	__lremu
	LD	(IX+-15),HL
	LD	HL,(IX+-12)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-12)
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_PosScac
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-15)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-15)
	SBC	HL,BC
	ADD	HL,HL
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	BC,(IY+0)
	LD	(IX+-18),BC
	LD	BC,(IY+3)
	LD	(IX+-21),BC
	LD	BC,0
	PUSH	BC
	LD	BC,(_rSel)
	PUSH	BC
	LD	BC,25
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_Draw_Trans_Image
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_717
L_715:
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_717:
	LD	BC,1500000
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	C,L_715
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_721
L_719:
	CALL	_ReadScancode
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_721:
	LD	BC,50
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	C,L_719
	CALL	_BlackOut
	LD	A,(IX+6)
	SEXT	HL
	LD	L,(IX+6)
	LD	BC,HL
L__477:
	LD	DE,1
	OR	A,A
	SBC	HL,DE
	JR	C,L_726
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	JR	C,L_726
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__476-3
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__476:
	DW24	L_724	

	DW24	L_725	

L_724:
	LD	BC,76800
	PUSH	BC
	LD	BC,(_VideoMem)
	PUSH	BC
	LD	BC,L__480
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	LD	BC,L__481
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	JR	L_726
L_725:
	LD	BC,76800
	PUSH	BC
	LD	BC,(_VideoMem)
	PUSH	BC
	LD	BC,L__482
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(_PaletteMem)
	PUSH	BC
	LD	BC,L__483
	PUSH	BC
	CALL	_Load_Raw_Data
	POP	BC
	POP	BC
	POP	BC
L_726:
	CALL	_WaitKeyPress
	LD	BC,_Click
	PUSH	BC
	CALL	_Play_Raw_Audio
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Show_End_Screen ***************************
;Name                         Addr/Register   Size   Type
;_Click                              STATIC     15   variable
;_Play_Raw_Audio                     IMPORT  -----   function
;_WaitKeyPress                       IMPORT  -----   function
;_PaletteMem                         STATIC      3   variable
;_VideoMem                           STATIC      3   variable
;_Load_Raw_Data                      IMPORT  -----   function
;_BlackOut                           IMPORT  -----   function
;_ReadScancode                       IMPORT  -----   function
;_rSel                               STATIC      3   variable
;_Draw_Trans_Image                   IMPORT  -----   function
;_PosScac                            STATIC    600   variable
;_mossa_giocata                      STATIC      4   variable
;y                                    IX-21      3   variable
;x                                    IX-18      3   variable
;ri                                   IX-15      3   variable
;co                                   IX-12      3   variable
;i                                     IX-9      3   variable
;win                                   IX+6      1   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__480:
	DB	"win.raw"
	DB	0
L__481:
	DB	"win.pal"
	DB	0
L__482:
	DB	"lose.raw"
	DB	0
L__483:
	DB	"lose.pal"
	DB	0
	XREF _memset:ROM
	XREF _memcpy:ROM
	XREF _srand:ROM
	XREF _rand:ROM
	XREF _malloc:ROM
	XREF _free:ROM
	XREF __lcmps:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __imuls:ROM
	XREF __lmuls:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __irems:ROM
	XREF __lremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fcmp:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __seqcase:ROM
	XREF __ladd_b:ROM
	XREF __ishl_b:ROM
	XDEF _Show_End_Screen
	XDEF _Crea_Mossa
	XDEF _Ottiemi_Mossa
	XDEF _Draw_User_Selection
	XDEF _Save_Back_Selection
	XDEF _MainMenu
	XDEF _Fill_Rectangle
	XDEF _Draw_Trans_Image
	XDEF _Draw_Image
	XDEF _Load_Components
	XDEF _Free_All_Mem
	XDEF _Play_Raw_Audio
	XDEF _Disable_Audio
	XDEF _print
	XDEF _ReadScancode
	XDEF _GetKeyScanCode
	XDEF _WaitKeyPress
	XDEF _MyMain
	XDEF _controllo
	XDEF _apri
	XDEF _acquisisci
	XDEF _modifica
	XDEF _mossaimposs
	XDEF _stampap
	XDEF _posiniz
	XDEF _Set_PosScac
	XDEF _inizializza
	XDEF _vincitore
	XDEF _raccogli
	XDEF _BlackOut
	XDEF _Load_Raw_Data
	XDEF _Set_320_240_Mode
	XDEF _Palette
	XDEF _MainFileSize
	XDEF _MainDest
	XDEF _MainFile
	XDEF _main
	XDEF _PlayerColor
	XDEF _User
	XDEF _Mossa2
	XDEF _Mossa1
	XDEF _BufKey
	XDEF _gScanCode
	XDEF _DeleteBack
	XDEF _chAbort
	XDEF _mLivello
	XDEF _mColore
	XDEF _Neri
	XDEF _Bianchi
	XDEF _bPiece
	XDEF _wPiece
	XDEF _bsel
	XDEF _rSel
	XDEF _wSel
	XDEF _bPlay
	XDEF _wPlay
	XDEF _Think
	XDEF _mHard
	XDEF _mNormal
	XDEF _mBlack
	XDEF _mWhite
	XDEF _mSelect
	XDEF _cont
	XDEF _ap
	XDEF _possibili
	XDEF _ramo
	XDEF _livello
	XDEF _prof
	XDEF _effe
	XDEF _nmossa
	XDEF _col_prof
	XDEF _PosScac
	XDEF _oldscac
	XDEF _scac
	XDEF _mossa_in_analisi
	XDEF _mossa_giocata
	XDEF _PaletteMem
	XDEF _VideoMem
	END
