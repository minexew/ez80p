Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.3
                           A     2    ; -nomodsect -optspeed -noreduceopt -peephole -
                           A     3    ; -localcse -const=ROM 
                           A     4    	FILE	"..\MAIN.C"
                           A     5    	.assume ADL=1
                           A     6    	SEGMENT BSS
010A94                     A     7    _GenericPnt2:
010A94                     A     8    	DS	3
010A97                     A     9    _TxtPnt:
010A97                     A    10    	DS	3
010A9A                     A    11    _GenericPnt:
010A9A                     A    12    	DS	3
010A9D                     A    13    _K_A:
010A9D                     A    14    	DS	1
010A9E                     A    15    _K_B:
010A9E                     A    16    	DS	1
010A9F                     A    17    _K_C:
010A9F                     A    18    	DS	1
010AA0                     A    19    _K_E:
010AA0                     A    20    	DS	1
010AA1                     A    21    _K_HL:
010AA1                     A    22    	DS	2*1
010AA3                     A    23    _K_DE:
010AA3                     A    24    	DS	2*1
010AA5                     A    25    _K_xHL:
010AA5                     A    26    	DS	3
010AA8                     A    27    _K_xDE:
010AA8                     A    28    	DS	3
                           A    29    	SEGMENT STRSECT
010993                     A    30    L__0:
010993 5553453A 20504358   A    31    	DB	"USE: PCXVIEW [filename]"
01099B 56494557 205B6669 
0109A3 6C656E61 6D655D 
0109AA 0A0D00              A    32    	DB	10,13,0
                           A    33    	SEGMENT DATA
0115E7                     A    34    _UseTxt:
0115E7 930901              A    35    	DW24	L__0
                           A    36    	SEGMENT STRSECT
0109AD                     A    37    L__1:
0109AD 46696C65 206E6F74   A    38    	DB	"File not found!"
0109B5 20666F75 6E6421 
0109BC 0A0D00              A    39    	DB	10,13,0
                           A    40    	SEGMENT DATA
0115EA                     A    41    _FileOpenError:
0115EA AD0901              A    42    	DW24	L__1
                           A    43    	SEGMENT STRSECT
0109BF                     A    44    L__2:
0109BF 496E7661 6C696420   A    45    	DB	"Invalid PCX file!"
0109C7 50435820 66696C65 
0109CF 21 
0109D0 0A0D00              A    46    	DB	10,13,0
                           A    47    	SEGMENT DATA
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   2


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0115ED                     A    48    _NonPcxFile:
0115ED BF0901              A    49    	DW24	L__2
                           A    50    	SEGMENT STRSECT
0109D3                     A    51    L__3:
0109D3 47726170 68696373   A    52    	DB	"Graphics Resolution: "
0109DB 20526573 6F6C7574 
0109E3 696F6E3A 20 
0109E8 00                  A    53    	DB	0
                           A    54    	SEGMENT DATA
0115F0                     A    55    _PcxSize:
0115F0 D30901              A    56    	DW24	L__3
                           A    57    	SEGMENT BSS
010AAB                     A    58    _Header:
010AAB                     A    59    	DS	128
                           A    60    	SEGMENT DATA
0115F3                     A    61    _PntHeader:
0115F3 AB0A01              A    62    	DW24	_Header
0115F6                     A    63    _VideoMem:
0115F6 005080              A    64    	DW24	8409088
0115F9                     A    65    _VideoMemTmp:
0115F9 0000C0              A    66    	DW24	12582912
                           A    67    	SEGMENT BSS
010B2B                     A    68    _convBuf:
010B2B                     A    69    	DS	4
010B2F                     A    70    _MinX:
010B2F                     A    71    	DS	2*1
010B31                     A    72    _MinY:
010B31                     A    73    	DS	2*1
010B33                     A    74    _MaxX:
010B33                     A    75    	DS	2*1
010B35                     A    76    _MaxY:
010B35                     A    77    	DS	2*1
010B37                     A    78    _XSize:
010B37                     A    79    	DS	2*1
010B39                     A    80    _YSize:
010B39                     A    81    	DS	2*1
010B3B                     A    82    _StartX:
010B3B                     A    83    	DS	2*1
010B3D                     A    84    _StartY:
010B3D                     A    85    	DS	2*1
010B3F                     A    86    _VideoX:
010B3F                     A    87    	DS	2*1
010B41                     A    88    _VideoY:
010B41                     A    89    	DS	2*1
010B43                     A    90    _PosX:
010B43                     A    91    	DS	2*1
010B45                     A    92    _PosY:
010B45                     A    93    	DS	2*1
010B47                     A    94    _PcxPalette:
010B47                     A    95    	DS	512
010D47                     A    96    _TmpPal:
010D47                     A    97    	DS	768
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   3


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A    98    	SEGMENT DATA
0115FC                     A    99    _PntPal:
0115FC 470D01              A   100    	DW24	_TmpPal
                           A   101    	SEGMENT BSS
011047                     A   102    _YOffset:
011047                     A   103    	DS	1440
                           A   104    ;    1	/*
                           A   105    ;    2		PCXVIEW: simple pcx viewer for PROS
                           A   106    ;    3		
                           A   107    ;    4		coded by Calogiuri Enzo Antonio for
                           A   108    ;    5	*/
                           A   109    ;    6	
                           A   110    ;    7	#include <String.h>
                           A   111    ;    8	
                           A   112    ;    9	#include "PROSE_Header.h"
                           A   113    ;   10	
                           A   114    ;   11	#define RGB2WORD(r,g,b)         ((unsig
                           A   115    ;   12	#define VMEMOFFSET				(1024 *
                           A   116    ;   13	
                           A   117    ;   14	static char *UseTxt = "USE: PCXVIEW [fi
                           A   118    ;   15	static char *FileOpenError = "File not 
                           A   119    ;   16	static char *NonPcxFile = "Invalid PCX 
                           A   120    ;   17	static char *PcxSize = "Graphics Resolu
                           A   121    ;   18	
                           A   122    ;   19	static char *TxtPnt;
                           A   123    ;   20	static char Header[128];
                           A   124    ;   21	char *PntHeader = Header;
                           A   125    ;   22	char *VideoMem = (char *)(0x0800000 + V
                           A   126    ;   23	char *VideoMemTmp = (char *)0x0C00000;
                           A   127    ;   24	char convBuf[4];
                           A   128    ;   25	short MinX, MinY, MaxX, MaxY;
                           A   129    ;   26	short XSize, YSize, StartX, StartY;
                           A   130    ;   27	short VideoX, VideoY, PosX, PosY;
                           A   131    ;   28	unsigned short PcxPalette[256];
                           A   132    ;   29	unsigned char TmpPal[256*3];
                           A   133    ;   30	unsigned char *PntPal = TmpPal;
                           A   134    ;   31	unsigned int YOffset[480];
                           A   135    	SEGMENT CODE
                           A   136    ;   32	
                           A   137    ;   33	void ShowMsg(const char *Txt);
                           A   138    ;   34	void Make_Short(unsigned char a, unsign
                           A   139    ;   35	void uitoa(unsigned int val, char *stri
                           A   140    ;   36	
                           A   141    ;   37	void BuildOffset(void);
                           A   142    ;   38	
                           A   143    ;   39	void LoadPcxPalette(void);
                           A   144    ;   40	void LoadPcxFile(void);
                           A   145    ;   41	void DecodePcxFile(void);
                           A   146    ;   42	
                           A   147    ;   43	void PutPcxPixel(unsigned char Px);
                           A   148    ;   44	
                           A   149    ;   45	void Set_320_240_Mode(void);
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   4


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A   150    ;   46	void Set_640_480_Mode(void);
                           A   151    ;   47	
                           A   152    ;   48	void main(void)
                           A   153    ;   49	{
010000                     A   154    _main:
                           A   155    ;   50		INIT_HARDWARE;
       0000009A            A   156    PB_DR		equ 09Ah
       0000009B            A   157    PB_DDR		equ 09Bh
       0000009C            A   158    PB_ALT1		equ 09Ch
       0000009D            A   159    PB_ALT2		equ 09Dh
       0000009E            A   160    PC_DR		equ 09Eh
       0000009F            A   161    PC_DDR		equ 09Fh
       000000A0            A   162    PC_ALT1		equ 0A0h
       000000A1            A   163    PC_ALT2		equ 0A1h
       000000A2            A   164    PD_DR		equ 0A2h
       000000A3            A   165    PD_DDR		equ 0A3h
       000000A4            A   166    PD_ALT1		equ 0A4h
       000000A5            A   167    PD_ALT2		equ 0A5h
       000000C0            A   168    UART0_RBR	equ 0C0h
       000000C0            A   169    UART0_THR	equ 0C0h
       000000C0            A   170    UART0_BRG_L	equ 0C0h
       000000C1            A   171    UART0_BRG_H	equ 0C1h
       000000C1            A   172    UART0_IER	equ 0C1h
       000000C2            A   173    UART0_FCTL	equ 0C2h
       000000C3            A   174    UART0_LCTL	equ 0C3h
       000000C4            A   175    UART0_MCTL	equ 0C4h
       000000C5            A   176    UART0_LSR	equ 0C5h
       000000C6            A   177    UART0_MSR	equ 0C6h
       000000A8            A   178    CS0_LBR		equ 0A8h
       000000A9            A   179    CS0_UBR		equ 0A9h
       000000AA            A   180    CS0_CTL		equ 0AAh
       000000AB            A   181    CS1_LBR		equ 0ABh
       000000AC            A   182    CS1_UBR		equ 0ACh
       000000AD            A   183    CS1_CTL		equ 0ADh
       000000AE            A   184    CS2_LBR		equ 0AEh
       000000AF            A   185    CS2_UBR		equ 0AFh
       000000B0            A   186    CS2_CTL		equ 0B0h
       000000B1            A   187    CS3_LBR		equ 0B1h
       000000B2            A   188    CS3_UBR		equ 0B2h
       000000B3            A   189    CS3_CTL		equ 0B3h
       00000080            A   190    TMR0_CTL		equ 080h
       00000081            A   191    TMR0_DR_L	equ 081h
       00000081            A   192    TMR0_RR_L	equ 081h
       00000082            A   193    TMR0_DR_H	equ 082h
       00000082            A   194    TMR0_RR_H	equ 082h
       00000092            A   195    TMR_ISS		equ 092h
       000000ED            A   196    RTC_CTRL		equ 0EDh
       000000EC            A   197    RTC_ACTRL	equ 0ECh
       000000E0            A   198    RTC_SEC		equ 0E0h
       000000E1            A   199    RTC_MIN		equ 0E1h
       000000E2            A   200    RTC_HRS		equ 0E2h
       000000E3            A   201    RTC_DOW		equ 0E3h
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   5


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
       000000E4            A   202    RTC_DOM		equ 0E4h
       000000E5            A   203    RTC_MON		equ 0E5h
       000000E6            A   204    RTC_YR		equ 0E6h
       000000E7            A   205    RTC_CEN		equ 0E7h
       00000000            A   206    port_pic_data		equ 000h
       00000001            A   207    port_pic_ctrl		equ 001h
       00000001            A   208    port_hw_flags		equ 001h
       00000002            A   209    port_sdc_ctrl		equ 002h
       00000002            A   210    port_keyboard_data	equ 002h
       00000003            A   211    port_sdc_data		equ 003h
       00000004            A   212    port_memory_paging	equ 004h
       00000005            A   213    port_irq_ctrl		equ 005h
       00000006            A   214    port_nmi_ack			equ 006h
       00000007            A   215    port_ps2_ctrl		equ 007h
       00000008            A   216    port_selector		equ 008h
       00000006            A   217    port_mouse_data		equ 006h
       00000009            A   218    port_clear_flags		equ 009h
       00000000            A   219    sdc_power			equ 0h
       00000001            A   220    sdc_cs				equ 1h
       00000002            A   221    sdc_speed			equ 2h
       00000004            A   222    sdc_serializer_busy	equ 4h
       00000005            A   223    vrt					equ 5h
       00000000            A   224    sysram_addr			equ 0000000h
       00800000            A   225    vram_a_addr			equ 0800000h
       00C00000            A   226    vram_b_addr			equ 0C00000h
       00FF0000            A   227    hw_palette			equ 0ff0000h
       00FF0800            A   228    hw_sprite_registers	equ 0ff0800h
       00FF1000            A   229    hw_video_parameters	equ 0ff1000h
       00FF1400            A   230    hw_audio_registers	equ 0ff1400h
       00FF1800            A   231    hw_video_settings	equ 0ff1800h
       00FF1000            A   232    tilemap_parameters	equ hw_video_parameters + 0
       00FF1020            A   233    bitmap_parameters	equ hw_video_parameters + 2
       00FF1800            A   234    video_control		equ hw_video_settings + 00h
       00FF1801            A   235    sprite_control		equ hw_video_settings + 01h
       00FF1802            A   236    bgnd_palette_select	equ hw_video_settings + 02h
       00FF1803            A   237    sprite_palette_select	equ hw_video_settings +
       00FF1804            A   238    right_border_position	equ hw_video_settings +
       00000A00            A   239    os_start			equ 0A00h
       00000A14            A   240    prose_return		equ os_start + 14h
       00000A20            A   241    prose_kernal		equ os_start + 20h
                           A   242    ;   51		INIT_KJT;
       00000000            A   243    kr_mount_volumes			equ 00h
       00000001            A   244    kr_get_device_info		equ 01h
       00000002            A   245    kr_check_volume_format	equ 02h
       00000003            A   246    kr_change_volume			equ 03h
       00000004            A   247    kr_get_volume_info		equ 04h
       00000005            A   248    kr_format_device			equ 05h
       00000006            A   249    kr_make_dir				equ 06h
       00000007            A   250    kr_change_dir			equ 07h
       00000008            A   251    kr_parent_dir			equ 08h
       00000009            A   252    kr_root_dir				equ 09h
       0000000A            A   253    kr_delete_dir			equ 0Ah
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   6


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
       0000000B            A   254    kr_find_file				equ 0Bh
       0000000C            A   255    kr_set_file_pointer		equ 0Ch
       0000000D            A   256    kr_set_load_length		equ 0Dh
       0000000E            A   257    kr_read_file				equ 0Eh
       0000000F            A   258    kr_erase_file			equ 0Fh
       00000010            A   259    kr_rename_file			equ 10h
       00000011            A   260    kr_create_file			equ 11h
       00000012            A   261    kr_write_file			equ 12h
       00000013            A   262    kr_get_total_sectors		equ 13h
       00000014            A   263    kr_dir_list_first_entry	equ 14h
       00000015            A   264    kr_dir_list_get_entry	equ 15h
       00000016            A   265    kr_dir_list_next_entry	equ 16h
       00000017            A   266    kr_read_sector			equ 17h
       00000018            A   267    kr_write_sector			equ 18h
       00000019            A   268    kr_file_sector_list		equ 19h
       0000001A            A   269    kr_get_dir_cluster		equ 1Ah
       0000001B            A   270    kr_set_dir_cluster		equ 1Bh
       0000001C            A   271    kr_get_dir_name			equ 1Ch
       0000001D            A   272    kr_wait_key				equ 1Dh
       0000001E            A   273    kr_get_key				equ 1Eh
       0000001F            A   274    kr_get_key_mod_flags		equ 1Fh
       00000020            A   275    kr_serial_receive_header	equ 20h
       00000021            A   276    kr_serial_receive_file	equ 21h
       00000022            A   277    kr_serial_send_file		equ 22h
       00000023            A   278    kr_serial_tx_byte		equ 23h
       00000024            A   279    kr_serial_rx_byte		equ 24h
       00000025            A   280    kr_print_string			equ 25h
       00000026            A   281    kr_clear_screen			equ 26h
       00000027            A   282    kr_wait_vrt				equ 27h
       00000028            A   283    kr_set_cursor_position	equ 28h
       00000029            A   284    kr_plot_char				equ 29h
       0000002A            A   285    kr_set_pen				equ 2Ah
       0000002B            A   286    kr_background_colours	equ 2Bh
       0000002C            A   287    kr_draw_cursor			equ 2Ch
       0000002D            A   288    kr_get_pen				equ 2Dh
       0000002E            A   289    kr_scroll_up				equ 2Eh
       0000002F            A   290    kr_os_display			equ 2Fh
       00000030            A   291    kr_get_display_size		equ 30h
       00000031            A   292    kr_get_charmap_addr_xy	equ 31h
       00000032            A   293    kr_get_cursor_position	equ 32h
       00000033            A   294    kr_set_envar				equ 33h
       00000034            A   295    kr_get_envar				equ 34h
       00000035            A   296    kr_delete_envar			equ 35h
       00000036            A   297    kr_set_mouse_window		equ 36h
       00000037            A   298    kr_get_mouse_position	equ 37h
       00000038            A   299    kr_get_mouse_motion		equ 38h
       00000039            A   300    kr_time_delay			equ 39h
       0000003A            A   301    kr_compare_strings		equ 3Ah
       0000003B            A   302    kr_hex_byte_to_ascii		equ 3Bh
       0000003C            A   303    kr_ascii_to_hex_word		equ 3Ch
       0000003D            A   304    kr_get_string			equ 3Dh
       0000003E            A   305    kr_get_version			equ 3Eh
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   7


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
       0000003F            A   306    kr_dont_store_registers	equ 3Fh
       00000040            A   307    kr_get_font_info			equ 40h
       00000041            A   308    kr_read_rtc				equ 41h
       00000042            A   309    kr_write_rtc				equ 42h
       00000043            A   310    kr_get_keymap_location	equ 43h
                           A   311    ;   52		
                           A   312    ;   53		CREATE_HEADER;
010000 18 0E               A   313    jr skip_header
010002 50524F              A   314    db 'PRO'
010005 000001              A   315    mb_loc dw24 10000h
010008 000000              A   316    dw24 0
01000B 0000                A   317    dw 0
01000D 0000                A   318    dw 0
01000F 01                  A   319    db 1
010010                     A   320    skip_header
                           A   321    ;   54		
                           A   322    ;   55		asm ("ld a, (hl)");				//T
010010 7E                  A   323    ld a, (hl)
                           A   324    ;   56		asm ("or a");
010011 B7                  A   325    or a
                           A   326    ;   57		asm ("jr z, no_param");
010012 CA 52 03 01         A   327    jr z, no_param
                           A   328    ;   58		
                           A   329    ;   59		asm ("ld (_K_xHL), hl");		//S
010016 22 A5 0A 01         A   330    ld (_K_xHL), hl
                           A   331    ;   60		asm ("ld a, kr_find_file");
01001A 3E0B                A   332    ld a, kr_find_file
                           A   333    ;   61		asm ("call.lil prose_kernal");
01001C 5BCD200A 00         A   334    call.lil prose_kernal
                           A   335    ;   62		asm ("jr nz, FileError");
010021 C2 62 03 01         A   336    jr nz, FileError
                           A   337    ;   63		
                           A   338    ;   64		asm ("ld de, 128");				//I
010025 11800000            A   339    ld de, 128
                           A   340    ;   65		asm ("ld a, kr_set_load_length");
010029 3E0D                A   341    ld a, kr_set_load_length
                           A   342    ;   66		asm ("call.lil prose_kernal");
01002B 5BCD200A 00         A   343    call.lil prose_kernal
                           A   344    ;   67		
                           A   345    ;   68		asm ("ld hl, (_PntHeader)");
010030 2A F3 15 01         A   346    ld hl, (_PntHeader)
                           A   347    ;   69		asm ("ld a, kr_read_file");
010034 3E0E                A   348    ld a, kr_read_file
                           A   349    ;   70		asm ("call.lil prose_kernal");
010036 5BCD200A 00         A   350    call.lil prose_kernal
                           A   351    ;   71		
                           A   352    ;   72		if (Header[0] != 10)		//If th
01003B 3A AB 0A 01         A   353    	LD	A,(_Header)
01003F 47                  A   354    	LD	B,A
010040 17ED62              A   355    	SEXT	HL
010043 68                  A   356    	LD	L,B
010044 B7                  A   357    	OR	A,A
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   8


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010045 010A0000            A   358    	LD	BC,10
010049 ED42                A   359    	SBC	HL,BC
01004B 28 10               A   360    	JR	Z,L_1
                           A   361    ;   73		{
                           A   362    ;   74			ShowMsg(NonPcxFile);
01004D ED4B ED 15 01       A   363    	LD	BC,(_NonPcxFile)
010052 C5                  A   364    	PUSH	BC
010053 CD 96 04 01         A   365    	CALL	_ShowMsg
010057 C1                  A   366    	POP	BC
                           A   367    ;   75			
                           A   368    ;   76			asm ("xor a");
010058 AF                  A   369    xor a
                           A   370    ;   77			asm ("jp quitnow");
010059 C3 81 03 01         A   371    jp quitnow
                           A   372    ;   78		}
01005D                     A   373    L_1:
                           A   374    ;   79		
                           A   375    ;   80		Make_Short(Header[4], Header[5], &M
01005D FD21 AB 0A 01       A   376    	LD	IY,_Header
010062 ED2305              A   377    	LEA	HL,IY+5
010065 4E                  A   378    	LD	C,(HL)
010066 11 2F 0B 01         A   379    	LD	DE,_MinX
01006A D5                  A   380    	PUSH	DE
01006B 0600                A   381    	LD	B,0
01006D C5                  A   382    	PUSH	BC
01006E FD4E04              A   383    	LD	C,(IY+4)
010071 C5                  A   384    	PUSH	BC
010072 CD 87 03 01         A   385    	CALL	_Make_Short
010076 C1                  A   386    	POP	BC
010077 C1                  A   387    	POP	BC
010078 C1                  A   388    	POP	BC
                           A   389    ;   81		Make_Short(Header[6], Header[7], &M
010079 FD21 AB 0A 01       A   390    	LD	IY,_Header
01007E ED2307              A   391    	LEA	HL,IY+7
010081 4E                  A   392    	LD	C,(HL)
010082 11 31 0B 01         A   393    	LD	DE,_MinY
010086 D5                  A   394    	PUSH	DE
010087 0600                A   395    	LD	B,0
010089 C5                  A   396    	PUSH	BC
01008A FD4E06              A   397    	LD	C,(IY+6)
01008D C5                  A   398    	PUSH	BC
01008E CD 87 03 01         A   399    	CALL	_Make_Short
010092 C1                  A   400    	POP	BC
010093 C1                  A   401    	POP	BC
010094 C1                  A   402    	POP	BC
                           A   403    ;   82		Make_Short(Header[8], Header[9], &M
010095 FD21 AB 0A 01       A   404    	LD	IY,_Header
01009A ED2309              A   405    	LEA	HL,IY+9
01009D 4E                  A   406    	LD	C,(HL)
01009E 11 33 0B 01         A   407    	LD	DE,_MaxX
0100A2 D5                  A   408    	PUSH	DE
0100A3 0600                A   409    	LD	B,0
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:   9


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0100A5 C5                  A   410    	PUSH	BC
0100A6 FD4E08              A   411    	LD	C,(IY+8)
0100A9 C5                  A   412    	PUSH	BC
0100AA CD 87 03 01         A   413    	CALL	_Make_Short
0100AE C1                  A   414    	POP	BC
0100AF C1                  A   415    	POP	BC
0100B0 C1                  A   416    	POP	BC
                           A   417    ;   83		Make_Short(Header[10], Header[11], 
0100B1 FD21 AB 0A 01       A   418    	LD	IY,_Header
0100B6 ED230B              A   419    	LEA	HL,IY+11
0100B9 4E                  A   420    	LD	C,(HL)
0100BA 11 35 0B 01         A   421    	LD	DE,_MaxY
0100BE D5                  A   422    	PUSH	DE
0100BF 0600                A   423    	LD	B,0
0100C1 C5                  A   424    	PUSH	BC
0100C2 FD4E0A              A   425    	LD	C,(IY+10)
0100C5 C5                  A   426    	PUSH	BC
0100C6 CD 87 03 01         A   427    	CALL	_Make_Short
0100CA C1                  A   428    	POP	BC
0100CB C1                  A   429    	POP	BC
0100CC C1                  A   430    	POP	BC
                           A   431    ;   84		
                           A   432    ;   85		XSize = MaxX - MinX + 1;			0100CD ED4B 2F 0B 01       A   433    	LD	BC,(_MinX)
0100D2 2A 33 0B 01         A   434    	LD	HL,(_MaxX)
0100D6 B7                  A   435    	OR	A,A
0100D7 40ED42              A   436    	SBC.SIS	HL,BC
0100DA 23                  A   437    	INC	HL
0100DB E5C1                A   438    	LD	BC,HL
0100DD 21 37 0B 01         A   439    	LD	HL,_XSize
0100E1 71                  A   440    	LD	(HL),C
0100E2 23                  A   441    	INC	HL
0100E3 70                  A   442    	LD	(HL),B
                           A   443    ;   86		YSize = MaxY - MinY + 1;
0100E4 ED4B 31 0B 01       A   444    	LD	BC,(_MinY)
0100E9 2A 35 0B 01         A   445    	LD	HL,(_MaxY)
0100ED B7                  A   446    	OR	A,A
0100EE 40ED42              A   447    	SBC.SIS	HL,BC
0100F1 23                  A   448    	INC	HL
0100F2 E5C1                A   449    	LD	BC,HL
0100F4 21 39 0B 01         A   450    	LD	HL,_YSize
0100F8 71                  A   451    	LD	(HL),C
0100F9 23                  A   452    	INC	HL
0100FA 70                  A   453    	LD	(HL),B
                           A   454    ;   87		
                           A   455    ;   88		if (XSize > 1)						0100FB ED4B 37 0B 01       A   456    	LD	BC,(_XSize)
010100 49210100            A   457    	LD.LIS	HL,1
010104 B7                  A   458    	OR	A,A
010105 40ED42              A   459    	SBC.SIS	HL,BC
010108 F2 12 01 01         A   460    	JP	P,L__20
01010C EA 3F 03 01         A   461    	JP	PE,L_21
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  10


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010110 18 04               A   462    	JR	L__21
010112                     A   463    L__20:
010112 E2 3F 03 01         A   464    	JP	PO,L_21
010116                     A   465    L__21:
                           A   466    ;   89		{
                           A   467    ;   90			uitoa(XSize, convBuf);
010116 01 2B 0B 01         A   468    	LD	BC,_convBuf
01011A C5                  A   469    	PUSH	BC
01011B ED4B 37 0B 01       A   470    	LD	BC,(_XSize)
010120 CD 8B 09 01         A   471    	CALL	__stoi
010124 E5                  A   472    	PUSH	HL
010125 CD A7 03 01         A   473    	CALL	_uitoa
010129 C1                  A   474    	POP	BC
01012A C1                  A   475    	POP	BC
                           A   476    ;   91			
                           A   477    ;   92			ShowMsg(PcxSize);
01012B ED4B F0 15 01       A   478    	LD	BC,(_PcxSize)
010130 C5                  A   479    	PUSH	BC
010131 CD 96 04 01         A   480    	CALL	_ShowMsg
010135 C1                  A   481    	POP	BC
                           A   482    ;   93			ShowMsg(convBuf);
010136 01 2B 0B 01         A   483    	LD	BC,_convBuf
01013A C5                  A   484    	PUSH	BC
01013B CD 96 04 01         A   485    	CALL	_ShowMsg
01013F C1                  A   486    	POP	BC
                           A   487    ;   94			ShowMsg("x");
010140 01 E9 09 01         A   488    	LD	BC,L__6
010144 C5                  A   489    	PUSH	BC
010145 CD 96 04 01         A   490    	CALL	_ShowMsg
010149 C1                  A   491    	POP	BC
                           A   492    ;   95			
                           A   493    ;   96			uitoa(YSize, convBuf);
01014A 01 2B 0B 01         A   494    	LD	BC,_convBuf
01014E C5                  A   495    	PUSH	BC
01014F ED4B 39 0B 01       A   496    	LD	BC,(_YSize)
010154 CD 8B 09 01         A   497    	CALL	__stoi
010158 E5                  A   498    	PUSH	HL
010159 CD A7 03 01         A   499    	CALL	_uitoa
01015D C1                  A   500    	POP	BC
01015E C1                  A   501    	POP	BC
                           A   502    ;   97			ShowMsg(convBuf);
01015F 01 2B 0B 01         A   503    	LD	BC,_convBuf
010163 C5                  A   504    	PUSH	BC
010164 CD 96 04 01         A   505    	CALL	_ShowMsg
010168 C1                  A   506    	POP	BC
                           A   507    ;   98			ShowMsg("\n\r");				010169 01 EB 09 01         A   508    	LD	BC,L__7
01016D C5                  A   509    	PUSH	BC
01016E CD 96 04 01         A   510    	CALL	_ShowMsg
010172 C1                  A   511    	POP	BC
                           A   512    ;   99			
                           A   513    ;  100			if (XSize > 640)
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  11


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010173 ED4B 37 0B 01       A   514    	LD	BC,(_XSize)
010178 49218002            A   515    	LD.LIS	HL,640
01017C B7                  A   516    	OR	A,A
01017D 40ED42              A   517    	SBC.SIS	HL,BC
010180 F2 8A 01 01         A   518    	JP	P,L__22
010184 EA 9D 01 01         A   519    	JP	PE,L_4
010188 18 04               A   520    	JR	L__23
01018A                     A   521    L__22:
01018A E2 9D 01 01         A   522    	JP	PO,L_4
01018E                     A   523    L__23:
                           A   524    ;  101			{
                           A   525    ;  102				ShowMsg("Image too big!\n\r
01018E 01 EE 09 01         A   526    	LD	BC,L__9
010192 C5                  A   527    	PUSH	BC
010193 CD 96 04 01         A   528    	CALL	_ShowMsg
010197 C1                  A   529    	POP	BC
                           A   530    ;  103				asm ("xor a");
010198 AF                  A   531    xor a
                           A   532    ;  104				asm ("jp quitnow");
010199 C3 81 03 01         A   533    jp quitnow
                           A   534    ;  105			}
01019D                     A   535    L_4:
                           A   536    ;  106			
                           A   537    ;  107			if (YSize > 480)
01019D ED4B 39 0B 01       A   538    	LD	BC,(_YSize)
0101A2 4921E001            A   539    	LD.LIS	HL,480
0101A6 B7                  A   540    	OR	A,A
0101A7 40ED42              A   541    	SBC.SIS	HL,BC
0101AA F2 B4 01 01         A   542    	JP	P,L__24
0101AE EA C7 01 01         A   543    	JP	PE,L_8
0101B2 18 04               A   544    	JR	L__25
0101B4                     A   545    L__24:
0101B4 E2 C7 01 01         A   546    	JP	PO,L_8
0101B8                     A   547    L__25:
                           A   548    ;  108			{
                           A   549    ;  109				ShowMsg("Image too big!\n\r
0101B8 01 FF 09 01         A   550    	LD	BC,L__11
0101BC C5                  A   551    	PUSH	BC
0101BD CD 96 04 01         A   552    	CALL	_ShowMsg
0101C1 C1                  A   553    	POP	BC
                           A   554    ;  110				asm ("xor a");
0101C2 AF                  A   555    xor a
                           A   556    ;  111				asm ("jp quitnow");
0101C3 C3 81 03 01         A   557    jp quitnow
                           A   558    ;  112			}		
0101C7                     A   559    L_8:
                           A   560    ;  113				
                           A   561    ;  114			if ((XSize <= 320) && (YSize <=
0101C7 ED4B 37 0B 01       A   562    	LD	BC,(_XSize)
0101CC 49214001            A   563    	LD.LIS	HL,320
0101D0 B7                  A   564    	OR	A,A
0101D1 40ED42              A   565    	SBC.SIS	HL,BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  12


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0101D4 FA DE 01 01         A   566    	JP	M,L__26
0101D8 EA 11 02 01         A   567    	JP	PE,L_7
0101DC 18 04               A   568    	JR	L__27
0101DE                     A   569    L__26:
0101DE E2 11 02 01         A   570    	JP	PO,L_7
0101E2                     A   571    L__27:
0101E2 ED4B 39 0B 01       A   572    	LD	BC,(_YSize)
0101E7 4921F000            A   573    	LD.LIS	HL,240
0101EB B7                  A   574    	OR	A,A
0101EC 40ED42              A   575    	SBC.SIS	HL,BC
0101EF FA F9 01 01         A   576    	JP	M,L__28
0101F3 EA 11 02 01         A   577    	JP	PE,L_7
0101F7 18 04               A   578    	JR	L__29
0101F9                     A   579    L__28:
0101F9 E2 11 02 01         A   580    	JP	PO,L_7
0101FD                     A   581    L__29:
                           A   582    ;  115			{
                           A   583    ;  116				VideoX = 320;
0101FD 21 3F 0B 01         A   584    	LD	HL,_VideoX
010201 3640                A   585    	LD	(HL),64
010203 23                  A   586    	INC	HL
010204 3601                A   587    	LD	(HL),1
                           A   588    ;  117				VideoY = 240;
010206 21 41 0B 01         A   589    	LD	HL,_VideoY
01020A 36F0                A   590    	LD	(HL),240
01020C 23                  A   591    	INC	HL
01020D 3600                A   592    	LD	(HL),0
                           A   593    ;  118			}
                           A   594    ;  119			else
01020F 18 12               A   595    	JR	L_9
010211                     A   596    L_7:
                           A   597    ;  120			{
                           A   598    ;  121				VideoX = 640;
010211 21 3F 0B 01         A   599    	LD	HL,_VideoX
010215 3680                A   600    	LD	(HL),128
010217 23                  A   601    	INC	HL
010218 3602                A   602    	LD	(HL),2
                           A   603    ;  122				VideoY = 480;
01021A 21 41 0B 01         A   604    	LD	HL,_VideoY
01021E 36E0                A   605    	LD	(HL),224
010220 23                  A   606    	INC	HL
010221 3601                A   607    	LD	(HL),1
                           A   608    ;  123			}
010223                     A   609    L_9:
                           A   610    ;  124			
                           A   611    ;  125			BuildOffset();					010223 CD 26 08 01         A   612    	CALL	_BuildOffset
                           A   613    ;  126			
                           A   614    ;  127			if (XSize < VideoX)				010227 ED4B 3F 0B 01       A   615    	LD	BC,(_VideoX)
01022C 2A 37 0B 01         A   616    	LD	HL,(_XSize)
010230 B7                  A   617    	OR	A,A
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  13


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010231 40ED42              A   618    	SBC.SIS	HL,BC
010234 F2 3E 02 01         A   619    	JP	P,L__30
010238 EA 70 02 01         A   620    	JP	PE,L_11
01023C 18 04               A   621    	JR	L__31
01023E                     A   622    L__30:
01023E E2 70 02 01         A   623    	JP	PO,L_11
010242                     A   624    L__31:
                           A   625    ;  128				StartX = (VideoX - XSize) /
010242 ED4B 3F 0B 01       A   626    	LD	BC,(_VideoX)
010247 CD 8B 09 01         A   627    	CALL	__stoi
01024B E5D1                A   628    	LD	DE,HL
01024D ED4B 37 0B 01       A   629    	LD	BC,(_XSize)
010252 CD 8B 09 01         A   630    	CALL	__stoi
010256 E5C1                A   631    	LD	BC,HL
010258 D5E1                A   632    	LD	HL,DE
01025A B7                  A   633    	OR	A,A
01025B ED42                A   634    	SBC	HL,BC
01025D 01020000            A   635    	LD	BC,2
010261 CD F8 08 01         A   636    	CALL	__idivs
010265 E5C1                A   637    	LD	BC,HL
010267 21 3B 0B 01         A   638    	LD	HL,_StartX
01026B 71                  A   639    	LD	(HL),C
01026C 23                  A   640    	INC	HL
01026D 70                  A   641    	LD	(HL),B
                           A   642    ;  129			else
01026E 18 09               A   643    	JR	L_14
010270                     A   644    L_11:
                           A   645    ;  130				StartX = 0;
010270 21 3B 0B 01         A   646    	LD	HL,_StartX
010274 3600                A   647    	LD	(HL),0
010276 23                  A   648    	INC	HL
010277 3600                A   649    	LD	(HL),0
010279                     A   650    L_14:
                           A   651    ;  131			
                           A   652    ;  132			if (YSize < VideoY)
010279 ED4B 41 0B 01       A   653    	LD	BC,(_VideoY)
01027E 2A 39 0B 01         A   654    	LD	HL,(_YSize)
010282 B7                  A   655    	OR	A,A
010283 40ED42              A   656    	SBC.SIS	HL,BC
010286 F2 90 02 01         A   657    	JP	P,L__32
01028A EA C2 02 01         A   658    	JP	PE,L_13
01028E 18 04               A   659    	JR	L__33
010290                     A   660    L__32:
010290 E2 C2 02 01         A   661    	JP	PO,L_13
010294                     A   662    L__33:
                           A   663    ;  133				StartY = (VideoY - YSize) /
010294 ED4B 41 0B 01       A   664    	LD	BC,(_VideoY)
010299 CD 8B 09 01         A   665    	CALL	__stoi
01029D E5D1                A   666    	LD	DE,HL
01029F ED4B 39 0B 01       A   667    	LD	BC,(_YSize)
0102A4 CD 8B 09 01         A   668    	CALL	__stoi
0102A8 E5C1                A   669    	LD	BC,HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  14


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0102AA D5E1                A   670    	LD	HL,DE
0102AC B7                  A   671    	OR	A,A
0102AD ED42                A   672    	SBC	HL,BC
0102AF 01020000            A   673    	LD	BC,2
0102B3 CD F8 08 01         A   674    	CALL	__idivs
0102B7 E5C1                A   675    	LD	BC,HL
0102B9 21 3D 0B 01         A   676    	LD	HL,_StartY
0102BD 71                  A   677    	LD	(HL),C
0102BE 23                  A   678    	INC	HL
0102BF 70                  A   679    	LD	(HL),B
                           A   680    ;  134			else
0102C0 18 09               A   681    	JR	L_15
0102C2                     A   682    L_13:
                           A   683    ;  135				StartY = 0;		
0102C2 21 3D 0B 01         A   684    	LD	HL,_StartY
0102C6 3600                A   685    	LD	(HL),0
0102C8 23                  A   686    	INC	HL
0102C9 3600                A   687    	LD	(HL),0
0102CB                     A   688    L_15:
                           A   689    ;  136			
                           A   690    ;  137			PosX = 0;
0102CB 21 43 0B 01         A   691    	LD	HL,_PosX
0102CF 3600                A   692    	LD	(HL),0
0102D1 23                  A   693    	INC	HL
0102D2 3600                A   694    	LD	(HL),0
                           A   695    ;  138			PosY = 0;
0102D4 21 45 0B 01         A   696    	LD	HL,_PosY
                           A   697    ;  139			
                           A   698    ;  140			ShowMsg("Press a key...\n\r");
0102D8 01 10 0A 01         A   699    	LD	BC,L__16
0102DC C5                  A   700    	PUSH	BC
0102DD 3600                A   701    	LD	(HL),0
0102DF 23                  A   702    	INC	HL
0102E0 3600                A   703    	LD	(HL),0
0102E2 CD 96 04 01         A   704    	CALL	_ShowMsg
0102E6 C1                  A   705    	POP	BC
                           A   706    ;  141			asm ("ld a, kr_wait_key");
0102E7 3E1D                A   707    ld a, kr_wait_key
                           A   708    ;  142			asm ("call.lil prose_kernal");
0102E9 5BCD200A 00         A   709    call.lil prose_kernal
                           A   710    ;  143			
                           A   711    ;  144			LoadPcxPalette();
0102EE CD B6 04 01         A   712    	CALL	_LoadPcxPalette
                           A   713    ;  145			LoadPcxFile();
0102F2 CD E7 05 01         A   714    	CALL	_LoadPcxFile
                           A   715    ;  146			
                           A   716    ;  147			if ((VideoX == 320) && (VideoY 
0102F6 49014001            A   717    	LD.LIS	BC,320
0102FA 2A 3F 0B 01         A   718    	LD	HL,(_VideoX)
0102FE B7                  A   719    	OR	A,A
0102FF 40ED42              A   720    	SBC.SIS	HL,BC
010302 20 14               A   721    	JR	NZ,L_18
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  15


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010304 4901F000            A   722    	LD.LIS	BC,240
010308 2A 41 0B 01         A   723    	LD	HL,(_VideoY)
01030C B7                  A   724    	OR	A,A
01030D 40ED42              A   725    	SBC.SIS	HL,BC
010310 20 06               A   726    	JR	NZ,L_18
                           A   727    ;  148				Set_320_240_Mode();
010312 CD 53 06 01         A   728    	CALL	_Set_320_240_Mode
                           A   729    ;  149			else
010316 18 04               A   730    	JR	L_19
010318                     A   731    L_18:
                           A   732    ;  150				Set_640_480_Mode();		
010318 CD 96 06 01         A   733    	CALL	_Set_640_480_Mode
01031C                     A   734    L_19:
                           A   735    ;  151			
                           A   736    ;  152			memcpy((void *)0x0ff0000, PcxPa
01031C 01000200            A   737    	LD	BC,512
010320 C5                  A   738    	PUSH	BC
010321 01 47 0B 01         A   739    	LD	BC,_PcxPalette
010325 C5                  A   740    	PUSH	BC
010326 010000FF            A   741    	LD	BC,16711680
01032A C5                  A   742    	PUSH	BC
01032B CD CC 08 01         A   743    	CALL	_memcpy
01032F C1                  A   744    	POP	BC
010330 C1                  A   745    	POP	BC
010331 C1                  A   746    	POP	BC
                           A   747    ;  153			
                           A   748    ;  154			DecodePcxFile();
010332 CD D9 06 01         A   749    	CALL	_DecodePcxFile
                           A   750    ;  155			
                           A   751    ;  156			asm ("ld a, kr_wait_key");
010336 3E1D                A   752    ld a, kr_wait_key
                           A   753    ;  157			asm ("call.lil prose_kernal");
010338 5BCD200A 00         A   754    call.lil prose_kernal
                           A   755    ;  158		}
                           A   756    ;  159		else
01033D 18 0F               A   757    	JR	L_22
01033F                     A   758    L_21:
                           A   759    ;  160		{
                           A   760    ;  161			ShowMsg("Invalid image dimensio
01033F 01 21 0A 01         A   761    	LD	BC,L__19
010343 C5                  A   762    	PUSH	BC
010344 CD 96 04 01         A   763    	CALL	_ShowMsg
010348 C1                  A   764    	POP	BC
                           A   765    ;  162			
                           A   766    ;  163			asm ("xor a");
010349 AF                  A   767    xor a
                           A   768    ;  164			asm ("jp quitnow");
01034A C3 81 03 01         A   769    jp quitnow
                           A   770    ;  165		}
01034E                     A   771    L_22:
                           A   772    ;  166		
                           A   773    ;  167		asm ("jp endprogram");
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  16


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
01034E C3 72 03 01         A   774    jp endprogram
                           A   775    ;  168		
                           A   776    ;  169		asm ("no_param:");
010352                     A   777    no_param:
                           A   778    ;  170		ShowMsg(UseTxt);
010352 ED4B E7 15 01       A   779    	LD	BC,(_UseTxt)
010357 C5                  A   780    	PUSH	BC
010358 CD 96 04 01         A   781    	CALL	_ShowMsg
01035C C1                  A   782    	POP	BC
                           A   783    ;  171		asm ("xor a");
01035D AF                  A   784    xor a
                           A   785    ;  172		asm ("jp quitnow");
01035E C3 81 03 01         A   786    jp quitnow
                           A   787    ;  173		
                           A   788    ;  174		asm ("FileError:");
010362                     A   789    FileError:
                           A   790    ;  175		ShowMsg(FileOpenError);
010362 ED4B EA 15 01       A   791    	LD	BC,(_FileOpenError)
010367 C5                  A   792    	PUSH	BC
010368 CD 96 04 01         A   793    	CALL	_ShowMsg
01036C C1                  A   794    	POP	BC
                           A   795    ;  176		asm ("xor a");
01036D AF                  A   796    xor a
                           A   797    ;  177		asm ("jp quitnow");
01036E C3 81 03 01         A   798    jp quitnow
                           A   799    ;  178		
                           A   800    ;  179		asm ("endprogram:");	
010372                     A   801    endprogram:
                           A   802    ;  180		asm ("ld a, kr_os_display");
010372 3E2F                A   803    ld a, kr_os_display
                           A   804    ;  181		asm ("call.lil prose_kernal");
010374 5BCD200A 00         A   805    call.lil prose_kernal
                           A   806    ;  182		asm ("ld a, kr_clear_screen");
010379 3E26                A   807    ld a, kr_clear_screen
                           A   808    ;  183		asm ("call.lil prose_kernal");	
01037B 5BCD200A 00         A   809    call.lil prose_kernal
                           A   810    ;  184		
                           A   811    ;  185		/*if ((VideoX == 320) && (VideoY ==
                           A   812    ;  186			asm ("xor a");
                           A   813    ;  187		else
                           A   814    ;  188			asm ("ld a, 0ffh");*/
                           A   815    ;  189			
                           A   816    ;  190		asm ("xor a");
010380 AF                  A   817    xor a
                           A   818    ;  191		asm ("quitnow:");	
010381                     A   819    quitnow:
                           A   820    ;  192		asm ("jp.lil prose_return");
010381 5BC3140A 00         A   821    jp.lil prose_return
                           A   822    ;  193	}
010386 C9                  A   823    	RET	
                           A   824    
                           A   825    
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  17


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A   826    ;**************************** _main ***********
                           A   827    ;Name                         Addr/Register   S
                           A   828    ;_FileOpenError                      STATIC    
                           A   829    ;_UseTxt                             STATIC    
                           A   830    ;_DecodePcxFile                      IMPORT  --
                           A   831    ;_PcxPalette                         STATIC    
                           A   832    ;_memcpy                             IMPORT  --
                           A   833    ;_Set_640_480_Mode                   IMPORT  --
                           A   834    ;_Set_320_240_Mode                   IMPORT  --
                           A   835    ;_LoadPcxFile                        IMPORT  --
                           A   836    ;_LoadPcxPalette                     IMPORT  --
                           A   837    ;_PosY                               STATIC    
                           A   838    ;_PosX                               STATIC    
                           A   839    ;_StartY                             STATIC    
                           A   840    ;_StartX                             STATIC    
                           A   841    ;_BuildOffset                        IMPORT  --
                           A   842    ;_VideoY                             STATIC    
                           A   843    ;_VideoX                             STATIC    
                           A   844    ;_PcxSize                            STATIC    
                           A   845    ;_convBuf                            STATIC    
                           A   846    ;_uitoa                              IMPORT  --
                           A   847    ;_YSize                              STATIC    
                           A   848    ;_XSize                              STATIC    
                           A   849    ;_MaxY                               STATIC    
                           A   850    ;_MaxX                               STATIC    
                           A   851    ;_MinY                               STATIC    
                           A   852    ;_MinX                               STATIC    
                           A   853    ;_Make_Short                         IMPORT  --
                           A   854    ;_NonPcxFile                         STATIC    
                           A   855    ;_ShowMsg                            IMPORT  --
                           A   856    ;_Header                             STATIC    
                           A   857    
                           A   858    
                           A   859    ; Stack Frame Size: 6 (bytes)
                           A   860    ;       Spill Code: 0 (instruction)
                           A   861    
                           A   862    
                           A   863    	SEGMENT STRSECT
0109E9                     A   864    L__6:
0109E9 78                  A   865    	DB	"x"
0109EA 00                  A   866    	DB	0
0109EB                     A   867    L__7:
0109EB 0A0D00              A   868    	DB	10,13,0
0109EE                     A   869    L__9:
0109EE 496D6167 6520746F   A   870    	DB	"Image too big!"
0109F6 6F206269 6721 
0109FC 0A0D00              A   871    	DB	10,13,0
0109FF                     A   872    L__11:
0109FF 496D6167 6520746F   A   873    	DB	"Image too big!"
010A07 6F206269 6721 
010A0D 0A0D00              A   874    	DB	10,13,0
010A10                     A   875    L__16:
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  18


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010A10 50726573 73206120   A   876    	DB	"Press a key..."
010A18 6B65792E 2E2E 
010A1E 0A0D00              A   877    	DB	10,13,0
010A21                     A   878    L__19:
010A21 496E7661 6C696420   A   879    	DB	"Invalid image dimensions!"
010A29 696D6167 65206469 
010A31 6D656E73 696F6E73 
010A39 21 
010A3A 0A0D00              A   880    	DB	10,13,0
                           A   881    	SEGMENT CODE
                           A   882    ;  194	
                           A   883    ;  195	//Join to bytes and make a 16 bit value
                           A   884    ;  196	void Make_Short(unsigned char a, unsign
                           A   885    ;  197	{
010387                     A   886    _Make_Short:
010387 CD BF 08 01         A   887    	CALL	__frameset0
                           A   888    ;  198		*Val = (a + (b << 8));
01038B DD4E09              A   889    	LD	C,(IX+9)
01038E 0600                A   890    	LD	B,0
010390 C5E1                A   891    	LD	HL,BC
010392 65                  A   892    	LD	H,L
010393 DD4E06              A   893    	LD	C,(IX+6)
010396 2E00                A   894    	LD	L,0
010398 4009                A   895    	ADD.SIS	HL,BC
01039A E5C1                A   896    	LD	BC,HL
01039C DD270C              A   897    	LD	HL,(IX+12)
01039F 71                  A   898    	LD	(HL),C
0103A0 23                  A   899    	INC	HL
0103A1 70                  A   900    	LD	(HL),B
                           A   901    ;  199	}
0103A2 DDF9                A   902    	LD	SP,IX
0103A4 DDE1                A   903    	POP	IX
0103A6 C9                  A   904    	RET	
                           A   905    
                           A   906    
                           A   907    ;**************************** _Make_Short *****
                           A   908    ;Name                         Addr/Register   S
                           A   909    ;Val                                  IX+12    
                           A   910    ;b                                     IX+9    
                           A   911    ;a                                     IX+6    
                           A   912    
                           A   913    
                           A   914    ; Stack Frame Size: 15 (bytes)
                           A   915    ;       Spill Code: 0 (instruction)
                           A   916    
                           A   917    
                           A   918    ;  200	
                           A   919    ;  201	//convert an integer in ascii string
                           A   920    ;  202	void uitoa(unsigned int val, char *stri
                           A   921    ;  203	{
0103A7                     A   922    _uitoa:
0103A7 21FAFFFF            A   923    	LD	HL,-6
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  19


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0103AB CD E8 08 01         A   924    	CALL	__frameset
                           A   925    ;  204		char index = 0, i = 0;
0103AF DD36FF00            A   926    	LD	(IX+-1),0
0103B3 DD36FE00            A   927    	LD	(IX+-2),0
                           A   928    ;  205		
                           A   929    ;  206		do {
0103B7                     A   930    L_27:
                           A   931    ;  207			string[index] = '0' + (val % 10
0103B7 DD7EFF              A   932    	LD	A,(IX+-1)
0103BA 17ED62              A   933    	SEXT	HL
0103BD DD6EFF              A   934    	LD	L,(IX+-1)
0103C0 DD0709              A   935    	LD	BC,(IX+9)
0103C3 09                  A   936    	ADD	HL,BC
0103C4 DD2FFB              A   937    	LD	(IX+-5),HL
0103C7 DD2706              A   938    	LD	HL,(IX+6)
0103CA 010A0000            A   939    	LD	BC,10
0103CE CD 95 08 01         A   940    	CALL	__iremu
0103D2 7D                  A   941    	LD	A,L
0103D3 C630                A   942    	ADD	A,48
0103D5 DD27FB              A   943    	LD	HL,(IX+-5)
0103D8 77                  A   944    	LD	(HL),A
                           A   945    ;  208			
                           A   946    ;  209			if (string[index] > '9')
0103D9 DD27FB              A   947    	LD	HL,(IX+-5)
0103DC 7E                  A   948    	LD	A,(HL)
0103DD 47                  A   949    	LD	B,A
0103DE 17ED62              A   950    	SEXT	HL
0103E1 68                  A   951    	LD	L,B
0103E2 E5C1                A   952    	LD	BC,HL
0103E4 21390000            A   953    	LD	HL,57
0103E8 B7                  A   954    	OR	A,A
0103E9 ED42                A   955    	SBC	HL,BC
0103EB F2 F5 03 01         A   956    	JP	P,L__39
0103EF EA 03 04 01         A   957    	JP	PE,L_26
0103F3 18 04               A   958    	JR	L__40
0103F5                     A   959    L__39:
0103F5 E2 03 04 01         A   960    	JP	PO,L_26
0103F9                     A   961    L__40:
                           A   962    ;  210				string[index] += 'A' - '9' 
0103F9 DD27FB              A   963    	LD	HL,(IX+-5)
0103FC 7E                  A   964    	LD	A,(HL)
0103FD C607                A   965    	ADD	A,7
0103FF DD27FB              A   966    	LD	HL,(IX+-5)
010402 77                  A   967    	LD	(HL),A
010403                     A   968    L_26:
                           A   969    ;  211			
                           A   970    ;  212			val /= 10;
010403 010A0000            A   971    	LD	BC,10
010407 DD2706              A   972    	LD	HL,(IX+6)
01040A CD 9E 08 01         A   973    	CALL	__idivu
01040E DD2F06              A   974    	LD	(IX+6),HL
                           A   975    ;  213			++index;
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  20


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010411 DD34FF              A   976    	INC	(IX+-1)
                           A   977    ;  214	  } while (val != 0);
010414 DD2706              A   978    	LD	HL,(IX+6)
010417 B7                  A   979    	OR	A,A
010418 01000000            A   980    	LD	BC,0
01041C ED42                A   981    	SBC	HL,BC
01041E 20 97               A   982    	JR	NZ,L_27
                           A   983    ;  215	  
                           A   984    ;  216	  string[index--] = '\0'; 
010420 DD7EFF              A   985    	LD	A,(IX+-1)
010423 17ED62              A   986    	SEXT	HL
010426 DD6EFF              A   987    	LD	L,(IX+-1)
010429 DD0709              A   988    	LD	BC,(IX+9)
01042C 09                  A   989    	ADD	HL,BC
01042D 3600                A   990    	LD	(HL),0
01042F DD35FF              A   991    	DEC	(IX+-1)
                           A   992    ;  217	  
                           A   993    ;  218	  while (index > i)
010432 18 49               A   994    	JR	L_31
010434                     A   995    L_32:
                           A   996    ;  219	  {
                           A   997    ;  220	    char tmp = string[i];
010434 DD7EFE              A   998    	LD	A,(IX+-2)
010437 17ED62              A   999    	SEXT	HL
01043A DD6EFE              A  1000    	LD	L,(IX+-2)
01043D DD0709              A  1001    	LD	BC,(IX+9)
010440 09                  A  1002    	ADD	HL,BC
010441 7E                  A  1003    	LD	A,(HL)
010442 DD77FA              A  1004    	LD	(IX+-6),A
                           A  1005    ;  221		  
                           A  1006    ;  222	    string[i] = string[index];
010445 DD7EFF              A  1007    	LD	A,(IX+-1)
010448 17ED62              A  1008    	SEXT	HL
01044B DD6EFF              A  1009    	LD	L,(IX+-1)
01044E DD7EFE              A  1010    	LD	A,(IX+-2)
010451 DD0709              A  1011    	LD	BC,(IX+9)
010454 09                  A  1012    	ADD	HL,BC
010455 E5FDE1              A  1013    	LD	IY,HL
010458 17ED62              A  1014    	SEXT	HL
01045B DD6EFE              A  1015    	LD	L,(IX+-2)
01045E FD7E00              A  1016    	LD	A,(IY)
010461 DD0709              A  1017    	LD	BC,(IX+9)
010464 09                  A  1018    	ADD	HL,BC
010465 77                  A  1019    	LD	(HL),A
                           A  1020    ;  223	    string[index] = tmp;
010466 DD7EFF              A  1021    	LD	A,(IX+-1)
010469 17ED62              A  1022    	SEXT	HL
01046C DD6EFF              A  1023    	LD	L,(IX+-1)
01046F DD7EFA              A  1024    	LD	A,(IX+-6)
010472 DD0709              A  1025    	LD	BC,(IX+9)
010475 09                  A  1026    	ADD	HL,BC
010476 77                  A  1027    	LD	(HL),A
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  21


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1028    ;  224	    ++i;
010477 DD34FE              A  1029    	INC	(IX+-2)
                           A  1030    ;  225	    --index;
01047A DD35FF              A  1031    	DEC	(IX+-1)
                           A  1032    ;  226	  }
01047D                     A  1033    L_31:
01047D DD7EFE              A  1034    	LD	A,(IX+-2)
010480 DDBEFF              A  1035    	CP	A,(IX+-1)
010483 FA 8D 04 01         A  1036    	JP	M,L__41
010487 EA 34 04 01         A  1037    	JP	PE,L_32
01048B 18 04               A  1038    	JR	L__42
01048D                     A  1039    L__41:
01048D E2 34 04 01         A  1040    	JP	PO,L_32
010491                     A  1041    L__42:
                           A  1042    ;  227	}
010491 DDF9                A  1043    	LD	SP,IX
010493 DDE1                A  1044    	POP	IX
010495 C9                  A  1045    	RET	
                           A  1046    
                           A  1047    
                           A  1048    ;**************************** _uitoa **********
                           A  1049    ;Name                         Addr/Register   S
                           A  1050    ;tmp                                   IX-6    
                           A  1051    ;G_0                                   IX-5    
                           A  1052    ;i                                     IX-2    
                           A  1053    ;index                                 IX-1    
                           A  1054    ;string                                IX+9    
                           A  1055    ;val                                   IX+6    
                           A  1056    
                           A  1057    
                           A  1058    ; Stack Frame Size: 18 (bytes)
                           A  1059    ;       Spill Code: 0 (instruction)
                           A  1060    
                           A  1061    
                           A  1062    ;  228	
                           A  1063    ;  229	//Show a text :-)
                           A  1064    ;  230	void ShowMsg(const char *Txt)
                           A  1065    ;  231	{
010496                     A  1066    _ShowMsg:
010496 CD BF 08 01         A  1067    	CALL	__frameset0
                           A  1068    ;  232		TxtPnt = Txt;
01049A DD0706              A  1069    	LD	BC,(IX+6)
01049D ED43 97 0A 01       A  1070    	LD	(_TxtPnt),BC
                           A  1071    ;  233		
                           A  1072    ;  234		asm ("push ix");
0104A2 DDE5                A  1073    push ix
                           A  1074    ;  235		asm ("ld hl, (_TxtPnt)");
0104A4 2A 97 0A 01         A  1075    ld hl, (_TxtPnt)
                           A  1076    ;  236		asm ("ld a, kr_print_string");
0104A8 3E25                A  1077    ld a, kr_print_string
                           A  1078    ;  237		asm ("call.lil prose_kernal");
0104AA 5BCD200A 00         A  1079    call.lil prose_kernal
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  22


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1080    ;  238		asm ("pop ix");	
0104AF DDE1                A  1081    pop ix
                           A  1082    ;  239	}
0104B1 DDF9                A  1083    	LD	SP,IX
0104B3 DDE1                A  1084    	POP	IX
0104B5 C9                  A  1085    	RET	
                           A  1086    
                           A  1087    
                           A  1088    ;**************************** _ShowMsg ********
                           A  1089    ;Name                         Addr/Register   S
                           A  1090    ;_TxtPnt                             STATIC    
                           A  1091    ;Txt                                   IX+6    
                           A  1092    
                           A  1093    
                           A  1094    ; Stack Frame Size: 9 (bytes)
                           A  1095    ;       Spill Code: 0 (instruction)
                           A  1096    
                           A  1097    
                           A  1098    ;  240	
                           A  1099    ;  241	//Load a 768 bytes palette, then conver
                           A  1100    ;  242	void LoadPcxPalette(void)
                           A  1101    ;  243	{
0104B6                     A  1102    _LoadPcxPalette:
0104B6 21FCFFFF            A  1103    	LD	HL,-4
0104BA CD E8 08 01         A  1104    	CALL	__frameset
                           A  1105    ;  244		short i, a;
                           A  1106    ;  245		
                           A  1107    ;  246		ShowMsg("Loading Palette...\n\r");
0104BE 01 3D 0A 01         A  1108    	LD	BC,L__45
0104C2 C5                  A  1109    	PUSH	BC
0104C3 CD 96 04 01         A  1110    	CALL	_ShowMsg
0104C7 C1                  A  1111    	POP	BC
                           A  1112    ;  247		
                           A  1113    ;  248		asm ("push ix");
0104C8 DDE5                A  1114    push ix
                           A  1115    ;  249		asm ("ld hl, (_K_xHL)");
0104CA 2A A5 0A 01         A  1116    ld hl, (_K_xHL)
                           A  1117    ;  250		asm ("ld a, kr_find_file");
0104CE 3E0B                A  1118    ld a, kr_find_file
                           A  1119    ;  251		asm ("call.lil prose_kernal");
0104D0 5BCD200A 00         A  1120    call.lil prose_kernal
                           A  1121    ;  252		asm ("pop ix");	
0104D5 DDE1                A  1122    pop ix
                           A  1123    ;  253		asm ("jr nz, PaletteError");
0104D7 C2 D8 05 01         A  1124    jr nz, PaletteError
                           A  1125    ;  254		asm ("ld (_K_xDE), de");
0104DB ED53 A8 0A 01       A  1126    ld (_K_xDE), de
                           A  1127    ;  255		
                           A  1128    ;  256		K_xDE -= 768;
0104E0 2A A8 0A 01         A  1129    	LD	HL,(_K_xDE)
0104E4 0100FDFF            A  1130    	LD	BC,-768
0104E8 09                  A  1131    	ADD	HL,BC
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  23


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0104E9 22 A8 0A 01         A  1132    	LD	(_K_xDE),HL
                           A  1133    ;  257		
                           A  1134    ;  258		asm ("push ix");
0104ED DDE5                A  1135    push ix
                           A  1136    ;  259		asm ("ld de, (_K_xDE)");	
0104EF ED5B A8 0A 01       A  1137    ld de, (_K_xDE)
                           A  1138    ;  260		asm ("ld a, kr_set_file_pointer");
0104F4 3E0C                A  1139    ld a, kr_set_file_pointer
                           A  1140    ;  261		asm ("call.lil prose_kernal");
0104F6 5BCD200A 00         A  1141    call.lil prose_kernal
                           A  1142    ;  262		asm ("pop ix");
0104FB DDE1                A  1143    pop ix
                           A  1144    ;  263		
                           A  1145    ;  264		asm ("push ix");
0104FD DDE5                A  1146    push ix
                           A  1147    ;  265		asm ("ld de, 768");
0104FF 11000300            A  1148    ld de, 768
                           A  1149    ;  266		asm ("ld a, kr_set_load_length");
010503 3E0D                A  1150    ld a, kr_set_load_length
                           A  1151    ;  267		asm ("call.lil prose_kernal");
010505 5BCD200A 00         A  1152    call.lil prose_kernal
                           A  1153    ;  268		asm ("pop ix");
01050A DDE1                A  1154    pop ix
                           A  1155    ;  269		
                           A  1156    ;  270		asm ("push ix");
01050C DDE5                A  1157    push ix
                           A  1158    ;  271		asm ("ld hl, (_PntPal)");
01050E 2A FC 15 01         A  1159    ld hl, (_PntPal)
                           A  1160    ;  272		asm ("ld a, kr_read_file");
010512 3E0E                A  1161    ld a, kr_read_file
                           A  1162    ;  273		asm ("call.lil prose_kernal");
010514 5BCD200A 00         A  1163    call.lil prose_kernal
                           A  1164    ;  274		asm ("jr nz, PaletteError");
010519 C2 D8 05 01         A  1165    jr nz, PaletteError
                           A  1166    ;  275		asm ("pop ix");
01051D DDE1                A  1167    pop ix
                           A  1168    ;  276		
                           A  1169    ;  277		a = 0;
01051F DD36FC00            A  1170    	LD	(IX+-4),0
010523 DD36FD00            A  1171    	LD	(IX+-3),0
010527 DD36FE00            A  1172    	LD	(IX+-2),0
01052B DD36FF00            A  1173    	LD	(IX+-1),0
                           A  1174    ;  278		for (i = 0; i < 256; i++)
01052F C3 BB 05 01         A  1175    	JR	L_38
010533                     A  1176    L_36:
                           A  1177    ;  279		{
                           A  1178    ;  280			PcxPalette[i] = RGB2WORD(TmpPal
010533 DD07FC              A  1179    	LD	BC,(IX+-4)
010536 CD 8B 09 01         A  1180    	CALL	__stoi
01053A 01 47 0D 01         A  1181    	LD	BC,_TmpPal
01053E 09                  A  1182    	ADD	HL,BC
01053F 7E                  A  1183    	LD	A,(HL)
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  24


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010540 B7ED62              A  1184    	UEXT	HL
010543 6F                  A  1185    	LD	L,A
010544 01100000            A  1186    	LD	BC,16
010548 CD F8 08 01         A  1187    	CALL	__idivs
01054C 3E08                A  1188    	LD	A,8
01054E CD 79 09 01         A  1189    	CALL	__ishl_b
010552 E5D1                A  1190    	LD	DE,HL
010554 DD07FC              A  1191    	LD	BC,(IX+-4)
010557 CD 8B 09 01         A  1192    	CALL	__stoi
01055B 23                  A  1193    	INC	HL
01055C 01 47 0D 01         A  1194    	LD	BC,_TmpPal
010560 09                  A  1195    	ADD	HL,BC
010561 7E                  A  1196    	LD	A,(HL)
010562 B7ED62              A  1197    	UEXT	HL
010565 6F                  A  1198    	LD	L,A
010566 01100000            A  1199    	LD	BC,16
01056A CD F8 08 01         A  1200    	CALL	__idivs
01056E 29                  A  1201    	ADD	HL,HL
01056F 29                  A  1202    	ADD	HL,HL
010570 29                  A  1203    	ADD	HL,HL
010571 29                  A  1204    	ADD	HL,HL
010572 19                  A  1205    	ADD	HL,DE
010573 E5D1                A  1206    	LD	DE,HL
010575 DD07FC              A  1207    	LD	BC,(IX+-4)
010578 CD 8B 09 01         A  1208    	CALL	__stoi
01057C 23                  A  1209    	INC	HL
01057D 23                  A  1210    	INC	HL
01057E 01 47 0D 01         A  1211    	LD	BC,_TmpPal
010582 09                  A  1212    	ADD	HL,BC
010583 7E                  A  1213    	LD	A,(HL)
010584 B7ED62              A  1214    	UEXT	HL
010587 6F                  A  1215    	LD	L,A
010588 01100000            A  1216    	LD	BC,16
01058C CD F8 08 01         A  1217    	CALL	__idivs
010590 19                  A  1218    	ADD	HL,DE
010591 E5D1                A  1219    	LD	DE,HL
010593 DD07FE              A  1220    	LD	BC,(IX+-2)
010596 CD 8B 09 01         A  1221    	CALL	__stoi
01059A 29                  A  1222    	ADD	HL,HL
01059B 01 47 0B 01         A  1223    	LD	BC,_PcxPalette
01059F 09                  A  1224    	ADD	HL,BC
0105A0 D5C1                A  1225    	LD	BC,DE
0105A2 71                  A  1226    	LD	(HL),C
0105A3 23                  A  1227    	INC	HL
0105A4 70                  A  1228    	LD	(HL),B
                           A  1229    ;  281			
                           A  1230    ;  282			a+=3;
0105A5 DD31FC              A  1231    	LD	IY,(IX+-4)
0105A8 ED2303              A  1232    	LEA	HL,IY+3
0105AB DD75FC              A  1233    	LD	(IX+-4),L
0105AE DD74FD              A  1234    	LD	(IX+-3),H
0105B1 DD27FE              A  1235    	LD	HL,(IX+-2)
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  25


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0105B4 23                  A  1236    	INC	HL
0105B5 DD75FE              A  1237    	LD	(IX+-2),L
0105B8 DD74FF              A  1238    	LD	(IX+-1),H
                           A  1239    ;  283		}
0105BB                     A  1240    L_38:
0105BB 49010001            A  1241    	LD.LIS	BC,256
0105BF DD27FE              A  1242    	LD	HL,(IX+-2)
0105C2 B7                  A  1243    	OR	A,A
0105C3 40ED42              A  1244    	SBC.SIS	HL,BC
0105C6 FA D0 05 01         A  1245    	JP	M,L__48
0105CA EA 33 05 01         A  1246    	JP	PE,L_36
0105CE 18 04               A  1247    	JR	L__49
0105D0                     A  1248    L__48:
0105D0 E2 33 05 01         A  1249    	JP	PO,L_36
0105D4                     A  1250    L__49:
                           A  1251    ;  284		
                           A  1252    ;  285		asm ("jp EndPalette");
0105D4 C3 E2 05 01         A  1253    jp EndPalette
                           A  1254    ;  286		
                           A  1255    ;  287		asm("PaletteError:");
0105D8                     A  1256    PaletteError:
                           A  1257    ;  288		ShowMsg("Palette Reading error\n\r"
0105D8 01 52 0A 01         A  1258    	LD	BC,L__47
0105DC C5                  A  1259    	PUSH	BC
0105DD CD 96 04 01         A  1260    	CALL	_ShowMsg
0105E1 C1                  A  1261    	POP	BC
                           A  1262    ;  289		
                           A  1263    ;  290		asm ("EndPalette:");
0105E2                     A  1264    EndPalette:
                           A  1265    ;  291	}
0105E2 DDF9                A  1266    	LD	SP,IX
0105E4 DDE1                A  1267    	POP	IX
0105E6 C9                  A  1268    	RET	
                           A  1269    
                           A  1270    
                           A  1271    ;**************************** _LoadPcxPalette *
                           A  1272    ;Name                         Addr/Register   S
                           A  1273    ;_PcxPalette                         STATIC    
                           A  1274    ;_TmpPal                             STATIC    
                           A  1275    ;_K_xDE                              STATIC    
                           A  1276    ;_ShowMsg                            IMPORT  --
                           A  1277    ;a                                     IX-4    
                           A  1278    ;i                                     IX-2    
                           A  1279    
                           A  1280    
                           A  1281    ; Stack Frame Size: 10 (bytes)
                           A  1282    ;       Spill Code: 0 (instruction)
                           A  1283    
                           A  1284    
                           A  1285    	SEGMENT STRSECT
010A3D                     A  1286    L__45:
010A3D 4C6F6164 696E6720   A  1287    	DB	"Loading Palette..."
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  26


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010A45 50616C65 7474652E 
010A4D 2E2E 
010A4F 0A0D00              A  1288    	DB	10,13,0
010A52                     A  1289    L__47:
010A52 50616C65 74746520   A  1290    	DB	"Palette Reading error"
010A5A 52656164 696E6720 
010A62 6572726F 72 
010A67 0A0D00              A  1291    	DB	10,13,0
                           A  1292    	SEGMENT CODE
                           A  1293    ;  292	
                           A  1294    ;  293	//Load the Pcx compress data in second 
                           A  1295    ;  294	void LoadPcxFile(void)
                           A  1296    ;  295	{
0105E7                     A  1297    _LoadPcxFile:
                           A  1298    ;  296		ShowMsg("Loading Pcx Data...\n\r");
0105E7 01 6A 0A 01         A  1299    	LD	BC,L__51
0105EB C5                  A  1300    	PUSH	BC
0105EC CD 96 04 01         A  1301    	CALL	_ShowMsg
0105F0 C1                  A  1302    	POP	BC
                           A  1303    ;  297		
                           A  1304    ;  298		asm ("push ix");
0105F1 DDE5                A  1305    push ix
                           A  1306    ;  299		asm ("ld hl, (_K_xHL)");
0105F3 2A A5 0A 01         A  1307    ld hl, (_K_xHL)
                           A  1308    ;  300		asm ("ld a, kr_find_file");
0105F7 3E0B                A  1309    ld a, kr_find_file
                           A  1310    ;  301		asm ("call.lil prose_kernal");
0105F9 5BCD200A 00         A  1311    call.lil prose_kernal
                           A  1312    ;  302		asm ("pop ix");	
0105FE DDE1                A  1313    pop ix
                           A  1314    ;  303		asm ("jr nz, LoadPcxError");
010600 20 46               A  1315    jr nz, LoadPcxError
                           A  1316    ;  304		asm ("ld (_K_xDE), de");
010602 ED53 A8 0A 01       A  1317    ld (_K_xDE), de
                           A  1318    ;  305		
                           A  1319    ;  306		asm ("push ix");
010607 DDE5                A  1320    push ix
                           A  1321    ;  307		asm ("ld de, 128");
010609 11800000            A  1322    ld de, 128
                           A  1323    ;  308		asm ("ld a, kr_set_file_pointer");
01060D 3E0C                A  1324    ld a, kr_set_file_pointer
                           A  1325    ;  309		asm ("call.lil prose_kernal");
01060F 5BCD200A 00         A  1326    call.lil prose_kernal
                           A  1327    ;  310		asm ("pop ix");
010614 DDE1                A  1328    pop ix
                           A  1329    ;  311		
                           A  1330    ;  312		K_xDE = K_xDE - (128 + 768);
010616 2A A8 0A 01         A  1331    	LD	HL,(_K_xDE)
01061A 0180FCFF            A  1332    	LD	BC,-896
01061E 09                  A  1333    	ADD	HL,BC
01061F 22 A8 0A 01         A  1334    	LD	(_K_xDE),HL
                           A  1335    ;  313		
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  27


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1336    ;  314		asm ("push ix");
010623 DDE5                A  1337    push ix
                           A  1338    ;  315		asm ("ld de, (_K_xDE)");
010625 ED5B A8 0A 01       A  1339    ld de, (_K_xDE)
                           A  1340    ;  316		asm ("ld a, kr_set_load_length");
01062A 3E0D                A  1341    ld a, kr_set_load_length
                           A  1342    ;  317		asm ("call.lil prose_kernal");
01062C 5BCD200A 00         A  1343    call.lil prose_kernal
                           A  1344    ;  318		asm ("pop ix");
010631 DDE1                A  1345    pop ix
                           A  1346    ;  319		
                           A  1347    ;  320		asm ("push ix");
010633 DDE5                A  1348    push ix
                           A  1349    ;  321		asm ("ld hl, (_VideoMemTmp)");
010635 2A F9 15 01         A  1350    ld hl, (_VideoMemTmp)
                           A  1351    ;  322		asm ("ld a, kr_read_file");
010639 3E0E                A  1352    ld a, kr_read_file
                           A  1353    ;  323		asm ("call.lil prose_kernal");
01063B 5BCD200A 00         A  1354    call.lil prose_kernal
                           A  1355    ;  324		asm ("jr nz, LoadPcxError");
010640 20 06               A  1356    jr nz, LoadPcxError
                           A  1357    ;  325		asm ("pop ix");
010642 DDE1                A  1358    pop ix
                           A  1359    ;  326		
                           A  1360    ;  327		asm ("jp EndLoadPcx");
010644 C3 52 06 01         A  1361    jp EndLoadPcx
                           A  1362    ;  328		
                           A  1363    ;  329		asm("LoadPcxError:");
010648                     A  1364    LoadPcxError:
                           A  1365    ;  330		ShowMsg("PCX Reading error\n\r");
010648 01 80 0A 01         A  1366    	LD	BC,L__52
01064C C5                  A  1367    	PUSH	BC
01064D CD 96 04 01         A  1368    	CALL	_ShowMsg
010651 C1                  A  1369    	POP	BC
                           A  1370    ;  331		
                           A  1371    ;  332		asm ("EndLoadPcx:");
010652                     A  1372    EndLoadPcx:
                           A  1373    ;  333	}
010652 C9                  A  1374    	RET	
                           A  1375    
                           A  1376    
                           A  1377    ;**************************** _LoadPcxFile ****
                           A  1378    ;Name                         Addr/Register   S
                           A  1379    ;_K_xDE                              STATIC    
                           A  1380    ;_ShowMsg                            IMPORT  --
                           A  1381    
                           A  1382    
                           A  1383    ; Stack Frame Size: 6 (bytes)
                           A  1384    ;       Spill Code: 0 (instruction)
                           A  1385    
                           A  1386    
                           A  1387    	SEGMENT STRSECT
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  28


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010A6A                     A  1388    L__51:
010A6A 4C6F6164 696E6720   A  1389    	DB	"Loading Pcx Data..."
010A72 50637820 44617461 
010A7A 2E2E2E 
010A7D 0A0D00              A  1390    	DB	10,13,0
010A80                     A  1391    L__52:
010A80 50435820 52656164   A  1392    	DB	"PCX Reading error"
010A88 696E6720 6572726F 
010A90 72 
010A91 0A0D00              A  1393    	DB	10,13,0
                           A  1394    	SEGMENT CODE
                           A  1395    ;  334	
                           A  1396    ;  335	//Enable 320x240x256 colors
                           A  1397    ;  336	void Set_320_240_Mode(void)
                           A  1398    ;  337	{
010653                     A  1399    _Set_320_240_Mode:
                           A  1400    ;  338		asm ("push ix");
010653 DDE5                A  1401    push ix
                           A  1402    ;  339		
                           A  1403    ;  340		asm ("ld a, 0110b");
010655 3E06                A  1404    ld a, 0110b
                           A  1405    ;  341		asm ("ld (video_control), a");
010657 320018FF            A  1406    ld (video_control), a
                           A  1407    ;  342		asm ("ld a, 0");
01065B 3E00                A  1408    ld a, 0
                           A  1409    ;  343		asm ("ld (bgnd_palette_select), a")
01065D 320218FF            A  1410    ld (bgnd_palette_select), a
                           A  1411    ;  344		asm ("ld a, 99");
010661 3E63                A  1412    ld a, 99
                           A  1413    ;  345		asm ("ld (right_border_position), a
010663 320418FF            A  1414    ld (right_border_position), a
                           A  1415    ;  346		asm ("ld ix, bitmap_parameters");
010667 DD212010 FF         A  1416    ld ix, bitmap_parameters
                           A  1417    ;  347		asm ("ld hl, 1024 * 20");
01066C 21005000            A  1418    ld hl, 1024 * 20
                           A  1419    ;  348		asm ("ld (ix), hl");
010670 DD2F00              A  1420    ld (ix), hl
                           A  1421    ;  349		asm ("ld (ix+04h), 1");
010673 DD360401            A  1422    ld (ix+04h), 1
                           A  1423    ;  350		asm ("ld (ix+08h), 0");
010677 DD360800            A  1424    ld (ix+08h), 0
                           A  1425    ;  351		asm ("ld (ix+0ch), 0");
01067B DD360C00            A  1426    ld (ix+0ch), 0
                           A  1427    ;  352		asm ("ld (ix+10h), 0 + (320 / 8) - 
01067F DD361027            A  1428    ld (ix+10h), 0 + (320 / 8) - 1
                           A  1429    ;  353		
                           A  1430    ;  354		//asm ("ld hl, vram_a_addr");
                           A  1431    ;  355		asm ("ld hl, (_VideoMem)");
010683 2A F6 15 01         A  1432    ld hl, (_VideoMem)
                           A  1433    ;  356		asm ("ld (hl), 0");
010687 3600                A  1434    ld (hl), 0
                           A  1435    ;  357		asm ("push hl");
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  29


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010689 E5                  A  1436    push hl
                           A  1437    ;  358		asm ("pop de");
01068A D1                  A  1438    pop de
                           A  1439    ;  359		asm ("inc de");
01068B 13                  A  1440    inc de
                           A  1441    ;  360		asm ("ld bc, 320*240");
01068C 01002C01            A  1442    ld bc, 320*240
                           A  1443    ;  361		asm ("dec bc");
010690 0B                  A  1444    dec bc
                           A  1445    ;  362		asm ("ldir");
010691 EDB0                A  1446    ldir
                           A  1447    ;  363		
                           A  1448    ;  364		asm ("pop ix");
010693 DDE1                A  1449    pop ix
                           A  1450    ;  365	}
010695 C9                  A  1451    	RET	
                           A  1452    
                           A  1453    
                           A  1454    ;**************************** _Set_320_240_Mode
                           A  1455    ;Name                         Addr/Register   S
                           A  1456    
                           A  1457    
                           A  1458    ; Stack Frame Size: 6 (bytes)
                           A  1459    ;       Spill Code: 0 (instruction)
                           A  1460    
                           A  1461    
                           A  1462    ;  366	
                           A  1463    ;  367	//Enable 640x480x256 colors
                           A  1464    ;  368	void Set_640_480_Mode(void)
                           A  1465    ;  369	{
010696                     A  1466    _Set_640_480_Mode:
                           A  1467    ;  370		asm ("push ix");
010696 DDE5                A  1468    push ix
                           A  1469    ;  371		
                           A  1470    ;  372		asm ("ld a, 0000b");
010698 3E00                A  1471    ld a, 0000b
                           A  1472    ;  373		asm ("ld (video_control), a");
01069A 320018FF            A  1473    ld (video_control), a
                           A  1474    ;  374		asm ("ld a, 0");
01069E 3E00                A  1475    ld a, 0
                           A  1476    ;  375		asm ("ld (bgnd_palette_select), a")
0106A0 320218FF            A  1477    ld (bgnd_palette_select), a
                           A  1478    ;  376		asm ("ld a, 99");
0106A4 3E63                A  1479    ld a, 99
                           A  1480    ;  377		asm ("ld (right_border_position), a
0106A6 320418FF            A  1481    ld (right_border_position), a
                           A  1482    ;  378		asm ("ld ix, bitmap_parameters");	0106AA DD212010 FF         A  1483    ld ix, bitmap_parameters
                           A  1484    ;  379		asm ("ld hl, 1024 * 20");
0106AF 21005000            A  1485    ld hl, 1024 * 20
                           A  1486    ;  380		asm ("ld (ix), hl");
0106B3 DD2F00              A  1487    ld (ix), hl
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  30


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1488    ;  381		asm ("ld (ix+04h), 1");
0106B6 DD360401            A  1489    ld (ix+04h), 1
                           A  1490    ;  382		asm ("ld (ix+08h), 0");
0106BA DD360800            A  1491    ld (ix+08h), 0
                           A  1492    ;  383		asm ("ld (ix+0ch), 0");
0106BE DD360C00            A  1493    ld (ix+0ch), 0
                           A  1494    ;  384		asm ("ld (ix+10h), 0 + (640 / 8) - 
0106C2 DD36104F            A  1495    ld (ix+10h), 0 + (640 / 8) - 1
                           A  1496    ;  385		
                           A  1497    ;  386		//asm ("ld hl, vram_a_addr");
                           A  1498    ;  387		asm ("ld hl, (_VideoMem)");
0106C6 2A F6 15 01         A  1499    ld hl, (_VideoMem)
                           A  1500    ;  388		asm ("ld (hl), 0");
0106CA 3600                A  1501    ld (hl), 0
                           A  1502    ;  389		asm ("push hl");
0106CC E5                  A  1503    push hl
                           A  1504    ;  390		asm ("pop de");
0106CD D1                  A  1505    pop de
                           A  1506    ;  391		asm ("inc de");
0106CE 13                  A  1507    inc de
                           A  1508    ;  392		asm ("ld bc, 640*480");
0106CF 0100B004            A  1509    ld bc, 640*480
                           A  1510    ;  393		asm ("dec bc");
0106D3 0B                  A  1511    dec bc
                           A  1512    ;  394		asm ("ldir");
0106D4 EDB0                A  1513    ldir
                           A  1514    ;  395		
                           A  1515    ;  396		asm ("pop ix");
0106D6 DDE1                A  1516    pop ix
                           A  1517    ;  397	}
0106D8 C9                  A  1518    	RET	
                           A  1519    
                           A  1520    
                           A  1521    ;**************************** _Set_640_480_Mode
                           A  1522    ;Name                         Addr/Register   S
                           A  1523    
                           A  1524    
                           A  1525    ; Stack Frame Size: 6 (bytes)
                           A  1526    ;       Spill Code: 0 (instruction)
                           A  1527    
                           A  1528    
                           A  1529    ;  398	
                           A  1530    ;  399	//Expand compress Pcx data into raw ima
                           A  1531    ;  400	void DecodePcxFile(void)
                           A  1532    ;  401	{
0106D9                     A  1533    _DecodePcxFile:
0106D9 21F3FFFF            A  1534    	LD	HL,-13
0106DD CD E8 08 01         A  1535    	CALL	__frameset
                           A  1536    ;  402		unsigned int NumData, fsize, tmp;
                           A  1537    ;  403		register unsigned char Data;
                           A  1538    ;  404		
                           A  1539    ;  405		fsize = 0;
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  31


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0106E1 01000000            A  1540    	LD	BC,0
0106E5 DD0FFC              A  1541    	LD	(IX+-4),BC
                           A  1542    ;  406		tmp = (unsigned int)XSize * (unsign
0106E8 ED4B 37 0B 01       A  1543    	LD	BC,(_XSize)
0106ED CD 8B 09 01         A  1544    	CALL	__stoi
0106F1 E5D1                A  1545    	LD	DE,HL
0106F3 ED4B 39 0B 01       A  1546    	LD	BC,(_YSize)
0106F8 CD 8B 09 01         A  1547    	CALL	__stoi
0106FC E5C1                A  1548    	LD	BC,HL
0106FE D5E1                A  1549    	LD	HL,DE
010700 CD 3D 09 01         A  1550    	CALL	__imulu
010704 DD2FF6              A  1551    	LD	(IX+-10),HL
                           A  1552    ;  407		
                           A  1553    ;  408		while (fsize <= tmp)
010707 18 7B               A  1554    	JR	L_52
010709                     A  1555    L_53:
                           A  1556    ;  409		{
                           A  1557    ;  410			Data = *VideoMemTmp++;
010709 ED4B F9 15 01       A  1558    	LD	BC,(_VideoMemTmp)
01070E DD0FF3              A  1559    	LD	(IX+-13),BC
010711 C5E1                A  1560    	LD	HL,BC
010713 7E                  A  1561    	LD	A,(HL)
010714 DD77FF              A  1562    	LD	(IX+-1),A
010717 ED4B F9 15 01       A  1563    	LD	BC,(_VideoMemTmp)
01071C 03                  A  1564    	INC	BC
01071D ED43 F9 15 01       A  1565    	LD	(_VideoMemTmp),BC
                           A  1566    ;  411			
                           A  1567    ;  412			if (Data < 192)
010722 DD7EFF              A  1568    	LD	A,(IX+-1)
010725 FEC0                A  1569    	CP	A,192
010727 30 14               A  1570    	JR	NC,L_47
                           A  1571    ;  413			{
                           A  1572    ;  414				PutPcxPixel(Data);
010729 DD4EFF              A  1573    	LD	C,(IX+-1)
01072C 0600                A  1574    	LD	B,0
01072E C5                  A  1575    	PUSH	BC
01072F CD 96 07 01         A  1576    	CALL	_PutPcxPixel
010733 C1                  A  1577    	POP	BC
                           A  1578    ;  415				
                           A  1579    ;  416				fsize++;
010734 DD07FC              A  1580    	LD	BC,(IX+-4)
010737 03                  A  1581    	INC	BC
010738 DD0FFC              A  1582    	LD	(IX+-4),BC
                           A  1583    ;  417				
                           A  1584    ;  418				continue;
01073B 18 47               A  1585    	JR	L_52
                           A  1586    ;  419			}
01073D                     A  1587    L_47:
                           A  1588    ;  420			
                           A  1589    ;  421			NumData = Data & 0x3F;
01073D DD7EFF              A  1590    	LD	A,(IX+-1)
010740 E63F                A  1591    	AND	A,63
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  32


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
010742 B7ED62              A  1592    	UEXT	HL
010745 6F                  A  1593    	LD	L,A
010746 DD2FF9              A  1594    	LD	(IX+-7),HL
                           A  1595    ;  422			fsize += NumData;
010749 DD07FC              A  1596    	LD	BC,(IX+-4)
01074C 09                  A  1597    	ADD	HL,BC
01074D DD2FFC              A  1598    	LD	(IX+-4),HL
                           A  1599    ;  423			Data = *VideoMemTmp++;
010750 2A F9 15 01         A  1600    	LD	HL,(_VideoMemTmp)
010754 7E                  A  1601    	LD	A,(HL)
010755 DD77FF              A  1602    	LD	(IX+-1),A
010758 ED4B F9 15 01       A  1603    	LD	BC,(_VideoMemTmp)
01075D 03                  A  1604    	INC	BC
01075E ED43 F9 15 01       A  1605    	LD	(_VideoMemTmp),BC
                           A  1606    ;  424			
                           A  1607    ;  425			while(NumData-- > 0)
010763 18 0B               A  1608    	JR	L_50
010765                     A  1609    L_51:
                           A  1610    ;  426				PutPcxPixel(Data);
010765 DD4EFF              A  1611    	LD	C,(IX+-1)
010768 0600                A  1612    	LD	B,0
01076A C5                  A  1613    	PUSH	BC
01076B CD 96 07 01         A  1614    	CALL	_PutPcxPixel
01076F C1                  A  1615    	POP	BC
010770                     A  1616    L_50:
010770 DD07F9              A  1617    	LD	BC,(IX+-7)
010773 B7                  A  1618    	OR	A,A
010774 ED62                A  1619    	SBC	HL,HL
010776 B7                  A  1620    	OR	A,A
010777 ED42                A  1621    	SBC	HL,BC
010779 DD31F9              A  1622    	LD	IY,(IX+-7)
01077C ED33FF              A  1623    	LEA	IY,IY+-1
01077F DD3EF9              A  1624    	LD	(IX+-7),IY
010782 38 E1               A  1625    	JR	C,L_51
                           A  1626    ;  427		}
010784                     A  1627    L_52:
010784 DD07FC              A  1628    	LD	BC,(IX+-4)
010787 DD27F6              A  1629    	LD	HL,(IX+-10)
01078A B7                  A  1630    	OR	A,A
01078B ED42                A  1631    	SBC	HL,BC
01078D D2 09 07 01         A  1632    	JR	NC,L_53
                           A  1633    ;  428	}
010791 DDF9                A  1634    	LD	SP,IX
010793 DDE1                A  1635    	POP	IX
010795 C9                  A  1636    	RET	
                           A  1637    
                           A  1638    
                           A  1639    ;**************************** _DecodePcxFile **
                           A  1640    ;Name                         Addr/Register   S
                           A  1641    ;_PutPcxPixel                        IMPORT  --
                           A  1642    ;_VideoMemTmp                        STATIC    
                           A  1643    ;_YSize                              STATIC    
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  33


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1644    ;_XSize                              STATIC    
                           A  1645    ;tmp                                  IX-10    
                           A  1646    ;NumData                               IX-7    
                           A  1647    ;fsize                                 IX-4    
                           A  1648    ;Data                                  IX-1    
                           A  1649    
                           A  1650    
                           A  1651    ; Stack Frame Size: 19 (bytes)
                           A  1652    ;       Spill Code: 0 (instruction)
                           A  1653    
                           A  1654    
                           A  1655    ;  429	
                           A  1656    ;  430	//Put image pixel on screen
                           A  1657    ;  431	void PutPcxPixel(unsigned char Px)
                           A  1658    ;  432	{
010796                     A  1659    _PutPcxPixel:
010796 CD BF 08 01         A  1660    	CALL	__frameset0
                           A  1661    ;  433		VideoMem[YOffset[PosY + StartY] + (
01079A ED4B 45 0B 01       A  1662    	LD	BC,(_PosY)
01079F CD 8B 09 01         A  1663    	CALL	__stoi
0107A3 E5D1                A  1664    	LD	DE,HL
0107A5 ED4B 3D 0B 01       A  1665    	LD	BC,(_StartY)
0107AA CD 8B 09 01         A  1666    	CALL	__stoi
0107AE 19                  A  1667    	ADD	HL,DE
0107AF E5C1                A  1668    	LD	BC,HL
0107B1 C5E1                A  1669    	LD	HL,BC
0107B3 29                  A  1670    	ADD	HL,HL
0107B4 29                  A  1671    	ADD	HL,HL
0107B5 B7                  A  1672    	OR	A,A
0107B6 ED42                A  1673    	SBC	HL,BC
0107B8 01 47 10 01         A  1674    	LD	BC,_YOffset
0107BC 09                  A  1675    	ADD	HL,BC
0107BD E5FDE1              A  1676    	LD	IY,HL
0107C0 ED4B 43 0B 01       A  1677    	LD	BC,(_PosX)
0107C5 CD 8B 09 01         A  1678    	CALL	__stoi
0107C9 E5D1                A  1679    	LD	DE,HL
0107CB ED4B 3B 0B 01       A  1680    	LD	BC,(_StartX)
0107D0 CD 8B 09 01         A  1681    	CALL	__stoi
0107D4 19                  A  1682    	ADD	HL,DE
0107D5 FD0700              A  1683    	LD	BC,(IY)
0107D8 09                  A  1684    	ADD	HL,BC
0107D9 ED4B F6 15 01       A  1685    	LD	BC,(_VideoMem)
0107DE 09                  A  1686    	ADD	HL,BC
0107DF DD7E06              A  1687    	LD	A,(IX+6)
0107E2 77                  A  1688    	LD	(HL),A
                           A  1689    ;  434		
                           A  1690    ;  435		PosX++;
0107E3 ED4B 43 0B 01       A  1691    	LD	BC,(_PosX)
0107E8 03                  A  1692    	INC	BC
0107E9 21 43 0B 01         A  1693    	LD	HL,_PosX
0107ED 71                  A  1694    	LD	(HL),C
0107EE 23                  A  1695    	INC	HL
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  34


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
0107EF 70                  A  1696    	LD	(HL),B
                           A  1697    ;  436		
                           A  1698    ;  437		if (PosX >= XSize)
0107F0 ED4B 37 0B 01       A  1699    	LD	BC,(_XSize)
0107F5 2A 43 0B 01         A  1700    	LD	HL,(_PosX)
0107F9 B7                  A  1701    	OR	A,A
0107FA 40ED42              A  1702    	SBC.SIS	HL,BC
0107FD FA 07 08 01         A  1703    	JP	M,L__61
010801 EA 21 08 01         A  1704    	JP	PE,L_58
010805 18 04               A  1705    	JR	L__62
010807                     A  1706    L__61:
010807 E2 21 08 01         A  1707    	JP	PO,L_58
01080B                     A  1708    L__62:
                           A  1709    ;  438		{
                           A  1710    ;  439			PosX = 0;
01080B 21 43 0B 01         A  1711    	LD	HL,_PosX
01080F 3600                A  1712    	LD	(HL),0
010811 23                  A  1713    	INC	HL
010812 3600                A  1714    	LD	(HL),0
                           A  1715    ;  440			PosY++;
010814 ED4B 45 0B 01       A  1716    	LD	BC,(_PosY)
010819 03                  A  1717    	INC	BC
01081A 21 45 0B 01         A  1718    	LD	HL,_PosY
01081E 71                  A  1719    	LD	(HL),C
01081F 23                  A  1720    	INC	HL
010820 70                  A  1721    	LD	(HL),B
                           A  1722    ;  441		}
                           A  1723    ;  442	}
010821                     A  1724    L_58:
010821 DDF9                A  1725    	LD	SP,IX
010823 DDE1                A  1726    	POP	IX
010825 C9                  A  1727    	RET	
                           A  1728    
                           A  1729    
                           A  1730    ;**************************** _PutPcxPixel ****
                           A  1731    ;Name                         Addr/Register   S
                           A  1732    ;_XSize                              STATIC    
                           A  1733    ;_StartX                             STATIC    
                           A  1734    ;_PosX                               STATIC    
                           A  1735    ;_StartY                             STATIC    
                           A  1736    ;_PosY                               STATIC    
                           A  1737    ;_YOffset                            STATIC   1
                           A  1738    ;_VideoMem                           STATIC    
                           A  1739    ;Px                                    IX+6    
                           A  1740    
                           A  1741    
                           A  1742    ; Stack Frame Size: 9 (bytes)
                           A  1743    ;       Spill Code: 0 (instruction)
                           A  1744    
                           A  1745    
                           A  1746    ;  443	
                           A  1747    ;  444	void BuildOffset(void)
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  35


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1748    ;  445	{
010826                     A  1749    _BuildOffset:
010826 21FEFFFF            A  1750    	LD	HL,-2
01082A CD E8 08 01         A  1751    	CALL	__frameset
01082E DD36FE00            A  1752    	LD	(IX+-2),0
010832 DD36FF00            A  1753    	LD	(IX+-1),0
                           A  1754    ;  446		short i;
                           A  1755    ;  447		
                           A  1756    ;  448		for (i = 0; i < VideoY; i++)
010836 18 3D               A  1757    	JR	L_62
010838                     A  1758    L_60:
                           A  1759    ;  449			YOffset[i] = (unsigned int)i * 
010838 ED4B 3F 0B 01       A  1760    	LD	BC,(_VideoX)
01083D CD 8B 09 01         A  1761    	CALL	__stoi
010841 E5D1                A  1762    	LD	DE,HL
010843 DD07FE              A  1763    	LD	BC,(IX+-2)
010846 CD 8B 09 01         A  1764    	CALL	__stoi
01084A E5C1                A  1765    	LD	BC,HL
01084C D5E1                A  1766    	LD	HL,DE
01084E CD 3D 09 01         A  1767    	CALL	__imulu
010852 E5D1                A  1768    	LD	DE,HL
010854 DD07FE              A  1769    	LD	BC,(IX+-2)
010857 CD 8B 09 01         A  1770    	CALL	__stoi
01085B E5C1                A  1771    	LD	BC,HL
01085D C5E1                A  1772    	LD	HL,BC
01085F 29                  A  1773    	ADD	HL,HL
010860 29                  A  1774    	ADD	HL,HL
010861 B7                  A  1775    	OR	A,A
010862 ED42                A  1776    	SBC	HL,BC
010864 01 47 10 01         A  1777    	LD	BC,_YOffset
010868 09                  A  1778    	ADD	HL,BC
010869 ED1F                A  1779    	LD	(HL),DE
01086B DD27FE              A  1780    	LD	HL,(IX+-2)
01086E 23                  A  1781    	INC	HL
01086F DD75FE              A  1782    	LD	(IX+-2),L
010872 DD74FF              A  1783    	LD	(IX+-1),H
010875                     A  1784    L_62:
010875 ED4B 41 0B 01       A  1785    	LD	BC,(_VideoY)
01087A DD27FE              A  1786    	LD	HL,(IX+-2)
01087D B7                  A  1787    	OR	A,A
01087E 40ED42              A  1788    	SBC.SIS	HL,BC
010881 FA 8B 08 01         A  1789    	JP	M,L__65
010885 EA 38 08 01         A  1790    	JP	PE,L_60
010889 18 04               A  1791    	JR	L__66
01088B                     A  1792    L__65:
01088B E2 38 08 01         A  1793    	JP	PO,L_60
01088F                     A  1794    L__66:
01088F DDF9                A  1795    	LD	SP,IX
010891 DDE1                A  1796    	POP	IX
010893 C9                  A  1797    	RET	
                           A  1798    
                           A  1799    
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  36


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1800    ;**************************** _BuildOffset ****
                           A  1801    ;Name                         Addr/Register   S
                           A  1802    ;_VideoY                             STATIC    
                           A  1803    ;_YOffset                            STATIC   1
                           A  1804    ;_VideoX                             STATIC    
                           A  1805    ;i                                     IX-2    
                           A  1806    
                           A  1807    
                           A  1808    ; Stack Frame Size: 8 (bytes)
                           A  1809    ;       Spill Code: 0 (instruction)
                           A  1810    
                           A  1811    
                           A  1812    	XREF _memcpy:ROM
                           A  1813    	XREF __idivs:ROM
                           A  1814    	XREF __idivu:ROM
                           A  1815    	XREF __imulu:ROM
                           A  1816    	XREF __iremu:ROM
                           A  1817    	XREF __stoi:ROM
                           A  1818    	XREF __frameset0:ROM
                           A  1819    	XREF __frameset:ROM
                           A  1820    	XREF __ishl_b:ROM
                           A  1821    	XDEF _BuildOffset
                           A  1822    	XDEF _PutPcxPixel
                           A  1823    	XDEF _DecodePcxFile
                           A  1824    	XDEF _Set_640_480_Mode
                           A  1825    	XDEF _Set_320_240_Mode
                           A  1826    	XDEF _LoadPcxFile
                           A  1827    	XDEF _LoadPcxPalette
                           A  1828    	XDEF _ShowMsg
                           A  1829    	XDEF _uitoa
                           A  1830    	XDEF _Make_Short
                           A  1831    	XDEF _main
                           A  1832    	XDEF _YOffset
                           A  1833    	XDEF _PntPal
                           A  1834    	XDEF _TmpPal
                           A  1835    	XDEF _PcxPalette
                           A  1836    	XDEF _PosY
                           A  1837    	XDEF _PosX
                           A  1838    	XDEF _VideoY
                           A  1839    	XDEF _VideoX
                           A  1840    	XDEF _StartY
                           A  1841    	XDEF _StartX
                           A  1842    	XDEF _YSize
                           A  1843    	XDEF _XSize
                           A  1844    	XDEF _MaxY
                           A  1845    	XDEF _MaxX
                           A  1846    	XDEF _MinY
                           A  1847    	XDEF _MinX
                           A  1848    	XDEF _convBuf
                           A  1849    	XDEF _VideoMemTmp
                           A  1850    	XDEF _VideoMem
                           A  1851    	XDEF _PntHeader
Zilog eZ80 Macro Assembler Version 4.1 (10060805) RELISTED05-Aug-11     09:51:46     page:  37


PC     Object              I  Line    Source G:\eZ80P\pcxview\Debug\main.src
                           A  1852    	END


Errors: 0
Warnings: 0
Lines Assembled: 1853
