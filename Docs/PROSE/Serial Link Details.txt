Serial Link App for PC / Windows
--------------------------------

This util is used for all PC to V6Z80P communication. Data format is
8-N-1, only 115200 baud is currently supported by PROSE.


---------------------------------------------------------------------
Serial link data protocol - used by RX/TX commands and PC-side utils
---------------------------------------------------------------------

To send a file:
---------------

 1. Create and send a file header packet (see format below)
 2. Wait for 2 ASCII bytes from receiver - if "OK" goto step 3, if "WW" wait longer, anything else = error.
 3. Send file byte packet of 256 bytes.
 4. Send 2 byte CRC checksum of packet
 5. Wait for 2 ASCII bytes from receiver - if "OK" goto step 3, if "WW" wait longer, anything else = error.
 6. Goto step 3 until all bytes sent (file must be padded to 256 byte packet size)


To Receive a file:
------------------

 1. Wait for file header.
(2. Test CRC checksum of header when it arrives.)
(3. Check filename is that of file required if necessary.)
 4. Send ASCII bytes "OK" if checksum/filename are OK, "WW" if sender needs to wait, else "XX" for error.
 5. Receive 256 byte file packet
 6. Receive 2 byte CRC of packet
 7. Test CRC of packet
 8. Goto step 4 until all bytes received.



Header Format - first 256 byte packet
-------------------------------------

$00 - $0F: ASCII filename
$10 - $13: Length of file (little endian longword)
$14 - $1F: ASCII "Z80P.FHEADER" (12 chars)
$20 - $FF: All must be zero


File format:
------------
Bytes from the file, sent in 256 byte packets followed by a 2 byte checksum word.


CRC computation:
----------------

The calculation is described as a "standard CRC-CCITT that uses polynomial $1021"
and produces a 16 bit output, the Z80 code (slow, unoptimized) to generate it is
as follows:


;--Z80 code to make CRC --------------------------------------------------------

; makes checksum in HL, src addr = DE, length = C bytes

crc_checksum

	ld hl,$ffff		
crcloop	ld a,(de)			
	xor h			
	ld h,a			
	ld b,8
crcbyte	add hl,hl
	jr nc,crcnext
	ld a,h
	xor 10h
	ld h,a
	ld a,l
	xor 21h
	ld l,a
crcnext	djnz crcbyte
	inc de
	dec c
	jr nz,crcloop
	ret

;----------------------------------------------------------------------------------